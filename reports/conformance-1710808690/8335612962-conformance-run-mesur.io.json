{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "0a32d4a6-3ab6-4f3c-9872-f4468ebb1426",
        "name": "Clear Cache",
        "item": [
          {
            "id": "659fd1a1-4a32-471e-89dd-b619ff816fd3",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2b3a81c1-25ec-4c8f-94db-59fa56592dfb",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "37270cbd-89a1-454b-9655-d5ebf4a3436a"
                }
              }
            ]
          },
          {
            "id": "fd222e7d-2ed3-48c0-b805-cffa8c459b17",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "38163606-3047-4bef-8b56-096e707241d5",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "2f0bc098-3af4-4239-a3a8-d1a32356275e"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "61b1f160-c4d0-4893-8a38-d100943deb04",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "ff6093c4-9230-4048-ac76-19011eab5b3f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "493a35cf-5c01-4b59-baca-a374024b41b9",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "37f2c91f-1cdb-4ae7-b021-55ab183a4478",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b95bb026-1127-4353-a5fd-ab4e05d4adfa"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c6176e38-f3c9-4699-8b50-69c36097041a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4f9a797c-0d12-4af1-823d-1478f389c435"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "88c73637-742f-447b-8105-c83764efdb2b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a9ad85fa-551e-4868-8079-9cc1d57781d9"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e9695971-47a4-42bc-9cfb-3987c621421a",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "03c8c0c4-2f6e-4794-922f-0e53fe3430fd"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "de2251bb-d4ac-45fb-85c8-fab7976cea48",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "497fe496-7a0b-45a7-b189-bb7016a3fdb3"
            }
          }
        ]
      },
      {
        "id": "8f6ac476-0231-4b94-97d2-90e6641c0f04",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "22710426-a898-455c-9e55-a6968fec8858",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4f6690d6-6050-43be-9bcf-4a9b7155e3e4",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "8b6def00-494f-4d55-8fc9-d9d19178f6cc",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdc2cdde-b89b-47db-90d6-4d8a1e63b24c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cc125ef3-bdc8-4b85-866b-fafd4f56f7b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62f5bc5f-0c1c-437a-b6ea-d97829453c24",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68457421-0a32-419e-b546-0ea653f3b1d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f9584f21-aff9-4811-be42-d2e2b97848f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cc423ac-b8be-4f7f-8156-519fc2e17282",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af827dc7-6828-428b-be52-dbf2cdcffa87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7adc8178-5e01-44f0-98a5-2ed6bc7bdf0b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "5187e661-05cf-4fdf-a636-54a16e3a8b89",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c219ac0b-77ec-4fc5-8962-148e7bac8ae5",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcf8c67d-0d5b-4ebb-9f0f-9481efd7aa79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "76ab6cbf-b666-4261-bb97-af59fa85797f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c3589a4-71cc-4fee-a715-c3e6fecc0b04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac7b1894-6435-47c0-b6fb-44f53199d73c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "a9952181-56c4-4b13-8be6-b76559ed61b0",
            "name": "Positive Testing",
            "item": [
              {
                "id": "48180834-0ac1-48e5-aad7-8587446c7c7f",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f86bd423-8d3f-4955-a12f-cefe6b416e6e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "e7104f6b-1765-4513-9abd-584f8179c7e4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "77a0863b-4898-4a7f-8228-cea4c99712b0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "10b335ea-3def-4acc-a4d6-d6583afe121f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d18955f0-5d13-472e-8484-a804143104db",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "851d36a1-707b-44e0-9e75-b132d990c258"
            }
          }
        ]
      },
      {
        "id": "f2875d6e-f5b8-4faf-9344-a3cf2983500e",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "a52ee4b0-ea34-4d5f-b7b8-af6e166884c3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1a5d6b25-f441-41d3-ad72-60535f20d42b",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "933a621a-2b6e-4ae8-87fd-9bd7295baeb5",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61ddaa0e-a495-46a6-8592-66fd8f275ae7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8edadfa-dd17-4cbb-b737-ff7f701c035f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b475885-29ac-4de9-b3dc-0966f9035b93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c2ad09bf-41dc-4e26-a582-5064eca2756a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ceb0ff6b-1283-4537-874a-121420f17adc",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63255df1-3658-4295-a2c7-46582e20a105",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f0e08dd-20d5-4c85-9376-5045c6c8c913"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "483336ab-1815-4d4e-b99f-9c51c895aa4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f25a6f2d-6c34-44c2-983e-ba618c40445a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5af6a15-69fc-4590-9724-0a184e732fa0",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8ecc0cb-57ce-4e00-bcc6-83e8f5f3ba92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de737fb4-84b2-4aaa-b6fd-4a8db38cfdaa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cc20067-2b9a-4870-b0cb-cb1bb6b6c78e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d1ec9156-0667-4a31-b40b-bdc6bdea9d27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d76ffea-74e7-4b73-b716-5969725b3427",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b98508d-db66-4884-bac5-e5d2e13755c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72b49fb8-a776-4fc6-a006-79d9ebaa8420"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "834d28d6-ba16-4436-95a2-bc8033d0d33f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5a241eb3-5603-40bd-af02-373371f5c7cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99f8364b-d4e9-4594-a476-e09326654fb0",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "672b3874-a9b6-4516-81c4-cd73908ed843",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f9e811a-edbb-4501-ab24-e1ece50f12ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5443ff6-a7fa-4839-85c5-e3ee95f127f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "801bfe70-4d60-43a6-b9dd-eb8ed5a48bb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90111153-0869-4f2a-8d68-14fe5ffd549e",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "778d5bae-0776-49de-981f-ff75e0379bf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7acc1d9c-aa72-4c7c-b508-02f3d19ae515"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9f94ecf-9a23-4409-9c33-494b5744fb31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "176642f0-f80c-4b9a-a263-b7d3db4e4700"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6d05547-be09-4003-8c8c-f407505400bd",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "471f0aa6-82a1-46d2-9fe9-8fbd66f619c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79ad55ef-fd99-4831-aaff-b6b05201902f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7136f24c-c735-40f3-a4a4-4de2d8943aa4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cc7adc59-5190-4f51-8ce3-b083f5891caa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3ce567f-5568-470c-91a7-ea74f1bfd574",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a42e94d9-466d-4373-9b38-8da0265e259b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d491cdb-b87d-4088-8353-0541c646b19f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71145edd-7f28-4b5d-86c6-54ee2e47cc01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cfecb778-61ec-4ace-8663-ffe880d1bcb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "822e0a96-3b84-42b9-9564-3dfa731aa88a",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8be820f-b25e-4e61-ac45-862d82a873be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "debe7425-0ea8-44e2-9dd8-794623f0d405"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ace99f28-322c-4d42-982a-d738f25a5fa4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "95bc60f4-8d1c-4753-8684-c122359270d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a528de69-d71c-41bb-a213-baee1165c193",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d703f6b1-f58a-4ef9-bec8-549af90d2144",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b2dd5a5-7abe-41dd-809a-f484fa764997"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89a1574b-e5e0-4e8e-ad3d-2c4a48be0b6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9968993d-b32b-447d-af91-50597ea694ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cbbdb78-1d47-499f-b5da-b611b8abe045",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "439ded48-698f-4625-a3fc-d18378ced658",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7208bfcd-b786-4c2d-9452-6fc1555516f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "210011eb-525e-4295-9128-99f1b69643b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "31160dfd-1c30-4c9c-b99e-88fa9f945b81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "806c9ee2-07bc-471b-b244-2131ca7d3269",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7eef8d3c-130e-4af8-84ee-9cc2a7f10409",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70596417-e56f-4394-b738-a140e958106b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a18c654-626a-4812-9c01-8094f58dc877",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "de4b675b-2474-46e8-9693-f0e67e0c9bd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8da3bdc-9bf9-4cab-a02e-0e7c1b2ae978",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a6aa23f-7cb2-498f-9be1-78d235389542",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8a257a7-6296-4fae-85ae-949ad6708b19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9da1158-8c9f-470f-9e8e-b62dfa63ced3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ec0fbf19-668d-4c6e-9f5e-efe318023174"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5173550c-c34e-4f0a-b8c0-9b71b0f2638f",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "890c55fe-3e41-46f5-bf86-6e8bcbb17dd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "901e2a45-3577-4ece-a413-fb5ea1b17fcc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f63b442d-2377-410e-9b66-dec7d65223f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a9f5d173-3f11-4d73-b215-025e19fcab10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f0a8d56-6ec9-4404-907e-242f80666453",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31e2b348-4eba-49ef-bd88-658863b1de32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bc14d6b-b150-4437-ba9c-940cdd8994fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8788999-adb9-4c40-95b5-2a095b072db4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "da84b707-6c13-4452-bc1f-d31c6e58c472"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2521dfae-4f4c-4c1c-b769-f85a4241dc69",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0eb0a7bf-abec-4845-adf1-054a6fef8834",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82a62147-b35f-49b7-89b5-3f0e7c45e542"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a9a9887-d380-4cf6-9be2-fe9705f7e3d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "088c0ae0-8fc2-40e3-8887-3c764975615e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08b755d4-47af-499a-96ee-126c486d8292",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e100eba-fcfc-45aa-a834-f392adbe0c78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c54a8f8-9d09-4440-8bce-6db96d97747d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52f7dc1b-8c4f-4ab3-a3fe-261ca880e8d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "36c14be1-d238-4747-9998-bd2bc03b70dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4d148bb-f72b-4a5b-8bb6-2ced3cdce68e",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fee258c2-ff01-44cb-baa7-33828ab48c25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94718c6a-ce8c-4116-a26d-7d9151407cab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bbcbb8f-12e5-4cbf-afb3-2e8608d13793",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "9c9c3539-7b6d-45c3-86f3-85f97189a68e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f08a7bc6-66ac-45ef-a4ea-d03c56ca6224",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f213624c-eb81-4a44-b954-a48db62746bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15b2db65-876a-4a68-8ce4-d78ab4886c30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b113310c-6031-4553-98c1-53149e0d7f6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "28b94f5e-1fb7-4d37-b596-f0822e92d16b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6288c81-9352-4b63-bdc1-69a38926faa6",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea91b279-2894-443b-b8f7-6ba8cbc4a85f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60744dc7-fcbe-48f7-849c-b2d3f4331023"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3d6b6b5-c0cd-4fb5-b232-9e9d21291f36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ea5085d9-93eb-4f19-a725-b6e023a7e0d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82d10b4c-8f1a-42ab-baf3-ebc95177c27f",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3713cb5d-3c24-48d2-9408-d1ef56b77c40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7480d6a6-e8c8-4e90-8c81-12a760b84385"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e45ce1cb-5180-480b-9795-8e19f453a958",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "58998110-edc7-4e50-b598-ff0b46f845cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58d019e3-7fb7-4104-b291-b9ab26d5609e",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41f3a942-62bc-4d8c-a369-6d44454f2240",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "474d8dc1-1995-49b7-b85f-7bc569f77c52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a10624b8-4a03-462b-ac13-546a092f031b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "82efceb5-8900-474e-8e1b-b34a46f04d7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "722ec18c-43e5-471f-9454-35006c6fe7cb",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcded4fb-3eb1-4122-b81d-c4f55e312f04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cd1c231-5639-41b8-b79d-e98fcd6d825a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0e2310f-9c89-42fd-bb65-d54fdf19acf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "363c0770-9c1a-4d05-adab-bf77d0c968d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdf92ec6-57cc-4aef-a21e-d7543ba48b62",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b4475cf-04eb-42f9-8847-6a18b12a04f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a94514a0-963d-4d29-9084-02cd7af7c705"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c4e6980-2df0-4ff7-ae0f-f5f5ae17ad55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "a6ac4b97-efb0-4f34-b744-258612385d12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6cfd554-d2d5-4587-9480-299eff69db00",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a17af7f7-48d4-4081-92de-5d7433b3f254",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f9cd8d3-05bd-466e-b1d1-e13b50ee95d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f6317b3-f1db-47da-ac02-bb1d942fcd84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "edcbd099-b01c-4145-99ad-8422e02154c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5447633-5493-46c8-9727-b52e3edf3e73",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "556117d8-7ac7-4aaf-aaa1-01e272b6ef60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44738c4c-2f76-4cae-96a2-471f7f347456"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2e4a090-31f7-4567-b561-b14eb1bfc16c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b11f915d-bcec-46ad-8ab7-f6440b85ce28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37b74528-feab-4b78-98e7-ef232b4da7a7",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5905d17-c164-4860-8fff-56f953f9ab47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e09dd70a-efb3-4386-852d-d191a1717bc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b04fdd5c-10b2-4a7f-8ad3-2dba40ab11f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "83022980-a632-4008-85fb-fdd66d6c14f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7de46fe1-4f46-4118-b224-292cfafb50a6",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "492a25c0-f818-4fca-902f-9a9ba736c645",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19dc71e7-2990-40c4-a88e-348c1c7bc664"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b7cb7a7-52aa-4fda-a35b-8ad821120558",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "674df1f6-a5d3-4f4d-aa73-07d57ff164f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bc164a1-59af-4d41-9118-160a01fcafac",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fec4d6c3-4151-46d6-b05b-42185074896a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2ed9812-6341-4ce2-86a2-587c8addbc9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdab24bf-bc36-4e3e-ad4b-2f9a587026e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "79e8cbf6-ceba-4334-b72e-74f28ef32555"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7e5ad4a-08ca-4f86-89e2-698f7886a3c9",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b1de5ca-4135-4835-a4fe-bb0492774303",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d3e9465-575e-4985-9ecc-3fa3853e3a74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5a7a324-5e90-421e-aa7e-3bbb1feea7a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "44f865ba-b6aa-45ea-94db-1fc0b2aabaa4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8836a197-1fb0-4294-9556-0fc6bed58bce",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "539a11da-baf1-487f-9b6a-0a999dbe62c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f14ccdf-7263-47e0-b3b7-ffc1cfee6d63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66fdf532-081c-487d-8b23-e6dd784f62f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8d9412c5-8d54-4e7f-bf23-e62663ef4626"
                        }
                      }
                    ]
                  },
                  {
                    "id": "059a3d97-13d0-4174-ae97-2bc78e5cb118",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea0013d2-d77e-45f8-afb2-2d3da2ba58ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a85379dc-26bd-490a-864c-7caa271ba3ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fc5df5b-c4e9-4a3a-a33a-03c06e4f0c87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5a2c4c61-b6ad-411d-bf3e-fffb6099d2f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "016c429e-9990-417b-8caf-49254ebf89d3",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "faa990ec-94f7-4965-a487-ef489d005eb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0fe9c9b-2a8a-43ef-a8e3-ef6bd5690bef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ab4b1cb-322b-4a40-8ee0-96ce7849addf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "40573f9e-5e0e-4cec-9eb7-9444cac76b84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6eede34b-adb9-4cad-8ef8-a9b88dca56c4",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "befc9f66-d8f6-4600-a02c-8233e90c1706",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "355f4b22-7f60-4dbb-886e-7167117212b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "066b3783-2d9a-46de-9a92-17c969b12c11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e916d12a-dad4-4f3b-b6c5-4a1139303f56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "426f0a3c-1694-403b-a2e4-fd5ad003afa5",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed9436d1-d509-41eb-bb43-b757a3c0bf0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e66ac83-91ac-43d6-909c-3064d9a39a1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74943fab-115a-4484-9785-c4167aa3d1d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "e1ff59a1-c6dc-4f5e-b818-620a60bc92de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c7924d0-098b-4176-99d4-3db669ee09cd",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f429a1f3-18a9-4c0e-b798-e3ebc1856352",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e3c06712-ebb8-4714-b700-b9bcfbcd4cf2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff0db974-db90-4f4c-8f5d-c24b7ae3a723",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "30a5deba-98cf-499c-ae2a-d2a7c927968c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e86a0b5-00af-4fa0-a67b-41c39aee99fa",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a88348b2-0259-4dc9-93ad-844b3b613375",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0dc05eb4-f393-4497-8963-44a0831e9b09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3127538-8b9f-412b-9178-7ec03b8db70b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ef8a43a4-dd1b-4ee6-b6b0-d91f26651579"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52140074-00be-4323-866d-2291a348939e",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e13b8a30-ec2b-4fc9-9934-e4e25ac02dc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9788f633-689f-4528-b5b9-fa715bdfb038"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0011696a-9fb3-4b54-b4d9-3d4cf0d1a70e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "b1e892a0-786e-4e36-a5c6-f1a9e7642b95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0101250e-b306-4c4c-9127-224ace92be11",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "411254fd-e285-4e5e-b995-7d6267217362",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a61bc8c-c080-4492-ba9b-2a06ebec4731"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1310e37e-6653-4d4b-bd75-77d673becb53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "1ba7493d-512f-4da9-87b6-fd3ae9e171e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c6a87ab-6a20-4b71-b660-b92e25d6bce8",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dce93dba-ffe7-48ab-ba88-ade61164e484",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ff7cc0f-d199-4a24-813d-c2c9e1e8a509"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6496f68c-8c00-440c-9810-022af31615b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "279852e1-792b-43a8-8693-bec9a669f074"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57d200c8-3116-4fb4-96be-3a9ebee1f597",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73177694-3258-44f0-afc8-97ef00eb4bf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88ced4e7-7a1b-4cd0-8b29-67be8799c898"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76f52f0f-6947-4319-a59c-866369299c91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "98df6a2f-94ba-42d4-af17-a7527b8802a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ea847e1-a442-448a-966b-300d1954545d",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "537c2e20-2cc0-4b3e-b5e7-936bf65f326d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a68f0e2-77d8-470f-a0eb-7ec38c17f63b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55997e91-4677-4a84-95aa-7eeac7aa920f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "24282768-a29e-479b-9c38-a5eed7d305b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cab39e3-9d99-4b6f-ad5f-d2e5bca1e77e",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d206dca-dee0-44de-8c41-c61e9ce0c409",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67f02a02-823c-4469-934a-2305e3002324"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a2d7d98-85fe-40f0-b4c1-5520903e2c3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "0093f276-c614-4bc2-aa2e-ef6aaa7fd0a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56f43563-bc80-424e-b18b-3b55bc68a475",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e1b94fd-0aa9-4ab2-834d-708f512f3fac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b677b92-b694-49f3-a62e-a4877420da84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d233e462-6fdb-4093-a33c-4ca132048cb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "944d9bfe-d09f-496f-ae08-14168cd6985d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b099b2bb-dd3f-455c-abeb-93075e47853b",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e3b3cb3-3da1-4618-9a0e-9646542fa67e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de26747f-fb4b-4690-99a6-bf2c3ee8b4bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08178edf-480b-460d-b0be-5baf92a58586",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "eba23534-ad47-41ba-8b51-fc23af403ff9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a31bed6-0ab4-4909-a109-a58598cc01af",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1cba173-a922-4828-8c50-d04344af27e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11c258e9-8439-45e2-9c49-df1aae4a5ec1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f65d0466-0206-459d-9de2-fb75d9ff81ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "eb7f5ee3-add8-4724-b6f2-5d3e57c9b623"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56143b30-f770-4866-aea9-1982ff54b025",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc2d4c4d-f9c4-4ac7-8681-df89ce8228ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80771d05-8f6b-40cb-a5d4-334384ecb0aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1224d54a-2c8e-40e9-a211-9c6572bfa792",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3f042b82-c0ec-4137-bc73-a495caf4cc2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cd8cc51-6a13-41f1-8023-02cb5a741c56",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de641b09-3a8e-4d47-9084-a81aaf70bdc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f7940bd-0ee2-4cdb-9f06-964bbcc5f471"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c7492d7-fd9a-4a44-828c-066d9eef1e37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0f101ee7-1d91-45ca-83c5-c6ddbb626d8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d858d7f-4d7b-431f-840d-f16d77824f50",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4ed889d-12b4-4513-aba7-fbd4e784077b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ffaf765-193d-4547-b117-e7cd7c73ff38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98bf7964-b683-4c97-baeb-896a3fb714c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "70431d0a-f885-4919-80ab-96f5b8a9a1ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e25d7ed6-ce5e-449e-a955-f0fc41bf1c6e",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c163434-12cf-4dc9-8eac-3ca18f9d3f84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8dfd4223-2b67-44bc-833e-c5f81749f7c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cbe69ca-8f11-4f12-9dcd-0f62df394154",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f095ff14-922e-4bfd-8848-e5b68cb09158"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dea7f10-b8cf-494d-9db8-77d0781fd459",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50f0330e-079b-48b8-b52d-3ddb0746a8ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82c438bd-3cfb-4fce-92b9-e2b2f14bc02b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d5270e0-2849-404c-8ba8-2581f6d0f50a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "afa5a510-b1a0-411d-9c88-f9f30d6910d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fbd8e07-af66-4d4b-88a1-ceb6bdc6105a",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4394ab76-a120-4430-a002-b979f9ca5045",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b858ed7-b965-4574-9106-f5add1a9e40b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da237f00-2baf-40ee-81fa-cbace4b0d93d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "dc6ea2b1-214b-4e8f-8991-afdcc7ff8a93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48a38293-7ed8-4861-b375-acca173ed240",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be0b4573-e647-49c0-b14d-26188e102011",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "594b4aff-6bdf-429e-8536-ecd3680a832e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "796a7acd-1359-46e0-9837-58331ae8a418",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4c053c29-6c5c-4c89-993a-73c34c554a71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5e6a52f-9540-40a5-af5c-adac003cc1cf",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddab1f9b-193f-4cbe-ad86-67e74ad2796a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "603408e4-a5a4-47b7-8cb2-a75bc6d4e1c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bc16894-9e93-4a77-b3ab-7fd8f2edd886",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "85836477-be9b-4f9e-b9b2-d54599743c45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91ea9cf4-f395-4d36-b9dc-fb2cca771dc2",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87dfc47b-32e3-4732-9800-7ddf74671de8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed589c3e-732d-434b-8c5b-5c72b3369bbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33eb244b-c2f7-496b-9aee-6a4189581bf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8bf15381-80fc-4e08-9197-74df45621b5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5b65a49-c6ba-4e67-9a3a-abbd7b85b60d",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0348813b-adf8-4835-8bbc-1083295be528",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2a32ef6-f0c7-4e64-b70c-ec8fba56097d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4f7dfb8-30a9-44e6-a059-f4ba3b06d65f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "8b7b27d9-f1b1-4872-88c4-1ad23a131df3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4e5b60c-2ab6-4f51-a675-7d274103ffeb",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23042b81-7704-47b3-afb6-e89e895ca97e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4baa33b1-89a3-4389-846c-9c7becfef7cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68e0c02c-59e0-4a41-a648-a6d9cf87b983",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "368923bf-f33c-436f-97fa-12ff23926835"
                        }
                      }
                    ]
                  },
                  {
                    "id": "676961f8-f597-4807-8973-10c8f39da75e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39ad55a1-6196-4d3d-a9fb-9cd75591be6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8efc8e7a-317a-4e60-b57e-9e8391a6774b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a86447f5-9223-4cba-a742-52bb8705b22c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "48369a73-f650-4222-8aa1-436f429ea296"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e57b67d-01cb-45d3-ac76-b2d6d5b8aaf0",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9aa55ca2-4350-4bec-b85f-cfbd37b319fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3503caf6-14fc-41e8-9207-7047f843b180"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e528d97e-66d2-48dd-b388-cf27e45ec2e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "73630ff7-8154-4327-b5f8-1890472988de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4818d7a9-41b2-4069-8f58-2379f978a393",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c645c137-73e0-44f1-aaff-16907e0a89b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "faf14107-bc0f-467e-b3a8-989607fb199b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e2fbdb3-23bc-4c41-ae87-b644d881993e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "20f74748-4a79-41b5-a892-8edd8ab5a5c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7402d5ca-7535-40d0-856d-5ad1c78a792e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7313e075-80b7-4599-9115-01eba3f49bad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f2b8e3f-aa01-4c2f-acf3-ba1e32669e0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96d17da9-3d4f-4aed-af6c-c0d4a574999f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "d0afbff0-68f4-4cfd-b821-c6391072a344"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5a04b77-b0c7-4645-a735-61ce1bff2d28",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9d2700a-0de0-40ad-be43-74827aa9b1f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76f9badb-4881-432e-9d95-46648a7e71d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "802508f8-7642-4a7c-826a-e1a3686ef7e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "710784cb-2b4a-47da-99c2-091f1cc92c16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35c31de0-1864-40a2-a5c2-a75635a513cb",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2e12028-10c5-4b2c-867f-cae4935c5011",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84f49666-da90-4082-9a95-e53bad9d51b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79d31246-382a-45d9-949c-d099e89f9860",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "26b1f3da-dec0-4a5f-be4d-6af14e859ddb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dfe065d-f2c4-4cae-bbb1-0d4f875ed70d",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e069c8b4-83a8-44f5-88a9-eff68bc8109c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5cc3f1c-38bb-4b06-81be-ac62bf74f3fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8e014c2-62ba-4133-a29a-0421e04a9ede",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3ed58c6b-a9de-4059-bc4d-7922f4dbbcd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38942dc4-ab12-4405-9c5a-ae50a2990b27",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8eb6cbb4-72a2-40e1-a9f8-fe62b0bce963",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52c7a39b-91f1-43c6-b94b-93302fdb4b51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93f47d7c-b958-4a6d-a9ef-7fabeb847ed3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b1effcdf-6fa2-466e-9983-0ad563510c20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "350629d8-9cd9-4ba0-b125-313efd07e291",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb6c6447-8096-465f-957c-d72cf9a0faf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e400adc-65e9-49e5-9cc7-935f01dd563b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff725e08-e06b-4169-aff0-fc6ad0ed53bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "78051292-58e6-43c5-860f-56f4cb980bce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68a65c48-d388-46ea-a7de-e78c16b78ba8",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6961b4e-cc28-46a7-b3fd-545b010657f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5054ca87-e22d-4719-b6d3-77e53f60d7b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3122278f-435e-4377-a6b3-a46248fd6c21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "00e38fc8-549b-4dff-a571-54a55331408f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edb60ff1-0dcd-4fac-93eb-e302ccd11082",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fff2028-1d21-41d0-a39f-477fd62a5975",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2207b70e-20f3-42e4-9e6b-779e83d9d85d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3febbd94-ceab-48bc-bc54-be77955c3a94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "018ed744-2cdc-4e1e-a673-6442467a2402"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbeab016-f59f-437a-93f0-80c6ab17d2a8",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d7d5aa1-98c6-4c7c-80f9-add4e34329cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c5c1bcf-acdb-4aea-8d93-e6cb34d11e88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44e695cd-d46b-4943-b9ec-2cd824fdb635",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "ed0c110a-e921-4c73-82b0-f06a02382229"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8df04ebe-01c3-4cfe-9077-22d3143e3a31",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32d443bc-7329-4b8c-bc85-573d5cb4750e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0c3951b-fd99-41ff-9a4e-c0288f2aef62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "405363e4-e1f1-4a51-8ba3-85ed5e6c62c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "729b7c04-09d1-4c22-b3cf-e29d8b95fc59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aee8d20e-97d1-42e6-b80d-39261379ca2d",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfd0a60a-673c-4ade-994c-7da3c50af3bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e394d5af-c2b0-4466-aa0c-5ce2363af636"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68aaa03c-e891-48aa-bc5b-5b92df7ffaf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "32f67235-25ed-4e80-94c4-e35b877d2a76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a678509-a7f6-43cc-8717-9d7fb5e7c13c",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8492579-6570-4910-8615-4aad23c6bcae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a61def3-2748-4c97-9a72-43b429ac8131"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb98c49d-54c1-4b7c-a180-18ad69fa3b15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7b203e67-c510-4233-9eb4-8bba516785ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4769d868-c452-4f9b-8df6-d537a3251d31",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a5a493b-f746-4461-88fc-5300e9b4af35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da7cae98-2af0-438e-8072-1a6ef6afd43f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "563c29d1-162e-47de-8566-cd186281dc6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "07dc6979-fee9-4c9e-a0ac-13be503cb421"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8c0cbae-fffe-4cbe-ad2d-7470b9b2ca53",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8ab359d-b000-4330-98db-153ce3a2b8d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0f35e88-15c3-41a6-8f63-8e76a3ff9cd3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8894de8f-4fcc-433c-949d-651dce05cbac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0f9a726a-c830-4a1c-a0fd-e6f9d4ee1f19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea2d5849-0fb4-4d00-ac95-3d36649cc6ea",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f30102d-0e37-4740-90a0-3c3fb0786c88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62676b7d-ae70-4720-ade6-8d5ed3926bc5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b6a7413-0254-4276-b2ee-da38e39a8340",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f1a67044-790c-4a29-a038-126084b994db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97b3ba3e-b15f-4d1a-acdb-0c8c0b0edeef",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db2a1b61-050d-4dc2-b9bd-3bbe58f4d442",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed7cc8bf-80c7-4ec0-836b-aad6ec960f68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fccd54f6-6790-4aa8-ad3d-72b3abeaed2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7cedfdb3-92b0-4080-9857-f8ef8ce04494"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dfba446-316c-49ef-b710-576a58fd4408",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b0f237d-b4ad-40a1-8057-ab8336153690",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b185372b-eada-459b-abab-1f8aa0eec158"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cae2a22-faec-4735-85fe-76822415865e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9e31ab75-8120-4f67-9f0d-3d3e13b4c8ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95f81b7e-fdbd-4002-9e52-9c3fb9591dd4",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6f0fd40-05a1-4278-9cb1-a752240219fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9e55577-3704-4269-a7e9-5553c0eead1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05dc5b76-c263-48d3-9c70-65e3a4eb1c6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "26e4b624-91c1-47a0-b983-23b2b1a2bc81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c540c68c-beb0-45c6-a83f-01c681c1a546",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "968fffac-51a1-4d43-9861-24c2a8918a94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7347960e-d3e6-46ca-997d-2f710335096a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc8da690-2fe6-4908-b660-6d35aea26e12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8b836709-ea16-4711-894a-77b4fa2f8daf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12702fad-e7c1-4168-922d-94633171e6cf",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7183538-fadc-4d1e-94b0-6c75c774d139",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "191601f8-0ed3-4cb6-b645-b5ee339950aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e368e960-99d9-4f4b-b844-a3027e8bc501",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "facc1bff-e08b-4b7c-b0d8-5bdc089ab1c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48c3c3e9-2860-43c9-b3fc-2438754f9c43",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d541f870-b41a-4865-800e-f8956c88bf85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11a87418-2368-43fe-90f7-1fa109cc9cec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f05aaa3-639b-46d2-927c-01265a783758",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "aabcf47d-edba-4236-8cdc-0c453f2c2273"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f74ae79b-83e2-430f-a3d3-a62feb902a1c",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffa3d02b-cb1a-4a8c-b774-c02d59bec324",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cafdbcb2-7e46-4b7a-afe5-52072b404f28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3a3cd97-076c-4d65-a5ce-8d524618d3de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1c41e6d0-27f4-425f-aafd-9fce2068b821"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b72cdf94-b0b3-4d53-b84e-72d82fad63ca",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "820af4f0-afea-49c7-a395-b2aeae089eba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "715bffd5-f0f1-4205-8d2e-ac8837c77952"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1976cda1-44ca-4404-aa55-f43023f178ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9db49f97-bf91-46c8-a84f-563c3ac7eb3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51828333-6c33-49d5-b32e-13220a13743c",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1abcca53-59c2-48e7-94d6-26d9dfcaf93a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "584c7612-77a3-46e7-9129-fd7c550668e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f73b3622-abf2-49c9-9e4b-2b436b8631e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "df941f71-5fd9-4805-bd2e-ae722a48ef17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a71256a-73b5-432e-8312-1b5415a631e0",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da669c0b-9da7-48dc-82eb-02192ed83704",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b0cb770-2896-4f25-b5e6-de8746eb3bb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25eb4400-983b-45c7-95cd-14b56131edfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "32bffe90-81a9-4a8f-ab02-4aadafb7c614"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06bccac7-dab1-4383-b906-391c132611df",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df292659-32a3-4d4d-b571-0dc9ee424722",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21f1ff10-d346-4b74-9ea6-5a7cf6f7ae02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af794688-331c-4c94-8d76-c1153a9d42d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1f930db6-7119-4862-aa77-ef860d106a07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c9afb51-3e7a-4d92-9636-f618fed3f070",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b6fccd4-aa72-44ec-933b-d6a79c243b3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86e87a47-f200-4b04-b252-f4b9ff0d2bf8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebb3ed56-4e0e-418c-b2fc-1a23b47d05a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "df533205-cbc2-4530-ae03-ca55841bec2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00a7c790-3120-4655-b91b-98887e6a2301",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "119c6667-cdd7-4e2f-a94a-aaa638a63ad8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd7a9778-8d89-41cc-a19e-dfeb37c854e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9386c06c-b98f-41bf-87bb-f8ead691dff2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "f5f9fbdd-5356-47f3-b58f-cece07c613f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6ac307b-5c51-4e40-ae27-2f8ddc6bcc3e",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3260687f-7137-42cb-ab14-5840e6e366cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31875f42-fd0d-45a7-817d-34a0d7f3c564"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cc5e3db-fc1e-42ba-9f41-9757fc7cf735",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "d35d2044-dd26-403d-91e1-050612a3203a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b7810b0-1f0a-4063-a3c5-d4c94503f40f",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22a5429a-3c32-44cc-bd4c-2760e1ad6a86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a362bbb-1e82-4abe-89aa-16818c2f17ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddba2782-eea8-4e78-b509-e13e87879b3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "b53be6f0-420a-4d21-a06e-f4ac04c7420d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e773ce4e-51ce-4382-a34a-672d2858b0cd",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "461bcfe9-3bb8-48aa-ac0b-51501ba8ebb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1adb8f8-b79e-4a6d-9645-442a23f7d25a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdf833c2-d67d-43ea-b5da-a1c0c3ef79d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "9d7442bb-da04-46af-a0be-79f2294c3e33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4c20303-94f7-49ab-a7ea-7f3b6fb51bef",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbf34af4-f7db-4e6e-9c62-1b62357f5d91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "43b7e6bb-6624-4ce9-b789-1cf7c7ea97c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63df7fd2-9eaa-4ac0-b850-c676114e0355",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "c5b72b62-eaef-4dbf-aac6-c50ab22f2204"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "5634ec2b-0b5d-4c44-b464-8d80261225fd",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9d505f9f-d8d9-44c2-9bde-0d4c86f50e00",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13ddcfa7-2b16-4790-85c5-5f00cc27dcb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4e4fe88f-4d4e-40d4-bab0-5008b00087a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b5f6b2f-70fb-4dee-b7f6-bed16a7b29cb",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9b6ad44b-65f4-4ea3-8701-9acb77cde874"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c97f9085-686c-4027-b795-54723105e142",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0de185c2-7075-43f5-966f-546f0d8f7f31"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "80b8eef3-c0da-4ba9-8120-5ad6f50f9e5d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0573209f-54c1-4b87-93f3-b9b4d302f3e1"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9b706e9a-bdca-44c9-b809-7215b0fd94ca",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "71fa20e8-db76-4b7d-983a-724da434f062"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "cf0d32a8-9432-4f0c-be93-19546499ad11",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "65653b16-f800-4e79-ad1e-4856df400f06"
                }
              }
            ]
          },
          {
            "id": "bb107ff1-f01c-4fbc-9322-04e3ad309afe",
            "name": "Positive Testing",
            "item": [
              {
                "id": "917be25c-35db-47b3-8d02-194c4c0c4af7",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "d5810662-410f-463e-96bc-aa9d3405bb73",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "615a1c7e-703d-4548-bf21-c1cf07bb9884",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "34a2eb78-0e08-4299-b6a4-12ed50d55466"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "486d4478-7807-44fe-8492-77b5faf35dff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa63e72c-eeb6-4d34-91c2-c77188ab4d58"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e0670b29-f18c-4e4d-b6e4-fb69fdb55aba",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "db74a67d-9a99-4841-9e29-d5191e1e174e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1859fe94-0c55-4752-92ed-b58c5277edad"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e48f56f7-7c4c-4db6-a8f5-c4d9f92def00",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "77b72731-face-4fe6-bdb4-1207bf10575a"
                    }
                  }
                ]
              },
              {
                "id": "1a3acc56-237a-4893-8a29-fd3d6e6e4b9b",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "287a584f-4901-419a-a8eb-42e12fc3f670",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d3e82c36-860f-4423-b485-b68bc49c159c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "00d3473a-8093-47b0-8af9-7eb03c33424c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "bc3e5077-7785-488c-9141-7a017663e763"
                    }
                  }
                ]
              },
              {
                "id": "af0d33bd-8fcd-486d-914c-5e0bf21370da",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "88b63335-7f4e-49ed-be8a-a950ecdb8674",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e6dc6821-2a0b-40d6-913f-1c5cb150a1ab"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2d51d8f4-39e6-488b-937c-de4cf7032ab8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "5dd846a0-a305-435a-a320-96940a484200"
                    }
                  }
                ]
              },
              {
                "id": "171a3d2d-7d02-4a38-a92a-799f2099ab2b",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ff49f09a-93bd-4135-bf4c-d425b6e74309",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d98120c9-e63b-497e-b667-033c6001b0b3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "39d1c3d7-07d7-4af9-826e-6ec4aa564b06",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "4defc178-b13a-4275-ba0b-1c2056986824"
                    }
                  }
                ]
              },
              {
                "id": "860b1080-13ca-4d66-8af9-7fca4bcd1534",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "28cf095c-6454-48d6-b858-79aae7fe8519",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e10593cc-57a6-45ba-999a-0e5d68aee303"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0d7e3ea2-e2a1-4504-b9b0-17d3c7a306ef",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "805c4a18-02a0-4304-89bd-4bbbd6822f69"
                    }
                  }
                ]
              },
              {
                "id": "c3df9fef-991a-453a-965e-ca79b2631e98",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "32096f1e-5e31-4c6c-bd47-2a6fb37717a2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9adce205-8d7e-4e52-852d-9a26a45025ea"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2b498756-e709-4ce4-9edc-eaf2543ffac1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "9d020c6b-cc88-432f-b85a-449ea0d39f5e"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "871a4c0e-29b4-474b-97c5-e5d66509cc48",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "767ed185-d7b2-4b06-97e1-ce2ee9de1ab9"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "04005b24-96a1-4b19-8ce0-3710eceda04d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4da4b88b-4df5-4f12-84da-1f550b5c0439"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a2c43325-33c2-45e4-a21c-1ae03904877a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "4de82447-b41f-4092-a9c0-fb13f7f8f58b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0bbffe11-41e8-49a6-912b-1429f30240e7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4f0f8965-1d92-4d00-8658-3d7b19da2627"
            }
          }
        ]
      },
      {
        "id": "74d1990c-ad9d-4cbb-b302-611c475f74d7",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "7e1c53dd-b1d4-4595-b4c4-3b2e4763f471",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b30f502a-c185-4fb9-ae15-96d8181953d0",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "6cc7eb4a-485b-44c0-9708-f83970519064",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7580fdb-4bed-4519-9ddd-a33284147572",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48d028bc-75aa-4e62-addd-f7ccfcb6739e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaa72d67-7312-4aa8-bc71-2ce29cc77855",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "2727ff3d-3fef-43f7-b38a-19787e8b7711"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31e9b1f6-2fd3-4af2-b9a0-371056c44488",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59d15593-2481-4d16-be8f-8e3831924f30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f376f57-d872-48e1-af25-e69c6185fc47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f95c737-677c-465c-bfe0-c4accb9fbefa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8fa08bee-e342-4461-9e22-c833ec085e3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc95a54a-6cb5-49de-99b2-f78b4ec98149",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25606cae-057b-460c-86e8-8a06d6ef3119",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b2e9a00-cec9-426f-a0ea-6858b3b20cf5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ef74fdc-634f-444d-98b8-9d2e4348ce75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9c391539-9687-4300-8ea6-a60a474932d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48227631-ffac-4d36-bbeb-24bf68dce2c5",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69579e20-5079-4ef0-a125-bb91874063a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8060799-7a99-445b-bbff-2e0e08ff616c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e93bd51-b712-4b94-9e5e-4194649549b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "43f32377-8400-41b3-9792-391ad7d55aae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5d7ab79-6b26-4730-b311-186b08e14732",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c421512b-5e83-4902-91de-f5b023b55d00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33f73dd0-6c2e-480d-942c-a5c854c1eba2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ceb0ab7-85fb-498e-b98b-1c2599b767d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cbc2d4d8-9fa5-4100-9a49-9e92a8f2c818"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f54d1388-8ccf-481c-a356-0d926c8edc7d",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8ce7b94-dcc8-4475-9d8e-918976ddaa34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a37f8f0f-93f9-42ba-ad3b-dcbb85cb89b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea689e04-dd1f-49be-a918-0bf7f573cca6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5cf0616f-700d-40aa-88e6-8beff8c142c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "452735ee-e2aa-4091-b4ab-5b5d52b530b2",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d4adee8-1e68-47cd-a1f2-442505e7a1a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78a03299-0c4b-4f72-a8b2-0bbfe25920b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6feafb8e-bb75-4681-8320-b35b11714a73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "3e00ef21-efae-4968-b127-8ebf6fe03510"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e490d473-93f4-45f9-819f-8fab118ccd8b",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d8bb091-07a2-4c69-82c8-2b25d037550b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5cdf2aa-c86b-46ac-b25c-7215a587580b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad9fa8be-bc19-4d5d-8cb0-31ad415d1b57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bd89deb2-45e6-4da6-bcee-ef2726424e32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa926a40-0da0-4c46-9c07-6fda226c5daf",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a14eea61-0262-4ce3-8625-03c09de26360",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "515aeca1-7a8d-40ab-b364-22cfbb184d2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55cbf1c2-a93a-43b6-8e20-0d495d78eb90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "71ca9c75-3ae9-4322-bd7b-be1fb1349dfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab7e4502-7bbc-4b6a-b2f3-b8f5fd6bee20",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ef65541-6b0c-4c5a-a1d3-6cc30e15d8c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5552b804-aea2-4f9d-9b6d-f2f92d76fa94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f032d46c-5e2b-4678-bc88-4c2268f9f1b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4e7b314b-c0a6-46d7-8604-34eed986cc58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4818fedf-29fd-4b55-9c3e-54016bd08788",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d968991-f86d-4af0-b416-9a8c4fb278ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8af755dc-7be0-4757-9b34-e744bd910642"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1aff5d64-8333-40e8-9b1a-d65370801094",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "2996b876-b273-496d-8678-0fa84b6d9a56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b45b495-dab2-4f5d-a52b-6fc02c363e80",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f09132d1-1132-484f-abdf-c9d508bd88f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00f83a51-60aa-4845-bb93-070ec89dae1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcc3a236-5437-4558-88da-ced757638fe5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ac1ccebb-375f-4d15-8712-fbb969b0f94e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e241583-eac6-4282-b146-f9a467bf740c",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb059194-2ea4-4881-9e10-eccd2f39a868",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b9832af-7888-4838-b284-52f709d6255a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d40e79d2-7635-41db-be3c-43e281e6063e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6555b4c8-339d-4bb4-9cd0-0413219ba5fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c46c1ff-e54e-4e2b-8b20-e4acb9c89b99",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70267db9-54dc-4b75-910f-277452a1dec1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c356376d-001d-4a12-9f2b-f5cf58f1614b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dce4801-b415-487b-815f-e8f6f11559d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "4bf456a6-3a12-46b9-9c08-c205596d9f2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c734081-23df-4e4f-82c3-be64b70a006b",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bd3eb04-1f3c-460d-86ad-251964ef5f97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c22b0b29-fcbd-45a2-8122-46c5ac3670d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cee087d-62cd-4b06-b9f7-1102c7d849ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "7181d009-f727-420c-ae69-0dcf7cbb9c27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5987b96-92d8-45c4-974c-8ce0744715c0",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "839233a8-7f39-4d8b-9fe7-b15f456a7c73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0817df58-8c0d-48b5-a35a-e27d1dd54ff5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c8a7159-fa84-406b-9369-563aa068421c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "220cf148-e718-460a-ae2e-ab050f0d23c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07943a8e-d6f6-4490-a955-37b7064692f5",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d9ad703-24d7-4c8d-8cef-07b7980a78ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b841296-0f2e-4b2a-a8d4-3b992bba3088"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cf054ca-7eb7-4310-8486-c4109feb5144",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "e77bef63-55c8-4f8e-b1b2-4635222c8efa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75e2a898-d669-4e17-9ebe-f1b18706fca7",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82cc39df-432a-4e41-ad5b-93b4d922fda4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da7b8b86-5eea-4414-8ed4-e334559355c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a935e64-ae9c-4875-ae51-180d297dae4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "ba0f41cc-e836-4b46-b9ab-a5bbe93bb215"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80983e7e-7d36-4e58-bfa4-3c244e5ae88f",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "216250a3-40b2-4f9e-9587-fe5c015845e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6b56685-e182-43f5-aee6-2266b4d45d5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3499ebc9-d6c4-4e18-be35-7cbcfe98a7db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "54c5fd29-057e-4fcb-857d-e179878bfd84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de0cda08-faf9-48d2-b567-7213ce9d28be",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "567afca5-a56b-409f-b905-91e71cd85687",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17b63437-cfa5-4f05-b16c-fce12648852e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "461ae8cc-4ec6-4fa2-b9b4-0b6d3f813050",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ae5db051-aad9-4839-8b67-7db0d273a62f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5df1b97-8e2c-4b75-a6cf-c253e74f52ee",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4493ed78-bf99-47da-851a-899b3c3f7605",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1966c64-fd7d-44fc-9bab-2c419c5d16b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d9c9bdf-8aaa-4670-974b-fd42e297cda4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "39c0b75f-f028-4299-a0fe-0c1577f000af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67d7874e-d267-46f3-8c35-960fb8e4c13e",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8c02ece-9e5f-4d1b-9773-ff3c1a126e7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "273464fd-b4d6-42bc-88a9-64d1baade37a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0db77f4-9313-490d-8043-a5c0485ca089",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b4ef9d55-41a1-4a8f-aed5-153c6a5ebfc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edcc5cc9-be8b-45d8-b66a-b7c7e95e9209",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a52557bc-fb6a-42b9-8a5c-ff6cf1e9bec0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7aa25954-7efa-43fc-a95c-1a109da48482"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a7f561a-9d65-4c19-9c79-035c99de3830",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fd88b856-32da-4966-a0c0-4e789a0e2a0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be4dadc4-7862-421f-86ea-a5b0c25b4694",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c726be67-a85f-45c3-a3ba-bc0f6d855950",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b987805e-6dcb-4af7-a788-ec6f4d24e2f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "686b77bd-102e-4b09-9730-339f23159fd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a4ab4d6e-028a-4505-b3c5-48fc274f5e32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c058914-cb34-4001-aee0-71c191471aad",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6c3dce3-faea-479a-8930-cb10d8bf8bbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "062bf232-e458-49ff-9b3d-78a3d164d409"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7067f99c-b3f1-4931-9f03-8097794286a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a0092ac6-2a53-4526-9d4d-86d11b70f1e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0c20b8f-f553-44a4-8042-7a41ee398ca7",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cea47723-3e03-4a6d-a28d-b2cce500e508",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8966434-c06a-44e4-bd98-585812affd88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b2b0066-e70a-45e1-8f99-8530c309d7aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4b9d5ad1-d38a-425b-a135-2b860e773685"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a520f8c-aa6e-421a-9ef8-4dffe9570a1a",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f1604c1-4a49-40cb-b66a-1be5fd7196a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9a4db49-74e7-4588-9cfa-965df288204d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9223cc83-10d1-4c98-a621-a237103e3460",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "60c24870-7f01-41ca-a588-703066ce868c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bceb394a-9b9d-40a5-9b21-78b7ab9aa297",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c19d056-3e6a-4972-a2ac-e97c73223e7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39532f5b-6820-4a3a-8ff3-18a0d82c37e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80029873-9ed6-41f4-bf9d-4c14a7eae0b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "319c2b7c-6528-4ef1-8282-59a71a4d617f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc27bd4d-87a3-4411-a608-a3bd6702f880",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89bc8040-8782-45c8-8312-dcdb95bda73b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8df55047-d6da-4f6b-8457-01b54875b4f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7d3b47d-aff8-4d2b-812b-564fe153281a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bbef178e-b8e5-4d78-a855-d0308f6cd777"
                        }
                      }
                    ]
                  },
                  {
                    "id": "736b5db2-0dd9-408c-93f2-66b39d8c67f9",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9192ae1c-1a53-4f29-b894-97cec4f3f895",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36d23b18-ebf9-42fa-82d6-6d260296aa18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc7b8584-6a5c-4da3-b9b5-8212dd42711c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a12ae4df-2de9-4080-9f4a-cf437dea4fe2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b3fd49d-a3b1-4c46-9c52-5839a4a1067f",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67a5b4b1-9211-463d-bd4d-bf5e7407332b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea4772af-aef4-49e8-9fa6-7c397d3ba6df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a138bc5-cb1d-4c2b-83fb-b9a2176bf929",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a97509c7-2881-4b2c-b983-0c1b8c8810dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3e6f647-958b-4308-bf45-f81800e8134b",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae637aab-0b97-44dc-9516-9f3d0687463d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e42f8b9b-eecf-40bc-9193-47a05efffa6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74e292e1-60d7-4704-a0b8-3901138b757c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ce6ff6c8-c93b-451c-8fd7-e193fcd67f18"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "76b3ea3b-ba40-4818-b4ba-6806127daded",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c403188f-59a5-4bed-9f41-1554d6344331",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0492556a-0adc-4beb-94c9-472a47004ff2",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "ee57a88a-9a28-4823-96f7-12767a3075d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd9aba05-980b-4a9b-a879-a79f74747cb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "eadcf327-e7f5-4cd0-8b19-c2c8ab27e863"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "42082eac-133c-4a57-bbeb-8d1a50c94865",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4c49a0be-5caf-4aa1-9dda-1563be969b93"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "60308dae-793a-478e-b588-293f8ae715d6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c792ced5-6d9f-457a-9782-5ea3557e87ca"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "857d6fed-2bb5-433a-8832-6cd15147ede9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "708bd633-09b2-4f2b-a991-1a8817de5653"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5b63d6b6-ed18-4154-bcc6-fef3aade45c1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "59c0bdc5-dd5e-4b7d-8465-64a4adaa26b9"
            }
          }
        ]
      },
      {
        "id": "e5ba0023-63b2-46b6-9ef1-b13715188b12",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "544be975-2626-45bf-abbc-ca2aaea85da0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9de77e68-d1fe-4be0-b059-8ce859c50188",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "132f0ba5-629c-4ca7-84e4-9d4ccd747d48",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ffe51e0-0b32-4178-b707-bb6ff35c1d03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76d78950-2fa1-4fca-ac3c-07548d7c64d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d945b15a-bac2-4b24-b3f8-00cc14a3866d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "931770f5-9eb3-41a0-9a70-37cef6d31c6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cafc7099-2da3-4aae-8b7a-c611ccc18780",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4b51183-e3ff-4d52-87b2-b58f6ddb6e0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "141de11b-c3fc-4fba-b3ce-016272bc917e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf354515-9ee8-442c-b681-1acd1414e02d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4ee5a21b-48c6-4e63-a1ed-799f82c2a64b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "345b7078-c672-45a2-a5ea-d9501e1c160c",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bea19769-d2d8-40d3-ad87-ba56b4b37a61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80e0b8dd-ac26-49ef-8421-20a9c6b9a11e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "797964b7-f718-4cba-9274-0d5e29635956",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "56a098f6-bb21-4d22-91cf-fac849c31048"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6a233f2-8d0f-4968-9b7e-a6788ff8e91d",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3698b3b-7a38-4579-a015-917227937ead",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f54331f-106f-4b2c-a6d5-28d6cbc07eb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31f066d8-e047-4b6d-b582-a9a48ea9b632",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8a47270f-de25-45ab-85bb-a747df3f7fc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d4de815-a197-4d2d-8f5a-2cfdde37c18b",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cb23ce7-c2d1-499b-a2bd-4e6c2cd02dbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0aa6cd2-2eef-4850-a1a4-72398e6c920e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dceda81-a8aa-4b88-b5fc-6d773b473ebb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2218863b-4138-4bfd-899a-80232e8479bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0eaff005-5b3b-4aa6-9e51-e5dd5f2f3db9",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b1660f7-2e83-4908-896c-326239baeba7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "809f84d5-7048-48d2-a20e-7228cc0c9959"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3190409-7cdc-4d4b-8953-98a0d71c41c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "141d69c8-7ac7-4c26-bb6c-da5411443abe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8113009-285e-4896-bbdb-0057306ad111",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ab50644-cf97-431b-a2ca-0d280d06f32a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "993690b8-5203-4d62-b796-8cc18919ce3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8cec91a-2ae1-4975-94b1-c57e98957452",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "58c438b5-a8c4-41a4-b96e-b4462b20fe67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f7e9053-bdc6-4246-a8c0-bd545e2840d3",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af25a41a-e367-4cca-961f-2f94640dc80a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98b47268-39e3-4e9d-a11f-e06fa2bc3f39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "323ae84d-4e49-43e0-b5cd-666e3686ec63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9d60607a-e067-440f-816b-17e53483987e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6c026a3-79ee-475f-beca-5cb745986904",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a160fcd6-3012-416b-b970-f468f117f36c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d5b829e-ae03-4afb-a3d1-f4f82f3a83d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0d64302-79c1-4cf0-a44d-50b47aaaebad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "764d285e-d7d6-4d86-8b1c-9d538c71571a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e4cd535-6610-497a-81ea-5a4a80cdd9e6",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "016a45c4-8060-406f-beab-802856a1a715",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e255cce-1958-48e4-b227-989d7a193561"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0eb187e-8e0a-4372-821f-fa40e3550ee3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "45c7aa55-3e0c-48a0-82a2-8220269077e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0daae968-38e9-48af-bf51-cf94ff49782a",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "414dc85e-7f8e-445c-b03c-5f0bcc8bc29e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c29beb4-15ba-42c1-8b21-6f10774a7151"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30e03f4a-d04c-4730-8201-e329a681f7b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "10166944-c119-40b8-90fd-a629da6b92b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8feec58c-60a1-4e9a-8742-41161fb220fc",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93435d7c-f4c3-4dec-869a-742c30bd4d60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf1c7904-3450-45fb-8ea9-531f99254be7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fa42169-aa3d-4301-be9e-cf79d3dac835",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c66eb1db-8ac6-42bf-8c48-5085eda0fadf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f51d9a17-af57-47cf-8bcc-97ba211010ee",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c1f4201-b34b-470d-a34e-f670d6a95111",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bb179e4-a7ce-4840-9c78-e61e4162b533"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19a825af-5303-462b-84de-6ce26a890ea1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ced064d8-1f8a-46c1-b4b4-f9305e30dcf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58d448a3-79f7-4341-8b4d-2541e66edc03",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e86985d-9917-4991-bf58-627f0abac070",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6bed138-9064-468d-bd1a-79770fb066fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66e470df-7619-4f8d-b947-7d555389ef13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "7600ab78-c6f9-4827-9acd-ca6cbc2d50f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dc55f4c-71e6-40a1-95d5-4798c21ee712",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd100ce6-d589-479e-a4d8-756823ef332b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b073d208-b861-4985-b5f6-2b5e97ca54da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66d148e8-14d8-41ad-8aa3-39708c0c921f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "17f533ce-1693-4b07-8afe-7b259d7d3962"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f35237ed-82b6-4621-ac23-182179da49a7",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8201123-e8b5-4686-b1dd-b182c564a494",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "672bab06-519f-4e48-97b2-5a634127ec3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5c71b8f-1fbf-4335-a7a4-32c65f30cbda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "48a9d5e0-b515-496c-a8fd-545ffc933f67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac232e03-9de1-4f4e-837b-e82ba4294d25",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "851b4ce3-02c4-4760-91a3-331fb20cf577",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89571b8c-aa51-46f8-aec0-8a1eb6d7221f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "578cfe1c-5c42-4bc1-95d7-eebeddfc9c41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "3285bb29-028d-4d53-a66c-269c579fc9f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cab6698c-1e5b-41aa-867f-dcd5b8dee422",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e415a2bf-88ad-4402-99ea-0d7cea31f2ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fea8326-f8fc-4905-978a-95dd7578cbf6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc745be2-5ad9-4693-bb99-0e7601aa6f2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "5a3de57b-4316-4145-ab64-9a15b4fd6de1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6158676f-193d-414f-b910-d33be388a299",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d716c7a-ac85-466e-8433-a82c550c5a28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67a836fb-dafc-41d2-be9a-88908e1869e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf7687e7-5628-4f26-9332-ec9b5ec70234",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "373bfa26-3fd6-4a94-8a58-72b1550f26f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee799e96-9a42-46b4-aa17-990f508e96dd",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83e312a0-4d50-42b1-93aa-2a958532651b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3affcad-2bbc-4f11-91b5-e9ef936e8679"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a805e75e-2af9-4e96-b5c7-34651d803d49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "917b2c5f-379d-4880-a66d-74d9432b0a14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83309001-af45-45e0-a128-e09ee8b8ebb8",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9658947e-81c5-4006-b5e9-ef0a41e26812",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2deb416-8e88-4653-bd4d-8b5f764d8a72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d1a068d-d2dc-4055-9c88-7b31ba654cea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3333630d-78ea-48ac-86ac-3baa466746e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91d50333-3d11-4b5f-8553-59b442b0a796",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d6d738c-7291-4796-bd33-2069672ddf4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "994b20d8-fd25-47de-9f6c-05285f27db81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "342dd813-f3cb-4f34-a2a4-d9e817d787f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6a070cdc-8440-43f5-8600-ba2063209dde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb24fe12-b4a0-4f68-a1c6-777074a3d60f",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b5c086e-1c47-4d80-ad9d-340fe0f1d157",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3319465a-6cf8-4f54-a2c4-832704ba97cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea792453-74d2-4f5f-a690-b57ca18d2dde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6748393c-e3af-4683-8a96-351ab6bbedb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d184d9e-6963-41d6-8ee9-d1b8d1093a75",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "237fa05a-c737-47cc-b1dc-9780b2a4897c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15e9a41b-c370-481d-ab5f-fdd8053940e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01da5028-970f-4eeb-a720-c3a226312429",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "561d39d2-2849-4397-ab2d-2e8f9e2fc69d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ec186f7-c4b9-4592-990b-2a60f34fb07d",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee0c4712-b2c3-44b2-8f20-b08a65fa63a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c95b5545-6c4f-4be7-809b-88325d15b476"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c916031-d594-4e87-8935-75462f5cda88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "84672b28-f38f-40f2-82b2-d867f348a2c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8876b37-fdc5-43d0-bc2e-402075e8efc6",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a53170a-5f13-4f58-988b-d38443fbf0f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6741ffac-2c11-4e28-9b82-dca7b4ce6e83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5db57802-99b1-46d7-bcb0-c15885a0bd94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "75088cf9-30d4-4daa-a822-3706c2d9d113"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9648248-5445-4935-a14e-d894c7cd2069",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd5465fe-fa7e-485f-b931-80df9f7f9655",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "caab308c-6493-4da2-9e82-ee34f01c6a54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e84b13d6-ef49-4322-bc8f-05a189339652",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cff59e80-f39b-4f2b-a8c2-ec178a57e063"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0540385e-b36d-4a65-9f72-f741e869c64c",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85f51e0b-a5d6-4e0b-bf53-e2902c09aa20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb1bed4d-d41c-4e67-a845-4be952a3c66c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a16678b4-9569-4de0-8623-f29a32fde394",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9855e3e1-d4d0-4e32-847f-1422148ffd3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ea5aa9f-5986-4d40-af61-3c189ea2e874",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b21d473-b21d-46c6-b7c8-456d6e23536e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed44ecb9-9f76-4cb1-8be0-3c609beb8a17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11b114c0-77eb-4da4-9602-423412191228",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c86ee2d3-ea4a-4016-ad08-90850322ccb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d63b0723-3db9-40ca-af02-e017f4ae0a70",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b002383-5ab6-42b2-a6a8-45e335e1a67d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3945d93-41cf-4070-bb33-10b6f79ac5cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47e204e7-90d0-4b4b-b6cd-f478d0438df8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1cc270d9-72e5-48d1-86ec-848ea136fd1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "676a8766-f2ee-4a38-8d48-da4e6906fcfd",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e11a2c9-bf46-4517-a636-99010f79cab4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23cdded2-db27-4793-8f3d-cbc058e5ee1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "748dfbad-c219-4eaf-840e-f01068fe7d42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "915b00da-6ee3-4d6b-ae65-def67ab8627d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d56bfbd8-fec6-4c4f-a1bc-8e3e967e999b",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48e32f78-2dde-4373-ae55-e2ed21ba88e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edb1c886-8ace-463c-b722-b35a870758a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "081e3811-bfaa-437d-ac9a-aafaef413209",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b508223c-07ef-49cf-a317-728eca13cfe9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a3256f2-df27-4cc6-b3f6-3aa5743053ee",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fd0bcfc-dbde-43e0-8b98-ad1b7207686f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5083612-b22a-4af2-8c8d-a2bc7243ecfc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17b964eb-ee66-4541-9dd4-2b9bbc4a947a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "695dd9b7-4c70-4391-8433-56b725632149"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09e69f22-33fc-4901-9fed-61a4cddec2c9",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62181034-f5fa-48b1-8546-5f82d3100e76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c109522-0427-4efb-aedf-a944355464db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6ec93fe-7353-4776-abd0-f29cb6db6391",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b26a3b7e-5e57-4a07-aa6b-09a1c43bdfb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a29d896-6cbe-46cd-8489-646dfb7cbed4",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc4c1073-a888-4bc1-b188-e431f9d135e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dce997cb-6d31-4927-a078-6b85d067f77f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40a933f8-2d6f-4adb-be1c-a92302449153",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0c9cb249-85f2-4134-9339-36ec06d05078"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e79226de-78e3-416a-8e26-f76f7917b801",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3dc0622-0e5a-47e9-9aaf-afed7f6be663",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8713d5f-86a8-4464-a41a-3c9c4dd8486d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c6144f0-b7e4-4876-b0e7-0506b4489a00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "55216237-abdf-4b11-a59f-4f41e290f809"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfeeeaa4-fdff-4657-a01d-65941816def8",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3ab568a-87b9-434e-9bb0-7bc4e2ea606a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f9e8dba-0280-42c0-8c0a-729c8aa25556"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70df5868-2fd3-46bb-883b-b907da7a18aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8b6c6717-01ee-4c67-8b2c-e5c3a4b14f02"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3e6e0537-559a-4525-9865-6f6dabd9b355",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f51b9671-b7be-4e10-8b2b-822ae98e0527",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85ac013d-88b8-4cd3-b08c-bc8178d739e6",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "8fc0cc73-0bc0-4d54-995b-bf1e3edc187f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "658960bb-4f2a-4783-8110-81e0f7f99af0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d100ff64-1a1f-4909-8958-dbc62f3d815e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9bd2686a-3d1f-4673-8f5b-1a0b5b046986",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "785fc8c2-273d-4f16-962c-5f2429d24a85"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "475311da-0ebc-4e04-a75c-848a9ced7df3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "95fc67a4-cb6a-40c8-bafa-d448890f898b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9ed49f09-3f50-4c16-86d0-dd82e9de6dfa",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "d6878c8f-ae3d-4756-a618-8126cb4cfbd0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b5048445-1955-4ff1-a460-e73b1c7004fb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5270eaa9-1086-47fd-80b7-3b9fc2a4c9ef"
            }
          }
        ]
      },
      {
        "id": "99daa7a1-0e3f-4eea-b073-96452f92f94e",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "6f9e3f85-97a6-45c8-8e85-ba4c191b3ba2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d8fdd40f-a30d-4176-8343-8ff8d509b37d",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "6dac0bb6-87a8-4eb6-b425-97a8f666e313",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d43c13df-bb93-496e-8b52-924882cb07ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4094701-7cf3-4b7a-b2dd-101ae7d4e444"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c680b894-0626-469b-8ea2-53ee509baf6d",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a436a0f-0f5f-4b7f-834f-0eeb5b3b74f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2005a480-02c6-4904-94ac-6875934da61a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79e082b5-dd97-43c8-b0d4-78042ccedb5a",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6b8c567-5ced-485f-83c6-3bc5693da16f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7828aff9-5404-4786-b81f-2fffadd53b07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1daf9b8-3787-4d93-9130-3fad103ee675",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aaf7e2da-f910-4921-9eca-7b5f9e6fb003",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "623e66dc-c593-45c1-a990-f3a4f0e246dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "465db460-ba35-4e31-bee9-94cf0879d590",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9e4036e-cecd-4fd9-98f5-2e754989617b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f00b46b-3e17-4172-b768-01d4c3aef069"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3aaa8606-aa25-4db2-9c43-2f3c0c643624",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "042302fa-dc2c-4930-a042-b095ae9393ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "307cb069-e79a-4f33-8225-3ee247a0c408"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e53932a-d9ad-4504-b1da-e2adc03c504d",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9929b2e1-902d-409c-a9b6-8f47d0dc8388",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a91e8a5f-45c7-4e07-bd87-3aaeb5fc03da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1fb054a-2b79-4a4a-a26b-4268aa0dd94a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cd4825a-68d7-437c-a4b1-356451397d12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "956fd38c-6b96-401f-a8af-a8f219fc8ccd",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09d3e9e1-5a4d-4eff-aadb-b46629fdbd4b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9c8e5ad7-795f-4870-894c-ac44b13d575e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "769d2426-0987-482e-9f45-9f58678e3759",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d04f9e9-7ea8-4e0f-886b-dcb3e53e6641"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c22756a-42ff-4fb4-aa06-da5154915919",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "858b681a-a82d-4907-be6e-d3f9e6f038a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "89d4a6e8-8872-4472-8041-b9879f71abd2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ce33bed-dd43-4e02-941a-787a28f62ea9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7fa1797-a31b-4b87-bf5f-0bac861295bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4529091d-918f-4ac5-ae38-ff45ea1a3e9e",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbe3da91-4359-4e73-955f-c9bc9a20567d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d4aecbb8-887d-4f9b-809a-c48df6225854"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bef48746-2923-43e4-896e-5cf4ea84f417",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b90a4ac4-de08-42d3-bad2-b6f377d52d9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dae38893-a658-4b72-a916-1092a5903742",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04f5f420-a9bf-494b-b46a-12d12434f1c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bcd02bb-3533-4faa-b1e9-f2432b7cbba1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ee83ef7-79d8-4cf7-8648-87465100b1fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38566e04-b7aa-4ace-9cf6-4b8dc1b6f762"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31244238-c86c-41e6-914a-824839598a86",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68041654-6417-4951-8504-45d236838ca2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4a61560-7bbc-4d6b-8068-991f77454671"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6716d849-2188-43bd-9a25-497380431d31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7114fad4-0a90-4db4-8be4-4e90087238e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8028493d-223e-4999-bc23-0c5a3cb32b89",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4496166-6328-404a-b674-dece8d035cb0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cd8e83a5-870f-4d35-84d2-b79bdb5d49db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a185a88-25d2-439c-8b4e-b61cef2724c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9dfb3483-7273-4598-9b5c-ca1a25a6b9a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa0844cf-205e-47c6-975e-54ada096be24",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fad123b8-c58e-4934-9685-341c4bda620e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ca5298e3-adf2-4ec2-b96d-228db7bec3e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9a480c2-a167-4715-9d2a-8e5de8205a8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6342b779-5895-4311-9a19-35cd44f2f2a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c982c835-f0e8-43bd-9164-9536ae9bcffe",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ad551e4-d39c-4092-90af-191e6dddddcb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d2bd54c7-9db7-4644-b86f-73208c0697bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "352e90bc-863d-4d71-9530-e18115bb1dc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca1e1e18-56ca-4544-b122-d7c217392dcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0de56a21-7c83-4090-899d-ecba93a46b93",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de43be25-998c-420a-b14a-f8216c664e36",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5a56bf90-0a45-49c1-afee-3f82acf8e3d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35f28195-0eef-454e-a4d5-f389995160ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da96e539-adf4-4660-9bae-cb3e930c3ff2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24df8b5a-c540-437c-983e-01ac339e7d35",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b684e8e8-482e-4829-863f-39ed17afca9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aebead33-0707-427b-8d92-852458274d75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe4b84c7-3665-47d1-80c5-2164fec7c554",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "558e8d93-c396-4e8e-8650-1e1133ca1115"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d958406-8142-4508-855c-88b78be061aa",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dd93005-fa51-4032-9eed-2ff56f3ea84f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "132a3566-25fd-4780-8bb0-6751f6822554"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1f49186-5390-4493-acd7-7b1209b15dd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04a72c14-7801-44a6-8f72-666e3ef6e83e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3386d54-4b21-4c0a-b0d7-1406ed82fe5c",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c302d90c-38fc-4de5-8fab-7e7c4353723f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "583637e7-9b23-48a9-b0b0-a39769e976f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bdad96a-4248-4518-990c-feb471a22190",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d826151-6e4a-47df-bfe9-fcf71375e73e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81e48a55-8b72-44c0-8355-3adf00f6a033",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "665cb458-5563-4f46-82cb-78ed7b280e01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32d9bc7f-c1dc-4489-ae29-84802df7871f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66637316-7977-481a-9c09-b6bab0a8cb43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64532e2e-136d-4169-9c5a-0cafd21ba299"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8ee8df7-79d8-4cec-bbb2-9e0e13a97de1",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cede811b-c80b-4fc1-96f3-1c2e473d1730",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a837b7e-9657-4e9b-a209-0cf4962967f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d9daa57-2658-413f-bb4e-dc30025268c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07a107bb-9e6e-464b-9b61-3205f9c8af72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0be3785c-9d3e-4286-836a-982c619532e9",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a31002e4-67cb-4168-8574-91d0664e2c6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52423767-2807-4e96-9c5b-018ea3bde521"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9b18d29-7d98-483b-900b-f3fdcd42f241",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84d5fb75-4a74-4417-905a-19d46e9cfba4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c585b0f7-331a-4814-8c90-5d0cde0fc1ce",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "caf5b0b1-d112-4a24-aabf-c61fcce24630",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "337c50aa-744d-4c0c-a31a-7c963fcc0284"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aebb3181-8ac3-4bb0-bdd3-30bb19870056",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e35ff3ff-7973-471f-be00-e11658618682"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bba3e801-2e11-40a7-8984-b4a0eb46e553",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfadd5ef-a4dc-42ae-9340-cdbb5996df0c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "37bdc430-9be0-46d7-af71-e6b379a02828"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99d103f8-f510-4c6b-a189-3b5a0c390d06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9cf29f91-6f95-4289-8c7d-c753a38e69a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b858a722-f11f-4fae-a654-f31af10989a5",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b246b63c-4e9b-437c-ac3b-b1596c98461b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4e65e655-81ad-464e-a24d-a2b1f4e98f30"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fcfb150-a464-4156-b59c-431eb2893861",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2d4c06a-7dc8-4bc3-8d3b-0ea63eadadbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77a78072-c4df-43a9-a958-9affb1d8a4b0",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "968e93bd-f5f2-4875-94d5-824333f2955f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1941e2bd-4bb0-4841-8c2d-bef2f79a94b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d56c66b3-f6d5-42a8-91e8-e7c3f1e39d5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5304e70b-3aa3-4627-bcc1-872fef4f986a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ce880b2-ce04-4e31-ad9e-32a582d0debc",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af8414d1-1da3-4e50-ac3e-d15b8a1f3108",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fcd52297-3eeb-4f9b-bf72-a88daf593abd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba3d7194-f080-475d-8b38-503c607ea45d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbc24ab3-35ec-40ee-bfc5-6ff756ba9183"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47b23784-b38f-4921-8f73-a5313b9e9094",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a0c20f9-32ff-4428-9bce-61418c119452",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "525c28d9-4895-4495-b14f-100df150fef6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9996bd4-7719-4fe6-b1af-9fb9000a9571",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdc4db40-803c-4b0e-a5d6-a5124be8bea0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81bd42d0-286a-4814-9339-3ef6f07c37f9",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7aec148b-d2ba-4c1a-a642-1fc125643125",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "06c16805-a7e8-4d18-aa73-d9cadbac772c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ecbd7a8-88c3-4c7c-b4ac-c457cd28eb66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aae3f1d3-5390-450a-b965-e07a0b69c1e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "499c0071-b56b-4d68-9275-f1969bbf564b",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0259f803-4651-4f8f-adc1-4e5b198996a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "240a9838-efcc-4144-9a05-96057e180972"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67703b7d-7a04-4335-8d31-ee22774f0d9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1437e6b-9720-4a7e-9717-4392f2f9f9e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a198f7b-b08d-45e2-8b12-3f6bb11fa07c",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58e08590-79d0-486d-8ba3-2d2509f57bf9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a937cced-06a7-4e32-96c4-e00f6b451829"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91f9387c-91a6-4bcb-8dba-b90938fa9bd1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c42b618-0247-47b2-a177-d24d17880411"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a5d13ae-6843-4c67-91da-9f564d1e9062",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73b2114d-b992-4244-b5d1-a45b0bbee0fb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "92e84c64-cfe4-4fe0-98f7-d0933e753ef2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9a49b56-71e9-42f0-8989-2409d21e5227",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "420a48e3-8429-4d7a-a63d-790f13b441c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e7ede69-6174-4926-a6e7-da83f0a8bc11",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21ff4999-e25a-4990-be8a-13df0aedea65",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2195dabf-5845-4b87-a700-61990dc68d6e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bc96004-1e52-4716-b88b-def4e973bd53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae1f8d75-4fdc-42d6-8855-d9300c4c7bf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39d445d8-dd02-446f-8ff9-71341e6fdb52",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eea49087-1258-41ad-be3c-cd48c938a63c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e200292b-cc78-4c3f-a3dc-ecae0a76922b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80b89dc5-1ea2-485c-8d86-8073c130fca9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf79b57e-c2c3-4a29-b81c-233cbccd6a40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4ebc67d-b66e-4f25-9638-e15680a1ab1b",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8e9df45-3980-4770-8ce7-9bcb81c40b4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "281a5d9e-ce74-4e52-b140-b7cd163a8a27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0889c015-4877-425f-bd6b-f47f7637c543",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b4ccc6c-53f1-4a26-bb99-06eb119fc011"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53a2c9a3-f230-47fc-b17b-174a2a5d4213",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4afc54c8-5878-44d2-976e-626669340af3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2f0c139-e04b-4fd1-9cc8-12329c08e074"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dd5884f-9a12-4187-ad6e-219557a5d9a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17839017-846d-4952-a9b6-61527f5f34c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1924446e-127c-468d-a825-d7c92bc3eb0e",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93b00a64-ba33-4b75-9040-a28e850f4894",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2347341b-6c61-41f9-a295-8463a13942cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "173013d6-66dd-4c1f-b80b-37181b3e7a28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb2eb2f9-d798-498d-9aaf-b4e1c8ea8b87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f625a9f7-ba7c-4012-9aa7-ecb084386aa0",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5a00ff1-e2a5-439b-b877-ca943bea52a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5bffc099-9000-4d38-8c3d-a0f95ab9cf1c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd2985ea-87be-4184-a9b8-d6893f668912",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30d3b7e9-e67d-4852-93ca-4034766e636a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f6de067-697c-4552-b4ba-c8b26402fdb4",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fbb7dff-829a-4259-a980-492c5467644a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb4a68cc-ca36-40c2-b5ee-2af4289f8084"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7204845e-7416-40ad-98b3-6881506b55a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cccaeeb5-c48d-41b4-bb1e-f177a099c7c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "064f20cc-190d-43f0-9b9c-078b7080531b",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7257a6a-89e5-40c3-964d-83de883b03e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45eb49db-fc04-420c-aad0-40c3878bf613"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c0eb326-c8b8-4447-b8f6-5b1435cd282b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a4e4598-bb3c-4b79-95c2-74c51da62d32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebaddf18-c731-4d8d-899d-0846e9f9bfed",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "521072be-ff62-40c9-bfc8-23cf3a9f30b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3798a703-588a-4dce-8ca8-0bdcb3536003"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bfd94cc-9441-4ee8-9678-360d8c500b32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41948ad0-95d1-4e32-894d-4c2e416232d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aeaed80c-6b23-46b8-a6a4-41feba111c10",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "983acae3-d51a-4879-8d18-5a9b215f598e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26715728-36cb-4a7f-ab18-802cea7ff6db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79395a77-57bd-4e5e-8e26-08842f373831",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "569bafe5-0224-4e27-b132-48b38b287492"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90df0d22-91be-47f2-90cf-659dce6a35c1",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7839b94b-e1d3-4c37-b30d-7f53b292b7c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d1d442d-d834-41e6-afc2-ffde1a003872"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d648ef8-2afb-4e82-bdf7-b8b7b1cc273f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efbeeffe-fe8f-48de-a44b-21c394babd67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a094abf-5828-49a4-8496-2ae69bf9a803",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9d5382b-4db0-47b6-961b-a41570eaa72a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba31a2fe-cccb-478c-9b33-a5579ddc3314"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a43b7654-4892-48a3-bbbf-fe914b0679da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67230f9f-74eb-4857-be9f-22c33de1a2b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c686dd5-e3c0-41fc-9f2d-1fefb55d96d1",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5adec19-d40a-4fcc-ac30-0b8cfde6c1ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "beb5369a-044a-4599-b46b-7889eb5fe549"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb6b0678-1de4-4c5d-bd17-bdc466e06db0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "169f1c10-7e50-41aa-94e6-fd8c59ced7c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "605b24b6-b774-4ccd-b1b9-331d6cd7245b",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15975f09-ee2f-4bd6-bef7-77eeac6bd576",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32fd8049-fc9b-4089-8121-83b4647c0823"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1566ef1-0cf0-4ab1-9b43-2335a8985c86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7627af7d-5709-492e-a004-48d0552515e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "956f60d5-b57f-45d5-8457-a5da0ef2e854",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7277b3a9-0352-4466-8bab-f690e44ac60c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6cf25174-1104-4be5-8aa8-863c05d20a85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdbb05a1-4239-4494-b0f0-8aa561c33188",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3aabc61f-220c-4d2c-8c14-6ca4e9a586f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20a77737-eee1-4a31-a32c-0ad24bdfc770",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1de8a35-319e-403f-89b8-87d8213a141d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80a59db9-12a4-4cff-b31a-416f10d5cd04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a110cf76-b3d0-4966-81c7-cdab7549cab5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d6b1cd5-46ec-4d41-9b44-622a3d1f8866"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e94b61c3-3e0f-434b-869f-0d7f95adb647",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35ea1cf4-f55f-4750-afcd-8d4bd7afdd98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dce771d3-f7b6-49b3-9cbb-ea2b1dc97c14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a8caf89-23fa-4770-8b6e-2205ffe17806",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00851f55-b876-4690-966b-4ce85e6a5220"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1b17a4e-fb88-4b1a-af86-3f22c36d05c1",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b38e2a1-cd49-4030-b044-ec65f4df1084",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "042014ea-9b85-4ede-8b10-bd6233fb7de4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e13f9a5-5797-4863-a018-458e6635142f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1f7a1a9-6e26-49ed-9374-170ae436fbe5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14b81099-e824-4c21-8410-f48bf3744da9",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ea1a751-e27d-4d8b-95fa-05e8965f4a16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c821fbe8-44f6-4dec-b39e-4f1207ca9d4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ed04b87-a14b-4f47-bc39-c2782e35ae49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bd1663e-8fcc-4185-af90-171db9740218"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c6c6933-d51a-4454-a114-2157f833992d",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6f1a59a-8dc7-4f67-87a5-363c45480ddd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9cd7dd87-0220-49b7-937f-340e4ffcbd94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f82f1910-ad72-42cb-b089-bebc19374d5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d00e386-3321-499b-aad6-b69e79691f27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28b5b8d3-fe8b-41b4-b380-98e99122e328",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4733dfee-8f25-425a-a348-24b1062c2cf6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "569c050d-0714-4aa5-909e-1efe72bb37ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "547b9471-56c2-42dd-b726-d4d5596602a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "528a6331-41c1-4687-b7b5-f139981e8474"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0734b15-e450-4ed6-8dc9-c04f360c439e",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83c6fb35-e31f-4cc5-94cb-bf98dae7d218",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ef1cc6b-e6f1-4633-bcb9-af3d4063f125"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35647e0c-e293-4369-9913-1a1d1ba94f42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2db994be-b52d-4d82-9154-18930bb2e931"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c5b384e-73f1-4061-975a-558d7dd20e31",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a36f811b-bad0-4ea8-a08c-203e7b8dddd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c21c499-d830-4709-89f7-e0a6ae57cfc0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f583812-0964-42a9-82a0-2ecff5d7aac8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7de37df7-6bcf-4cea-9e93-ca191f4e9b36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0cb063c-4665-44f9-b56c-1e42382f5569",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2e72404-a6c2-41a3-b68d-0d1440ef9035",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "723e1cf6-cb74-4553-a611-8124ea2d13f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59f271c5-b735-495e-b1c1-db61a5b91153",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30e62fb4-8a09-4e94-9a1a-16a99806cd38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38421900-9cd9-45f9-a027-454ce0dd49a6",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "442b73b8-fe29-495c-bfaf-5c600db67bbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b2fa5eb-a6f8-40d0-8431-a3757d76cf6d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00994e30-c38e-4edf-b9a5-6a6d2ee08389",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8be378de-a40b-4187-9510-02314a83f33c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6df1028-5718-4508-b979-15d507ce4018",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c32a81c-1c61-4e87-9cd5-7bb7f0a3155a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95361cb5-df48-48db-8e3c-ded14474c6cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad07d0ee-c541-4ac3-be96-165704d5cc2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8eb045a9-c6d3-4f80-8440-07a578b4ef7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e71a214-5d69-441c-8370-7e85aab6c30a",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "242d7f41-ff45-4ac1-9a06-babd0015a859",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "947967fc-a74c-4e8d-aa37-82d230eee5cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f25e06a-e6b3-437e-a61a-a086031495c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b0103fe-9c0c-4fc8-b4c6-e47bf56f061d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c5afbfa-7dbf-4abf-8c9d-35d045a2569c",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33c37f40-b3be-48a3-a2e3-181f89269c7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f8faf2a-e2e8-4c25-968e-e4b590e40868"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3a72569-ae1a-4dc5-ae29-08d46c43af17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6154ecc6-60d4-4f5c-a821-fbcfa369ec34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33e3268a-1208-40f7-9775-c3c1b0817e33",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1833c09-7fea-4391-a16c-d148fc156230",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1c9f229-c7b6-4828-ae0f-d48e92d749a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1e90044-0221-4f5b-80aa-88e68333266d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7af9d83b-2822-44e3-afd0-9e88d19c0210"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51958703-4530-461b-9912-3c872c8251f6",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65c66edf-3e77-494a-987d-844c93c59ab3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac6f2b18-c188-42c3-b6ba-d7decaeefdb7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af6b24e7-665c-448f-934f-e4cc4eef600b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "422c0e14-b366-4d44-856d-8c7fd9976ed0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c0adc48-04a1-4d02-9a98-ce540751ce0e",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d43efea-9d29-4b8a-9660-d2be2c614bc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dad07099-723b-432c-8bab-64edcc05dee1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37001e80-0ea7-421d-907e-ced09f1fbf1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb32816f-951b-4896-9aaf-b34831b85cd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efc425e4-c465-44f6-b52f-f8d9abd53160",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bfd95c3-8f00-47d8-a76d-d99295fbf6bb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4583b26d-789d-4870-aea3-478a0926b77b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e59b77ae-0c2b-4a3a-91c4-33c929b1cbe0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4e8cc36-b49b-4c60-9699-da1976adcc67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "819c7acf-a536-4419-8723-c42878095813",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0beba74-9cba-4d7e-8b49-497d4d217695",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a58dcbbf-e172-4093-af07-a0ad9e0ed900"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee09c21a-eca5-4110-b746-3ecc3a538738",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e94476a-1fa5-481b-b4af-e3d3aa85660e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37809a76-0c7a-4189-abed-cf3101a285ab",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26bd8cf6-eaa9-43f1-9e9c-e73aba73c895",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f8a128e6-2bf5-4364-9b8b-ac2bcc9e422e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6260ec30-fd66-4202-b25c-8fcddd30b8d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20a562cf-c00f-4b90-b4bf-8102271c5e28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "156cbb9c-3230-4143-9481-6a354924c397",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dc61160-f7a3-4f5d-bbcb-af04298fb8d2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2f9fe958-c756-4dc7-90d6-1e48144b44e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1aecabc6-0ddd-453a-8462-76f6bfe6213f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b925cac-750f-4be8-aead-860aa09bfaf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "081d6e8f-348b-49ef-8e7b-aedb7a7fa55f",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "585d0f6e-aec7-4378-b3eb-5f17329311c1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8b86b6ad-3b18-4a11-8014-0f628197f9fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "408285ee-f37d-417b-aae6-add4fe5f090a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c48124a0-4e26-48b1-8563-53ef2310df32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1e238d6-58bf-49b6-94fe-040f0876c4f2",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41f8615e-3816-430e-b86b-16e9a8f439aa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "10db4ed7-c9ae-4daf-b031-8cf12a0291da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3732a462-7e82-4d85-973d-48275a50317f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8139be7-ab46-4bbe-8374-90bbde795197"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1309ae80-42cd-462c-9ac5-0fb912958cdf",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67cc4790-a9fc-4d87-9653-2ddb14a5186f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "59292a0f-e7b1-477b-95e2-47d29d840d7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af3926be-500a-4fc5-aea2-bf60e0a707d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a679f30f-e3db-42e5-b7af-95cfec21136f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fff36df4-acec-4d8e-a2bf-fa203c54959d",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33f98974-df6b-4ae0-9615-f4b17617f9c8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d444048-997d-42b1-a3db-59b91bb396b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fe2b6bf-a0a8-4859-a63c-82e4f19e48e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78fb7912-825d-4dbf-8208-2501fa2e80cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a99fcbd-fd1b-4491-b6d3-b4e03053cc4f",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9beaab83-e197-4fc2-a47f-fa0434a227d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1c95ee28-9152-49fd-a052-3bc24f91bc51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e1bd19e-741e-4fb7-be23-6c22f8c82106",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2606513f-bdab-4e68-a138-277f09dc1386"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b8f2cd8-b7d2-48e1-b05d-8404d0972c33",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fca5374-3dbd-41b9-a679-3b6b46a9491d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c1c25a59-8c80-481b-8b67-a323d43d07ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69458a81-b4b6-4fab-92f0-4ae71389815f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd50f5bf-6a43-4017-956c-ca405ec57703"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b43b2b5e-bd7d-4a2d-921f-7f1ee94369cc",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7435164f-54ce-4470-bf7f-359bbea65be3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3c2775bf-df13-406b-9d78-8f3f3bff1a7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30c60a4f-21a3-408a-9c08-5cf310bae34e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0182bd5a-5748-4de3-8adb-1a73e2fa4be4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37446cef-5205-4b77-9302-54e34d33339b",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dd72056-0f5b-4023-9efa-59121b4870c5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "66f42662-c5ca-48dc-991b-794f978bf2cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ae2fada-80cd-4f56-95ca-b70a9a49248c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfda3a68-b6e5-4b29-8917-874d3b35d12d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f64d230-7240-484f-9ee4-e48f7298934c",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f8277c0-9746-4294-977c-0f779bf78424",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "54b76201-9814-464a-95c1-11054a1b1252"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d75f3be-760d-44b3-97f4-0379b14b8d9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "165874eb-e472-46b9-b74f-f4269f9b07b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0def35fe-1fe3-4ee6-a98d-fb7d25345cdf",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6813f124-852c-448b-9e76-cd966ecf5771",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd184734-2872-40c2-a67f-912ebde2c073"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15ed6b05-a20a-4aa5-bbd6-18649714236f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c71f9f3-87b3-4975-8bbe-20d07f1a79ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f73f380d-bae5-4d39-85d3-1228b831477e",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbe91c56-75d9-4d91-a649-39986aebb77e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b01d09a-c504-49a0-9572-3737220b9604"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04330e62-72e6-49d2-aa3b-708866dad781",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6646c363-5fd9-416c-b68a-45cd674ddc75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38768cf0-0db5-4503-a2c3-be48e0919dc9",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05249e38-dadc-4eb1-aa84-04b81db24911",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0a2fef0c-ec03-413f-af82-10a483c61d31"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c833da49-809d-4ef2-bedd-fb291ea035d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfc111a9-f0cc-43a7-8484-e48d6a333f5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63a6f96a-217f-4a02-a795-682f582193c8",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d0dedf2-ab03-44a6-9b7c-375cd894f96b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd723ebe-dca0-4a64-886b-47fcbb04e14f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bd7a73c-785c-4889-91c7-57e20a0d1e66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a716cc99-d420-4604-97af-74c4cf11c83b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c58bc14-83b1-4ab1-9111-091d322b54b9",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8335cbeb-ec8d-4e32-a627-5a5e03042085",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7ea5c68-36cb-45ce-981f-00d6ed45b9e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1babe2ee-a16d-47ed-a8a6-1ea2aed04329",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b28b977e-10df-4692-90ca-43ee85790bb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94d2d0d5-87a5-4786-8bae-9eb361ec9ae8",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61056a0f-5a1c-4b98-abad-d00f41beebc5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "615dd47a-0a92-4e37-a6a2-abd765e0b8fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4826f3a3-cee3-42ff-a833-fa6443095fce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8031a240-3e9f-4e48-a36e-d3f0cbfe4503"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fadf49e1-d31e-4a6d-b724-1eaec26ab96c",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83d5b6ab-080c-4f30-8678-d5a27ba33d57",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "40f5efa9-395a-4670-9951-99ac79035d81"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72f6d349-687a-48cf-8b60-fe72996da105",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5beb341-e83b-4e11-be1f-44cfe01e5513"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e5886e7-1ce6-4e7e-af0c-ddfc17bb9918",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "897ebefa-9289-40c7-a855-afa388e30fc5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f5494551-4f31-4960-8e7f-6ae2ffd31e58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03ace794-e26d-43e0-8a6e-8f5d6aaa45ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9726dcca-c213-4a8e-aae3-2278ba23777b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6d8e2d7-a832-43dd-a90c-c1d2a6f3b343",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fa7e533-c700-4f8d-bd63-98c2ce3f56b0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "91275cc3-06e6-4c66-86a3-ad0292230359"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1622abd7-862e-4d63-8aa9-608a70e1a461",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d52c6e45-bc63-4033-9843-ef8c3ba3978a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8126b8da-6231-4689-9266-79b76d80dc6f",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fe0584f-f103-41f5-a104-b6f5780e3880",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "809d8d8c-d9b8-4478-85a6-4681535aa135"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04c1597b-a757-4a62-830a-0ab6552adeb4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f6cd562-da0c-4a8b-acef-5fa74ccb08ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33c76627-ddfd-435f-a1a2-50340ddff15c",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0161dd1c-9fd8-402e-8ac3-5c4ef0b71006",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2750768a-6eff-4d4e-8d86-260a5ac5b9c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f94994b4-a575-444c-8a42-61a72734e45e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83b5b941-1b34-4f91-8d9a-7e4557c729fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea77ebab-2ed3-4e87-ab6f-885fe579f6f2",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ccd15c0-a790-48b5-8871-f6cd53f352d6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c83f1340-7675-4a38-870f-f77745243fda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "447a841c-c877-4c13-b56e-64d6178ec072",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25e4f5d2-8122-4b19-8eae-191d5d1ef9fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0633b444-f938-4a0e-9766-05a02e6a993e",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66fcf556-ddb1-4d3a-86ea-af9bef03f2e4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b4c8652d-0fa4-4b13-a2da-190490cc26fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1aa82229-d801-441e-a6a8-9b689b17f5dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa5c906e-96c2-4690-955c-0e2e3cc5fe2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08d13a10-938a-46f5-bee3-ea2761ffb61c",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3d4681d-f058-4ba3-bffa-62263005de40",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "99d68657-7431-430b-a3ca-08660d056c9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0736fef6-d364-4998-a7c4-668f0385ca79",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f26519f0-9dde-4a98-b79b-08d34fd77348"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fb9d9a4-6f22-4c1f-965f-d5fe06d522af",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "202a22cc-ad5e-4a00-b1ea-ce3554c2acee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "19f0ea99-12be-402c-9e47-36e9c62f1023"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4c61c8f-736e-46e8-870f-f9ab597451bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8946943-fbcf-4ef1-bdd3-25f969f7bed0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf1755ac-b27f-437a-b28a-48643044c227",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5799a3cc-fce4-4332-b401-32aa40b39fe4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "49cac3d1-622c-48a9-8629-20bb95f5a579"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fac01a2-7b4a-4a60-8296-6409e629f17a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cfe7805-0004-4268-9492-e78f04646ac1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "390a5cf8-9e2d-499d-839e-379aa6d90d75",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d003750-ef3d-48c4-9a64-5d55929aa579",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c20ff8d2-a9d6-4852-9e23-2118d9aeab89"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be83958b-1ba0-4687-a0f4-9dd687ebca1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f1d3208-357f-4679-b680-24ddabfc6cf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d9db42c-5f46-42d9-aa5b-73e015590390",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7e3859b-0b5d-43c6-a496-b53b55c89f71",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8ee1d002-006c-4b9e-aa62-617ad2fc74e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "788ba4df-4eff-4dae-9857-5dbd62438865",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c178d207-6c8d-44dc-8c56-b5235bfb78bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebeae56e-49ca-4469-bbda-87fc861205e3",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f2f947b-9312-4eec-8fa3-2d483f5d02a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "471b15d4-ae90-452d-bb9c-15b9f95d02db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9003dfd1-360a-41f2-a815-71b426b09101",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48dbc6b1-b658-4b40-8ff3-be8e9270b399"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fcb2dc5-7d84-46e1-b8f3-431e47df079e",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94761db3-8067-47b1-ba1b-b26b8af53286",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f3b8c7ed-39b6-4ace-99c4-16b2e64d761d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "854e9ccc-a4bc-4b87-a8d3-8af3a3da2edf",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6845cdd-a703-4c9f-a9d9-643166fdf760"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29c737eb-6229-4561-b029-577c66e05f2d",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33cedbb5-5b24-45b3-8109-07870b34717c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3b838dc9-c994-4071-84eb-dd86ef789fe9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eeef2873-4256-4339-b378-43bf7f610ab4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b76b2527-3e2b-45e4-8d68-cb6508e9baf7"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6ed4e576-9061-4cd6-acaf-4c9fe59ee734",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f9d3a72a-475f-4043-87f5-114320eebad6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2c36e6aa-f2b4-47cf-aea7-a5c6d57666a7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "da94ac0b-cd08-42af-a427-0f899da5a692"
                    }
                  }
                ]
              },
              {
                "id": "1abb3517-41e6-401d-96e1-1f7f9182d571",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "855158a8-7ee5-4284-a97c-a03c8ca15894",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6982156-f685-49a2-970b-13b151e2bab4",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "054b122d-e59a-482b-a6a6-286cc26341b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "badd3889-5b31-483c-81a9-bd1533390328",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7742af54-6e7d-4e94-b918-8c24b97fc1e0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1c80f4a0-0675-4208-8d27-98114cea1ad7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "72b500e9-5bcd-40d7-b5c0-ed813915bfe1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8d45c4bc-62e0-4f1a-a437-ba49d80c2761",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "02f2a7a0-258f-4947-8769-4673dc3c3454"
                    }
                  }
                ]
              },
              {
                "id": "7aeb5125-57e4-4652-bd4a-70144b0590e7",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "084f6461-d1d7-4ff6-a838-878b23334a4a",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ded5dcad-7bbc-493a-867a-8083e9870b00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "7c97b165-fcd7-48be-b62a-fbe1b045885e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f877a4b-46a0-4067-83f4-7bf858912a04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a53e5e1d-419c-444f-91e6-08722dc4b1c6"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "5701f0a3-ada8-4f9c-b357-992be9b2c7a8",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a8caccb1-edd2-4ab2-9b2f-61764851dfa3",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "becd42a8-4051-48dc-91b7-457127fa3d67",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "550c1297-e11b-4882-9571-0c9010cd04b8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fb9a23b8-3030-450e-a763-d419c7a29751",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e93bee66-b724-4a54-829a-7a62a1fa2918"
                    }
                  }
                ]
              },
              {
                "id": "93db0826-5457-4bd3-a902-7cf3a6454e5d",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3be3459f-c4e7-45d5-925f-be348d8f7374",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "40a055a2-e302-4b2e-b117-2ffc451330d6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3d7ac31f-430e-4e1b-8fd3-ea42eda5006e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d648a902-9c86-4021-a709-8b05d7baa49f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6c1cffa9-9656-4289-8aae-bf2261b6dd5a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "2b2895e9-c745-432f-bf09-be1bab75e822"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b3134af2-b88b-47ed-b3b4-262e8a2c9b00",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3f4bba2d-6f2a-40c1-99a3-8f3ccb7d6a40"
            }
          }
        ]
      },
      {
        "id": "64fbacb1-0d98-4dca-ae22-1c508a43cf87",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "9c52172a-94fe-4c3f-ba9a-39559e23a698",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0e9c114a-5586-4b58-bd20-4747478fe8fa",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d8e0448d-d17f-43d3-bbdd-f6305098f691",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ba0ad8f-3fc8-4c26-b5fe-e7b347d43d13",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "4152512b-6561-4e7e-ad1e-4cf471311b5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96c6d447-75d7-4d53-9de7-529a98b6a409",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5092b94c-4450-4b76-9f23-06428ad5a71f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c91ad982-e0bd-4442-b2d9-86f6c497c387",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7b5c08a4-4ea6-45b1-8b9a-f050c0c9178d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "db375eda-b918-4db9-bd88-cea9cfb2777c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "32ef1552-4b56-4fb8-8b86-05e6917e50cc"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c27ffea2-c6d7-4eeb-834d-77a44ec9bbd4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "547324de-7389-481d-9894-ed515a8b6079"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8e8e23d3-89d7-499a-8882-89725e9b49a6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "71c2443a-ede8-4b10-9fcb-30d920f783d1"
            }
          }
        ]
      },
      {
        "id": "bff9c71a-a5f7-4017-b29b-ea3fb27d0c25",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "3627a539-982d-4c6b-986e-0a77ca590d5a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "130729a5-2ab0-4c5e-9c56-0a7af7384404",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fb27024a-6f9b-46f3-a9b8-cc50ac66e841",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fd9cacd-41e7-49d6-9d2d-6f707aa6946d",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9e616e2f-5cb8-4df8-aa72-57c4cd023f74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "caa293bd-4da9-4c8d-96c0-9e35d83a2461",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "30ee8c1a-7a11-4007-9906-e424a99c8cdc"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "203dc175-49ea-43be-bca0-ba6aabf6c243",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "575e9e4e-890a-4b99-b637-1e6ce05281b3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ece1741e-5173-478f-b967-47add6910393",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8fc63e9d-8050-4051-ab00-169a8e2e8fa1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0cfe7107-3910-43d7-afae-480a9d20b410",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "a72cb16e-b3f2-4678-af88-56b71fb7a5f3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "23f3e241-e84e-4024-8080-cd4fa436fca6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "982ccc02-0b6d-4621-a92f-2ca2d49fcf7f"
            }
          }
        ]
      },
      {
        "id": "6fdcaca2-69df-4588-95a9-00629c5cd347",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "c64f5f13-dd72-4fec-bf3c-d8f13dd06486",
            "name": "Negative Testing",
            "item": [
              {
                "id": "cd6294fc-0d37-4683-bf94-8676740373dc",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7a094721-2be2-45e5-8e56-0ed002708440",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0209cf0d-16b2-4862-96ea-a2ed720cae5c",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8fc4afca-5536-4a0b-82b6-609897bb6b5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56818dfb-cc21-4122-9f87-c89b215a9f1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9656d000-d087-460a-8a8f-9c1fcfd93f6b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "53a3336a-ead7-40a2-abb4-5af8aea87475",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b4c53210-e621-47f2-9ad6-4bf8cd93c9b5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9b760c06-11c0-4c69-bc3c-1e2cbbca4202",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3c2fdcdb-24fb-4c4a-97da-9d9e2a7c7192"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c1832095-d8e1-4262-9bbb-32ae50ff76e1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "1e697956-b284-4d51-8019-0580e9080440"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0783e35e-ddd4-4ab1-bb14-e30f84388807",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "03d49b84-8083-4914-be1c-6d190b55466a"
            }
          }
        ]
      },
      {
        "id": "8e313f4c-3244-49c0-838d-80e3280b91f1",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "76063716-7adf-4530-8936-32ddfd36a4cf",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1ec4f255-bba5-4fac-ae0c-d16cc7ba7910",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "055f54ba-d500-4d20-b781-c5c42b64452c",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1e9970da-ec02-4861-859b-b5cdb5186fee",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b2b3d48e-963d-4a3d-a81d-aa39511afae0",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 295
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 69.22105263157893,
      "responseMin": 5,
      "responseMax": 356,
      "responseSd": 23.614823896525174,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1710808450846,
      "completed": 1710808479685
    },
    "executions": [
      {
        "id": "659fd1a1-4a32-471e-89dd-b619ff816fd3",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "c25a1640-04cb-4b30-9873-385d9caaa717",
          "httpRequestId": "24c46cb1-55ce-4b71-b447-e158894869ae"
        },
        "item": {
          "id": "659fd1a1-4a32-471e-89dd-b619ff816fd3",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "d96906bc-6823-4f72-96c2-f2372b85ac95",
          "status": "OK",
          "code": 200,
          "responseTime": 44,
          "responseSize": 0
        }
      },
      {
        "id": "fd222e7d-2ed3-48c0-b805-cffa8c459b17",
        "cursor": {
          "ref": "213c3547-b744-443d-921d-e3444af63a46",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "153d2ba7-80be-4591-abfa-c3f90748e63e"
        },
        "item": {
          "id": "fd222e7d-2ed3-48c0-b805-cffa8c459b17",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "e77faab7-8927-42d6-b138-7ad8c8f809c0",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 0
        }
      },
      {
        "id": "493a35cf-5c01-4b59-baca-a374024b41b9",
        "cursor": {
          "ref": "45355070-0c2d-4bbd-9933-c272b37ea111",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "8d2698c9-1011-4b04-b2c9-ba966e86c3b7"
        },
        "item": {
          "id": "493a35cf-5c01-4b59-baca-a374024b41b9",
          "name": "did_json"
        },
        "response": {
          "id": "6c131239-eb00-437e-b5f0-4726601aed60",
          "status": "OK",
          "code": 200,
          "responseTime": 356,
          "responseSize": 1329
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b6def00-494f-4d55-8fc9-d9d19178f6cc",
        "cursor": {
          "ref": "3e23c53d-9e82-4bbf-a3c2-356ed13e4f29",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "77f32c7b-be6b-4350-8920-d3ce013aaff5"
        },
        "item": {
          "id": "8b6def00-494f-4d55-8fc9-d9d19178f6cc",
          "name": "did:invalid"
        },
        "response": {
          "id": "8189457e-ccff-47e3-bb5c-5fe6d3afcb6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b6def00-494f-4d55-8fc9-d9d19178f6cc",
        "cursor": {
          "ref": "3e23c53d-9e82-4bbf-a3c2-356ed13e4f29",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "77f32c7b-be6b-4350-8920-d3ce013aaff5"
        },
        "item": {
          "id": "8b6def00-494f-4d55-8fc9-d9d19178f6cc",
          "name": "did:invalid"
        },
        "response": {
          "id": "8189457e-ccff-47e3-bb5c-5fe6d3afcb6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62f5bc5f-0c1c-437a-b6ea-d97829453c24",
        "cursor": {
          "ref": "20adfe11-076a-4479-8b5c-3d218aa3be7f",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "ab3c33f8-ee4c-433a-a8e1-7ca74b6dfe34"
        },
        "item": {
          "id": "62f5bc5f-0c1c-437a-b6ea-d97829453c24",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "e1d966b2-dd9f-45c7-bff9-e228a9cd36ff",
          "status": "Not Found",
          "code": 404,
          "responseTime": 112,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cc423ac-b8be-4f7f-8156-519fc2e17282",
        "cursor": {
          "ref": "eff65f54-76d3-4fa5-8344-38d547c29dc4",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "49cc3179-9177-41c5-9a11-9e638ed877f0"
        },
        "item": {
          "id": "3cc423ac-b8be-4f7f-8156-519fc2e17282",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "6ab5adf0-5b81-48c0-b9ab-a74e1706b0b6",
          "status": "Not Found",
          "code": 404,
          "responseTime": 66,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c219ac0b-77ec-4fc5-8962-148e7bac8ae5",
        "cursor": {
          "ref": "dbeb991d-fae7-4d9e-8bf1-5a0601003896",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "60615156-ae41-41b7-b4f9-73b4104e1d6d"
        },
        "item": {
          "id": "c219ac0b-77ec-4fc5-8962-148e7bac8ae5",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "905a2e2b-85f3-45d9-a183-01039fbb631a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 67,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48180834-0ac1-48e5-aad7-8587446c7c7f",
        "cursor": {
          "ref": "519ce0a8-3880-4c32-b594-8d72731f6f91",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "695bf459-0a24-4e3c-b00c-b58de134ce14"
        },
        "item": {
          "id": "48180834-0ac1-48e5-aad7-8587446c7c7f",
          "name": "identifiers"
        },
        "response": {
          "id": "ba6aa508-dc0a-4918-bd6a-22f36af2e3d3",
          "status": "OK",
          "code": 200,
          "responseTime": 143,
          "responseSize": 1345
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "933a621a-2b6e-4ae8-87fd-9bd7295baeb5",
        "cursor": {
          "ref": "d42932b7-6382-4c3f-a5a8-8b2bad946ff8",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "c3ebe405-b6a8-4c01-b72c-7e81d18c0b94"
        },
        "item": {
          "id": "933a621a-2b6e-4ae8-87fd-9bd7295baeb5",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "70477cf2-1d4c-439f-83b6-8c4be8278f04",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ceb0ff6b-1283-4537-874a-121420f17adc",
        "cursor": {
          "ref": "c00b5f98-691e-494f-9093-4df4944b2e6b",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "4ce94ae7-d17d-42c2-b5de-82ec046a68c0"
        },
        "item": {
          "id": "ceb0ff6b-1283-4537-874a-121420f17adc",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "6ab257c2-0e37-4d40-8102-0461702fe8ca",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5af6a15-69fc-4590-9724-0a184e732fa0",
        "cursor": {
          "ref": "de32f8fd-8b8e-4287-9ae7-c4ef2f6928e5",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "40bc16c6-c2fd-4523-9b89-019e72cb968e"
        },
        "item": {
          "id": "b5af6a15-69fc-4590-9724-0a184e732fa0",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "183d3615-7712-49d3-8d73-a620f75fc574",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d76ffea-74e7-4b73-b716-5969725b3427",
        "cursor": {
          "ref": "7a89097b-5fe3-4c69-bd6d-c639cde090dd",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "d3d2efdc-b179-4fca-a126-d01f80ff5519"
        },
        "item": {
          "id": "9d76ffea-74e7-4b73-b716-5969725b3427",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "07992679-8e0e-4c2a-8d18-e9cbbfeadff2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99f8364b-d4e9-4594-a476-e09326654fb0",
        "cursor": {
          "ref": "28906327-75d6-4155-8fc2-f017f736a767",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "a2a9c47e-ff2f-4b6d-872d-c9c73a54f203"
        },
        "item": {
          "id": "99f8364b-d4e9-4594-a476-e09326654fb0",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "ba646f53-69f2-41f9-81e4-838b92ac458d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90111153-0869-4f2a-8d68-14fe5ffd549e",
        "cursor": {
          "ref": "f56717d9-62db-4a5d-a233-2f7be73c4c0b",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "2622c6d8-4ffa-4d34-b74e-d68f99ba8603"
        },
        "item": {
          "id": "90111153-0869-4f2a-8d68-14fe5ffd549e",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "cc6e94bd-5d58-4695-9c24-4e03667a3df6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6d05547-be09-4003-8c8c-f407505400bd",
        "cursor": {
          "ref": "ed93ca5d-dd66-42d8-81c5-995a227c8277",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "c3b82ce9-ba13-4296-8a38-f1ffce80d83a"
        },
        "item": {
          "id": "d6d05547-be09-4003-8c8c-f407505400bd",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "b843cda4-5dc4-48bc-9440-cf12a707c6b2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3ce567f-5568-470c-91a7-ea74f1bfd574",
        "cursor": {
          "ref": "0504c10e-eff5-41da-8eeb-8d17ad722229",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "29220c1c-6b59-4aaf-8691-4914efb33972"
        },
        "item": {
          "id": "a3ce567f-5568-470c-91a7-ea74f1bfd574",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "1ab5c5b6-c1fa-445c-af00-7adc71e23e77",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "822e0a96-3b84-42b9-9564-3dfa731aa88a",
        "cursor": {
          "ref": "bfd6bf40-4a6a-4aa7-a6c7-ae55e2a84ac4",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "4c58a38b-cd10-4607-91a2-3abbb1a665fb"
        },
        "item": {
          "id": "822e0a96-3b84-42b9-9564-3dfa731aa88a",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "61d89f8c-b8c6-4e32-9138-ecade5e0d31a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a528de69-d71c-41bb-a213-baee1165c193",
        "cursor": {
          "ref": "56649674-6c08-472b-8891-e5bf5451581a",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "07b24f63-d1b3-4a1e-ba1d-b99a6770d353"
        },
        "item": {
          "id": "a528de69-d71c-41bb-a213-baee1165c193",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "446b301f-c6be-4564-a884-3788be896706",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cbbdb78-1d47-499f-b5da-b611b8abe045",
        "cursor": {
          "ref": "960a68e2-2a25-4345-82d4-7c1dacd03d8c",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "a947db72-3d28-455f-a496-a4dc59a8f130"
        },
        "item": {
          "id": "8cbbdb78-1d47-499f-b5da-b611b8abe045",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "6582aa5c-1f96-4e1e-9345-5eb905fbb0af",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "806c9ee2-07bc-471b-b244-2131ca7d3269",
        "cursor": {
          "ref": "c929cd49-98ef-4054-beaa-2d794b3fccc5",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "c3343600-b285-4a45-a71a-d20117dcfa33"
        },
        "item": {
          "id": "806c9ee2-07bc-471b-b244-2131ca7d3269",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "f1e43a78-bafc-4e43-bde0-c92416de3a86",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8da3bdc-9bf9-4cab-a02e-0e7c1b2ae978",
        "cursor": {
          "ref": "625bc0cd-53ca-4372-96bd-7854a00e9db3",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "7e40b76d-8452-4126-837e-2e5947efcabe"
        },
        "item": {
          "id": "d8da3bdc-9bf9-4cab-a02e-0e7c1b2ae978",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "1db84ab3-e8a1-4d19-854f-f076574cba08",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5173550c-c34e-4f0a-b8c0-9b71b0f2638f",
        "cursor": {
          "ref": "43510c51-74ed-45f4-89ee-bef19add47bc",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "230f2cf1-7e7e-49de-bb5c-b667eb46bd1b"
        },
        "item": {
          "id": "5173550c-c34e-4f0a-b8c0-9b71b0f2638f",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "3c903eea-e9dd-4bc0-b0f1-92a8b9019f60",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f0a8d56-6ec9-4404-907e-242f80666453",
        "cursor": {
          "ref": "37eb9c8b-1f4e-43e0-b0f4-f49faf8d5aef",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "9ae840d3-b501-49fe-bf2f-dd97aa675f1f"
        },
        "item": {
          "id": "6f0a8d56-6ec9-4404-907e-242f80666453",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "6108bb39-4656-46cf-85d3-23d07e72dced",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2521dfae-4f4c-4c1c-b769-f85a4241dc69",
        "cursor": {
          "ref": "fe7f19e3-054b-4fb7-be54-0635ef457e7b",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "b371f9a8-99ad-4575-b76a-49742d3bbb54"
        },
        "item": {
          "id": "2521dfae-4f4c-4c1c-b769-f85a4241dc69",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "df72c9b5-8224-400e-89f6-132e381183cd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08b755d4-47af-499a-96ee-126c486d8292",
        "cursor": {
          "ref": "b5182e9c-a436-4529-b4ac-65ec8590db9c",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "068411de-c85c-4627-9bb4-d4159d0b1d0b"
        },
        "item": {
          "id": "08b755d4-47af-499a-96ee-126c486d8292",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "82f708bb-8e1f-43fc-b92b-d60ef30e9166",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4d148bb-f72b-4a5b-8bb6-2ced3cdce68e",
        "cursor": {
          "ref": "d836424c-9fb7-4d07-91d0-52333f2654b6",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "c428839e-e392-40f1-8e3c-c87f03e9c351"
        },
        "item": {
          "id": "c4d148bb-f72b-4a5b-8bb6-2ced3cdce68e",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "e856bf55-6caa-4607-b589-00e05f171d68",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f08a7bc6-66ac-45ef-a4ea-d03c56ca6224",
        "cursor": {
          "ref": "08b360cc-5b83-4c33-b014-ae14114f7dbe",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "4cf543bd-4d3e-4d09-8a04-44ce86205ebc"
        },
        "item": {
          "id": "f08a7bc6-66ac-45ef-a4ea-d03c56ca6224",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "ee7a1b02-3e00-42d3-8bbd-3c96901d2b64",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6288c81-9352-4b63-bdc1-69a38926faa6",
        "cursor": {
          "ref": "6ec7927f-99c2-4c97-814f-ffe9cec729bf",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "3760a4df-b379-4eee-b736-512b4d0cead5"
        },
        "item": {
          "id": "a6288c81-9352-4b63-bdc1-69a38926faa6",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "21e449fc-2fef-497e-bdba-ca66a7c6ea73",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82d10b4c-8f1a-42ab-baf3-ebc95177c27f",
        "cursor": {
          "ref": "20f7e14e-f774-4d30-b169-73f68b09bc11",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "e5c9746a-457e-4be2-9263-28a93aa602d4"
        },
        "item": {
          "id": "82d10b4c-8f1a-42ab-baf3-ebc95177c27f",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "1b49e73a-1fbd-4365-b105-37f99343876a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58d019e3-7fb7-4104-b291-b9ab26d5609e",
        "cursor": {
          "ref": "faca951b-5336-4c67-843f-d2921e5b2c70",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "a2a6bf25-b203-4726-87aa-e6c20542874b"
        },
        "item": {
          "id": "58d019e3-7fb7-4104-b291-b9ab26d5609e",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "c04a6eed-4c73-4564-9c80-6f597c5e7415",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "722ec18c-43e5-471f-9454-35006c6fe7cb",
        "cursor": {
          "ref": "ccc7f25e-f788-46bf-bf1a-e0833d0c1d2c",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "d38678a2-9cf5-42dc-a22c-970251365f68"
        },
        "item": {
          "id": "722ec18c-43e5-471f-9454-35006c6fe7cb",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "637b70d6-b2df-4757-93fe-5390114cc418",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdf92ec6-57cc-4aef-a21e-d7543ba48b62",
        "cursor": {
          "ref": "6ef07e80-e38a-4c3f-8ee1-e236df038175",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "eb8b808c-3694-4a4f-848f-33cff1c76a18"
        },
        "item": {
          "id": "bdf92ec6-57cc-4aef-a21e-d7543ba48b62",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "e099f4d9-6034-4434-83b6-cc3b640979b8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6cfd554-d2d5-4587-9480-299eff69db00",
        "cursor": {
          "ref": "a3778615-e1ee-411c-9a5c-060354b3b84e",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "b6ddbdee-df1c-4338-b14c-e3b66f53884f"
        },
        "item": {
          "id": "e6cfd554-d2d5-4587-9480-299eff69db00",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "df7b1a50-2e35-4a13-876f-c2c88ad2feb6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5447633-5493-46c8-9727-b52e3edf3e73",
        "cursor": {
          "ref": "5638b42d-8230-4ab3-aa3e-918f06ee958c",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "14ec5b97-6536-4b8a-81f6-3fffa603611e"
        },
        "item": {
          "id": "a5447633-5493-46c8-9727-b52e3edf3e73",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "5875321c-3012-406a-8282-e8f6790b1ec3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37b74528-feab-4b78-98e7-ef232b4da7a7",
        "cursor": {
          "ref": "b01e1df8-8f88-4f70-8fdd-53df6294a2b9",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "c839f062-93a0-4ea7-b36f-a112786df969"
        },
        "item": {
          "id": "37b74528-feab-4b78-98e7-ef232b4da7a7",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "081a9f43-d251-47fc-b661-11930aab5c01",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7de46fe1-4f46-4118-b224-292cfafb50a6",
        "cursor": {
          "ref": "6a901487-5023-4b1c-9e87-946d6d9cfd8e",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "8e6ebfc7-aaf6-429c-8ccb-825282068b1c"
        },
        "item": {
          "id": "7de46fe1-4f46-4118-b224-292cfafb50a6",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "9e648c53-5f6d-4876-9018-7c595e457368",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bc164a1-59af-4d41-9118-160a01fcafac",
        "cursor": {
          "ref": "f989cc9f-30c2-409c-8652-bb4a1d4f7d3e",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "571e0723-3f27-4379-b263-25f0aa7d32d2"
        },
        "item": {
          "id": "1bc164a1-59af-4d41-9118-160a01fcafac",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "6e3bf74f-4e58-4179-8327-1dffc4310114",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7e5ad4a-08ca-4f86-89e2-698f7886a3c9",
        "cursor": {
          "ref": "10310af6-c1eb-4d49-8744-412ab251e571",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "490b5b5f-452a-448b-b955-3c50ebbd268d"
        },
        "item": {
          "id": "f7e5ad4a-08ca-4f86-89e2-698f7886a3c9",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "0ec92ca7-e244-4edc-833c-6b13c3b06f3e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8836a197-1fb0-4294-9556-0fc6bed58bce",
        "cursor": {
          "ref": "4164fe64-c9f2-404a-a268-8ce89a8bb933",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "d5196c74-c397-45c5-86e7-e4e64147d0d8"
        },
        "item": {
          "id": "8836a197-1fb0-4294-9556-0fc6bed58bce",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "667e14fb-5210-441b-958a-a56e1547fee4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "059a3d97-13d0-4174-ae97-2bc78e5cb118",
        "cursor": {
          "ref": "e65d1f9f-d14c-4629-b863-632093e7ceda",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "4f827263-f0a8-4137-a58d-74f663f24e08"
        },
        "item": {
          "id": "059a3d97-13d0-4174-ae97-2bc78e5cb118",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "a0f0fed1-28f0-42ff-be4d-1d8270406904",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "016c429e-9990-417b-8caf-49254ebf89d3",
        "cursor": {
          "ref": "4a15a60b-557c-4b40-9a0c-1dec48f4704a",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "e11e75ff-0ac2-403c-9b0c-8110581abb10"
        },
        "item": {
          "id": "016c429e-9990-417b-8caf-49254ebf89d3",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "13dd2c5a-8158-4989-8c1d-226af18f636c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6eede34b-adb9-4cad-8ef8-a9b88dca56c4",
        "cursor": {
          "ref": "3483c844-cb2c-484a-b8a2-a604bec0f62e",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "a555b447-e628-48dc-a297-e00f0054a60f"
        },
        "item": {
          "id": "6eede34b-adb9-4cad-8ef8-a9b88dca56c4",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "6ecc8be1-6733-4c59-a80c-fbf82c1f1d22",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "426f0a3c-1694-403b-a2e4-fd5ad003afa5",
        "cursor": {
          "ref": "a141dea9-df1e-42a3-8bef-c16c2974f37a",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "dea36bad-9037-4734-a243-ce0192813e7d"
        },
        "item": {
          "id": "426f0a3c-1694-403b-a2e4-fd5ad003afa5",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "0c2be6fd-d3c3-438f-89ef-fd3cac98dcb4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c7924d0-098b-4176-99d4-3db669ee09cd",
        "cursor": {
          "ref": "60a1b1ec-5163-4003-9048-d3506d11b531",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "b90430af-ab92-415d-b98c-cfd6c5ddcc72"
        },
        "item": {
          "id": "2c7924d0-098b-4176-99d4-3db669ee09cd",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "730f32e7-9658-46c8-8562-e94a1605df5d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 500",
              "stack": "AssertionError: expected response to have status code 422 but got 500\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e86a0b5-00af-4fa0-a67b-41c39aee99fa",
        "cursor": {
          "ref": "9e6a5bf3-8051-4335-94ba-1e2922f30c8b",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "e3db976f-1b01-476e-b869-d98b66f6e0b2"
        },
        "item": {
          "id": "2e86a0b5-00af-4fa0-a67b-41c39aee99fa",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "b2b03012-7e9a-45dc-89b7-49e51c193fea",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52140074-00be-4323-866d-2291a348939e",
        "cursor": {
          "ref": "53d6f9a9-103e-4721-94bc-8df4ef5708fb",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "590d295e-5d4c-4fcd-ac20-96a903feaefd"
        },
        "item": {
          "id": "52140074-00be-4323-866d-2291a348939e",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "f3d0e367-6e80-4243-b639-bf8cb0a8f249",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0101250e-b306-4c4c-9127-224ace92be11",
        "cursor": {
          "ref": "62a67c5f-9f6f-4d34-a90f-41154abf5815",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "9633e21a-145b-4b81-aba0-f9c48fd9b9f1"
        },
        "item": {
          "id": "0101250e-b306-4c4c-9127-224ace92be11",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "09cd4613-3de0-4986-8652-4f7955912275",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c6a87ab-6a20-4b71-b660-b92e25d6bce8",
        "cursor": {
          "ref": "d962a833-11f0-4c60-abb7-e0a74136300a",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "d82267bd-fa68-4894-ae42-c0580f1631b4"
        },
        "item": {
          "id": "0c6a87ab-6a20-4b71-b660-b92e25d6bce8",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "0f7b7e03-f541-49e2-b2ab-2a6fd349e60c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57d200c8-3116-4fb4-96be-3a9ebee1f597",
        "cursor": {
          "ref": "d7594465-d667-4c09-b716-d943f2510507",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "adaaaf32-9b8d-49a3-a7d8-95a8197e4b66"
        },
        "item": {
          "id": "57d200c8-3116-4fb4-96be-3a9ebee1f597",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "84e8c98b-7ed6-4dc1-b3be-a635ce5e15f0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ea847e1-a442-448a-966b-300d1954545d",
        "cursor": {
          "ref": "2ed39f48-411a-450d-ba12-7d463b841b34",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "2e69aad9-a0f2-47c5-b4af-f2b745b271a1"
        },
        "item": {
          "id": "3ea847e1-a442-448a-966b-300d1954545d",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "06e4f405-f7f0-4774-804f-22a7413b709d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cab39e3-9d99-4b6f-ad5f-d2e5bca1e77e",
        "cursor": {
          "ref": "60fc4cfb-0525-482c-b20e-d3f49bedc7dc",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "7c30a369-822c-4534-89bd-2c1e051dd29e"
        },
        "item": {
          "id": "9cab39e3-9d99-4b6f-ad5f-d2e5bca1e77e",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "b6ef404a-31b1-4554-854d-adda2ecb793d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 500",
              "stack": "AssertionError: expected response to have status code 422 but got 500\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56f43563-bc80-424e-b18b-3b55bc68a475",
        "cursor": {
          "ref": "c1cab79d-d4bb-44a4-8b95-d587eaa216fe",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "409695f9-85e6-4fb6-b15b-22bdab5e8197"
        },
        "item": {
          "id": "56f43563-bc80-424e-b18b-3b55bc68a475",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "63ab8d4c-4c30-4bfd-9e9b-4e8de6dcdd68",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b099b2bb-dd3f-455c-abeb-93075e47853b",
        "cursor": {
          "ref": "de50d736-d33a-4e0c-a91e-54c73cce9a9c",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "c57127ec-84f4-44bd-b676-02b993ae0f88"
        },
        "item": {
          "id": "b099b2bb-dd3f-455c-abeb-93075e47853b",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "9602a494-3eff-4f3c-b94a-b421d2ae295c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a31bed6-0ab4-4909-a109-a58598cc01af",
        "cursor": {
          "ref": "e4817554-98e3-48a3-909b-3235f0d3f2d7",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "ea77197d-e9e9-4368-a971-6511abb223f6"
        },
        "item": {
          "id": "6a31bed6-0ab4-4909-a109-a58598cc01af",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "28331c84-bfee-4d67-b8b5-64ce9096150f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56143b30-f770-4866-aea9-1982ff54b025",
        "cursor": {
          "ref": "e9593eb8-1c4a-4af0-9f45-55d3131e32a9",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "94c93f5d-b936-455b-b54f-22fe4dd9cd5b"
        },
        "item": {
          "id": "56143b30-f770-4866-aea9-1982ff54b025",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "e39122a0-6361-4f50-ace9-a7a595014dd1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cd8cc51-6a13-41f1-8023-02cb5a741c56",
        "cursor": {
          "ref": "88de063c-88ab-4144-aa0e-90864648a873",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "9d6c200a-4f06-4d51-b21b-445779dd425b"
        },
        "item": {
          "id": "9cd8cc51-6a13-41f1-8023-02cb5a741c56",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "96e2f973-8a34-4e9d-97a9-33df4697e258",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d858d7f-4d7b-431f-840d-f16d77824f50",
        "cursor": {
          "ref": "475af9b0-7c73-4088-b3d9-3be9b438e070",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "8be4b1ac-607e-4917-811c-6d8826307647"
        },
        "item": {
          "id": "9d858d7f-4d7b-431f-840d-f16d77824f50",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "58bf2b66-99a1-4820-a0aa-5a7e9345c2a3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e25d7ed6-ce5e-449e-a955-f0fc41bf1c6e",
        "cursor": {
          "ref": "84780261-bbcd-4dd9-b3be-78f7aa5eeedb",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "32b53f8a-01dc-446f-b402-9fe95edecc38"
        },
        "item": {
          "id": "e25d7ed6-ce5e-449e-a955-f0fc41bf1c6e",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "d4b387da-cc94-4f3d-8975-1ca4f909cc7a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dea7f10-b8cf-494d-9db8-77d0781fd459",
        "cursor": {
          "ref": "ddef7621-ddde-42e5-850c-6010b726f1fa",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "ea1d5a32-07ca-4e36-b2b5-fbdc5c85868e"
        },
        "item": {
          "id": "3dea7f10-b8cf-494d-9db8-77d0781fd459",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "fda75e73-3a07-491f-a651-053a4fb70bf6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fbd8e07-af66-4d4b-88a1-ceb6bdc6105a",
        "cursor": {
          "ref": "707f9411-d9cb-4003-8dcf-1fbfe1c8d35b",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "39c3f0a8-b7c3-4c20-a733-811ba87b9cef"
        },
        "item": {
          "id": "6fbd8e07-af66-4d4b-88a1-ceb6bdc6105a",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "b3a3de46-2661-49a1-bdcb-234d9622bae2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48a38293-7ed8-4861-b375-acca173ed240",
        "cursor": {
          "ref": "55c82c4c-a0cb-47d4-a841-b904d12ec4cb",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "52049b8b-d4e3-49c5-9c9d-b242a169fb18"
        },
        "item": {
          "id": "48a38293-7ed8-4861-b375-acca173ed240",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "db840e35-4077-436e-90b1-f1a9650ac443",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5e6a52f-9540-40a5-af5c-adac003cc1cf",
        "cursor": {
          "ref": "1bf73bcc-42bc-4223-b633-3d73584f56c9",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "a7fac657-9be0-422a-b861-6ae6fae26039"
        },
        "item": {
          "id": "b5e6a52f-9540-40a5-af5c-adac003cc1cf",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "7516a3ca-d0e6-4d96-a594-00f166d92617",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91ea9cf4-f395-4d36-b9dc-fb2cca771dc2",
        "cursor": {
          "ref": "4867ffc2-8790-46ec-8055-d1087ce0bbdd",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "3931da26-503f-4f25-ada5-7cd8a304eac2"
        },
        "item": {
          "id": "91ea9cf4-f395-4d36-b9dc-fb2cca771dc2",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "744b01d2-2721-472d-acb3-58e1b98c9c66",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5b65a49-c6ba-4e67-9a3a-abbd7b85b60d",
        "cursor": {
          "ref": "32c8c5f9-a137-490c-94a9-a1f4a7bcf572",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "fa6e4c80-7f30-42ac-9b08-29f9c267f5a0"
        },
        "item": {
          "id": "a5b65a49-c6ba-4e67-9a3a-abbd7b85b60d",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "d64f9899-89ac-4d12-bc3d-09538f58d55e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4e5b60c-2ab6-4f51-a675-7d274103ffeb",
        "cursor": {
          "ref": "7db00e7b-2d22-49e4-8fb3-5ea2af3f7ba9",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "b743dff5-1559-42a1-8f29-981f24776137"
        },
        "item": {
          "id": "d4e5b60c-2ab6-4f51-a675-7d274103ffeb",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "dc9d6f54-9ec9-44d0-9846-c9b8a66abbae",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "676961f8-f597-4807-8973-10c8f39da75e",
        "cursor": {
          "ref": "68d47a80-eccf-456d-bf84-f53f511b99f2",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "05d0f0ec-e822-48f7-b9a9-a7b5b78fcadb"
        },
        "item": {
          "id": "676961f8-f597-4807-8973-10c8f39da75e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "5a11d8b7-13ab-4caa-8561-d39f805be101",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e57b67d-01cb-45d3-ac76-b2d6d5b8aaf0",
        "cursor": {
          "ref": "e6e8d09c-5991-4dc8-987c-901fa9881c6e",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "f5d2f504-f917-4d52-9f14-3efb40129d6e"
        },
        "item": {
          "id": "0e57b67d-01cb-45d3-ac76-b2d6d5b8aaf0",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "1ff38921-ad38-4a4f-91d7-705036f36347",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4818d7a9-41b2-4069-8f58-2379f978a393",
        "cursor": {
          "ref": "2c845cea-5514-4411-b12a-3ad64703f115",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "b181ffaf-da06-4321-b296-f2ff63f1d30b"
        },
        "item": {
          "id": "4818d7a9-41b2-4069-8f58-2379f978a393",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "57b96824-8ad7-4663-90ca-9d0f242d8aa6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7402d5ca-7535-40d0-856d-5ad1c78a792e",
        "cursor": {
          "ref": "51a2a7b3-cf2f-418e-a450-efd0a162ba2f",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "0344bf5f-b21a-4bd7-919d-54f071de36aa"
        },
        "item": {
          "id": "7402d5ca-7535-40d0-856d-5ad1c78a792e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "2bcc085d-8b78-4070-907f-afe17d2c8411",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5a04b77-b0c7-4645-a735-61ce1bff2d28",
        "cursor": {
          "ref": "a1b4abdf-cd22-4807-9c3e-132c7398fcbc",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "86bdb2cd-6941-48a6-af25-ed9998ac8c13"
        },
        "item": {
          "id": "d5a04b77-b0c7-4645-a735-61ce1bff2d28",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "8fc7f041-70d5-403c-9411-3babbc87720f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35c31de0-1864-40a2-a5c2-a75635a513cb",
        "cursor": {
          "ref": "9f57cd4e-3fb3-4ce5-9942-3402dad313b4",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "98341682-71dd-4455-8c65-e750a7b3ce04"
        },
        "item": {
          "id": "35c31de0-1864-40a2-a5c2-a75635a513cb",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "3cae3712-6b6d-4c4a-a657-4e725114be8d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dfe065d-f2c4-4cae-bbb1-0d4f875ed70d",
        "cursor": {
          "ref": "ed2a25ab-ca01-4ef0-9839-62a5477d753f",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "10e3298b-525d-41b9-891f-3cb4b1fcc6fe"
        },
        "item": {
          "id": "7dfe065d-f2c4-4cae-bbb1-0d4f875ed70d",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "8db55104-96fc-4b83-96dc-63313cc3c500",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38942dc4-ab12-4405-9c5a-ae50a2990b27",
        "cursor": {
          "ref": "41bc484c-c609-4f1a-8a73-332f4a4a1926",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "4eabf41e-6764-4339-a21a-2df9a29a279a"
        },
        "item": {
          "id": "38942dc4-ab12-4405-9c5a-ae50a2990b27",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "76d9f21d-bff7-4c2a-a935-f8ad0236b407",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "350629d8-9cd9-4ba0-b125-313efd07e291",
        "cursor": {
          "ref": "2258ec81-f9b6-4d59-8f7e-6feb275186c6",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "42e3c38f-f779-444d-956c-89ec0ce50963"
        },
        "item": {
          "id": "350629d8-9cd9-4ba0-b125-313efd07e291",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "31855479-7bab-49b4-83a5-84c898398f99",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68a65c48-d388-46ea-a7de-e78c16b78ba8",
        "cursor": {
          "ref": "cd5710c6-9d02-4390-8e8e-0f4ebd296fca",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "62041a6f-637b-43ff-bd1d-cab2fa825145"
        },
        "item": {
          "id": "68a65c48-d388-46ea-a7de-e78c16b78ba8",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "145acbd7-5618-4a79-87ab-7da310edd298",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edb60ff1-0dcd-4fac-93eb-e302ccd11082",
        "cursor": {
          "ref": "50c0c7df-be93-4436-bcec-52b9bc054f8b",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "1bef61de-6270-4c6f-ad1b-a92885ee9d7e"
        },
        "item": {
          "id": "edb60ff1-0dcd-4fac-93eb-e302ccd11082",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "ae8d614d-0bd4-4b25-afc5-97aae52e059e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbeab016-f59f-437a-93f0-80c6ab17d2a8",
        "cursor": {
          "ref": "d77245af-e340-44c2-8979-3f0001d51fe1",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "c7035770-0cb2-40aa-a308-5946b12882e9"
        },
        "item": {
          "id": "cbeab016-f59f-437a-93f0-80c6ab17d2a8",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "babe92ca-e298-4b3e-9e53-2f6dd09a3159",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8df04ebe-01c3-4cfe-9077-22d3143e3a31",
        "cursor": {
          "ref": "c4fa8163-5e93-4a22-80fb-2e64b0f50fc8",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "26063dec-2443-435a-9f56-4b2df45c9edb"
        },
        "item": {
          "id": "8df04ebe-01c3-4cfe-9077-22d3143e3a31",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "f0ccde70-d483-4699-935d-441d9630071b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aee8d20e-97d1-42e6-b80d-39261379ca2d",
        "cursor": {
          "ref": "2b1633ed-380b-4aab-aca3-cb80834c0a00",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "d5689d88-db00-4ad6-92d3-a3b1429af062"
        },
        "item": {
          "id": "aee8d20e-97d1-42e6-b80d-39261379ca2d",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "20cc88a9-b2c6-449f-9c33-86ea35791bb0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a678509-a7f6-43cc-8717-9d7fb5e7c13c",
        "cursor": {
          "ref": "e47b9618-3d73-4e18-a8d9-d80064f6e172",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "5e656aee-03b1-431d-9efc-d94fb7114b64"
        },
        "item": {
          "id": "4a678509-a7f6-43cc-8717-9d7fb5e7c13c",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "c9c19866-a0bc-4c8b-9233-2d65371a30ed",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4769d868-c452-4f9b-8df6-d537a3251d31",
        "cursor": {
          "ref": "06e08699-96cf-4b75-96ba-614920a5a1bd",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "190dd881-cbaf-4e6f-812e-c82348e4f40d"
        },
        "item": {
          "id": "4769d868-c452-4f9b-8df6-d537a3251d31",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "29d41ce9-4bcb-4fac-80de-a0cc6adefd58",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8c0cbae-fffe-4cbe-ad2d-7470b9b2ca53",
        "cursor": {
          "ref": "a6fe67e2-b53b-41e1-8878-3fedc8e59667",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "f64e898e-d5fc-4c33-8c7e-ade68d5d5a9f"
        },
        "item": {
          "id": "c8c0cbae-fffe-4cbe-ad2d-7470b9b2ca53",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "654c484e-442c-4ba8-8200-5c2e93922bba",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea2d5849-0fb4-4d00-ac95-3d36649cc6ea",
        "cursor": {
          "ref": "5abe1bc3-d617-48f2-95fb-e5fbc82960c8",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "96e66764-49b8-4882-be0a-4c932a275c22"
        },
        "item": {
          "id": "ea2d5849-0fb4-4d00-ac95-3d36649cc6ea",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "8db91380-94ae-42ea-83b4-ee033fba765b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97b3ba3e-b15f-4d1a-acdb-0c8c0b0edeef",
        "cursor": {
          "ref": "a6e4d549-fdf4-4d69-8436-891e7f81be02",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "539725d1-5e39-4a8b-a974-19d4d16ccaeb"
        },
        "item": {
          "id": "97b3ba3e-b15f-4d1a-acdb-0c8c0b0edeef",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "ca180a23-32a7-46c5-9f7e-5349c129b309",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dfba446-316c-49ef-b710-576a58fd4408",
        "cursor": {
          "ref": "4ca14833-5986-4258-a29d-d364387f63f7",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "07f075ca-80a4-4772-9c2d-7ddda5927044"
        },
        "item": {
          "id": "6dfba446-316c-49ef-b710-576a58fd4408",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "a8a0056e-a837-4394-81d4-926970c391d9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95f81b7e-fdbd-4002-9e52-9c3fb9591dd4",
        "cursor": {
          "ref": "06b88488-4965-44f8-894d-784503098a8d",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "81160f88-e2ab-4e16-be34-a84f0e0a865f"
        },
        "item": {
          "id": "95f81b7e-fdbd-4002-9e52-9c3fb9591dd4",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "1fd21370-0c8c-44a2-ad0c-848b374c6076",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c540c68c-beb0-45c6-a83f-01c681c1a546",
        "cursor": {
          "ref": "f222a51b-c6a7-4ac1-806e-27c8a4020cec",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "f1f31077-fc89-447f-9736-1bda4f715703"
        },
        "item": {
          "id": "c540c68c-beb0-45c6-a83f-01c681c1a546",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "1d52e72b-2ae1-4bcb-b09e-545ec846a00f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12702fad-e7c1-4168-922d-94633171e6cf",
        "cursor": {
          "ref": "3cd49b55-a5b6-4d3f-8dc7-df813eec204d",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "76890821-866f-4b15-ac95-0a8a410ff00f"
        },
        "item": {
          "id": "12702fad-e7c1-4168-922d-94633171e6cf",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "86631868-12a7-4e00-9298-b2ecb978f6e1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48c3c3e9-2860-43c9-b3fc-2438754f9c43",
        "cursor": {
          "ref": "75e5c7e6-4a91-4715-acce-a9e467fac2b9",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "fc2de15e-2f2f-4a57-aa1a-f53a73d92393"
        },
        "item": {
          "id": "48c3c3e9-2860-43c9-b3fc-2438754f9c43",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "0fd277ff-7e2b-4a50-876e-8d00498a2a5d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f74ae79b-83e2-430f-a3d3-a62feb902a1c",
        "cursor": {
          "ref": "649e8b0c-76f1-4bfd-b9f9-571b4ede6c4e",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "f7e8ae16-df39-47e5-9481-8b4586763823"
        },
        "item": {
          "id": "f74ae79b-83e2-430f-a3d3-a62feb902a1c",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "824d7763-226f-48d1-b7c9-3fedd2109f26",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b72cdf94-b0b3-4d53-b84e-72d82fad63ca",
        "cursor": {
          "ref": "c4c1295a-4565-4580-9180-55da1f8ff6a6",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "ebe3d11a-bd38-41fc-bc5a-28040ff95742"
        },
        "item": {
          "id": "b72cdf94-b0b3-4d53-b84e-72d82fad63ca",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "b1599f8b-69f9-4729-8ce3-ceb975739301",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51828333-6c33-49d5-b32e-13220a13743c",
        "cursor": {
          "ref": "5756a634-4010-4c3b-af7b-f25331ce0c1b",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "9baa9d3c-34b4-4193-a88e-402416139da9"
        },
        "item": {
          "id": "51828333-6c33-49d5-b32e-13220a13743c",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "5c0e0424-d8ce-4799-be66-f1c3ab9dfa1e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a71256a-73b5-432e-8312-1b5415a631e0",
        "cursor": {
          "ref": "abc7fff1-48f6-4928-b13d-01eef8232ea3",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "84a38ada-456d-4ada-981c-72d7b0e346ba"
        },
        "item": {
          "id": "0a71256a-73b5-432e-8312-1b5415a631e0",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "214dcd8d-9864-4372-8216-71f0e34383d0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06bccac7-dab1-4383-b906-391c132611df",
        "cursor": {
          "ref": "cdd69981-ea41-4af8-9ae7-45ef84a195b8",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "e5d7cb71-3d77-40dd-99d7-cf71d148ef94"
        },
        "item": {
          "id": "06bccac7-dab1-4383-b906-391c132611df",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "cb451071-177b-4c8d-8259-8245cb48dd8b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c9afb51-3e7a-4d92-9636-f618fed3f070",
        "cursor": {
          "ref": "3ed2ee63-ff75-4bce-9131-c3bef07646af",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "aca867fb-57ab-4d9c-9267-7c1ac483ba0a"
        },
        "item": {
          "id": "2c9afb51-3e7a-4d92-9636-f618fed3f070",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "b188ee8c-398c-4f86-b763-27b36109b07d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00a7c790-3120-4655-b91b-98887e6a2301",
        "cursor": {
          "ref": "aa688dd1-1a25-4efa-ac95-13d9d89b2c63",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "17846a6f-e280-43bd-9d77-3ce6619abd82"
        },
        "item": {
          "id": "00a7c790-3120-4655-b91b-98887e6a2301",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "2d9c8761-da75-4e83-a4f8-d1ae04d4fc0c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6ac307b-5c51-4e40-ae27-2f8ddc6bcc3e",
        "cursor": {
          "ref": "06e6ef20-e209-4fd9-a33a-474cd6fb728d",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "69a972dc-f2bd-4216-9f87-715d73296673"
        },
        "item": {
          "id": "c6ac307b-5c51-4e40-ae27-2f8ddc6bcc3e",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "74a02652-6033-4501-b6e8-7e0657cafc26",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b7810b0-1f0a-4063-a3c5-d4c94503f40f",
        "cursor": {
          "ref": "c23a7620-61dc-4e99-8ee4-c3410065187b",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "d32143b6-e354-48e9-b31d-b64232fe1882"
        },
        "item": {
          "id": "3b7810b0-1f0a-4063-a3c5-d4c94503f40f",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "115677ca-a655-4d07-8cd6-7a9d9ceac138",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e773ce4e-51ce-4382-a34a-672d2858b0cd",
        "cursor": {
          "ref": "b5af4683-10a7-4967-8c51-c992c0f8c6ce",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "59a7be50-bbf3-4c93-ba4c-33b7c297ab4c"
        },
        "item": {
          "id": "e773ce4e-51ce-4382-a34a-672d2858b0cd",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "6a6586b9-60d7-400a-bf9f-9311c89bd5fa",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4c20303-94f7-49ab-a7ea-7f3b6fb51bef",
        "cursor": {
          "ref": "8cfcd16a-b040-4610-a453-7405702fc0ff",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "15191e3d-044f-4caf-b18f-56a1f947e795"
        },
        "item": {
          "id": "e4c20303-94f7-49ab-a7ea-7f3b6fb51bef",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "9a9a98ad-a486-4a64-8295-90205ae1fab9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d505f9f-d8d9-44c2-9bde-0d4c86f50e00",
        "cursor": {
          "ref": "6443ff22-b5b6-42e3-912d-072408e9d4c5",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "3f0bc388-2296-4184-8ae2-69de25a44e58"
        },
        "item": {
          "id": "9d505f9f-d8d9-44c2-9bde-0d4c86f50e00",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "0ae70b17-8ec1-494a-9aac-ed8f1bfd8623",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:101)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5810662-410f-463e-96bc-aa9d3405bb73",
        "cursor": {
          "ref": "615ccf8e-b567-402b-a4cf-a81f7aba02d6",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "b96e2eaf-75a4-4b51-add9-80c1485f9345"
        },
        "item": {
          "id": "d5810662-410f-463e-96bc-aa9d3405bb73",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "2b2ea534-82a2-4032-9b7d-fa8cfacce055",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "e0670b29-f18c-4e4d-b6e4-fb69fdb55aba",
        "cursor": {
          "ref": "0a9acdd8-e9cd-4843-928a-c53cd20977a0",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "507e3a42-360a-47df-bb39-86a848c30565"
        },
        "item": {
          "id": "e0670b29-f18c-4e4d-b6e4-fb69fdb55aba",
          "name": "credentials_issue"
        },
        "response": {
          "id": "b9c73f3f-0fe6-45d3-a22a-ea3d8844233b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 222,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:103)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:103)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:103)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:103)"
            }
          }
        ]
      },
      {
        "id": "1a3acc56-237a-4893-8a29-fd3d6e6e4b9b",
        "cursor": {
          "ref": "08f3e793-a1fa-4e98-981f-e9902ba63c3e",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "9dd444f8-28b0-4091-95d4-2514927b9c84"
        },
        "item": {
          "id": "1a3acc56-237a-4893-8a29-fd3d6e6e4b9b",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "44d46f8a-bb0d-4dfe-bab9-bd80a4084bb1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 77,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:104)"
            }
          }
        ]
      },
      {
        "id": "af0d33bd-8fcd-486d-914c-5e0bf21370da",
        "cursor": {
          "ref": "d08824ec-d58b-4890-8b23-5bc059236de2",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "d1a00859-effd-468f-bf3f-9a4e3af927f4"
        },
        "item": {
          "id": "af0d33bd-8fcd-486d-914c-5e0bf21370da",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "77666f1a-dcb8-441d-91f4-8e89a12bc967",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 68,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "171a3d2d-7d02-4a38-a92a-799f2099ab2b",
        "cursor": {
          "ref": "d568d4eb-4f6d-4fed-997c-858922849c76",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "d63e137f-13a7-476c-b7ef-52d00c4aa69f"
        },
        "item": {
          "id": "171a3d2d-7d02-4a38-a92a-799f2099ab2b",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "04ea1e59-6624-454a-bc8b-3589b3b87015",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "860b1080-13ca-4d66-8af9-7fca4bcd1534",
        "cursor": {
          "ref": "6b1f81e8-83d5-4ec4-884f-4e899ef5d714",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "030911b7-523e-49ce-aa0f-47cf4ca9bfe7"
        },
        "item": {
          "id": "860b1080-13ca-4d66-8af9-7fca4bcd1534",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "ab8c5330-070f-465b-9cd2-836e13bb7f41",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 68,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "c3df9fef-991a-453a-965e-ca79b2631e98",
        "cursor": {
          "ref": "ee1c00b6-6adb-4e00-bc1f-6e79a8cbc565",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "1db808c7-6dbe-46bb-9afe-662a327ef30f"
        },
        "item": {
          "id": "c3df9fef-991a-453a-965e-ca79b2631e98",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "93cb6e34-0003-4f77-ae0b-491ed504643d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 68,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          }
        ]
      },
      {
        "id": "6cc7eb4a-485b-44c0-9708-f83970519064",
        "cursor": {
          "ref": "210e02ca-3d54-4f75-b430-f7e72193d796",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "8c129e06-67e7-47b5-adca-bd0b9895ec45"
        },
        "item": {
          "id": "6cc7eb4a-485b-44c0-9708-f83970519064",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "fcc2bcd2-8cd9-42a2-852a-1796a66e2e7a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 68,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31e9b1f6-2fd3-4af2-b9a0-371056c44488",
        "cursor": {
          "ref": "8986f509-703a-4ef0-83f7-7df6476c08e6",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "2af06455-0284-46e2-9f01-bf96750ba870"
        },
        "item": {
          "id": "31e9b1f6-2fd3-4af2-b9a0-371056c44488",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "1b2f4875-7906-4adf-8858-155941f78683",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc95a54a-6cb5-49de-99b2-f78b4ec98149",
        "cursor": {
          "ref": "eb5a4e88-b7d8-4f4e-ab16-ab45240b799b",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "afd675da-c0a1-4ac1-9efe-b71481a456a1"
        },
        "item": {
          "id": "bc95a54a-6cb5-49de-99b2-f78b4ec98149",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "8bb45e0a-6731-478c-9419-9c33e5fda4f9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48227631-ffac-4d36-bbeb-24bf68dce2c5",
        "cursor": {
          "ref": "2ac8602f-827e-4150-aa7f-0456dde11400",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "043b4552-1fa5-42e1-8ddd-1fa02d7ef59e"
        },
        "item": {
          "id": "48227631-ffac-4d36-bbeb-24bf68dce2c5",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "e288e7aa-6b49-41d4-a273-0d0344665241",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5d7ab79-6b26-4730-b311-186b08e14732",
        "cursor": {
          "ref": "b314215c-c83b-47fa-aa30-ebfb442b2eba",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "49ce9e77-04b7-4097-8764-a249cf151dda"
        },
        "item": {
          "id": "f5d7ab79-6b26-4730-b311-186b08e14732",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "473e29d8-fe10-4597-806f-4762b4cca9d1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f54d1388-8ccf-481c-a356-0d926c8edc7d",
        "cursor": {
          "ref": "e599c52e-4346-43ff-a41c-4d16578b7b2a",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "4f9e57a0-7b72-4250-9d04-b121b916d141"
        },
        "item": {
          "id": "f54d1388-8ccf-481c-a356-0d926c8edc7d",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "7dde16c5-cc9c-47e2-b3f6-1c2fb9d62b35",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "452735ee-e2aa-4091-b4ab-5b5d52b530b2",
        "cursor": {
          "ref": "37bcd5e4-6389-47a2-b9ed-0ef7cf30962a",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "60380fb3-68b8-44de-b3d2-4daea5447f46"
        },
        "item": {
          "id": "452735ee-e2aa-4091-b4ab-5b5d52b530b2",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "a978b7c8-6801-4a64-b159-dd15b3bd57ab",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 68,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e490d473-93f4-45f9-819f-8fab118ccd8b",
        "cursor": {
          "ref": "a19a1156-2818-4dc5-9983-d0cf10803409",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "676e27ea-5714-4d99-bbbe-5ec282e92e3a"
        },
        "item": {
          "id": "e490d473-93f4-45f9-819f-8fab118ccd8b",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "ca903ba6-39cb-4077-b18f-5384b5e8355a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa926a40-0da0-4c46-9c07-6fda226c5daf",
        "cursor": {
          "ref": "c45bb004-a53e-44d4-bc2f-6a1b0e8924e7",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "f623dc48-6958-44b2-be3f-a9f1f27970f6"
        },
        "item": {
          "id": "aa926a40-0da0-4c46-9c07-6fda226c5daf",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "86f85c49-b6fa-4929-a2b5-542867391917",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 68,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab7e4502-7bbc-4b6a-b2f3-b8f5fd6bee20",
        "cursor": {
          "ref": "9441d06f-62d1-46b9-9d22-fe99c7756a5f",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "6ca57188-65ff-4697-bdc1-82c10a5716c0"
        },
        "item": {
          "id": "ab7e4502-7bbc-4b6a-b2f3-b8f5fd6bee20",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "5da845a0-4eac-4a77-9e1c-c4f2edc75061",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4818fedf-29fd-4b55-9c3e-54016bd08788",
        "cursor": {
          "ref": "1e87ff1e-32d4-41b8-be05-ad8e6c80fdfe",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "1f96dccd-fa55-4dc8-8bc4-a74048a31371"
        },
        "item": {
          "id": "4818fedf-29fd-4b55-9c3e-54016bd08788",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "8404b209-86e4-4398-a6dc-6713588b3251",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b45b495-dab2-4f5d-a52b-6fc02c363e80",
        "cursor": {
          "ref": "2628b3a7-9b82-4536-b2aa-f28bf19131dc",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "0dad5478-d80f-42ea-aa9d-b11fdaeb108f"
        },
        "item": {
          "id": "2b45b495-dab2-4f5d-a52b-6fc02c363e80",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "20442fe0-d45e-4b87-a55b-b26a3dcb042f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e241583-eac6-4282-b146-f9a467bf740c",
        "cursor": {
          "ref": "fed8fcd4-062c-49ab-a810-aba6cf73e3e8",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "8e5231f4-422d-45b0-b80c-5304bcef6d63"
        },
        "item": {
          "id": "7e241583-eac6-4282-b146-f9a467bf740c",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "cdeea874-eca0-42bb-a1cb-328e47dd0a09",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 68,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c46c1ff-e54e-4e2b-8b20-e4acb9c89b99",
        "cursor": {
          "ref": "b9550416-84cb-4758-b50c-19802b91f5a5",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "df0854d8-d285-434d-857e-41cfb98cce25"
        },
        "item": {
          "id": "9c46c1ff-e54e-4e2b-8b20-e4acb9c89b99",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "adccc27a-2709-4356-a340-4a19b18f2c0a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c734081-23df-4e4f-82c3-be64b70a006b",
        "cursor": {
          "ref": "bbb8166b-f88a-4d94-af52-85a026af91c5",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "b6bd2f41-b1a7-487f-bad1-70404251533e"
        },
        "item": {
          "id": "8c734081-23df-4e4f-82c3-be64b70a006b",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "58f086da-3d89-4ad8-8846-04f40afa1f47",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5987b96-92d8-45c4-974c-8ce0744715c0",
        "cursor": {
          "ref": "7e183d41-2362-4bb4-9474-58ae388fe6a4",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "19b4a1f1-6940-4d98-86db-0c78fc099fe9"
        },
        "item": {
          "id": "c5987b96-92d8-45c4-974c-8ce0744715c0",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "20b2e047-0a71-43f0-994e-c506df4ad0fe",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07943a8e-d6f6-4490-a955-37b7064692f5",
        "cursor": {
          "ref": "6f2da5b3-8198-4e31-bda4-ceff0828ac11",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "2e13369c-0deb-4271-b43a-f9d36c031dca"
        },
        "item": {
          "id": "07943a8e-d6f6-4490-a955-37b7064692f5",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "b8616f1a-8e33-40d2-8640-f68345c220db",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 68,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75e2a898-d669-4e17-9ebe-f1b18706fca7",
        "cursor": {
          "ref": "53810ed5-8ec1-4c53-b43e-4f34d9385c9b",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "471900cb-9627-4ceb-b641-90d8e586e419"
        },
        "item": {
          "id": "75e2a898-d669-4e17-9ebe-f1b18706fca7",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "0c5ca5e6-995e-4cfa-b58c-f44e1e8bf3f9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80983e7e-7d36-4e58-bfa4-3c244e5ae88f",
        "cursor": {
          "ref": "84badabc-b1ba-4717-b50a-8f8cf04cc12f",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "4a7979da-035d-4381-a8ca-e063c619f1f9"
        },
        "item": {
          "id": "80983e7e-7d36-4e58-bfa4-3c244e5ae88f",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "543805aa-41e1-4345-92f2-34461baf0764",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de0cda08-faf9-48d2-b567-7213ce9d28be",
        "cursor": {
          "ref": "95a97a58-e23b-4924-9b92-40f22b681391",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "cb917dd5-a3e4-4987-89c0-40ebecabb21e"
        },
        "item": {
          "id": "de0cda08-faf9-48d2-b567-7213ce9d28be",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "6c32b9fa-15ad-45e5-bdfd-052e1f075e75",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 68,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5df1b97-8e2c-4b75-a6cf-c253e74f52ee",
        "cursor": {
          "ref": "75e165e9-4266-4360-bf96-fca317790c30",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "198fcc74-e7fd-40a3-8c8f-52dc7314c59e"
        },
        "item": {
          "id": "c5df1b97-8e2c-4b75-a6cf-c253e74f52ee",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "2a607091-0e58-4d33-82fa-33b7aea4191b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 68,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67d7874e-d267-46f3-8c35-960fb8e4c13e",
        "cursor": {
          "ref": "cefd40cd-5bce-4ca8-a1e3-1bf7390b6186",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "c8e956cd-bdb8-4f95-ac78-ca0fbdaf762d"
        },
        "item": {
          "id": "67d7874e-d267-46f3-8c35-960fb8e4c13e",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "554720b7-86de-49bd-b8bb-974fc0c8405e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edcc5cc9-be8b-45d8-b66a-b7c7e95e9209",
        "cursor": {
          "ref": "d951af16-3267-4833-b6d9-6826bd4965fe",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "576bb565-0a0a-42aa-bfaf-713f804be2f2"
        },
        "item": {
          "id": "edcc5cc9-be8b-45d8-b66a-b7c7e95e9209",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "fcc2a9a4-59a3-4776-af8a-7a61df4ee518",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be4dadc4-7862-421f-86ea-a5b0c25b4694",
        "cursor": {
          "ref": "20ec701a-0a80-4105-a25c-33a5e9074a29",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "a6d16831-8f99-49e3-bfd6-6fd6f3390385"
        },
        "item": {
          "id": "be4dadc4-7862-421f-86ea-a5b0c25b4694",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "b65e96dc-a777-441b-b8e3-9633c12fb4ea",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 68,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c058914-cb34-4001-aee0-71c191471aad",
        "cursor": {
          "ref": "2fedc35b-aa40-4b70-9312-1b962a02683c",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "ad3cb52b-5f15-457a-bc1a-1c8ad7a4b95e"
        },
        "item": {
          "id": "6c058914-cb34-4001-aee0-71c191471aad",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "61c4d839-f21d-46e7-b937-1014fcf62377",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0c20b8f-f553-44a4-8042-7a41ee398ca7",
        "cursor": {
          "ref": "a0816c16-4c48-47da-a71a-af7be352e5d3",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "054ca0f3-34a7-435a-92f3-b847c6d59407"
        },
        "item": {
          "id": "c0c20b8f-f553-44a4-8042-7a41ee398ca7",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "0f2a6ce5-d0a2-4d0a-84f9-b625faff9a94",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a520f8c-aa6e-421a-9ef8-4dffe9570a1a",
        "cursor": {
          "ref": "ef583d5d-d3ec-4c9d-a6d3-014cc08a9ee7",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "948acd85-6e95-4807-8c00-622fe4efde60"
        },
        "item": {
          "id": "4a520f8c-aa6e-421a-9ef8-4dffe9570a1a",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "e56c96e8-577d-439e-aa36-703d0678c37e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bceb394a-9b9d-40a5-9b21-78b7ab9aa297",
        "cursor": {
          "ref": "8bceadc7-9b36-4cc8-ba01-9d2424539a7a",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "a13dce45-c60e-458b-a93a-e7b6a7c84e1c"
        },
        "item": {
          "id": "bceb394a-9b9d-40a5-9b21-78b7ab9aa297",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "955b6589-d339-4a11-b5a8-18fea4ea442b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 73,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc27bd4d-87a3-4411-a608-a3bd6702f880",
        "cursor": {
          "ref": "d9169ca8-7365-40d0-b312-17ed8bdbc3ab",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "9dcfe540-4f66-47ea-b0cf-f464c81e7d97"
        },
        "item": {
          "id": "bc27bd4d-87a3-4411-a608-a3bd6702f880",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "2e44eb73-ce01-49b3-9214-6694dab8a7db",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "736b5db2-0dd9-408c-93f2-66b39d8c67f9",
        "cursor": {
          "ref": "55e93c57-868c-4fe6-985a-7d40eba35388",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "6d4ff7a9-5a61-457b-a5e6-75678dedf847"
        },
        "item": {
          "id": "736b5db2-0dd9-408c-93f2-66b39d8c67f9",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "337af388-3f73-4f8f-a212-e519617672e6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b3fd49d-a3b1-4c46-9c52-5839a4a1067f",
        "cursor": {
          "ref": "73bc41f3-8a20-4c8c-b6bc-9b4b5676cd0e",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "de186328-49a0-4e9b-a12a-bb26152c4538"
        },
        "item": {
          "id": "8b3fd49d-a3b1-4c46-9c52-5839a4a1067f",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "5e34d2a0-4dd0-4c5a-a872-e84752385e1e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3e6f647-958b-4308-bf45-f81800e8134b",
        "cursor": {
          "ref": "773bd858-a396-4d15-9b5d-09e1f1851c9e",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "bd9667fd-a5dd-4dae-9111-017e3baec0e7"
        },
        "item": {
          "id": "d3e6f647-958b-4308-bf45-f81800e8134b",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "5560446c-d17c-4753-b4db-b6353b9b3493",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c403188f-59a5-4bed-9f41-1554d6344331",
        "cursor": {
          "ref": "faee3094-d3c8-4418-922c-2409fe955c92",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "81386498-4c54-41a1-b6eb-f9d44bef1e69"
        },
        "item": {
          "id": "c403188f-59a5-4bed-9f41-1554d6344331",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "1151905f-3fb5-4645-9876-aef145bac564",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "132f0ba5-629c-4ca7-84e4-9d4ccd747d48",
        "cursor": {
          "ref": "fcb0badb-c7b8-4ba2-af5b-099435747d31",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "80ea57e2-6865-4388-b830-bdc7a4c0468f"
        },
        "item": {
          "id": "132f0ba5-629c-4ca7-84e4-9d4ccd747d48",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "af56286a-a8cf-450c-afb1-04bdb057d59b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 68,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cafc7099-2da3-4aae-8b7a-c611ccc18780",
        "cursor": {
          "ref": "71cc5572-c20a-49f2-bc04-3c2f11449fde",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "48794911-7e20-40f5-a996-186a5da01c24"
        },
        "item": {
          "id": "cafc7099-2da3-4aae-8b7a-c611ccc18780",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "b7edd8de-90cc-4c4c-9690-2edd6b092a7b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 68,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "345b7078-c672-45a2-a5ea-d9501e1c160c",
        "cursor": {
          "ref": "02e7e306-b1df-4b8e-ac15-359d7097e8bf",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "06bc87ce-2823-43d0-9c5e-a0204028bb48"
        },
        "item": {
          "id": "345b7078-c672-45a2-a5ea-d9501e1c160c",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "673182e8-f38f-4abc-a7b3-4f1cea9df110",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6a233f2-8d0f-4968-9b7e-a6788ff8e91d",
        "cursor": {
          "ref": "76fc8d5e-c147-4039-88ad-886c7a708356",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "ede0b32e-ba40-479a-ace2-b6aa9df62e3a"
        },
        "item": {
          "id": "b6a233f2-8d0f-4968-9b7e-a6788ff8e91d",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "538e4b8c-bd15-4415-8b49-6fb88de53628",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 68,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d4de815-a197-4d2d-8f5a-2cfdde37c18b",
        "cursor": {
          "ref": "4a61f5cd-1f70-4f01-bf59-76fba4c67191",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "e8dc1fe3-f32f-4ec4-ace9-c8e34f06d508"
        },
        "item": {
          "id": "3d4de815-a197-4d2d-8f5a-2cfdde37c18b",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "280bb54e-bd9d-4219-86cb-d08519493647",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0eaff005-5b3b-4aa6-9e51-e5dd5f2f3db9",
        "cursor": {
          "ref": "4f47ec5a-f215-4f87-9942-acc9606acb5c",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "eb7cc1c7-82d6-4df4-93c2-14cf390cf26c"
        },
        "item": {
          "id": "0eaff005-5b3b-4aa6-9e51-e5dd5f2f3db9",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "6afa3b48-38fe-4a67-a024-f5bb7e33a27d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 68,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8113009-285e-4896-bbdb-0057306ad111",
        "cursor": {
          "ref": "4a7aa3ca-13aa-4fa5-a8ca-4e5d49dec9a2",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "d5df0775-adc8-4826-8106-7f01808ae873"
        },
        "item": {
          "id": "d8113009-285e-4896-bbdb-0057306ad111",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "000f04c8-f6da-45d0-90d2-20ff0b395136",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 68,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f7e9053-bdc6-4246-a8c0-bd545e2840d3",
        "cursor": {
          "ref": "18ed4e42-33b7-491f-b184-19ae9f337d76",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "10e01b29-7741-43fd-b0d2-1766b89b0c16"
        },
        "item": {
          "id": "4f7e9053-bdc6-4246-a8c0-bd545e2840d3",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "908487ae-8d0b-4af7-961d-cfb36c8bb78e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 68,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6c026a3-79ee-475f-beca-5cb745986904",
        "cursor": {
          "ref": "8432f54f-9bbf-46c2-937d-ae4a20ebe5b0",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "453c4f9b-2ea5-4eaf-8203-8973fe19b020"
        },
        "item": {
          "id": "c6c026a3-79ee-475f-beca-5cb745986904",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "ffa9bb76-a064-4098-ba75-6d976da5abb5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 68,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e4cd535-6610-497a-81ea-5a4a80cdd9e6",
        "cursor": {
          "ref": "c898e054-23a9-403a-96c3-d0e347ff6854",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "b46cefc1-d716-4c93-98bf-e87d0d4f24ab"
        },
        "item": {
          "id": "1e4cd535-6610-497a-81ea-5a4a80cdd9e6",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "179b0a3c-ac44-4502-9a34-9fdf1c7c42e2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 68,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0daae968-38e9-48af-bf51-cf94ff49782a",
        "cursor": {
          "ref": "38ae18d0-0e37-4225-9526-51e1e38fb598",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "236a67ce-9b85-4751-9035-a742cfe37cd3"
        },
        "item": {
          "id": "0daae968-38e9-48af-bf51-cf94ff49782a",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "ad95180d-9992-48e0-a47b-0e6b439b2f54",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8feec58c-60a1-4e9a-8742-41161fb220fc",
        "cursor": {
          "ref": "719b5f08-cd0f-4141-a89b-049eef7adc88",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "6cbcb8e8-b023-47c0-88a4-b533b1e9170c"
        },
        "item": {
          "id": "8feec58c-60a1-4e9a-8742-41161fb220fc",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "b76ed814-44a1-4093-8db1-630bb802272f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 68,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f51d9a17-af57-47cf-8bcc-97ba211010ee",
        "cursor": {
          "ref": "ce8e777e-8c0d-47d5-9a1b-b411b9bd68c8",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "63dae571-37b9-41f1-9ad3-c330f491a413"
        },
        "item": {
          "id": "f51d9a17-af57-47cf-8bcc-97ba211010ee",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "16c678db-f518-45b8-aa4f-dfb716c1289b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58d448a3-79f7-4341-8b4d-2541e66edc03",
        "cursor": {
          "ref": "1fc043d3-739d-4f7c-9c13-41a1be83b701",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "0405c465-863e-4b17-9015-86df79b96822"
        },
        "item": {
          "id": "58d448a3-79f7-4341-8b4d-2541e66edc03",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "1e180f40-4e18-4891-8410-4bbb1b4fcf10",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1dc55f4c-71e6-40a1-95d5-4798c21ee712",
        "cursor": {
          "ref": "96b52acd-76c5-42f1-bae6-ac7d37ca2417",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "eb368f9f-72fb-4142-abda-085991e76bfb"
        },
        "item": {
          "id": "1dc55f4c-71e6-40a1-95d5-4798c21ee712",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "bbe8388e-ee16-496f-9236-39e5d748af74",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 68,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f35237ed-82b6-4621-ac23-182179da49a7",
        "cursor": {
          "ref": "ab69e2f7-a53b-48b2-af88-3285e0220b6c",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "17eb3fb3-bd77-4120-832f-85c06e2900fe"
        },
        "item": {
          "id": "f35237ed-82b6-4621-ac23-182179da49a7",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "ba06bb7c-0262-418d-9b19-7933ce3e53bb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac232e03-9de1-4f4e-837b-e82ba4294d25",
        "cursor": {
          "ref": "6b899a4e-c358-465d-add7-7b2bb50950e7",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "b9f0eb9b-9502-4022-bcba-41791edf8220"
        },
        "item": {
          "id": "ac232e03-9de1-4f4e-837b-e82ba4294d25",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "663ea7fa-6964-4891-bd2b-fd38578248a2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 68,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cab6698c-1e5b-41aa-867f-dcd5b8dee422",
        "cursor": {
          "ref": "e3eabdec-213a-4fd5-9122-9d27f850779c",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "8a0b3a38-881e-4c33-beb2-96df6b9a10a8"
        },
        "item": {
          "id": "cab6698c-1e5b-41aa-867f-dcd5b8dee422",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "f43dc14b-4daf-42f0-8222-1d438834c748",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6158676f-193d-414f-b910-d33be388a299",
        "cursor": {
          "ref": "05037325-5a06-4445-b106-9ee83479d1d0",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "a52d9114-bebd-4fdc-b759-d7f0707637d9"
        },
        "item": {
          "id": "6158676f-193d-414f-b910-d33be388a299",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "cfeaa0ca-0343-4fbc-af86-11bc83fb88e8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee799e96-9a42-46b4-aa17-990f508e96dd",
        "cursor": {
          "ref": "4d62b60b-5eb9-4370-a012-afcc31435867",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "303e2bcd-dc4c-4ab6-ae47-6c0c17755300"
        },
        "item": {
          "id": "ee799e96-9a42-46b4-aa17-990f508e96dd",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "7e997924-ccb1-4c6b-b14e-673d9523c6c3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 68,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83309001-af45-45e0-a128-e09ee8b8ebb8",
        "cursor": {
          "ref": "4c6b48de-ba26-42e2-ac0c-1937eb3aef9d",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "85645509-8fa5-4920-93ef-cb2273de758a"
        },
        "item": {
          "id": "83309001-af45-45e0-a128-e09ee8b8ebb8",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "fe3d1470-66ca-4515-994a-19a5569681c3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91d50333-3d11-4b5f-8553-59b442b0a796",
        "cursor": {
          "ref": "521c81db-8049-45c5-927b-f15bf8cd3008",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "450799fc-51fd-4b11-92b1-2c9a983eb910"
        },
        "item": {
          "id": "91d50333-3d11-4b5f-8553-59b442b0a796",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "ea14a20e-19f6-48fd-bc18-cdccedc7fac3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb24fe12-b4a0-4f68-a1c6-777074a3d60f",
        "cursor": {
          "ref": "44f2517c-e0d6-4c4a-8bd9-449844e53e21",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "89ca10d5-75a4-437f-9a97-25bc86e6a256"
        },
        "item": {
          "id": "cb24fe12-b4a0-4f68-a1c6-777074a3d60f",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "622da02b-e1f0-48b4-a107-4dbbaea80a47",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d184d9e-6963-41d6-8ee9-d1b8d1093a75",
        "cursor": {
          "ref": "d81a1bac-3895-4ff9-8238-9e274a2dcfb6",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "6c336cb1-b02d-420b-a27c-67e8e1bafe71"
        },
        "item": {
          "id": "4d184d9e-6963-41d6-8ee9-d1b8d1093a75",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "aff420ba-0676-4e38-9b15-8584210f7ba4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ec186f7-c4b9-4592-990b-2a60f34fb07d",
        "cursor": {
          "ref": "354424d7-5488-4137-9f7d-cf6ab01f4e9c",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "b2819408-a06a-4fa9-9348-0f68cd1e0356"
        },
        "item": {
          "id": "1ec186f7-c4b9-4592-990b-2a60f34fb07d",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "b219df01-ca4b-475e-850f-3ca63ab95cc9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 68,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8876b37-fdc5-43d0-bc2e-402075e8efc6",
        "cursor": {
          "ref": "9c781c2f-7a12-404e-b7f0-ca89fd871036",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "0de992c4-bed8-473c-b549-ea49f1f49803"
        },
        "item": {
          "id": "a8876b37-fdc5-43d0-bc2e-402075e8efc6",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "aeb7260b-7a8f-44c2-9b6f-ebfa6f305d62",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9648248-5445-4935-a14e-d894c7cd2069",
        "cursor": {
          "ref": "1232c95a-36de-4528-b5c9-ddedf1dba947",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "0e679573-662a-4661-b405-69fc17584b95"
        },
        "item": {
          "id": "c9648248-5445-4935-a14e-d894c7cd2069",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "d601c2c0-bb74-4706-8e79-bcbc78a92a40",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0540385e-b36d-4a65-9f72-f741e869c64c",
        "cursor": {
          "ref": "c7c295a9-5b13-404f-b028-c904651783bb",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "86585bcb-34ed-46f5-97d9-e7899d10832d"
        },
        "item": {
          "id": "0540385e-b36d-4a65-9f72-f741e869c64c",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "a379b7a9-f11b-491b-837f-94a52748d1a6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ea5aa9f-5986-4d40-af61-3c189ea2e874",
        "cursor": {
          "ref": "15411b99-5240-4cca-b18e-8e0cab773d43",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "cc0fbcb0-5f20-47b6-a6ce-4dcffff9e155"
        },
        "item": {
          "id": "8ea5aa9f-5986-4d40-af61-3c189ea2e874",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "fbe3b9eb-6fbd-4b83-a527-6726eab8b074",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 68,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d63b0723-3db9-40ca-af02-e017f4ae0a70",
        "cursor": {
          "ref": "ca1ed769-2064-4432-8bad-8ff8c785bdb9",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "d6c0e23d-4702-4b67-8238-60a01b4758ca"
        },
        "item": {
          "id": "d63b0723-3db9-40ca-af02-e017f4ae0a70",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "4f14acec-fcfb-481c-9171-101e41128ecc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "676a8766-f2ee-4a38-8d48-da4e6906fcfd",
        "cursor": {
          "ref": "20333a8d-bedf-4af9-a78c-ed26729d0864",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "991b839e-c566-4e9d-b63a-90beb133abba"
        },
        "item": {
          "id": "676a8766-f2ee-4a38-8d48-da4e6906fcfd",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "4a4ff33d-f438-4c07-9179-5bcd5cced7f4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 68,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d56bfbd8-fec6-4c4f-a1bc-8e3e967e999b",
        "cursor": {
          "ref": "353fea5c-a675-4c31-8f58-073c9358e181",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "5255d252-acd5-4097-a86f-3d79ef110eed"
        },
        "item": {
          "id": "d56bfbd8-fec6-4c4f-a1bc-8e3e967e999b",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "68f07bdc-ac8b-4d19-9bfd-f1029d074fbc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 68,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a3256f2-df27-4cc6-b3f6-3aa5743053ee",
        "cursor": {
          "ref": "075f263b-f341-436f-bc5e-f547ae4f3d42",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "2b66aba7-d087-4a74-b68e-66338b8bd203"
        },
        "item": {
          "id": "9a3256f2-df27-4cc6-b3f6-3aa5743053ee",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "bef36909-9c14-4b08-b0de-80577388dee8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 68,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09e69f22-33fc-4901-9fed-61a4cddec2c9",
        "cursor": {
          "ref": "ae7c55f2-9c99-4682-a9eb-31bcb4a89814",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "e718fc75-5d20-46e6-80db-3fce6f31c075"
        },
        "item": {
          "id": "09e69f22-33fc-4901-9fed-61a4cddec2c9",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "e88bcc02-92dc-4148-89aa-d5650156e3b0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a29d896-6cbe-46cd-8489-646dfb7cbed4",
        "cursor": {
          "ref": "e323a83f-6b54-4aaf-a264-9156de729235",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "4c0078ff-ba33-4222-a663-098735f178f2"
        },
        "item": {
          "id": "9a29d896-6cbe-46cd-8489-646dfb7cbed4",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "56d2f20b-4547-4f51-8a10-615ad23d9f66",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e79226de-78e3-416a-8e26-f76f7917b801",
        "cursor": {
          "ref": "9cc7ef7c-2b73-43ab-8d77-8a886183b360",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "c8b47fee-2e20-4ac5-8c51-98bfe1c5f00d"
        },
        "item": {
          "id": "e79226de-78e3-416a-8e26-f76f7917b801",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "2c043cf8-fd20-4b34-9e87-30f0d8e9eee4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfeeeaa4-fdff-4657-a01d-65941816def8",
        "cursor": {
          "ref": "18a3b32b-6c22-495e-8870-06761c353e73",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "043cab30-177f-48b8-b17e-251cd7625b91"
        },
        "item": {
          "id": "dfeeeaa4-fdff-4657-a01d-65941816def8",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "f132a653-d5b5-4c53-9e52-64831c8d5b94",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f51b9671-b7be-4e10-8b2b-822ae98e0527",
        "cursor": {
          "ref": "814d127b-4152-460c-87e5-d51d4b21b9af",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "790f4f31-3aef-4221-880a-3a2b5960b4da"
        },
        "item": {
          "id": "f51b9671-b7be-4e10-8b2b-822ae98e0527",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "c90b3c5a-a604-42c7-8503-75974f41faad",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:179)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dac0bb6-87a8-4eb6-b425-97a8f666e313",
        "cursor": {
          "ref": "dfb846d2-5eeb-4c42-b18a-bd3fad079b11",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "b836629b-e7fa-4350-870f-12d5f69d134e"
        },
        "item": {
          "id": "6dac0bb6-87a8-4eb6-b425-97a8f666e313",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "00ab2cad-13fd-4d95-bb23-fa5b3a1e157f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 68,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c680b894-0626-469b-8ea2-53ee509baf6d",
        "cursor": {
          "ref": "af4052c9-8021-4ccd-bdee-4744a0c450cc",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "fb4ad288-3261-4ef1-8f0a-ad5bc88c0d97"
        },
        "item": {
          "id": "c680b894-0626-469b-8ea2-53ee509baf6d",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "d2c9c040-4260-439d-b13a-5948ec431bb3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79e082b5-dd97-43c8-b0d4-78042ccedb5a",
        "cursor": {
          "ref": "55649661-f67a-4dc1-b85d-1c6ded991ebd",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "ef81b94f-9e56-4e4c-b9b0-d521ea4d3f3c"
        },
        "item": {
          "id": "79e082b5-dd97-43c8-b0d4-78042ccedb5a",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "940a2d36-4a87-4f19-a14d-4e8934bb8f9b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1daf9b8-3787-4d93-9130-3fad103ee675",
        "cursor": {
          "ref": "76018f6b-cec4-4cf0-acb1-ada8110a8e04",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "266056b5-3004-46b1-9547-337a730857e0"
        },
        "item": {
          "id": "c1daf9b8-3787-4d93-9130-3fad103ee675",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "6126a828-8985-47b9-849d-c6de6f21784b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "465db460-ba35-4e31-bee9-94cf0879d590",
        "cursor": {
          "ref": "36b0e29f-22e1-4b64-a9b8-10b9c5f6635a",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "6bbbb943-af34-4975-8116-30ffc9f82a74"
        },
        "item": {
          "id": "465db460-ba35-4e31-bee9-94cf0879d590",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "0f61aef0-f11a-4af9-9d52-37e00eea9332",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3aaa8606-aa25-4db2-9c43-2f3c0c643624",
        "cursor": {
          "ref": "16438990-df37-48ac-be7d-ac64c34e9e1e",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "c6dc540a-f8b0-4b6c-81b6-bf37f668d0d7"
        },
        "item": {
          "id": "3aaa8606-aa25-4db2-9c43-2f3c0c643624",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "3ad45f7d-cefa-4ce8-9fd1-e6e6a3484ff5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 68,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e53932a-d9ad-4504-b1da-e2adc03c504d",
        "cursor": {
          "ref": "6a7fc266-c2d9-4b66-bed9-c3df1b15b0f6",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "b587429f-7f21-4b4e-8177-6300a10f9c6d"
        },
        "item": {
          "id": "2e53932a-d9ad-4504-b1da-e2adc03c504d",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "4d5658ea-dfee-4532-80eb-108a9fb08803",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 68,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "956fd38c-6b96-401f-a8af-a8f219fc8ccd",
        "cursor": {
          "ref": "1d20d927-842a-4172-b843-764a783716b8",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "80d9411d-063e-4db6-8453-e927b15b51fb"
        },
        "item": {
          "id": "956fd38c-6b96-401f-a8af-a8f219fc8ccd",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "eae202a5-2f50-40b7-bf77-8bed17bd7da8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c22756a-42ff-4fb4-aa06-da5154915919",
        "cursor": {
          "ref": "261d4b60-ca1b-46bf-86a9-206a7193bbc4",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "2897591b-5748-499d-9526-d9e3e507af26"
        },
        "item": {
          "id": "3c22756a-42ff-4fb4-aa06-da5154915919",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "20778e42-82da-4db9-a3d5-aeff7762bb9b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 68,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4529091d-918f-4ac5-ae38-ff45ea1a3e9e",
        "cursor": {
          "ref": "1d92e960-26ff-4ba7-bae5-2dc226274e03",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "181b878c-4d72-4693-b657-afe129c22e90"
        },
        "item": {
          "id": "4529091d-918f-4ac5-ae38-ff45ea1a3e9e",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "ee147c42-2fd3-4f12-a16b-e5aa9012879f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 68,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dae38893-a658-4b72-a916-1092a5903742",
        "cursor": {
          "ref": "9813f776-e889-4be1-b254-fbb6a4849a0a",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "3861a0e0-abf9-4bb6-a724-3eb74b850c7d"
        },
        "item": {
          "id": "dae38893-a658-4b72-a916-1092a5903742",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "30e9bad2-0604-4bf5-881c-ee2b44190e5b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31244238-c86c-41e6-914a-824839598a86",
        "cursor": {
          "ref": "e5cb8ab6-6248-41a1-b47c-de319f5780b7",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "a45486f9-52fa-4beb-8642-b539ee519597"
        },
        "item": {
          "id": "31244238-c86c-41e6-914a-824839598a86",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "9894c9e4-fa1a-4ba9-96bd-da9e01e7ac14",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8028493d-223e-4999-bc23-0c5a3cb32b89",
        "cursor": {
          "ref": "0e480d8b-7d26-4fda-8ac6-4414a5068cec",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "97724f3f-6884-436a-ad4d-845f78a4a471"
        },
        "item": {
          "id": "8028493d-223e-4999-bc23-0c5a3cb32b89",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "0384c9bd-63ba-4a3d-a563-d0bbe96c903c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa0844cf-205e-47c6-975e-54ada096be24",
        "cursor": {
          "ref": "4e3177cd-8219-40a6-9b6e-b83f7cc39a1c",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "867a8c0d-a803-425b-8977-01d8893dc44a"
        },
        "item": {
          "id": "aa0844cf-205e-47c6-975e-54ada096be24",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "1c22978f-f7d1-4acc-8db7-e3a05afb4120",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c982c835-f0e8-43bd-9164-9536ae9bcffe",
        "cursor": {
          "ref": "515778b8-8955-4ffd-900b-3532188024bf",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "92b3885a-d934-43ca-9fdb-db08852ea730"
        },
        "item": {
          "id": "c982c835-f0e8-43bd-9164-9536ae9bcffe",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "8a7487c4-3a80-46cc-a932-1d69bbc1da17",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 68,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0de56a21-7c83-4090-899d-ecba93a46b93",
        "cursor": {
          "ref": "8dc5d5a4-2afc-4604-ab3e-3efab2c1419a",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "f5be8c5e-33e7-4d60-aca8-0435934562ef"
        },
        "item": {
          "id": "0de56a21-7c83-4090-899d-ecba93a46b93",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "7bac148d-fc7a-4eb2-9f27-3f4d8cfd4aa0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24df8b5a-c540-437c-983e-01ac339e7d35",
        "cursor": {
          "ref": "fb1ba8de-f79e-4bf6-947c-fe0cbee4a588",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "57975c1d-263f-4685-9787-e0586d4ddad3"
        },
        "item": {
          "id": "24df8b5a-c540-437c-983e-01ac339e7d35",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "52b8c1d3-1ea8-401c-8ff0-570bba144a6c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 68,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d958406-8142-4508-855c-88b78be061aa",
        "cursor": {
          "ref": "85a276ef-4fa2-45bd-baec-2197c9bdbdbf",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "af90aab8-2e3a-4a4f-966f-3da302514d35"
        },
        "item": {
          "id": "5d958406-8142-4508-855c-88b78be061aa",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "e4fda257-92e7-489e-991a-b17a137a8d83",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3386d54-4b21-4c0a-b0d7-1406ed82fe5c",
        "cursor": {
          "ref": "24beb251-ffc5-42e1-9049-ef9057f66173",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "1e80ae82-b8f5-4644-a824-9af4fe2c8f0b"
        },
        "item": {
          "id": "d3386d54-4b21-4c0a-b0d7-1406ed82fe5c",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "a18944c5-6d2f-420c-ad17-411d777376c6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81e48a55-8b72-44c0-8355-3adf00f6a033",
        "cursor": {
          "ref": "fb2ec1e3-b2de-4b34-99dd-0c5e6b259680",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "60241409-9033-4cdd-ae2b-fc6d540ef48f"
        },
        "item": {
          "id": "81e48a55-8b72-44c0-8355-3adf00f6a033",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "22016bca-0fcd-4692-ae82-6749df6c0516",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8ee8df7-79d8-4cec-bbb2-9e0e13a97de1",
        "cursor": {
          "ref": "cfc42631-b5bf-400f-b0ff-e8c6462bd7e5",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "ea2066c1-c45a-498e-b629-2592fa8abf9e"
        },
        "item": {
          "id": "c8ee8df7-79d8-4cec-bbb2-9e0e13a97de1",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "916bf08a-b1df-4360-9cbd-c16c055e9f85",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0be3785c-9d3e-4286-836a-982c619532e9",
        "cursor": {
          "ref": "c5e0cd46-7659-405c-a4df-3801d0ec3820",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "ebd1fa32-4966-4315-8404-cbf5e43c7415"
        },
        "item": {
          "id": "0be3785c-9d3e-4286-836a-982c619532e9",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "bd6b9b8f-3582-45b1-95b3-7f08a86ce458",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c585b0f7-331a-4814-8c90-5d0cde0fc1ce",
        "cursor": {
          "ref": "aaa269e0-bd0f-45cf-8c43-34e177ff1ab5",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "c46c09b6-6130-4338-b763-bfbcf42d32e4"
        },
        "item": {
          "id": "c585b0f7-331a-4814-8c90-5d0cde0fc1ce",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "dc3717af-0a2c-43a8-8dba-b467912e5376",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bba3e801-2e11-40a7-8984-b4a0eb46e553",
        "cursor": {
          "ref": "92992a39-3620-4e3b-9df1-0c397080b19f",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "be247e6d-3d85-45f6-8288-fc6f49eafe0e"
        },
        "item": {
          "id": "bba3e801-2e11-40a7-8984-b4a0eb46e553",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "26faceeb-433d-4fc1-90ee-bcbcc33bc172",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 224,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b858a722-f11f-4fae-a654-f31af10989a5",
        "cursor": {
          "ref": "f92a749e-9d9b-4d8f-be76-0d7bdab739c6",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "f2495de5-1f11-407b-b422-2fc7a83d4d50"
        },
        "item": {
          "id": "b858a722-f11f-4fae-a654-f31af10989a5",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "ca02e9ac-d56a-477e-82f4-10c17041d3fa",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 76,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77a78072-c4df-43a9-a958-9affb1d8a4b0",
        "cursor": {
          "ref": "5adec06f-f230-426d-8389-7c21c8dcef92",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "92cc3051-3674-4d4e-854f-34743d37455d"
        },
        "item": {
          "id": "77a78072-c4df-43a9-a958-9affb1d8a4b0",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "dec57b71-9542-4c90-a7dc-36ac593c5928",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 68,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ce880b2-ce04-4e31-ad9e-32a582d0debc",
        "cursor": {
          "ref": "0438c2b8-1767-44bb-8d72-a024ab1158b1",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "a7e76502-a116-441a-9a3a-b565afe0cc7e"
        },
        "item": {
          "id": "2ce880b2-ce04-4e31-ad9e-32a582d0debc",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "74dddbe3-45be-4001-b042-9742449a8530",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47b23784-b38f-4921-8f73-a5313b9e9094",
        "cursor": {
          "ref": "e21e2d5b-c248-4706-9b2b-253f08c87093",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "40248f61-a70b-4d89-8fc1-8a0b0f018ba3"
        },
        "item": {
          "id": "47b23784-b38f-4921-8f73-a5313b9e9094",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "43130494-ce04-4e02-b766-e4af5d7b1de8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81bd42d0-286a-4814-9339-3ef6f07c37f9",
        "cursor": {
          "ref": "c3204d9f-206d-4ca3-8537-319954fc6f5a",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "f1b62475-eac3-41c5-8d50-ef9271c1046c"
        },
        "item": {
          "id": "81bd42d0-286a-4814-9339-3ef6f07c37f9",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "f529a384-9167-43da-9be6-71cc483c8366",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "499c0071-b56b-4d68-9275-f1969bbf564b",
        "cursor": {
          "ref": "889b0bf4-3fbe-43c6-893b-4c8c55595814",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "824ada7c-cbe4-4f42-93af-eee77dfb31c4"
        },
        "item": {
          "id": "499c0071-b56b-4d68-9275-f1969bbf564b",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "26d76741-508d-4af2-a770-1dc68a82a0b8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a198f7b-b08d-45e2-8b12-3f6bb11fa07c",
        "cursor": {
          "ref": "ad8777f6-1057-4eb4-9ca0-4c673fe8776d",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "064c7952-1324-4d59-b023-b16993ff6742"
        },
        "item": {
          "id": "3a198f7b-b08d-45e2-8b12-3f6bb11fa07c",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "e17c959b-8a1c-42fb-88bc-8ab8dd046d36",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a5d13ae-6843-4c67-91da-9f564d1e9062",
        "cursor": {
          "ref": "ddf3fe84-4b2e-45ab-b93c-4c8538f44959",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "4c6f9b42-af2a-40f8-99ca-daad097ddc01"
        },
        "item": {
          "id": "8a5d13ae-6843-4c67-91da-9f564d1e9062",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "098f3048-c6a2-436a-9a86-ff7e32a478fc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e7ede69-6174-4926-a6e7-da83f0a8bc11",
        "cursor": {
          "ref": "c62f7a61-cb81-40fa-a3bd-70f683e62d9b",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "b65f369a-755d-4232-8d64-cc291c301f24"
        },
        "item": {
          "id": "8e7ede69-6174-4926-a6e7-da83f0a8bc11",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "66bf6af7-6f40-4aa4-b0f3-dfe137ef8a8d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39d445d8-dd02-446f-8ff9-71341e6fdb52",
        "cursor": {
          "ref": "4e861f69-b272-4edc-ae11-0e7bfe514e2a",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "3ba87d4b-7cbf-4508-94ea-846379dd1ed0"
        },
        "item": {
          "id": "39d445d8-dd02-446f-8ff9-71341e6fdb52",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "7700e57e-8a56-4b50-9835-01c5d2f49934",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4ebc67d-b66e-4f25-9638-e15680a1ab1b",
        "cursor": {
          "ref": "d84cc5f3-1372-4ad3-8765-cdca720137a0",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "d97d0168-c57f-4e57-9a7a-461715ff92fe"
        },
        "item": {
          "id": "c4ebc67d-b66e-4f25-9638-e15680a1ab1b",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "ed4040a3-a476-4991-94d5-75dc5b3342a2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53a2c9a3-f230-47fc-b17b-174a2a5d4213",
        "cursor": {
          "ref": "21a19bfd-0126-4296-9d05-dc6b8c2d19fa",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "ab1838cb-f392-4476-af67-e98afe881f41"
        },
        "item": {
          "id": "53a2c9a3-f230-47fc-b17b-174a2a5d4213",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "0d31d794-d76b-44dc-ad49-bebea9615f19",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1924446e-127c-468d-a825-d7c92bc3eb0e",
        "cursor": {
          "ref": "365f6ef6-880b-479e-a691-c6acf8d442bf",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "c7501c7f-0bd1-43ef-908c-60c6c49dfa23"
        },
        "item": {
          "id": "1924446e-127c-468d-a825-d7c92bc3eb0e",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "d574b23f-05f7-4dfa-afa7-132b0c7819eb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f625a9f7-ba7c-4012-9aa7-ecb084386aa0",
        "cursor": {
          "ref": "99793e3f-5cde-4d71-b1fb-a5234481f8d2",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "559bc8ed-bae0-4ae3-b593-c4e5f7bcc466"
        },
        "item": {
          "id": "f625a9f7-ba7c-4012-9aa7-ecb084386aa0",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "75075bb4-4cbe-401f-9eac-4c179645d7aa",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f6de067-697c-4552-b4ba-c8b26402fdb4",
        "cursor": {
          "ref": "4cc2b2a4-77c6-4b2d-911d-e47d7e3c0eb2",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "834f54ff-77b5-4068-8d22-7d8207523e77"
        },
        "item": {
          "id": "2f6de067-697c-4552-b4ba-c8b26402fdb4",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "15f4538d-a16e-4075-9751-15ae1595b127",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "064f20cc-190d-43f0-9b9c-078b7080531b",
        "cursor": {
          "ref": "72134d12-a729-473e-acb0-cf76e7e26dca",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "e1910198-b930-4e9b-be92-9f744e208b01"
        },
        "item": {
          "id": "064f20cc-190d-43f0-9b9c-078b7080531b",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "d26f7cbb-a5c3-4b84-a243-9321f9e02658",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebaddf18-c731-4d8d-899d-0846e9f9bfed",
        "cursor": {
          "ref": "1929142e-2510-4a56-956b-585fe1bb6e5d",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "39113fb5-06bd-4797-9611-bcec8460d6c7"
        },
        "item": {
          "id": "ebaddf18-c731-4d8d-899d-0846e9f9bfed",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "f892e2e0-043c-4f1c-b432-0d8c4049a848",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aeaed80c-6b23-46b8-a6a4-41feba111c10",
        "cursor": {
          "ref": "c4f91cb4-f504-4a24-bbc4-c501a454850d",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "2ac8c833-677f-43ea-843c-43194b743e54"
        },
        "item": {
          "id": "aeaed80c-6b23-46b8-a6a4-41feba111c10",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "c45d4023-9f93-48a9-b3bf-a67cb67dcf7d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90df0d22-91be-47f2-90cf-659dce6a35c1",
        "cursor": {
          "ref": "0f3787ae-c6d1-4a27-b8d4-19c423aab137",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "f00a3f0d-7864-4780-be50-a2aa4df5d670"
        },
        "item": {
          "id": "90df0d22-91be-47f2-90cf-659dce6a35c1",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "649d1caf-2fff-4a01-81f7-9b3b47914c69",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a094abf-5828-49a4-8496-2ae69bf9a803",
        "cursor": {
          "ref": "c414d040-9d5d-47d8-9e99-017884c96025",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "dcf1700d-735b-400b-a07c-a50ca0068641"
        },
        "item": {
          "id": "9a094abf-5828-49a4-8496-2ae69bf9a803",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "873852f9-e19e-47c4-ab5f-3ded37a9aceb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c686dd5-e3c0-41fc-9f2d-1fefb55d96d1",
        "cursor": {
          "ref": "8d910f0d-9804-4f70-8728-9c9e55e56da3",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "277319e1-5cb7-4e6e-9ace-c766c12aa3f8"
        },
        "item": {
          "id": "2c686dd5-e3c0-41fc-9f2d-1fefb55d96d1",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "5c370c19-ce34-4399-93da-19e9e046c1a9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "605b24b6-b774-4ccd-b1b9-331d6cd7245b",
        "cursor": {
          "ref": "e73cc065-b22e-45a0-967a-cf423d2b5eb5",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "fe8ddd89-f94b-4831-8f28-67bc0795c496"
        },
        "item": {
          "id": "605b24b6-b774-4ccd-b1b9-331d6cd7245b",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "46b1f94b-e035-4f30-b7f2-82e4454d38e5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "956f60d5-b57f-45d5-8457-a5da0ef2e854",
        "cursor": {
          "ref": "ad358fb9-9f57-4a84-9ed7-5dbb9f550ea8",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "97cd5f37-beb1-4ae3-a84f-aab084f71c3e"
        },
        "item": {
          "id": "956f60d5-b57f-45d5-8457-a5da0ef2e854",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "f2e25ac0-aaf9-4f30-b50b-0b43128cec8c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20a77737-eee1-4a31-a32c-0ad24bdfc770",
        "cursor": {
          "ref": "8b5b0813-3a16-43ce-a592-0a8869d110c9",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "e6f081d3-3130-458d-84a8-d2f7d6474420"
        },
        "item": {
          "id": "20a77737-eee1-4a31-a32c-0ad24bdfc770",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "722ad78b-a033-4824-897d-efecaf1ce1a0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e94b61c3-3e0f-434b-869f-0d7f95adb647",
        "cursor": {
          "ref": "c4f06308-6c9f-4dd3-9097-9d362d54a293",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "0ed39b6c-d11c-470e-8aed-a9a7f6dda83b"
        },
        "item": {
          "id": "e94b61c3-3e0f-434b-869f-0d7f95adb647",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "f1f1939a-0b8f-4623-af0a-2c31c561b970",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1b17a4e-fb88-4b1a-af86-3f22c36d05c1",
        "cursor": {
          "ref": "703d771b-71cb-4d0c-b24c-c41727d63bcc",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "e09f4b80-b994-442e-90de-0eb4760caad0"
        },
        "item": {
          "id": "e1b17a4e-fb88-4b1a-af86-3f22c36d05c1",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "7d5e597d-b9cf-48d2-b09f-3f390194a0b9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14b81099-e824-4c21-8410-f48bf3744da9",
        "cursor": {
          "ref": "19e14d65-a145-4943-96a8-8c2435d06c48",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "c89238a3-80ec-4a72-b012-0714200db3e3"
        },
        "item": {
          "id": "14b81099-e824-4c21-8410-f48bf3744da9",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "5b5e4d0d-a88a-40e1-b79d-26167a7aeae6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c6c6933-d51a-4454-a114-2157f833992d",
        "cursor": {
          "ref": "1ea4f6bd-aa65-4570-83d2-4713e8753815",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "21e04146-2e7d-4297-b36f-5f5cbe3530e2"
        },
        "item": {
          "id": "9c6c6933-d51a-4454-a114-2157f833992d",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "26f16ffb-5983-40ca-b685-9780214a42ad",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28b5b8d3-fe8b-41b4-b380-98e99122e328",
        "cursor": {
          "ref": "ce47279e-7038-4d18-b04d-aa5bc647adaf",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "f583d9fe-4c15-484c-a207-63b26ff269c8"
        },
        "item": {
          "id": "28b5b8d3-fe8b-41b4-b380-98e99122e328",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "ca794885-2a66-4c50-8c2d-6fe6b903438e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0734b15-e450-4ed6-8dc9-c04f360c439e",
        "cursor": {
          "ref": "0aea9d7c-c31e-4d3d-b2d5-6611580f2cbe",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "ea885429-cf5a-48c8-8402-1e8896b15536"
        },
        "item": {
          "id": "a0734b15-e450-4ed6-8dc9-c04f360c439e",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "2f248d6b-e21e-4875-900f-070b6cd7d880",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c5b384e-73f1-4061-975a-558d7dd20e31",
        "cursor": {
          "ref": "98b27501-6013-4460-92b8-b2acba1d1414",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "ca89efd3-18e8-4145-adf7-c177a1494e18"
        },
        "item": {
          "id": "1c5b384e-73f1-4061-975a-558d7dd20e31",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "c54f851f-37b7-4797-b816-cdef78309cf0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0cb063c-4665-44f9-b56c-1e42382f5569",
        "cursor": {
          "ref": "7633f33d-56a4-4475-a533-91440fab1655",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "50b3b07b-ed1c-487c-9c27-425e25d62e27"
        },
        "item": {
          "id": "d0cb063c-4665-44f9-b56c-1e42382f5569",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "23310e7f-01cf-46ff-8a6c-0c8a8d1c5c2c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38421900-9cd9-45f9-a027-454ce0dd49a6",
        "cursor": {
          "ref": "76c28812-86bc-485d-8af1-fd6a9283e1ed",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "ba70e7ef-90e3-4b5d-af05-9c15da02e110"
        },
        "item": {
          "id": "38421900-9cd9-45f9-a027-454ce0dd49a6",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "a75aebcb-1673-457e-839a-36cc9549d9cc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6df1028-5718-4508-b979-15d507ce4018",
        "cursor": {
          "ref": "9b580677-0e8e-4a66-a6fc-9bbc821118e3",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "b0bd2533-04c5-4f4f-b858-953bf20a1f27"
        },
        "item": {
          "id": "d6df1028-5718-4508-b979-15d507ce4018",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "8b309283-3ab2-4716-8669-1de39067352f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e71a214-5d69-441c-8370-7e85aab6c30a",
        "cursor": {
          "ref": "b9340f16-d124-49c7-b601-3e136f377ec3",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "88d22f5b-ded4-4ff6-a221-6cd63616c2e1"
        },
        "item": {
          "id": "7e71a214-5d69-441c-8370-7e85aab6c30a",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "d0096b0b-c167-4beb-9f49-4269f6774796",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c5afbfa-7dbf-4abf-8c9d-35d045a2569c",
        "cursor": {
          "ref": "076b7c99-f4f3-4e69-bae0-7fa61f08bb31",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "67bc9e5d-e4c9-4814-a2ad-7d71fbedb9e1"
        },
        "item": {
          "id": "9c5afbfa-7dbf-4abf-8c9d-35d045a2569c",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "b270eb4f-dd2f-4a91-b26c-9c807ba7dc36",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33e3268a-1208-40f7-9775-c3c1b0817e33",
        "cursor": {
          "ref": "1228c009-bc85-4115-864a-32c2398fb39c",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "d9aa3266-c67b-461a-9605-cc02a2e8ae91"
        },
        "item": {
          "id": "33e3268a-1208-40f7-9775-c3c1b0817e33",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "038aedb6-4c95-4f95-88aa-ec909f5992fe",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51958703-4530-461b-9912-3c872c8251f6",
        "cursor": {
          "ref": "d52ca4b4-8a74-4094-b14c-a24b2ddb0d5e",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "ea891034-f052-4c46-9a5a-e18351c93b78"
        },
        "item": {
          "id": "51958703-4530-461b-9912-3c872c8251f6",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "0d55be0c-d335-4436-b534-9530b296a654",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c0adc48-04a1-4d02-9a98-ce540751ce0e",
        "cursor": {
          "ref": "eb4bac80-91bb-4a38-84b2-e2d081225a1a",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "ba4ff660-914c-40e8-a82d-8304bb4c21f7"
        },
        "item": {
          "id": "2c0adc48-04a1-4d02-9a98-ce540751ce0e",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "75baed33-a0a7-457d-96a0-2d13f07a6e51",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efc425e4-c465-44f6-b52f-f8d9abd53160",
        "cursor": {
          "ref": "578e853c-38ea-4c99-b4b5-e5434489a351",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "49b8d51e-02e2-4868-a792-e01a4f32fe06"
        },
        "item": {
          "id": "efc425e4-c465-44f6-b52f-f8d9abd53160",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "3d21fc0c-4d9c-402b-89fb-4e7ecc8e0dd3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "819c7acf-a536-4419-8723-c42878095813",
        "cursor": {
          "ref": "3a7213ef-a863-448a-8b04-c859454cbb09",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "958c6ce7-a7e1-4a4a-b024-b0b968241d48"
        },
        "item": {
          "id": "819c7acf-a536-4419-8723-c42878095813",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "2d2b369f-6469-41f1-837f-ed8bcf102b7d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37809a76-0c7a-4189-abed-cf3101a285ab",
        "cursor": {
          "ref": "0041b4f2-1faf-4f80-8a1f-4945dc9133c9",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "1cc30017-125a-4291-ad04-c3793eb7f9e7"
        },
        "item": {
          "id": "37809a76-0c7a-4189-abed-cf3101a285ab",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "9c9daf61-1e11-45e7-8dd8-e3caef250869",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "156cbb9c-3230-4143-9481-6a354924c397",
        "cursor": {
          "ref": "df4c742e-febc-4534-982b-e293834f2a9a",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "f309ab63-7111-4a97-a8b8-329365ebf034"
        },
        "item": {
          "id": "156cbb9c-3230-4143-9481-6a354924c397",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "0727445b-5138-4d9a-b793-b4bb7ba9d7d1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "081d6e8f-348b-49ef-8e7b-aedb7a7fa55f",
        "cursor": {
          "ref": "762da820-ad81-45a2-8ba0-d64aefcad97e",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "f09c5366-96c7-4e1a-9ef9-5a664d1ca7d0"
        },
        "item": {
          "id": "081d6e8f-348b-49ef-8e7b-aedb7a7fa55f",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "11c17610-259a-424e-8e17-21db34d14085",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1e238d6-58bf-49b6-94fe-040f0876c4f2",
        "cursor": {
          "ref": "bfd7d150-f4b4-4216-bb77-9cccf8aa0e06",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "0a6afe9b-b4c6-4443-a244-18224675e96f"
        },
        "item": {
          "id": "a1e238d6-58bf-49b6-94fe-040f0876c4f2",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "3aed77f6-0372-4482-907e-20675a24a081",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1309ae80-42cd-462c-9ac5-0fb912958cdf",
        "cursor": {
          "ref": "e387b9f9-3d9e-4492-93c8-8ee0119cd4a1",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "90a5a694-03fb-4445-a6f4-8629d61557f7"
        },
        "item": {
          "id": "1309ae80-42cd-462c-9ac5-0fb912958cdf",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "086b8755-76fd-4635-93b2-1be066ecd671",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fff36df4-acec-4d8e-a2bf-fa203c54959d",
        "cursor": {
          "ref": "eebf6061-5510-4537-a059-db061451d390",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "7a362ccd-6dcf-432e-b748-396b075797fa"
        },
        "item": {
          "id": "fff36df4-acec-4d8e-a2bf-fa203c54959d",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "ce298519-23ac-43f3-b47a-aebf117ea96a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a99fcbd-fd1b-4491-b6d3-b4e03053cc4f",
        "cursor": {
          "ref": "38e69e2c-6f8d-4114-9465-b5be7185bae3",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "9e6af467-0698-42c3-b3ef-a7d27f98543c"
        },
        "item": {
          "id": "8a99fcbd-fd1b-4491-b6d3-b4e03053cc4f",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "88819c1d-7326-4d10-97b7-3a6ad367b2f8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b8f2cd8-b7d2-48e1-b05d-8404d0972c33",
        "cursor": {
          "ref": "36a1936e-e7fd-4ff3-8699-c44ac7add034",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "66b9f07d-e407-4638-a0f7-e6c7290713d0"
        },
        "item": {
          "id": "9b8f2cd8-b7d2-48e1-b05d-8404d0972c33",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "b1aeb529-2748-41d7-8000-a191f6b83feb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b43b2b5e-bd7d-4a2d-921f-7f1ee94369cc",
        "cursor": {
          "ref": "d4c19162-671c-4901-b982-d680049e49d8",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "ca70328f-4a64-42e8-9e3c-5a303a63ebd7"
        },
        "item": {
          "id": "b43b2b5e-bd7d-4a2d-921f-7f1ee94369cc",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "2f38883e-1b7f-4132-a297-e34f08351b28",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37446cef-5205-4b77-9302-54e34d33339b",
        "cursor": {
          "ref": "97e0d302-4284-462d-8339-274caee2f462",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "8dbae698-9ca1-4b9c-ae6a-6489d81fd4f0"
        },
        "item": {
          "id": "37446cef-5205-4b77-9302-54e34d33339b",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "d8185b4e-93cb-467c-97a8-bc720421e8f7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:254)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f64d230-7240-484f-9ee4-e48f7298934c",
        "cursor": {
          "ref": "00c96c38-fe8d-4f71-9ab2-1545b39910a6",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "9f9f0a6b-66af-4522-a6ee-969fab17fdb0"
        },
        "item": {
          "id": "6f64d230-7240-484f-9ee4-e48f7298934c",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "44d7cee1-13f0-4896-a457-5e0e5663608d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 68,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:255)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0def35fe-1fe3-4ee6-a98d-fb7d25345cdf",
        "cursor": {
          "ref": "89fb23f6-ca59-4b48-b30a-855d79a894d1",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "6ab34f54-6f5f-46d5-96a6-738f5f35a2d2"
        },
        "item": {
          "id": "0def35fe-1fe3-4ee6-a98d-fb7d25345cdf",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "3b7e9d20-7b50-470a-ae0e-6998197a86cd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:256)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f73f380d-bae5-4d39-85d3-1228b831477e",
        "cursor": {
          "ref": "bc58dc84-d5d9-40c7-9c57-93d6df1d17d0",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "9d19c4f9-81b5-4bbb-a42e-2ca721c61ec5"
        },
        "item": {
          "id": "f73f380d-bae5-4d39-85d3-1228b831477e",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "edf83e1f-dd9a-4231-a170-7cebcfe1c662",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:257)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38768cf0-0db5-4503-a2c3-be48e0919dc9",
        "cursor": {
          "ref": "85410220-fabd-4af7-a446-965e712a451e",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "c2b657fa-fe70-4bd1-82a7-dc4ed65408b0"
        },
        "item": {
          "id": "38768cf0-0db5-4503-a2c3-be48e0919dc9",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "b773c99b-b12d-402d-bedc-388355c99a12",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:258)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63a6f96a-217f-4a02-a795-682f582193c8",
        "cursor": {
          "ref": "2f597761-e1a3-423d-96e0-e2e70ed4c960",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "e6c0702a-5e3f-4278-ab8a-49c23303a547"
        },
        "item": {
          "id": "63a6f96a-217f-4a02-a795-682f582193c8",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "5ab745e3-fe91-4a8e-a20f-4e7bc570712a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:259)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c58bc14-83b1-4ab1-9111-091d322b54b9",
        "cursor": {
          "ref": "8d89a923-6e44-428a-b037-5b9dad948672",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "83067a6a-40c9-4a44-abff-5f1a9c1d18c5"
        },
        "item": {
          "id": "6c58bc14-83b1-4ab1-9111-091d322b54b9",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "0186fd3f-33d3-4970-8920-87ba3d823e14",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:260)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94d2d0d5-87a5-4786-8bae-9eb361ec9ae8",
        "cursor": {
          "ref": "6fddf8be-4aa6-48a7-a4ec-5a4ef9f44213",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "b4753243-299d-47ba-92c2-d788930db6a5"
        },
        "item": {
          "id": "94d2d0d5-87a5-4786-8bae-9eb361ec9ae8",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "0550f341-426f-4e34-af84-eba79d4232dc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:261)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fadf49e1-d31e-4a6d-b724-1eaec26ab96c",
        "cursor": {
          "ref": "dc1ffb34-4293-4d8b-8f41-338c116570d8",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "cccc72c9-1944-437b-b697-c57f9658c398"
        },
        "item": {
          "id": "fadf49e1-d31e-4a6d-b724-1eaec26ab96c",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "0aca905f-6a9b-42d5-b124-91d696697602",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 75,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:262)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e5886e7-1ce6-4e7e-af0c-ddfc17bb9918",
        "cursor": {
          "ref": "e905103b-5e31-4e85-9141-bd94d199125a",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "01c7c8ae-2838-4ee1-ba1d-f53a30fa8e83"
        },
        "item": {
          "id": "6e5886e7-1ce6-4e7e-af0c-ddfc17bb9918",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "38611b33-c227-46a9-801f-9da4850366cd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:263)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6d8e2d7-a832-43dd-a90c-c1d2a6f3b343",
        "cursor": {
          "ref": "458f283d-9ff1-41f8-a1f8-ae735bfdb650",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "fa73ab1e-24fa-4982-8df1-2b473cc9f08b"
        },
        "item": {
          "id": "a6d8e2d7-a832-43dd-a90c-c1d2a6f3b343",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "ebf79b53-0432-4ede-ba3f-0f58450b0861",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:264)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8126b8da-6231-4689-9266-79b76d80dc6f",
        "cursor": {
          "ref": "1fbeb7b3-3a81-4f16-939b-591a754f1f66",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "ed84cae5-38ab-4689-965b-4b3695381e63"
        },
        "item": {
          "id": "8126b8da-6231-4689-9266-79b76d80dc6f",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "1c1ab16f-c323-4eb4-9558-2c81782c7d5b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:265)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33c76627-ddfd-435f-a1a2-50340ddff15c",
        "cursor": {
          "ref": "26591af2-65c8-4374-91e7-f14ef5565fbd",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "b0a9a1c7-4f40-49e5-868f-d9fc2bb620af"
        },
        "item": {
          "id": "33c76627-ddfd-435f-a1a2-50340ddff15c",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "57c4cd3f-a160-49b5-a578-6c17ef99b120",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:266)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea77ebab-2ed3-4e87-ab6f-885fe579f6f2",
        "cursor": {
          "ref": "d84bcbc2-874b-47c1-9a45-8d14a84929ef",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "6f8bfbe7-7a6d-49d2-b89d-c7c3fc044198"
        },
        "item": {
          "id": "ea77ebab-2ed3-4e87-ab6f-885fe579f6f2",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "afff4984-485f-4ca9-a0a9-768e69e2d87a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:267)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0633b444-f938-4a0e-9766-05a02e6a993e",
        "cursor": {
          "ref": "7609ca07-f5ff-4e2d-92a9-9385e594e555",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "666a5028-9d42-445d-8ca2-04ce44379a27"
        },
        "item": {
          "id": "0633b444-f938-4a0e-9766-05a02e6a993e",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "131faa4b-a32b-4ac2-9a5d-1d5069f7850b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:268)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08d13a10-938a-46f5-bee3-ea2761ffb61c",
        "cursor": {
          "ref": "4652693f-c0ca-4243-b90b-ffa5e3c969df",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "a2722890-eb54-4486-8f50-cd04ea653471"
        },
        "item": {
          "id": "08d13a10-938a-46f5-bee3-ea2761ffb61c",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "05aefdf4-e98d-46d2-94af-98573ee96448",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:269)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fb9d9a4-6f22-4c1f-965f-d5fe06d522af",
        "cursor": {
          "ref": "ef5cfa60-fcbe-4434-a17d-045715952b16",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "628558d5-37e3-4853-b2ed-586a52a46f5c"
        },
        "item": {
          "id": "3fb9d9a4-6f22-4c1f-965f-d5fe06d522af",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "3cb64666-486d-4f47-b8fd-6a8882cd4cf9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:270)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf1755ac-b27f-437a-b28a-48643044c227",
        "cursor": {
          "ref": "270d1ee7-fc14-4f3b-9264-bb05b6737d5e",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "0f41d67d-f438-4749-9f90-179157e4f0c8"
        },
        "item": {
          "id": "cf1755ac-b27f-437a-b28a-48643044c227",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "e6b9ab45-b465-4bc3-ac13-0575684acacd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:271)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "390a5cf8-9e2d-499d-839e-379aa6d90d75",
        "cursor": {
          "ref": "e9272a18-b487-42ee-9835-8a764e3bfcf6",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "95e36f55-185c-48ed-923f-7f273de63bfa"
        },
        "item": {
          "id": "390a5cf8-9e2d-499d-839e-379aa6d90d75",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "8593fe70-2e91-4dca-a73e-9af8e6931e25",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 72,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:272)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d9db42c-5f46-42d9-aa5b-73e015590390",
        "cursor": {
          "ref": "9aca502f-5cb4-4835-b0fe-a4c5de6befbf",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "3e329c4d-a762-4575-a95a-e0ae5d606d17"
        },
        "item": {
          "id": "1d9db42c-5f46-42d9-aa5b-73e015590390",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "fb3b047a-4d5d-466d-83e6-4986a7418c34",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:273)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebeae56e-49ca-4469-bbda-87fc861205e3",
        "cursor": {
          "ref": "71d33e2f-8eb7-4e42-a96c-09a7aabfdbfb",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "7f5cba4d-9174-4227-b50f-63555513427f"
        },
        "item": {
          "id": "ebeae56e-49ca-4469-bbda-87fc861205e3",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "ea2573b6-f2f9-43cb-a7c6-77495e8fabd9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:274)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fcb2dc5-7d84-46e1-b8f3-431e47df079e",
        "cursor": {
          "ref": "15dad549-99d9-44fd-bc2e-04c74b5d8083",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "08afb1d0-fc78-451a-a1ed-5434c183a2f6"
        },
        "item": {
          "id": "8fcb2dc5-7d84-46e1-b8f3-431e47df079e",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "7f024a39-51ed-4251-8e4e-2daa9cdf4bbd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:275)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29c737eb-6229-4561-b029-577c66e05f2d",
        "cursor": {
          "ref": "2db1b14c-cf46-4954-8451-113a94f1bb68",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "5d600bdc-9ce8-40ce-9ca7-aec1824e932e"
        },
        "item": {
          "id": "29c737eb-6229-4561-b029-577c66e05f2d",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "bc10afac-f2ad-42c3-b066-43cf4240f58d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:276)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "855158a8-7ee5-4284-a97c-a03c8ca15894",
        "cursor": {
          "ref": "d1476b7e-dcdd-4bf4-bc72-26fee331ab5c",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "82a0b547-9a0e-42cc-8c9c-22efd18632ed"
        },
        "item": {
          "id": "855158a8-7ee5-4284-a97c-a03c8ca15894",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "82bc3496-b97e-41f0-a304-9c87d9e5372d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:277)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "084f6461-d1d7-4ff6-a838-878b23334a4a",
        "cursor": {
          "ref": "13063a21-e7bd-48d4-a5a0-a8fd1e29bcb3",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "9fe237e8-614f-4625-b920-edd05bdcf20f"
        },
        "item": {
          "id": "084f6461-d1d7-4ff6-a838-878b23334a4a",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "f0843b2b-3126-4119-af46-6075b9a60c7a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:278)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:278)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "a8caccb1-edd2-4ab2-9b2f-61764851dfa3",
        "cursor": {
          "ref": "7bf8be05-d996-4774-91c4-ef83237a5aa7",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "29c2fe9c-d61c-4f23-967d-8d344a2d2e3a"
        },
        "item": {
          "id": "a8caccb1-edd2-4ab2-9b2f-61764851dfa3",
          "name": "credentials_verify"
        },
        "response": {
          "id": "dc984d3f-572a-4ab0-aff0-574ce39992f3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:279)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:279)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:279)"
            }
          }
        ]
      },
      {
        "id": "93db0826-5457-4bd3-a902-7cf3a6454e5d",
        "cursor": {
          "ref": "1ca7161e-4b0b-4264-9a5c-f8649c5d96e2",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "ac70cfa1-bf45-4027-b310-f3e6c5340754"
        },
        "item": {
          "id": "93db0826-5457-4bd3-a902-7cf3a6454e5d",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "35901b7a-849e-40be-959b-6e515dbed9ab",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:280)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:280)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:280)"
            }
          }
        ]
      },
      {
        "id": "d8e0448d-d17f-43d3-bbdd-f6305098f691",
        "cursor": {
          "ref": "de7e6944-1697-4dfd-b402-5e62e9d958d8",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "f6715c7a-69af-4dee-abca-1e813577c59c"
        },
        "item": {
          "id": "d8e0448d-d17f-43d3-bbdd-f6305098f691",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "6e98bc53-bbde-470a-8683-44096a795792",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 67,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8e0448d-d17f-43d3-bbdd-f6305098f691",
        "cursor": {
          "ref": "de7e6944-1697-4dfd-b402-5e62e9d958d8",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "f6715c7a-69af-4dee-abca-1e813577c59c"
        },
        "item": {
          "id": "d8e0448d-d17f-43d3-bbdd-f6305098f691",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "6e98bc53-bbde-470a-8683-44096a795792",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 67,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb27024a-6f9b-46f3-a9b8-cc50ac66e841",
        "cursor": {
          "ref": "41f27af5-dc93-4a41-956a-3bcea7762fee",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "86211c20-b1ec-4cc2-8f9a-8380ee103c6b"
        },
        "item": {
          "id": "fb27024a-6f9b-46f3-a9b8-cc50ac66e841",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "07a4f729-9762-4913-8f55-8c6c5ad3100d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:282)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a094721-2be2-45e5-8e56-0ed002708440",
        "cursor": {
          "ref": "f7cf7740-5384-424d-b145-5c9e767f4294",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "9656489c-51fe-49a5-931d-3b8263d6ee99"
        },
        "item": {
          "id": "7a094721-2be2-45e5-8e56-0ed002708440",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "7d5cdc2c-adc8-4803-806b-e6e8d0c25ce4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:283)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}