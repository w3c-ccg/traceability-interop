{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "af47b548-3eda-418b-ad0d-35e0c23356cc",
        "name": "Clear Cache",
        "item": [
          {
            "id": "26a17021-0908-43ba-bbf4-a61bd004c81d",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "fa71795d-ab7b-44c6-813a-147dfab02af4",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "516be3c7-fc52-42e2-bb26-b53512bb5059"
                }
              }
            ]
          },
          {
            "id": "1aaeaa2f-60ea-46b0-87ea-b3641e9c3119",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "11764ff4-8a88-42d1-b99e-40b6fd126b3b",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "898a3d21-9a62-4193-80cd-eeafdc426319"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "49685050-9792-4140-b835-b141ca1bdbf7",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "b7233623-db28-44ed-b81b-c0beccd09095",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d9b61396-fc11-43b7-b86f-7d835ef24961",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b29b00da-167b-4ee4-862d-f95fb1e3747c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8186e7ef-1c2c-4dbd-926b-d71aed76da91"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3897d48d-d429-4eb6-bad7-bb817051f527",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1efa67b0-075c-4dc0-bd7f-77dfafe03d3c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "5119e850-5103-4720-bf66-636fb644fb26",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "317b7cc8-5d6e-4ff6-814c-751dcbbd6160"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "28e69f5d-656c-424f-a4d3-65efe91bfcf3",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "6d20ed16-cb77-4de2-9389-a04cb982de57"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a12ca1bc-03b5-4a40-b37e-42771fc65964",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6779dc9d-fdad-44eb-a8c5-d41a299ff137"
            }
          }
        ]
      },
      {
        "id": "f2071857-4ee6-492e-b4dd-70c21da09e80",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "533bb08f-973c-4a9c-840e-0356e8326839",
            "name": "Negative Testing",
            "item": [
              {
                "id": "dd03aa1a-fca1-4fec-afd4-a1f6f03c1d4b",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "18f08930-7f5f-4f1f-a1c4-cdb9a5a97be1",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "904f5668-55db-4e4a-b452-535223f160d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "29b3d190-19d6-4cd6-8f4d-33e343637e61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df99c441-10e1-40bf-9c97-421a16bb97db",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f31c8df9-ddc5-4346-a636-d685bf32147a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8ea2d0d0-8df7-4009-b9f7-9a27e887e17a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d58ff578-6e87-4290-8cf3-9ed3b44a5822",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e66e1e9d-a02d-4f82-a114-ce54f6c95198",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4290e294-597e-4b9d-91b7-5f97f9e22587"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "74a26e0c-ecc8-4192-a9da-6c87c37037c1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "61807207-735b-457e-9859-2e4b4245422c",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd07368c-6c1d-4a2e-9fc5-e7682b2bda85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4cf47740-5ff9-4490-870c-c98c4af9cea7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad99eb6b-f534-4671-80cc-92efbe5ddca6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d42137f-a8ed-4fe3-8467-450d0ddec71c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d28a8b5-cf3f-4616-aeb4-cc013b8adb7f",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7370e4b-9ef8-4a7d-97fb-9d7a99b308f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "244f092a-746f-4d56-a029-4e5651c849da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f11f12c-3042-4925-95dd-2717224b378a",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "85bbe8a5-957b-4812-97da-321e12a52914"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "4199851f-1944-405f-88a5-ca7004dc232e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c2e19143-7574-485e-bd4a-e30400a9a5c2",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8647f71b-14a0-4c34-8ff6-90aadccb2385",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "2a16a0a5-9719-40c0-9f2c-6a399441e56b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a620ae27-0aba-4447-8f17-796135fca57b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "84c10786-7759-43ec-8890-072fd326e8ae"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a42afe8e-999d-4886-9800-2ba096dfb77c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "326cf16e-85f3-433a-8b0a-c83a92ed1200"
            }
          }
        ]
      },
      {
        "id": "adc111ab-f688-4912-abd6-0337e0dbd9ab",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "e0d214ca-10a8-4135-8a62-716d8967ba54",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5dae2f45-8e40-4b24-b24f-7dcfcbd810e6",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "0e080399-182c-4596-89b2-2839d5c910be",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00422063-da6c-4564-888a-158402dc0e1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d726bcc-7aef-4137-bcfa-2c4bf691ea88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16eb57b8-03b6-4ae8-9de7-41be1371eff1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "04b5cef9-42cd-4462-9d65-08d494aad97f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a56bd82-224e-4e91-b50e-652dbe7c120f",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "700daa28-c344-491a-a969-5a87f945ef92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "583e0195-7dde-4374-939a-380d8d303a7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "878689b0-a3b3-430a-843b-5466ee313046",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7e23f1d3-aa68-4f35-84ad-b65e2432f31f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92589a07-79d3-455b-89fd-d62dc3203326",
                    "name": "credentials_issue:credential.@context:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "354816b8-21b9-4656-b832-97e36fdd895d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85313c59-2a31-40cc-967c-6dfd29a286ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a77f40c3-e4ac-4acc-854f-b6634872084d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must contain \"https://w3id.org/traceability/v1\"",
                            "    req.credential[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7bd5d3dc-7595-4345-8c3a-b01bbd640aea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92169717-3ef4-4c8a-8b37-672c9b6834dc",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2529826-5e48-4724-b7c7-1efadc969d27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7a7bd6b-37d4-45ab-9f44-b172a5618e63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bbcb5d7-a78c-47c3-85d1-e8b71af01535",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "61f334e7-30c6-43c2-91ab-390ccc7ca6bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b318481-7d8a-4ee8-8f30-876fff3b4037",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "018ba4cb-042c-487d-b5cc-615371b50bf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5093c004-0083-4beb-9188-cf53134ea0dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaf3b49f-723f-4b2d-a314-e267b7025d04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "656974d0-a6eb-419a-97a9-e7aa13876312"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac40158e-0d0d-4a0e-a5bd-3b98e08600bd",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9c57bae-80d8-40a9-b0e8-863b12ef99d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7df24d1-97c6-4e7f-a433-fb8f95410a03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e5c72e0-fb53-4cae-a86f-575fbe5acc31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "03ecf373-d130-42dc-9efb-4574ed193895"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca9b6978-e519-4201-a4c4-314c625b77a4",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d209e1b5-4126-4aa3-b763-03a8b9b8570e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eff92dd2-773c-4444-94fc-cbf6fa59c48d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bf445f4-c385-4670-b52d-acb6f1bbc997",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b428b1ab-d718-4d61-abac-90d1ed2540b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccb05096-4531-4ecc-b4fd-31dd2cf1d245",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0b58ed6-d5bb-41a1-bdc6-2bb1f9384f0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65f2f8d9-a58c-4dd9-a1ac-69073a56c9d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45d965b5-478d-4a73-a849-9c926131dda1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4079b44c-6998-48d5-9e41-fae9b58e6bb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "213f7783-b2fc-47dc-9f0e-abbdbf7522db",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b6485bb-41fd-434a-bd56-14f5da0bb5d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f269add-eb04-4139-be70-9b1a2c2eb83e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff89cc79-e861-43b3-9d48-f5898370fef8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "28626b5c-9608-4f0e-a5bd-60feb1ebc309"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86f82424-1199-45e1-a682-bb99aa00b678",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55ece62b-3239-49e9-ad47-da16dc712e4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a85ff1b-7408-48f5-88f5-2f84665ed53c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37db2da1-a2cf-42b9-bef2-7bc2b9459b5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "48e871a6-b4e7-4687-883d-c8f67ea1922b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52c68f03-18ba-4b27-a671-74d852e80585",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2e1bbd9-ddc9-49be-a8f9-4768cb9e9143",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e613dcdc-4de5-453b-bb54-86711707a1a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "279a7299-1f23-4ef6-82f9-411b1abcbd66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "412d92fa-e855-4649-b265-a32b19b82960"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d74ff95f-3d6b-44bb-8497-00f63d37a3e5",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8538f985-6e9e-4789-ba99-3d7d3a6802dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "001d7959-a7ad-4c5a-92c9-d8a1ed942cb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fd93e74-3644-4164-8379-28ecadb7f644",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fd80f45f-cec9-4db3-9abe-dcc2ee7adeda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1437fcc-4e05-4829-ab54-b96726e36716",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c73c966-d43d-42fc-9d58-815104204cfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53c52537-1287-4918-a712-23c6fe765659"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6485a19c-1268-4652-af02-3de1b8384468",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3a0af93d-f1d6-42f5-b05c-b1c1014eee4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac5d48e1-7d9a-4f6c-b949-4875f6c615b8",
                    "name": "credentials_issue:credential.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ec7585c-987b-4afe-91b2-b71d7ea4b786",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e086edc-ee99-41d3-a58d-fdbd05de598d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a0214de-c02b-41a0-80bd-bc25215d7934",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.id is a required property",
                            "    delete req.credential.id;",
                            "}));"
                          ],
                          "_lastExecutionId": "01ea98f7-0041-4c31-bf20-22c8e47e41dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41e9613b-8e90-430e-a129-804801f55590",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93a9b635-1935-4f8d-83e5-f83d017291b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "637e3d37-5d02-40e0-8854-a76e235d20e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53e55472-77d8-49ce-8a93-70a3897acd4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4790aefd-630b-474f-b92b-c624d9d3852b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e46857a8-8233-4dc9-b4cf-0594d6d4c8f7",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "861f9f07-bb41-4e49-9bab-6edc19e36734",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1165a035-7a4b-4af6-9ce2-782ad64218cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae358289-2ff1-494c-98b1-b11c895b5edd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3d03b578-f9ee-44c9-bb59-06aa3644cee2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68fcb7e4-9bcd-473e-adf0-8e18abc7ab61",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f94c8465-0e73-4158-96a3-23570945fc38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b2f481d-fcac-40e3-92f7-418e1f6eccc8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bac79375-a20b-4d73-bf45-28122c2f50a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "28820b78-2247-4fff-bff0-a9f38b210900"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0aeff3b-f748-42c9-b464-ac551677e58b",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e46ec90-b208-4cd5-8dc4-2f8d3408d85e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dafac299-15c6-4fc2-8b0f-620c1b29c906"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "567a6e67-0570-439e-9e9a-4a4948bff4aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2a9828a2-b6f4-4784-b7de-4b3ec629aeeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9f467fb-bebd-4c52-8002-3e7afd2698dc",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6739500d-8f23-4a84-a55d-87bdde586fe2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cc00eaf-e491-41dc-9e39-750cb20c7399"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4f58e56-b9cd-4c68-8915-f6500dc42da0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d2ca9fe8-0916-4a93-be9a-ab7e9d65aacc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7cc19dc-b9ed-4b25-9f7b-796e70eb1d02",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c70934e-0466-49f6-b8a6-2de774a99d4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "470c3a0d-689c-4fab-83c2-653d6c5e5ae0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce2b8f67-8959-4858-95ff-68fc8397c252",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "9ea709b9-209b-46d6-91f9-902d30c4a381"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9caf431b-16ae-4431-863a-aa43f31d5719",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a5f09b3-5ee2-422b-816e-02498bcc5c05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5173b574-d237-45e1-ab89-6251891aff49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8da98a6a-cdcf-4a34-9389-b8c2c7821e67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "baad7ee5-5beb-4876-976a-9998dc1a9dc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "330f9a27-36f9-475b-89ee-c0cdbde76c23",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccee90d2-f8b8-431d-8933-5e98b74724a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37ad7f95-0ecf-4d7e-948b-535db6aea21e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cb7cfd9-140d-48ab-8d47-4b0f594ff28c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "65c80b42-b039-4233-89c0-a74d2298c5f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8aaf9d9b-e778-44ae-acf4-2b1831803f02",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d256b858-ac0e-45b9-ac57-4e7b5fb4d571",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70d69451-dbf1-4b73-bc70-2f14aa1b96af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5885280e-5375-407e-8a13-0af589135763",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "448c5353-498a-47cb-a1bb-f477125fcf01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43ceb7b4-4982-4498-952e-a4354a8053e3",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd52ff89-014e-42c7-93eb-54a0b3a9e4bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4afccc20-89d4-4805-8307-ee5e04aa6ee0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "539ce8cf-eb2c-4581-b0a0-7c1d4ce51599",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1bd2b99e-f443-4fa8-bd47-6bfc6103f8b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce05ba03-456a-4d09-a851-970d913926e3",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58c97606-e6af-446b-a43b-50d6db8e2ef9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c02b653d-de5f-40c6-84a8-69a4804828c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48661f5e-9db3-42a4-bb8a-b023a682ae2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "979456c6-b40c-44fc-9b01-a41bf6f4d7d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc4fba65-88b1-49c3-bbb9-4ba082e034e0",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "711ad811-e4c0-42e2-84d8-56b27815c069",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc4ec31f-7491-487d-b8a7-8a657e3c6f0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51f9cb77-6a3a-4d2f-8b96-d9a07edd1d16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "84352920-aeb2-4bc3-8cb8-81824d7f02cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05f2d17f-734b-4849-b1b9-b7c04f6c76de",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff905d84-5c12-4000-9d8b-4542ea6b6fa5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2355f6b7-9e8a-4149-b432-dbd4473bc4da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c66bc97-ab2f-4fb3-80e5-4f2d0e9f7de8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "497987a3-329d-4df6-9534-df70d8b66b3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3306e891-b654-450d-b378-d9c43b1034ed",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18411d3e-0b7d-41fc-a712-894ee27bd908",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66700252-cebb-4bf5-84d0-69ae26a8786e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea13cd36-5f54-46b4-9193-e1ee4d912bbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f6d05855-e34d-4052-ab14-561f7d39c19d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18875a98-9337-47ad-821d-30d7959f7507",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d057d2f2-c7e9-4e58-93b5-e5006c649c6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17a3f5a1-7a8a-47f7-9175-101d8c5424f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4713eaf7-ba55-4d5a-80a9-4c0c4aec1206",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "96e45ab7-fc4e-4b00-8fd8-ff15df06592c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19f36d97-4f17-43e9-b3fb-6d83eadd7119",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc80d8f3-a3cc-43e4-ab0c-c607afa2af7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1669c63e-0390-4937-9981-6f70fa749d19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b1a3ce4-aeef-46f2-ac89-b56e3de8bf07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "188e7751-6e69-4a86-9f1b-f92dd1759823"
                        }
                      }
                    ]
                  },
                  {
                    "id": "546ac85f-e4e9-4efc-a671-14080969ddeb",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0117ef9-80c3-488e-8c44-e02374dbced9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ff45dfd-e521-418f-b817-55a9c9a2df00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7386fe41-1ac0-437d-9968-575f8744fb07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4c634da2-fb5b-4522-8bd0-fecc129f0dfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e533105-cb53-4d3b-8aa6-9e1a73e6ab01",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "172b856e-0941-4657-8ca4-224cdb776b65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9d84032-4a96-4a60-86f9-b8672a2148e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "946aeb55-2fc4-41da-9b8f-b61aa93fb5ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "3362ec81-f879-4f72-884b-843e14bcd1c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "373d37a3-8529-4c2f-a1a8-84d4d84fab1d",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08124910-817e-43da-9704-741328c6bbb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d693aa0d-3649-41ee-aa02-2b58bd7d71ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bf73f38-2709-4f70-86ee-f98ccac22633",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "79bf1abe-092f-46c9-a2cf-e6980f2e4ffe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d766774f-14f9-4b44-b255-2fd8f6e671df",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6d0e11f-be0e-4e24-a89b-7dd88d50ec57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34a2eec4-8d00-4bb6-9678-ccce774941f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2ff7135-510b-406b-b98e-ae521810e415",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c7f67177-f573-4ca7-b76a-12c597acb2f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "848de9e6-c134-499d-9e5b-03c7aa8502b9",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "901e4c4d-6b92-4521-a128-a9597f95bdab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df33d01e-1da0-4390-9027-af96d2df0a1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95edbdcd-881d-4d8e-9e6f-6de3c0695938",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b092f3fa-9b96-4331-a19e-7f5921f32b6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df272e42-3511-43b2-a2de-e624d3faa5a0",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8957492d-1237-46b7-8a9c-d967acc0b829",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "394e0a03-262d-452e-ad7a-438da0dcbfa6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "582e1f6e-4fa0-427f-af0f-9817f3d3eff7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fe2904cb-f615-4261-b4de-72de639a20c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71b71d77-3a57-42b7-b7c0-629ba4a3a86e",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16826b51-491a-48bb-b011-fb396706f4ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09563c05-6a21-4b2f-8bc3-7189b6fd0bf0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5abf85fb-c03a-4a8a-90ae-41d1cc45dc2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "1efa9d3c-cd69-450f-9d1e-cee689c62b5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08fcfe68-670e-4039-b0e7-8d12d54bb796",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69812df7-effc-4522-ba6a-34e0c1fe948d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7bb86fbf-0335-43e4-83ca-0481eb2ec9e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92c1d48c-5c1b-4740-8c9a-0711818f2f3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d615e7d0-a57b-411a-afc6-fc87a6c0254d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0b9da2d-c340-413c-8077-174c63564d80",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45313510-8478-4ad0-82da-65ff655b3d68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51bec205-2ebe-4c18-8ba7-62559631cfed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3799ec9e-6638-4dcc-9520-a3b3ccdccb19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9db9ca90-2144-4cdf-bad6-cc52e2e3f38a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c62f81f6-ef05-4702-88ea-285c4ed63665",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61756342-0c1e-45be-953e-9bbf9a4f5fca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5b38853-f7e4-4039-ac47-79501cfce520"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c89360be-0914-485b-a1b6-b54d1e9ccd77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "e9d05bb3-a9f5-4add-a679-099588c05ff4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23c88cbb-0a4b-4b60-bd59-690094575c53",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f77819af-4158-4336-adac-b3ef25c8585f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "356b9690-236a-4e76-86ad-09b4fc966935"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d6e9185-d18f-4ddf-92b6-26b4412100dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "f2e491fd-5ead-41ac-a9fa-4467c4c48bc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cca5b34e-aad6-48f0-bd7f-07731c1d6a3d",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59af7eae-dac1-495b-9fed-6518ffca0ed2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42c5d925-ef7e-4ac6-9164-ac706b7db701"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8789904b-901c-4880-b708-e9a9daf437e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "b4f9629f-99c6-4050-a09d-daf8987910dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d3e0a5e-6ea0-4942-b48a-102e1c5043be",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d69939e0-1882-4658-8a0f-f4e5adafab13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e94ccba-5a62-4ed9-a2b8-14e8370889bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddd1206c-69da-4e82-a878-d63cbea41d4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "12699131-30da-4e5b-9ebc-53676bda51aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10fda1ef-70ad-4a2c-b51f-d304f05fb61c",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e5e1314-90db-493b-b2ec-f712d664d165",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f60b82ba-d497-4d48-9f62-0fff8e7f3fc0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "755d3e84-1b0e-4043-93fc-2c2e4d727531",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "31ad3608-0463-46cc-be26-fecec0df1b1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4163050-c57c-4bc9-920d-f5ca56dc0ee1",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "156f5748-6434-4497-af03-91f499f6bfc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7317eace-6811-415d-bcc1-d4463ea086c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "270b9982-fcda-4de7-878d-2aca743df04a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "173809cf-6502-4323-bbb9-7919d6168e83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "573cc17a-31ef-47e6-aaf2-8ae0e96d0478",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d877c7c-3368-4830-b808-2b3f419c234f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b54ed59-1a8f-4590-9504-f31abdfb1da1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2d7837b-48fd-4dbc-81af-c209294cceec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "2fedb6bf-93b0-4609-a544-8e26dc9c3f62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "138d428f-be64-4bba-a78b-572d30f1773a",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abd38af7-6df1-4a02-a705-459b4b116995",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccdf0506-e8f4-4d83-bb88-9f325e7bc05d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d737f1b-ff4e-4356-ad56-703e10061277",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "30783584-96f2-4878-ac56-865bd4f97d45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c76eb3e-997e-4432-8902-89bfe472901f",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40beb742-1195-42f1-85c3-f5a757d032fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07d115b6-a1c4-4f8d-bac3-7275e760f642"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "322cdd6d-a44b-4ce4-b23b-bde4c4b57d65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "59a4b135-53e8-42f2-b44b-16d858a6952e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a7954f6-4af8-4655-8a4b-cb209b57d55b",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "192dcac0-817f-486b-9dea-5986c4133193",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7857c9c-afe3-4ba4-8750-671abf4fd9c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae451075-5d25-45ab-a760-df94d3d77de9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a1200813-3dd4-474b-adc5-e84181a2d559"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0932a30-02d2-4222-890e-66da6ced033f",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ae630a8-9d8c-4351-b01c-af99db3e10f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98905fc9-fbcc-4838-96a7-907aa6d32da9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0b757b6-3dfc-497a-8a40-3ba4bce1ab22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5a7a5b85-f1fa-4a66-919c-07d0399da7c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06ee9d9b-4f74-4927-95a6-00cff74f31c2",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57c873c3-0a89-4a1b-8234-a925a9a957da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4170134-0589-4a2c-901b-77318153e41a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c27285b4-7062-4d25-8221-ec97c26356c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "692803f7-5455-4591-bb12-b2691b1d5933"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7377b676-c697-411b-8af9-55b46f3647a6",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f65c079-7970-4f72-ac36-ba8765649511",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1af4259-0300-4b8d-9fff-f7977907b05a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21035c1e-79a5-4c87-bb4b-142eeae5bf2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2629c709-38c6-4244-a5b1-93ba3623e9c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b37a8e5-8eb2-41d9-92f0-be6ae9b74290",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9fd3575-340f-4b9c-909a-9ff2ca5ded66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd1436c1-7fb3-41cc-9276-69dc3c2caf13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfc6a84c-2a4c-475d-8691-390646b3f45e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "634a272d-8548-4051-b988-645ed77d1f55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19632553-de92-47b9-a33c-2b647d12c453",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e1d43d2-66fb-4f88-bfef-34330c2e97ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e733d451-1c72-4cb8-861c-3e4df4b395d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ebe1d2c-5d50-4e6b-b10b-f28f4325a3d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "fe107c30-b0b1-4aa4-a383-db780c6d7100"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b8bbda7-0693-4282-b8be-60aa7ae4436a",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58e28ac6-f470-4b16-97ce-27102327bb7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1305161-e9c1-4387-96f1-a179bf5efd04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79aac134-c309-4082-9c62-c8559e6484e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f8cbbb24-779c-4d95-85a9-48677e28c505"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e6a84ce-f432-474e-9bd2-8ad671915db5",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec4d16a2-889c-4cc0-9cdd-e51b206f1266",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49fa1f4a-3331-4f0f-8f3b-27013f753c90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "679ca803-48c6-4e4d-b29a-65a33d693cfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5830a685-98b6-48d2-bf9a-a51ded7816ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc251657-51c7-45df-a497-ff2fc994f097",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d411b7c-922d-49e5-af34-e3624780960b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25f55a36-fb4f-4c7c-b888-d26d3dcb3da0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0067f585-360d-47ad-bba0-6d71148a135e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a654650b-7edf-4512-a1f6-195fbe02b964"
                        }
                      }
                    ]
                  },
                  {
                    "id": "248eb41c-7118-4cc1-919b-2f3ca94487bf",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79f48bf4-1f4b-48c5-8e10-fb9c8579454a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "355160b1-f8b5-4540-9094-2c5e89153728"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a81015dc-c2a7-4011-a1c5-89db74cd2f62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "589006b7-c1dd-4658-90c2-465a3f4054f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5908821-92c1-472f-84a3-2e46a058d21f",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ff4c54a-2504-45d8-b6ce-8c51739e43b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "901af82a-7ad2-42b1-877d-0aa5eaa68957"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ad806bb-2905-4cff-bb73-5ec5352d6a43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "748d0580-dd2c-4039-9d5d-e1fd55584659"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e573b834-bda9-4c9d-a11b-ba1a7c81db6b",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "928cd1bd-29c2-4d17-82a4-f8d3780bd2da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eeb59af7-9bba-449c-addb-71d9a854726b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "074cef33-63bd-4028-88a0-ee05d00b86cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "043ae45c-2fa2-4ded-9625-013c622c1c9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5192b48a-1bd3-493b-818e-e1c3209d4075",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6304b8db-69af-4d1d-b699-abb5b513e420",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1a06afd-e0bf-4419-9878-c610665d99ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e329fd6-4d3f-4419-a8f2-bf6262b08af8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "07b54733-3d14-4f63-b0ff-a25774d7d564"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61a22b30-0291-4912-8661-7425c1fd9070",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8808fbfa-4078-451a-b90a-9e9426adcec3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b40745aa-f0ed-4c26-b27c-aad99ced8585"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e96f8c2-2eb7-4888-8f8b-607037e4c560",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "213beadd-26ed-442d-b8b4-ff8f2a2d4594"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35b7cf79-f4b6-4cbc-977a-a140d21a8868",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b057f64-71da-46e4-a2e8-d87b78548d5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1428eab4-3a09-499f-a6c6-2c07297c498b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c319fc2d-c38b-4c08-a637-df54720ce27e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "38f527ba-17d6-4253-a81d-a9c91b5d3ef2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5af84406-6360-4987-b9a3-e554ecd00f15",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1236cd1-925e-4eae-b47c-3ae42eb3d10d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9af16c07-44b1-40c3-88b1-8ce617bf113d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1812d5c7-33a5-4019-91dc-9c8c50ea0ab2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "d17a4cdc-df93-4dec-a919-df4584fd012b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f30c828-5f19-4051-9e10-2e7c018c5445",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98e399b3-8fa2-4d92-8866-cdfffa21858f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c46e1743-7e17-4085-9a59-38b105081464"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66bbb245-60d7-433b-9b11-4d64ee08932e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "31f1455c-066e-4165-894e-5b18ba8abc05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7398e8e9-ac94-4d10-86c7-e6e6e97bc05d",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfdc6439-32f2-4c07-8818-95d9aea6b339",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "346cd129-56ee-46a5-ba33-6fb1e2049871"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a26b972e-81eb-43fa-ad30-f5ca8fac6f2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f49e03c2-b61b-4478-a746-ff72dbeff920"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ca88b46-3417-4982-993d-ed449bca1cfc",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b314bfe-0ee8-4866-81f0-bf56ad49a501",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee98da11-ed81-4ac5-aaf4-efc322e6b447"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8f0a8e6-20ef-400d-b2de-81af69fb044b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "454ec548-9c73-47ea-be51-2f37260997b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50613526-7b50-4193-bc20-e4e98b08f8da",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52067ad8-8ed2-49f8-825e-e6546e2bc974",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "066b5c62-cef8-47ec-b667-0edc38e0f8e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f956046d-acc9-4471-be41-aff8a05c15c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "66ef1bd3-0d95-4f2e-80a7-44e5e57ab986"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a77cb38-78d0-43fa-aa95-8b221ef5fe67",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cde285d9-e17d-4249-a9ba-cce8d65fb91f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "572b2966-0e32-41d9-a63e-a949d0f63193"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "312e3d3a-0e5f-4a5b-8dc2-bfe140a4d67e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2b1ef0ad-ec04-4867-b65c-a44bf772c641"
                        }
                      }
                    ]
                  },
                  {
                    "id": "173e9402-321f-44f5-b80a-21123f02e7b3",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ed5fc2a-042c-410a-a976-11a7c8ddc506",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "effaab32-6e62-4d2a-a0db-3ad97b692fb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e5ad79a-8fa3-485d-aaf3-3fe4cae097a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "67a9e358-dd12-469e-b124-65369d80afd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ea44eee-2714-4541-8e97-7c642d74d2a3",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edb38bd3-90db-45f8-9811-cdedec1e1238",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce54b951-0a91-440a-8cd9-7140f7c35eb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e807016-d9f9-4a30-ae34-9b9b21713c0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "67f3b99f-5824-4be4-af8b-4a8caa21dc66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78619ba7-694b-4bd4-8c58-26aafeec771c",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8475e34-5de9-4242-94e8-6ce290d370e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9dcba6b-5707-4f6f-b059-4c04e83641d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f710478-2a35-45dc-ac64-7448fea73a9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cf3a3496-f315-4751-8c48-8d057c141f3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fee45db3-f7e9-445f-a66b-d9aabe188464",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f750d459-c8c1-4273-92f2-0f0e1db9fcc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aaa4b4c9-0f74-40ea-a0f9-fe5bb8458da7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb7b8bdd-72e7-40b8-bbfe-a6f31c81e714",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7eac16c9-6141-406d-8d69-c3b6e1ef26bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3604035d-ea02-48c8-9107-12fbeeeb0dd1",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38fbe8d9-0358-4e0a-ae0a-4c099d54aab3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "409a29e4-65bc-466a-bd4a-c6ed42269779"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18052b7a-b6ad-4692-a754-17e543774f0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8b6f608a-b8c0-4d95-acfe-ccbe500b3716"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18fc1263-8dde-4a3e-b0fe-e325c18b6cc8",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "122661b5-a062-445d-9f1d-a9103749f90a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a00b061b-1c51-4f4e-9394-9633a3b4f81c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db600120-c96f-4478-97f3-0ad0aaf01c4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "37d457bc-76ce-43bb-87ba-6e33ad06858a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "394ded37-ca2e-4a87-821b-63d6b712ae00",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cec45e9-5e5f-4fcf-b1ce-c66670c6a91c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3faba6f-aab6-4611-a572-bc2fe13051a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90278339-abb2-4498-8744-a50e7ab47ecf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4d264e69-3345-4e81-9f1c-4ddfe3163b0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "596611dd-e18b-4498-a0fc-daf4acfefce4",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "351c3017-176e-4b96-9feb-b14e4427849d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab3da196-bc81-4519-819d-1e7fe242e279"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f26da706-59d8-42ef-88a1-e55d805ad704",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0a9143c9-20e1-4d6d-9d86-87c21d7a0c31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42ea8b00-4483-45cb-a514-8f392ce0d43c",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aaf6e754-f4bc-474b-a1c5-cb26d109c058",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56c6c6e4-30df-471b-912a-9e29117ba9f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81d1cf90-6931-4fee-958b-9a82f40ddf8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1e82e498-cd90-499d-ac84-22dfbfe23104"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dcd44b2-eec4-417b-9c97-c04c7653b8b1",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f9157ec-855c-455c-845d-22a798258bb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "319ce68c-11d8-4dc8-8865-72312457247b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14b1416e-351a-4f8d-9c7c-d1edfd3e4e63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "74513e88-547b-4be7-aa3c-5bb95b059012"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf7453be-290d-49e1-a8f1-ff282236c46e",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b70c0814-a6bd-4540-b4c6-065a574b09f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a0bc160-7baf-4855-b995-f25cb845e93e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "780e1252-794b-4c7e-b5fe-85512c6e482c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "64969337-c33d-46b3-ae42-a5709541ed23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "499f896b-3df2-4e6d-a94a-13c78cdbab41",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8b2cabc-b773-48ad-a1e6-0861580e735b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb3727d7-f796-4582-af8d-a21bc33c1a35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "516fb032-f5a5-44b8-a004-1825341246f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "14887906-1e65-49ae-b738-2a7a616285eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f70f7c00-2b15-414e-bc02-7d70c57c3df3",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "356f2e28-ab94-4607-aedc-1ff580479662",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "769a3d57-70c2-4c79-9e16-29cfe3ef3720"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3169dc1f-e33c-446e-9a9a-022a0321b407",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "37d09e1f-3221-4cc6-a187-5285c03ff61e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d21f892e-57ea-40f9-b148-343f900cb6cc",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2a01678-b053-4672-83f5-f13c6013b5eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbbd9d66-c768-4362-8232-039d8ee7cb07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2871efe5-8470-4764-89ed-52ad0322b050",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "8a0e5394-4479-407d-a718-3e512fc344cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96d01169-a940-46e1-baf0-762e02f820e1",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc7fd426-e81f-4aed-aad0-d43c9dabe80e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6da4cf2d-55ff-478c-b6d7-44eca7e06e02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18077c77-79ae-4d70-8ae7-02d1170f3d71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c37a4235-4bb2-4909-a233-e8ba0f41151d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c06fef9-6295-4b9c-8435-ad5865dfe127",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2718d014-3a97-4c1f-b717-fc0261e59eb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd39f74f-2485-4389-acac-d01204013beb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7660e308-f407-48e8-ba09-eeaa090180f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "aed83229-f515-4079-8e21-d3f494abd951"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a5a5965-d7c9-480e-8a2a-457814ae86d6",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34192b2f-d5fd-49a3-b3bb-edc37d4554e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5ef1b4d-7583-444f-9986-36b29050e9d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cdb0ef7-6591-4c06-8772-4ef16d9bd0dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c11155bc-3efc-45c9-8615-cf189418fdde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a153aad-55a5-4285-90d5-ecc3a584c1ae",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f172cabb-edae-424a-920c-d0d8e846451a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "faa16d4e-97e8-4034-8f9f-ceb0a168d184"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e323248-904a-49e4-a236-621b8f82f9a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bb85419a-d8d0-4e95-8065-d011a3434184"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82dec442-b68c-441f-99fd-337cc39656ce",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7aa92464-2c4e-4780-81bd-604d37d1ffe8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a72a29eb-1583-4232-975c-61a429109e84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d407dd7-1160-4075-bf0f-32f2b23d2626",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e411b515-f5c2-4e26-9d70-33be547bc868"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f5b4a9e-6ea5-4330-a872-78f40f4484f2",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58234219-bda0-4334-96c6-796782438485",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a9198be-4eae-4e5b-b672-dec0a74bee7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d4e8c1a-9b0b-49fc-8d2f-50c642ef793b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "dafc4f2a-3e3b-424f-9d4f-185dd9a131dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "363f18b6-b2b7-461a-a647-7713aa2a3832",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4592cb3b-4d10-4513-aacb-e70867953e78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1523c229-a30b-4e04-a3ca-9b448be958f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8fa918d-76e0-4f66-bf6e-7ce5a3923b3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "5136e16d-22ed-410b-bf7c-0efa56d92173"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad3e9fe8-2bbb-4299-858a-4b3264482652",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf8e72b0-ca4f-4e17-a93f-d73dbf26c843",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "626b26b2-0d02-46e2-b242-7ed41a9cd501"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "864f8f1d-c8e5-4385-a79f-c5711bf8a063",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "969ac93b-7af4-4873-ade9-69fec4875b93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba3b9393-9962-47c0-8f4d-0152bc7a1bab",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "667941ce-d6ad-4daa-ab69-74d5511ca66f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37b7b77a-1982-421e-80ca-3eb561673147"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a871b26-70b5-4664-a02c-1043c58be013",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "ab171254-6d62-4f5a-8862-1f511f196c7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "693bec42-a8de-4f73-aee6-72d97bc62aff",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dcd94c2-6f3c-49cd-83d2-57358d0223fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0c0f345-0d59-42d8-809a-05bf31515555"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c507a1e-d875-4b4c-bcd2-673f9c76a95b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "02f63c23-ea7c-469a-89b5-fd42b38dd1ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "176eb995-4be8-4b90-b427-2f32a00bc7e3",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40712b2b-8b53-4a76-bd57-b168d2375ef9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "4c2ad353-15c9-463a-86b8-f1cce1d5d67d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fa69e81-0035-46fa-b2de-902e26a99299",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "a492f659-ceea-49f6-9b0c-a79406533244"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "0ef95c94-0ac0-4d33-b1e3-b64a08cd494c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6a8d97be-fad9-4acc-8a47-cffa5ece73cc",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "089f7fef-e666-4789-b6d1-15bc43a0ca30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7fcccd69-0ee9-4e55-9096-05ed6ead476a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3352b896-4921-43cf-bbea-19c6e03d8a95",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "068d0a02-df20-4370-8ead-bfa8564ed38d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a385621-648a-46f3-9f55-2e15f9045271",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d0d4a65-088f-4446-927c-5ee027a8d737",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "48cca118-afc0-4fc7-9e61-845c656379d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3860d3c7-86ed-4762-b04d-dfcdc39bb214",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "24f251de-845c-4974-ba5e-1a0a059b4188"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c0df8584-d944-44cf-8feb-f3e019dc63b3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "339cf171-4baa-47c7-844b-8827bee602b4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f973d51b-8446-4f10-b483-1bfa48eacda5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d6867536-2ec1-4cf4-b326-f25440e6fcfb"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2a3cbba1-bfed-42dc-a586-b2c65a92dcba",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2012a225-6524-4cf1-b563-3bde1e1b1126"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "43c418b6-20dd-490d-9c7c-57d34f8caf5c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "71c22c3c-45eb-4510-a354-7eac8ed76fcd"
                }
              }
            ]
          },
          {
            "id": "85103b4f-24c1-47c1-9b9c-c1250b521b50",
            "name": "Positive Testing",
            "item": [
              {
                "id": "43de36fa-9fe6-402a-b8d8-e87b215a4e8f",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ccb3c0bd-078d-4ed6-9a28-3ffb1cc7ca5d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d9239a64-a6a9-4d28-831e-85fca1f09a95"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2d664320-d2c2-4bf3-aa2a-d13af260eb3b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a0fa2daa-a5d6-47b3-971a-7b6810cc0427"
                    }
                  }
                ]
              },
              {
                "id": "a1ccd599-914e-4263-b565-bde450fabc30",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1252bd49-9244-4e16-8313-d33014755b5d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b6d9919e-b013-45d9-b3c0-9abcf6f363ab"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ac24818d-4fe8-41b0-a072-715785fded6c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "1177d505-5455-4e21-b531-f3b60fc38e4f"
                    }
                  }
                ]
              },
              {
                "id": "9431309d-b606-485b-8eaf-6cc243212dd3",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "602fb668-2cd9-47fe-a9ae-f05dabcdc01d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d4dca7b8-b637-4360-ba41-14edf7209c1d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f5bca39c-4d54-4796-b982-5986f9fabccd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "b81ae05d-e020-4017-b6c4-cabeaa4cc67c"
                    }
                  }
                ]
              },
              {
                "id": "95758048-a000-433a-8ecd-0f678000dd04",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7000b639-a98d-4bf7-9304-b728e3b6c82d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7d312861-fff7-46fe-9771-72b473b39fd8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d558d612-f878-491b-978e-0409c4a7e0a7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "ac5711b0-5fd9-419f-b490-857140160456"
                    }
                  }
                ]
              },
              {
                "id": "cb99be4c-b228-43cb-a05e-4d32cd617f11",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "18eebb8a-4185-4fd9-b642-50fcdde20dd7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cdc3f1f1-f5b8-49da-ab1a-b0fb779753ad"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1cdcf772-a8c0-44b8-9030-577a36a20ade",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "798ff35d-3a48-404e-9f4c-c4d5d2dbbeba"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "cd5ed98b-c19d-4ba7-a151-75d9c45c93fb",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f4b8899b-bb38-468b-b8bc-c7d2fac6baf1"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a4580812-38f7-4589-a3ed-86af075e293b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5449d7cb-2168-40fd-b5ee-49deb06467d8"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0703081f-e00b-48cb-b1df-155266954407",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "54a76610-702c-4d13-9fb9-af9732f304dd"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2506c400-947f-4e73-8c20-7b853c189444",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4513e00a-eac0-47b6-884f-10fb8aad2a4b"
            }
          }
        ]
      },
      {
        "id": "6833a2a5-ea43-43cd-bb17-fa5c0a6c0cf4",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "0d2fd6cb-45bb-40ff-a0fc-d0f4b33106b1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "230b72b6-304d-4f21-901d-0e1740d49107",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "19c06735-1bd6-43d0-9f0b-9b38acf202f1",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69783e07-af90-4a40-a593-1f7f772cebc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "945c70a3-b3e6-4beb-a423-6f1e2ef51622"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6994036-e130-4c35-9cb6-50b19fc0adef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "7b1e8369-d1c3-40d1-87ca-da325b9891b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8be012d0-3c01-48d9-bd9e-a304f33298dd",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8ebb08e-c35c-414f-8fdd-fe061a9ffa92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "458a9059-c00f-41a7-ae95-97ca9e733a8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "491320b2-98fa-43f8-b207-7070933d85f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "84b616aa-91c1-41b9-93b6-965b3ae0eeb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07f29d8b-d359-44dc-9a71-679d343c98c1",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d64a368-7186-4637-bb58-d4e88e559ee9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa0bc6e0-0206-4e1c-a74b-9bfe4bc9d00c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "759a4548-69fd-4250-9116-5919dc4a437a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "018e9237-349c-41ed-8f95-1db20f531bba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17591075-327b-42d3-af44-249353e01397",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23998b3d-0810-49da-ae82-ce4e95c23496",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f79daae-6085-4421-b5c4-2f25c5ae194b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bc63765-35a5-48ef-b075-594d6c383406",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ac8d2ab5-6bf6-49fd-85ce-329f986bc538"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4db444b-45be-4c21-bafc-910cb07658cc",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d212409-41f0-4b5f-a4f8-3d756ad88598",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b299a57-56fe-45b8-a4b6-f364d6c2f12d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e495589b-1561-444b-9afa-ad724e501575",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "dbd09fad-8bb2-45d6-a474-5c56b691cdf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "390d0c8a-d38b-49a3-83a8-419a94e25825",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44003cd2-14e7-4865-bd3a-a69d75d86b23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ce96a39-ea2a-4bbe-920f-cf8b6041c17f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cb122f0-4938-47d6-93ef-58de3739f328",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2aa73385-7b06-4d4f-92d8-62a0bb175ab9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4850ab55-5f65-4a2c-a173-58043625cc21",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2ef9998-d540-4ef0-aa28-8f96f93e2574",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be7c4f97-95c1-48e6-b203-c241d31e9e1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f98cb86a-fea9-40bd-ad89-60d733ad8206",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "c832430f-a99c-4f30-99d7-aa04aa01a568"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17951bf6-94db-4cc9-9e30-1bd5a2230346",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3183cf7-f6fa-4a17-b456-66451496acca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7944e90e-44fa-4311-b23c-65223aa15d25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67f3181e-a0c0-4900-bac2-f32f5eab0c38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "260ab1b1-4d36-4421-a7e1-9e33276e9302"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3815ec26-77b6-4bcb-8f41-6cf00458c239",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1de286a5-e5e6-4ca8-8d25-370dd3aaba7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e476491-0e45-433c-ab90-18190040519b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ff0d169-8ffb-4fd2-a5c2-3fbbeceb7afa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6136e261-1efe-4af1-b006-6badd09efe66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10e40016-2d5f-4027-8ad7-f6f583c0f0a8",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba3da71b-13c1-4092-8da6-f670c25e7374",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2733d87-ef3b-4924-9279-b3a5b8b69834"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3934815-70bf-48d4-9338-435f2e9c55bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f4859809-c7d2-4f75-913e-a91fc86b5380"
                        }
                      }
                    ]
                  },
                  {
                    "id": "156f0502-69e2-4011-8572-4bf76db9b58f",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f39f5135-693d-4e75-833a-777e449f75fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16ced4d8-6e1b-4b45-842a-55a899a3f9c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63ff68fb-f45d-4c07-81d6-e429fed1aebb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "80e03d1c-4f61-4e7c-8294-74f09824bd73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe21efcd-fcdc-4900-a083-d6a79e4e0076",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3f129e4-2f4d-4447-b8a1-b8fa7eb7f45f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81731611-5810-4bf1-9c6b-cf3dccc44ac8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fbdc86f-4dce-4c28-8dd6-037b9c5cd375",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1bfae56a-1e7a-40a9-9c2e-85745f649d2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7315321a-d253-4ed4-ad72-93bac9134d9b",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3045cd8-4dfd-4ce4-ab31-5de4ebc39caf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba17f3d6-614f-406d-a026-c7f3e43b4993"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43dfa481-21a6-4e69-bb94-368629e2acb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "cbe44a16-5eac-4627-bee8-44904aa7e2be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdf3e322-068f-4199-a905-1ade082229c7",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "055bbf6f-645b-4a92-a3dd-00b91d244cb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e88a9d4-d143-45e7-a6eb-8dcc7f5f5fb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6f5f974-4b84-42d2-b836-5fa8ad30623b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "44027d4b-55a5-4915-a654-14c8e030b68a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a58d0673-7278-4326-b6b2-5969abc5000b",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae93e691-2619-44ce-93a5-fd0ef4fc4d35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a4079c9-37ce-4136-9c2f-8beba4ef0051"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a97fb14-e990-4152-b613-268fc57861e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "4ca5d086-8e59-475a-be42-82c2b6361466"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29b19330-dc76-4eef-b97b-8ff9cc321e68",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5509b0b1-5f02-402b-95b4-28ca7b78c2fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c5e67d6-4fce-41fc-bafb-bf18b3a3bb7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c686fa4-7a6c-45dc-afe5-b674e1476a56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "c8cfc20a-5092-4422-97fd-1cd4a67846e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e298d89e-f8e9-487d-a860-a6c69b4da68b",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a23f50fa-7559-4cde-b4b6-0342688fafd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92c8faa0-98bd-460f-9157-6ec873d5d84d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56465b4a-0685-4941-ac1b-ce06fdc9b6df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "b75c9622-21b6-43fc-bfa2-967ecd65c642"
                        }
                      }
                    ]
                  },
                  {
                    "id": "795619cb-2cd4-46da-a69c-b90c66532505",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e87454b-0ab5-4ee0-acc5-bad3b348909a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f88a101-d051-4159-bd70-9d57f51cb181"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82ef6b92-b66f-45ac-a863-0b39428a6fe5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "2eff0865-7761-43d5-a0a2-604c0a687a4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e92f083-82cf-45de-9bc6-e52eb792520c",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42259f3b-78a1-4c27-8cc5-9bf74d0ff927",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be44b640-589e-4a44-9659-92d7ab969654"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "494bd762-2438-416d-8cbe-439d1eb7788d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7f30a65e-db42-4862-9486-537c21356935"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eac453c8-f742-4d42-bc18-310bad138a2c",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eac0776e-0dc7-416d-8cdf-fdea4c872606",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6166a902-21be-4ded-ab79-6e11b743dcbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41b4e607-c6c0-4565-b6d4-a634c5a71e1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7902f616-bf72-4bfc-8c92-8cbf16af8822"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd67cdbb-5069-4d32-9f56-d68d871f58ae",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a13994ce-3025-4458-bcfd-9a71c9a7e08f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9dac81b-da5c-4b95-a356-fd3fe6c43ead"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19fbe988-88ca-4e8f-b00f-f0479a0b3e36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a845f618-0d4a-49c3-a696-609a2a912df7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4af691c-fde5-4144-901d-798f67508752",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75eddc38-2a6d-48f5-92c6-bf8841a314a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82f939ab-ffd7-4bc4-90c2-89430f2651a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05fa1d58-8cb5-4624-b87e-cd3df4a1affa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bc2f28e7-45a4-4eea-8a1f-eb93e5ab6685"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67a5ce0a-c376-492a-803c-134b9b721f00",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0daf589-6770-44c1-b8f6-ed360b206171",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae03912a-866b-4426-a3df-961cfb4fdfee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94e1e8f6-0cf1-41a1-bc21-0e28bcb4c560",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ae918222-d12f-4845-9995-c9ea7630de92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6c7250d-f83f-4ea5-b779-fe1be3b93e15",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "250a5ce6-205f-411e-9f31-f6a8dc4cc545",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9dc56d3-e391-42b8-bc3a-1f200ca64e94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5770f3bd-ac0e-455d-9a5c-09ffbfdbcdba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "889e784e-9f00-40fa-99d1-0a2485d616b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3d426f5-fea5-4766-9a18-5e2563e67da8",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71419251-2c58-4084-93ca-b154639f601c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46b44d54-0c64-45fe-9106-6c8a14675896"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d9bc41b-8cb7-437e-946c-1ac5e8ee6b6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bf803678-6f7b-49fe-b267-634ba4783eff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb607a4c-e9f0-4293-8d23-6d7c41ad8723",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "249fa80b-ebc5-401a-8bf5-2979d1797908",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "274ea78b-ddfd-4bd2-a6a4-ee680c9b3d81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b4b296f-1c4a-47cc-8fa1-802458097036",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f0b7816f-9751-4ddb-86e6-7f9cc795b50f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67a89d70-ddf7-443e-983c-522d89caf39c",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3573e0dd-9ebf-455d-ac0d-0f79f36cf064",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ed56d22-2d17-42f2-bdbe-d7be78e7a48c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c843e8a0-9901-4633-8bde-490e80569b96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e14929cf-7b86-4574-a408-be460f9bb175"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7053cbaf-fc82-4a65-9e97-56e9f9269761",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67d0207d-5254-4875-8e15-923f28bca990",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddeb5cf5-276d-452a-b63f-ce5a59758b84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bc996a1-4a98-4cf5-b199-7dc0442d57f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "073f4eeb-2afb-4d0a-b712-8a53f8469d65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f10e834-f8bd-4b28-a0bf-efef1deba091",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d1d2375-3cca-4d62-93d5-b0e29583fb04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efa4a3af-203f-4e5d-81cf-6b04e12e5de5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c7797f6-94e3-4922-a28d-e104bf1e1284",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8864aea9-029f-4a4a-ad2f-1d08cff2eec4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a98b9c7-10e8-4082-a3b6-72f8e5ce0658",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79e1f453-40ac-411e-9c20-8708e3fd3aab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58b7cadd-0654-41ad-884f-e6ac1b2addd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "367949ad-f3c3-4550-97ad-40fd055af66c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "73f9e86c-8262-4fb2-aa95-19ce69c4b4bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "253d2f96-7b8c-4711-822c-ecfe0864e937",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4217253-7d2d-498c-835e-f95d05a1dd35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2119f71-3a4d-4163-8a4d-320e2fb18a02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7fe37a7-960a-454c-be33-bd66d5d54292",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a83b15d7-1543-4c5f-a4f2-56bfad4e8c9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85f8fb1e-42bd-4fbd-b3a8-81eeca46ce5b",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e14385ff-03b4-4c2d-bd0c-a2729aeb6528",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63c3912d-c84b-4c10-9060-1bbbd8acfd11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3b5613f-4608-4628-b3b3-b4d41236e3fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "629fd234-498a-4840-b848-575e93356dad"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c2e35195-39dc-46a7-869f-542754f3d2f7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fe92b609-ab78-42e4-82a9-8d2101ea8181",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2493c3a-d032-4b11-9086-2916ffee6ab5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cc62d94-9b53-495b-997a-d1e76f86e05f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6ad7cb6-4792-405c-8b8e-840818b7ad44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "eb4a19a0-66f7-4abe-84e4-483b08bf5026"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f85b1b5-11bb-454e-b0c3-911b649bf68c",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8c93db1-5ae7-4282-a2ee-2313f68529a9",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "107fd8a8-f0e8-4bc4-8844-ba36f54ba3f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2daaf31-60d5-403f-a74f-6b147149ac68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5f0f5b2c-3e07-42ba-8c59-90e8a9509f11"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a8e92bd3-7825-4df7-a34d-5409a4e2a5b6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bac93a4b-4426-4a1d-bf23-b9b06f9a9fbe"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "aa36ceb7-f555-4d12-82b1-04173089dc7c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "28db8db7-516a-40c2-a661-8f5fe5f6cdf5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "706b0d36-e8cf-42c7-b4fe-6a1ed12c6b86",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "e463f0cc-05e3-47f2-b2c2-3ef3a06885d3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5b98f177-491f-4608-93f7-732aa343f038",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "955fd83a-8cff-4a7f-97f0-cc1d661ff681"
            }
          }
        ]
      },
      {
        "id": "c2a30052-ffbc-45eb-b259-bdfb0f7cff72",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "a216d1ae-1258-4451-863b-01ec0458ada5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d1d61355-5164-4af2-b39c-96b01a0baae5",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "60f37f26-73fd-4c45-b5ee-d14dca5e1eaa",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6f681f1-8e25-4b46-a060-f0dd1287fa98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d83c483e-4b75-4f4d-be9d-0fe5e2209bce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eda0a9a6-79b6-484f-b252-4f82407c5fe0",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c372ea55-9080-4304-8bb2-48363527381e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c143417-0aee-4cf5-bc88-b10125620669"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99082479-2993-426e-af78-ecea98d9a617",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4f599a4-1cf5-4f13-a8e4-866ad43b0244",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5ced278-ac17-4301-b695-c59b02131dc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e875aa8-41f3-4127-91ca-ebfe3a596c7f",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5d62ef5-367b-4535-a32e-bd250d16b332",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c565585-cbc0-4747-94b8-655a9f5356d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d651879-8b85-43fe-ae98-ee78799dd286",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7360b78a-39da-4de0-ad45-785baff12a6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ba63cae-4ba3-4cbb-b21b-616c1305cd7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed82ade0-b8c5-44bd-9208-7de437d6d163",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92989d83-cf45-472f-bfb0-c6e7049cae5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f48aeb0e-b4f9-40d9-9ba5-3b847f81eb25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57e275da-4f98-4c28-82c5-ff00d9869542",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f67573c-9c5b-4586-8345-c43ed56c509f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c40ef69-a76a-40a5-8485-7cdd23f827e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdb265d2-ae84-4c3c-a4ab-3c8003464451",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1905e17-91d8-4c27-b2bd-80f49265af37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "196bd85a-bad9-4087-b338-9df05779347f",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fea3c28-43e1-4718-8ab8-9fbf34c16c19",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cbfb2282-ae11-476a-aa0d-67ea0909d599"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1756861c-5a01-4521-b922-a680ff43c435",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1bf1b9c-87c6-48e0-805d-3fd6b83adceb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89edfdf8-8462-4c25-9157-242c24955b73",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9901961-c5d6-4dd4-8e5b-f5be8f7aba67",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ea894de8-64d6-472b-b0d9-fdef94c7381e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f0602b5-1e3c-481d-affa-9f9534951060",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78638574-bbb9-462f-ad9c-9f3f4598bec2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ae0f26f-24c1-43d6-8d7b-03046e4d91e7",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0479d3df-ee03-4bf7-9511-ceaf00b2e701",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "36990cc8-da24-4ef5-a1c1-dd0af0371c5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcbdb493-348a-43ba-ba20-5ac5fd6fa240",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6c618e4-835d-44c9-9965-caf10dc71a33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8d860c9-d8a6-4e86-bb5f-f4d5e10a8204",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dad89fc5-fe9d-41cb-8ecf-17a457c82fea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ff965c6-c815-40f8-bc7a-73a7c05edaa1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "969a4498-64ee-406e-b762-046318b0da88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c38eab7-4959-41c1-9403-041608546047"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46f51dd8-0523-4893-a3aa-11ef88ee6910",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b72aac4-5307-4572-9106-aa1c9a5d501f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8255b187-d21f-4e63-b5b5-e685c01540c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b615a0d0-daf4-4b81-9ab1-58ebcabae6e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37cc2460-efb9-4d2f-9716-2d61a883a013"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91b1442a-26fb-4be2-a98d-b3b99a62e4aa",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f25bfa53-3dab-48f5-8d81-00e785108d4d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "04085df8-10b1-4cf2-a1e2-7123faad61a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebdfea42-bf42-40dd-9a01-479ef2ee5e88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6624278-c67a-40ea-b3f6-ff1b34f8b4c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db2dac02-b617-4360-b3ff-6b80971c2676",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "488188f1-5688-4bcb-ba0d-eae06ee91782",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b028bfc-1e12-4c2b-8bd1-720b0eac9e9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59dbe10b-f73d-4fc4-bed6-38ebae12f52b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29f5a6eb-58fd-420c-a395-21843479c181"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ebd9dff-7359-4e8e-9270-13a1459ee386",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93663197-12f6-4c24-b9d4-72a5243e0c1c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "899edfbe-127a-4974-ae54-53409def9560"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe1d1d77-34d9-4caf-8376-ecc9205472d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "947dbf8a-930b-4850-8d58-1b89005edabf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4421ff4c-e862-4194-9b1f-b689dfa29661",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a07e3a3e-32e0-4d3c-b5af-d0b547889fed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "abf63fde-5f02-4f58-8e04-0143dc777499"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74b10185-8d19-43bd-9ece-f9d95e529549",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba394415-b872-46e0-b3d8-ea021ce8436c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af1bcf50-4e11-4f4a-a967-1f58c09efcc8",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc9dcff0-63fd-46b3-b81d-caa448640c41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "702e20c6-23a4-473b-b671-32c7b43667b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "209df95d-2fae-4425-9be7-508f98d6c64d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6701007d-5332-4f62-bfc7-09250c9574e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f712834-61db-4f8f-b288-aaa8b99fe371",
                    "name": "credentials_verify:vc:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de1f3c13-ea80-4d7f-a037-bd642bca3058",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f93d5f30-bac3-47c8-97fd-dff0a47e7877"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db13330b-31ff-4db9-932f-8e1ee1384135",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84595b3b-f55e-43a5-af9e-d78299177bd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5d167dc-7ba7-4700-a0d9-9008e2e98985",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbee3946-bb9e-4519-8d1e-29c08ca4b9ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0091f4a9-e6b9-4aa8-b2b9-31805a5ffe99"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19aa33e1-f9de-453e-b935-ad1f8a8de02e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "850885a9-4eb0-443e-8eef-3f9b6b78598d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8ee2f79-c455-4516-9aca-0d1ce5451c72",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74faa563-add5-4bac-af5a-4392fe682a3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2c04f8c-2d58-48af-b247-fa1dc366ad81"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5947c877-f105-404b-9ecb-be558fb94015",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a1568bd-3b3d-42da-8b8f-3da40343f0ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58844339-4873-4e28-9500-24329d233d7c",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1992d773-d6ae-49e2-b734-16d0a4f8f883",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92dbbe80-c611-46bd-bd13-7ff5523c9d73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44230c4c-3d1c-4903-a796-e9eb7adb5033",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39b089d0-269a-475a-ab66-44318da66008"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab3e0200-233b-4794-92a1-53614dff03b6",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f226f6df-41c3-455f-b054-89988319b98e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d5b8d7d-2bb1-4060-8c29-81f17c43ef22"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "efda1327-b3d8-4797-b54e-5db8718c1740",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b552056d-4ee3-46c8-8c83-ef6344d9edc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81eb757d-bcce-4174-a878-20030e32e6d6",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4479ef90-d77a-40d0-a6fa-60484f04d546",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbacc0c2-e484-4080-9c45-16615e20d1f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc6cc620-1306-4a3e-9711-d643c7e6b53a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0eb1d2fe-6228-4ac3-972a-df380bebae3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d1aba7a-8c29-4da8-8df6-cf32b28c0e28",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38e6c318-ab42-4e33-963f-aacbfdf9ae77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7442c716-10b2-47d4-a12c-8b1f5e1b2a51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4282a8e8-2aec-40f2-9b57-141dd1345656",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33212863-6fca-4104-b633-20457f1c4754"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e424e546-cf25-4d8d-8f5f-c015b317f1cb",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62840829-9244-4f49-b7cd-fd8672abcddf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d8064d86-4468-46d9-84e3-8434cf4734bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5134d369-273c-4def-bcb9-f50a5694f3b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a908ddd-a0de-4472-a1ca-957c847fcd45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e0cd36e-7391-4bad-a193-5a4476a9bb1f",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0eb5d111-a15f-43b7-9780-fd2e24b465d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ddeb5a68-4a30-44fa-b45f-b984fcafa55e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42291e4a-a150-40e9-94f2-559bee9ffc9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b222e4a-344d-46bc-8f58-8f6e2ed3bc95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a1facef-0a76-47d4-8087-9be6114311e4",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bacc15be-a879-46b5-8572-60302d57864b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3ca8bd3e-b485-4d2d-ada9-0d16a019782f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77ef8ac4-b591-46b7-a596-17d5aad3cabc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10d6ab76-281b-4428-b8e5-1646199228b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ec26f47-9a71-4ed7-99f9-98497f47934f",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "945b1445-36b3-45e6-bae5-22406844bd26",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "728073c9-492c-46c5-b2e4-7cf7e620f501"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3794c369-d5c0-4d2e-9440-1076763566c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b277aab-4b86-4319-b118-f00c157e6676"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdf77d89-ef1e-4577-9982-a1e117be6db2",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23da4f0a-c9c4-411e-8b30-b811f67042cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25b7356a-cacd-4496-8938-27fe7f2f95dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "060a2a8c-9da8-4a4f-b81d-d6d2d6b7af04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c61856c-348b-49eb-a04c-ade9bb3daad0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a64ae4ec-12e3-4c07-b28c-0d067dd17e65",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e0bbf35-6c28-4ee2-aae0-b82fb684c2b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6d0de52c-8f63-41c0-81ed-989ab458bf63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "feaaf353-4656-4f33-8797-e475b9802ff0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cba6289-f5ae-42e8-be9f-e8df9003abab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b46fdc9-61f7-42eb-9dbd-092977f3a4fa",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e048b14-0cba-435b-b321-7694f79e60e4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e96179b4-b5ae-41f0-a7dc-8cb08dede665"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1787f493-d97b-4bc9-a776-8ce1dd8e2a6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ef19a46-075f-4443-9bf8-9f1aa8e338e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcf7ec2a-9d0b-489b-9e5e-93e649a2e285",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af41d8d8-35ab-4753-8a44-57519092103c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b9470b41-6822-4646-a19c-7b8af93e6eba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29d4f03d-9cba-4a35-ac1a-5511ac8295fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91030b87-5f93-4d0d-9e94-1bef1e1cfa3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d10ae4e8-d7d7-4c06-b0e7-f980e0871b2f",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc032482-4779-4bbb-a720-e8ba9ff3aaee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c3ce86d8-dc67-4274-ace4-18450616d213"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ef5bcc7-8d7e-45fe-a2a0-e96b18557bfa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f2e4434-3fde-400d-b131-6ff41f1e6d61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5adcfad-550e-40e5-a77f-4667b903352f",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcf98b34-277b-4856-970e-f16565906d83",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e4eae06a-b745-4fa0-b697-96d3c0bd8cda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5a6369f-93c1-4db2-be30-e647cf1bfc87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a458cab-7ffb-4a0f-8729-8b2cd6f0f4ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b1bcbc3-6d51-42f8-9fe7-ece060170ba4",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8332bbb3-c608-4673-8fb0-100cfdc69fb1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3421b9b1-6ae5-4365-b235-43755bfdca29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "315428c7-280d-4b8a-b369-28fdb53480cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b565a008-0a0d-4551-9a5d-82ec9fea6096"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4be6cc81-8721-458c-84f3-94f1c8d64577",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b744078b-3568-4083-88c9-8cc811b2e7b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5e27d2c-2a9b-4ca2-b075-fcbbc53d19b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "146e5a85-8ef9-403f-9b59-3e2c14441e61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30795f42-5624-4813-b354-d94231f670f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0251219-1604-494d-932c-2b110fec8fcd",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3770fd01-dec1-4583-a374-23761d8b83ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbbc2c26-1408-49c7-814e-8eb223c92ec8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a92fed5-6123-4afd-8409-5807a049a9fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1604f278-583c-4612-a032-61bb4e190b01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "034ee19a-b5ea-45dc-af1c-7f8496710ec8",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73a57979-0ec5-4e83-a4a9-cf5fd8781337",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3500efe-bbb1-4c30-8ef6-5c0cc7e89ad6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a53d794-d1e9-4c9c-83c2-a90a4dc55a11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a830349-ba8e-41f1-b47b-171b79507c53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7316e21-f129-41f1-9b0c-38a110f46fab",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4826c338-f667-4a64-ae0f-197fb1e7bdb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea14d7d5-58fc-48d7-88b3-8b4b76db39ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ace8d8e-9771-4777-88bc-8740ed0121da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c0d1884-26f1-4e67-8ffd-0b804b367590"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8c58c63-79ec-41af-b61b-89c64f23874d",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "388366f1-a321-480e-b31d-5876818ce7db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "693062c7-5b98-4d10-ab02-e953f16743c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "effc45a1-64d9-4881-a929-5d1c9365bbde",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f00991ea-d00f-496b-be97-4e42dedaffcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce421b91-e569-40c4-9b07-714365f863ee",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e47000f5-93f2-4e4e-83ab-dc5ab5e037e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04b6f49a-d031-4544-bb37-f86b8e720d8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aeefca7d-578c-4664-9cb2-8b1b1e13cc38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d85abacc-afbd-4ee4-9386-f24232b47941"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fcc11a2-75a2-4159-bf45-afb23ba85f40",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5b682c9-37b1-4edb-89ab-0bb934399094",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62a866c3-3705-4afd-9ba1-57ff18afd87f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76794f74-f508-4edf-bb97-ed26fdb8c319",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1217594d-0f48-47c6-b142-c8eea1de6d2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a8710dd-3c8d-48dd-9fea-a7cbfe850199",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4b48b89-59f2-4a8d-b8ad-21a9c427b928",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ba59b6b-fb8c-41bf-91a8-f8ac09673a65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53b1d183-df6c-4431-86b6-d71177b7d9a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1375d86b-8b5f-4344-8968-8651bff2412d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "658b71cb-74f7-4467-94c9-4d9a60d1fb9b",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b3636a9-a443-4a92-96e0-447ccccceee7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "084e150e-b79c-4f2f-901b-55c2c2c640cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff343f16-4bc1-42ee-81ad-e88367e329ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c992605-73ac-4b84-a8b6-e0b60149872e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0e90a3d-4089-4f64-9df3-c8114fe1f369",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d43f4a20-61ba-4470-a51e-06296fccd6ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fa18c74-8185-4f01-b5ae-aa1d8187baff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "863794c8-62ad-4f67-bbfa-4459faa1d4f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6582d83-f49b-4ee0-9117-723339d10bc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16f9c28e-ddf7-4b57-9723-a3748d0030b7",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcd50aa7-689f-44c9-ac41-9827e0685b3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "964ab19c-e00d-40f1-994a-6ef30b50e1cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7e2bcef-3ca4-448d-83fb-50f4ada6d688",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f71b3bf7-f3b9-468e-b5ee-af315fb86128"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42fa26af-3912-47a3-be5e-687ddd917afa",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8bdef73-386e-4764-a646-1166298aab68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00540295-c8e1-4763-a2a6-5037ab06d16f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1628d017-87f8-4de8-95a1-884ad4cf359e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99af444b-5577-4de7-8950-bbb9f44f88eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f2632f5-2710-4adf-b0e7-a9a96fee3a5e",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54b0809c-4e8d-4e44-92d7-1b0aa8acd74f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34f8c878-e988-4638-a1d5-4802dfb279d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "119eab9b-5b27-4524-b5c6-586116ce56c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e2f4fd9-ab83-4964-ae05-bd451403d993"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37d96206-4b9a-41fe-852a-5ae4ff949ee3",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85484121-7b9d-4dfe-8b82-e80e90434402",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f448dae-73d7-427a-9621-db87456ba669"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf51ea05-53a0-432c-9e86-b8b7da81f5d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d854f58-5bc6-4374-92ef-6c6e9c39d2e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6dc09a7-610b-49ac-be43-92d84dc10828",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "735910f9-68c4-4760-8fdd-e672646042a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "472df8b7-037b-4e5f-aa29-1b77b53839b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8c75362-c36a-4a88-8db1-08b3826c985a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a75c9f02-0c80-4fb7-86f7-ce20440d36bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a79e97b-0045-4076-9a18-dae8e6f5bf20",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2f666b4-8ec9-477b-958a-f12a6389228d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02f55fa5-9efd-43f4-9729-6b2472f4961f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5124229f-2ef4-4cc2-a442-619dec397783",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2714cd2-2225-450f-a82c-1ad34daa2f3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd3005c6-0e2b-42e5-b45f-e56898efbc77",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd4083b7-2ef7-41c7-afc0-6169f61ff040",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36c2e665-5aaf-4c1c-8bb5-82874a1694cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64de8c2c-3749-45b8-ad78-eb89941c5aef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44e69feb-1eab-4840-ba84-ea06209c77c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "002aa810-71e3-4819-a08f-2b7cb22a88f3",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e977e3f5-4c0d-4161-9d95-9f4a4ac0408e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73d522af-a6c8-4c7f-b857-06f9feca8d67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba4f004f-b7e5-4549-8e03-56da2e7158d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1733abb0-08c2-4b6c-b408-4dedf313733b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5610ffc-1879-466d-a519-2112b48f4d99",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9ac4728-8c15-45f6-8043-4dc64d5b0b8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4115aea4-88ec-42eb-af95-0fc050690e8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47e5780e-5108-4dfc-bdbd-d92aa5fcd6fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e56bcb9e-69ea-4112-a64a-b8c9393ae4ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f16d0fb-9552-4ddb-b5b1-f9df66aae1de",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15e8a80f-4c13-498d-8a49-16a42408847e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b0988c3-972c-41dd-9cd9-3cc1a3d34585"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4589c79-1f59-4036-a0bc-fd4553048038",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bde8007-0672-47f5-b2be-5b408b57f5be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "949aa057-a724-49ba-839f-8e1372d9de2c",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50f0b85f-2aea-4f92-8a21-b26f0215c7e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fefaabd-4981-4de3-81b5-55a04b1b3d88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3561f5a7-e4f5-40e1-9600-b68233424a2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1acc44a-4f74-463f-a840-69ff0c67ff3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53c37a8a-1982-477c-b0ef-2f480c483dc6",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2a77c3c-f131-4e97-88ca-125506e61043",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6733e488-6d5a-4359-82b8-d156936ef7f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb507a66-6a42-440c-9c87-0c01df07431a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f36e62e4-3ce8-425f-a5df-1b257e3d6f1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a532b97-880f-4264-9b36-da64be294f74",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00358c3d-2827-441b-83da-cbbfd8cb05fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d08e5d4-ebb0-40f2-9f93-82eb11a71519"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b08d73c-2da7-41ae-8e03-c24780cc1978",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0823f819-059d-4a04-8b03-a841b4b11e09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07a45376-2c80-4711-b0fc-15db3f687478",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9494963e-5fc5-4fd7-8d20-57486f7e78ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19175e52-5434-4328-be70-33dedf7dfa2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55ee6d9b-8527-4939-b80b-1f87ca36e4da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2926ffa4-0478-4c64-9e3f-12924b67e592"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55bf949f-0449-4576-ace2-8f02f6c154fc",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0e1d534-291d-46d3-a756-e9b3e1ca410c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd1e8505-4fe9-4ec1-a601-48548e6eb8a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77ae8459-8cb5-442d-ad72-bfde10126744",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ba287d4-6897-485c-bf43-03c02f83348b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f2db309-3d14-4a60-8926-fb162c1e42bd",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0e5f64e-10a1-4466-aa2b-983936f0aa98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41375e69-8085-41af-99e5-d174c4876d03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91179a92-1971-4365-b695-bf4a16db2f70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "954cbc05-a361-47c8-a869-af9023e9845d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22530386-8d5a-4d8c-90d3-f9f95c16373b",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fc261b3-3605-493a-8967-07658077a653",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96e3186d-8b88-4d4e-a11c-24da5840f3b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e288ba3-7a92-4b5c-8c42-a4e5c47dc891",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3c30f5b-8c9e-4eb5-9564-c2af9d77bbe4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "470038f7-ae6f-4648-a59e-b57a320a2968",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe87f70a-8a7c-4a4c-8552-faaa27212191",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef4b40c5-8dae-474f-8b71-72fb56b69cef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae490cdf-dfe2-4376-96ea-58643d84a6f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01acc20e-57c8-440b-8e2b-60ee9e3f5246"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd02b836-8ab6-4a82-af9b-4eaecea9d696",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64baef11-5be9-426c-bf50-5edc65c2e6a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7345116f-53a2-495f-86e9-16f3d17a89e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "429658a3-0e81-4523-bfe9-965c025a1734",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08b07d44-a7e6-4dbe-beb1-fb835cb97e7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6e343f8-9ba3-478d-b52b-9e61fb9d9e67",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49aea646-005d-4dfd-8604-412e058f18af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "641dd4aa-00b6-4e1c-93fd-0d5a24006abb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c757621a-1070-44b7-bfaf-aed956367c2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b77a8432-c733-4595-9784-2ff5a8089d14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0f991ed-6aa8-4be3-a3ef-1b006fbc5ccb",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94c0d729-162d-4c18-93c9-68bc35f207e4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "996435cf-e3c2-41b0-9669-01dbcd542aa1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c29590e1-4c46-4c21-88cb-a444cef84ce8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d5aa227-c81c-4928-aa54-e9017b1d938b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef551501-762b-44c6-8412-4886d7103948",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaad32dd-87e0-4fb6-bcb5-78d327504680",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5877165d-fa34-4d4e-af1c-2d607f60fd90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1c8a0a3-7254-4f48-9e90-613bf1d2b730",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f799ab4c-1cd7-40ca-8b79-bff90e9462cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e831da4c-3aa8-4f8e-9461-4fe98c8ee224",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ffb8fcc-885b-4bf7-a81f-b5751a706212",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e360ec90-bd1e-44a7-97a3-a03c726c0258"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "afc44988-7389-4861-a30d-855e9b06bdc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36fe9816-2a12-4d79-a735-f63f71a9257f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2450bab-187e-4fe3-9916-648f4068c7a8",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e89d8530-168a-4f36-b356-5bb10d15ccc0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e46cdd7-a465-4e14-b4d6-24470a1234b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "979b2b54-0605-4001-a300-88810b974165",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db596c7d-780c-4b0b-8f7e-245e864a484a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4de84fce-e4f7-46e5-a347-d16803a5f88e",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a88d77d7-ac5a-4efc-98b4-c2665fb37a07",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8f32fbc3-1cda-44f7-9b10-e5b2e1c37566"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa5902ac-5a76-402c-a9fd-97ece0f3c853",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9cdfa93d-39d8-4bcd-94a8-47494a644afb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f95f203-29dc-4748-ad44-b9a0e819c0e5",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2c6a00b-b287-42c4-bfd2-1d4434802fc9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "93c782e5-5a32-4cf8-bcba-9c82fc26294d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69b2b431-fbb9-41cf-ad95-555c971a69a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b8dd804-70b3-4984-8f7f-c60d39b6772f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ef75ad2-7da1-48dc-9c35-1f55069b019d",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5d3c79c-d7f3-45d9-8a3b-4ca27a79d4a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "67b758b1-ad73-493e-b840-45e844da89b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64778b40-d74f-4430-ac12-e3d1373e53fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1f94f29-9188-4fa3-b1a7-bfb10444bfee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd16ed64-f02c-4951-9eb0-603909469412",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b089eb5b-42d7-4638-b44c-3a9bd7c5e8c6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d990d9c1-6796-4350-983a-04b2c96f6093"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cde856f-ab34-4c45-9edc-adb3c6ea68e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4e11665-6175-420a-8bb3-1f7cd96b9db9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8dbaa5b-54d1-493e-9d43-10cb3b6b4610",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23ab5a82-63a4-464e-8dce-93d768e2ce5a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "634da8fb-cf0b-4948-bef3-c037608299ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d089e5b-9e17-4433-81e3-570cdee983fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe3d26aa-b08c-4916-af30-24caac59d8e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4bf1862-cb16-48ea-b0d9-d49f7a54d3ce",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cc042ee-976a-4d2a-9e1a-a42a616fc28b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "726bc8c0-9431-46e2-8559-b20f94b61e34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc9d57e1-5617-4f8c-903d-53692c00eb00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69047078-e8da-4f48-bd40-00e8724c1aba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8be2072-82a2-4c98-ac5d-6ac175e5d922",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b7485ac-4348-489d-ad5c-55597ddd53d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8d34c75b-83bf-4331-bdbb-e2ba88a3c979"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "534641a7-3410-4734-b66b-63712f48cd3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02cdb596-0970-41d2-af1a-5e2d1c15cee0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32089fe1-eb47-47b4-b137-b21fde6e78e1",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b35fab97-ce15-4d46-a6fb-4305039211b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "10977662-2101-475b-ab4d-d51762fa41bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "682babbb-90e5-4292-bd89-50a41765d4e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dde5a820-aa82-49a8-8741-269de5a3a20b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4c0f038-2588-46ab-8a62-cbafddf486a8",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "826852b4-6978-4550-a436-1341bbacc17b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "95f49aa8-4dd7-48e7-aefa-6d875dc0616e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c040e99f-ffac-4b97-bf96-302211238b69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8440eb34-919d-4929-92fe-d37b055823e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e80ff388-2eb1-46c1-acdb-0cdb2a3d333a",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0a284ba-c329-4c3b-950b-31cbf64e327a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "86cd5463-3d01-42c4-a3d0-9c73b37eb98a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea1d416a-57aa-40a9-9deb-3bc0d4848a43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5ef15db-fc3c-4468-934a-9f9cbe18beef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c8ea2fa-8d66-4001-b264-c4f6f29ecad1",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd280c3d-70da-42d6-bc98-42431bd833d2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d3ef9621-41ef-4732-a641-25a0c392cf09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a848cd4-2bfc-404c-b667-0233edb8b5b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96f3a0e1-22d9-46d6-aca7-ca6e448038ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4713561f-7b0c-4639-a54e-4afe90fad919",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32691006-113b-4a0a-91c0-5fcdda12dcce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6601faaa-227b-4e6b-801a-ef9ab9b30726"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08910817-6b58-4306-b32a-ad193fe683f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9349979a-b780-4dfe-a70f-90c187f4dcbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aad4086c-0ab4-4ee2-b317-8f252670d087",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "598b8d15-05a6-46f2-be5a-aa01466dc124",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9e4b9144-330a-46b2-8f34-29b56c18e388"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4acc86ea-7e30-4b32-a8eb-13147480c0fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b5e7c40-44fb-481c-90c7-d89a3875f0c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2213453e-d4c0-4fbe-98ae-674d9f6b4c09",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c379188-512b-4a03-8be1-3c8d99a1d5e4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d1059c65-5762-41b1-9ba6-2f21c00da917"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2576d2bc-d19c-4a28-ac66-4cb1e3612dd1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79b2be56-3aa1-47a4-9e49-99c1002612b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3e0d144-f1e9-435e-a58d-bf412c6a4151",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10031fb5-4a7b-49cb-a133-acd39055005d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b910286b-9562-4178-bcc2-cb5218fd7e7e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a66d1296-4475-4bd0-8f06-7d2cf7ee4d24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "078b3db3-49ff-4d7d-9ed6-6433ba3be11f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71d48cba-bf3f-41f4-97f9-1d91bf465c9e",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "359836b5-093e-46b0-930b-f61b8048f6e4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e3f509ba-7614-4617-89f1-a17c54a09492"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e36ccd33-ca75-4455-98cb-ec0262dd6761",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce65ad79-787e-4de3-b31a-1b152cec7234"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0e23d25-4f12-421c-b084-f0325bf775a3",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cd6c86d-7747-40b5-a5e9-51b94b6b17dd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8d0c1f19-73b6-45df-99a8-9be1da9bcad9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2db2e241-cdb4-4655-bc10-00e27596aafb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb6087fc-abe2-4b4d-a873-6e41b976711f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "577ce44a-c33a-43a6-9c50-b5a6eed7a3c3",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f51ddd5-0a64-48ec-b482-485086b4d056",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "498d577d-a13e-4ddb-8f8d-b4f26c137cf0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3691c787-b681-4e90-8b5a-02e2535e3805",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42bd38e0-42ae-4a0e-ace3-e5cf9523419a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6145c6b4-5796-4f8c-b84c-cd0560cee908",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fa2f201-51d6-4cab-99a7-034a2cb17f97",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d74cd20c-4b95-44ab-85a8-4a3133c576b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49e837f5-6259-4c5b-a7ac-4ea1a9284832",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7fe3ce6-05fb-4108-881d-c86add969e3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "746163ce-24ac-47e6-aeaf-b3153c5eca3a",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2acf6acf-acbd-488e-a400-50de912fb143",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "35ed0fa7-3ca6-415f-8594-a9062f81fdda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95b6d9bd-04ee-4a01-aab2-ce58533232bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea7ac043-d81e-4d57-aebf-d6d4bceeaafd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "664c3a67-15e4-4134-afb4-4271c5255755",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfa87353-4c37-46bc-887f-ddc20e662112",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f2a7db05-8822-43f6-a9d0-e22a7e2d44b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b3d124d-d827-403c-857c-24d7bba3e4fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "692f0f50-2d68-46a4-8fb0-3f78393f3fb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82ae52a9-884d-4177-9e0d-dac2776c19a3",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05ff31e5-f25b-452c-82e7-28254506aedf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "da733e21-fa93-450c-8869-2b33d94dd6a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0271634b-46f7-41ce-a177-cb117df11780",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "894b02f8-f390-4a40-bbe9-f1f0de89811b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14543f0d-0931-4ba1-9cf1-34a73786025a",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "172f0c6b-c7b2-4b1a-b41d-cb14e24af76c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9dbf711-a097-4f90-ba09-d81197630f12"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4b4becf-fd10-4df0-adfb-46a2c1cd9fce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b648ce2-de71-4bc7-947a-0f77b64d3105"
                        }
                      }
                    ]
                  },
                  {
                    "id": "698f7ed6-9e27-49ae-8485-19258b51e03d",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94e78119-12f5-4240-bdd5-642a831caf8e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "53dcc332-ce2a-4836-a0bf-6915c1a0bc58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e38399fa-cab3-4b5f-b564-dab00236ab1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1789b2c-af8f-4cfc-91d2-dd0b3376130e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74735677-6349-4baa-809f-040f5cfeaee6",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c92d003f-7048-4085-bae2-8e810bda7dc3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0402408d-320a-4241-92d6-060a7eda088c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4da6c2c0-bbc5-4281-858b-573dc279c2b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "beeee141-5843-43d9-a57b-7935d7dca1d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0cdbd53-666a-4276-aed5-5c066675be80",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afcf00d5-b021-40cd-bfc1-1eb228d6e009",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0eb81092-f912-410c-a2f3-1d25c8c79ffd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "709f11ea-4577-4bc8-aa9f-ea08ff63a2a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49b9b375-6256-4f68-a9e0-e00ff0a88447"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbbac7a3-d40d-47bd-9563-30cf121f3225",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d03bbb6-84f2-4a68-bd5f-2686ea26d769",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a96b1a51-3158-4324-a64e-9b9fbebefdde"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc7f324f-80bd-4509-9c0a-b88d0a6f3f8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0912027c-df8c-42f0-88e7-d6bf1fda62ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01269abe-fb84-489c-a5a6-d7dade3cab7c",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2f7e2be-731b-4eee-8c51-6fac9a680874",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "49ca116d-11c1-41d0-a5e6-302e5f649561"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a09380b-cb69-47fe-af61-01b009a506db",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c7efc3d-0c97-4ec6-aa78-78765dfd1f2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b31b955-d1a7-4ab0-ae75-56ef4a98ba68",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "406102b1-005d-4173-981d-2fc6b1700b24",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b6322b31-b4dd-41a1-a064-06534956a5a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ff61db6-a168-49e5-9bb9-c877fb006715",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b12ac40e-15cf-4142-b8c3-8aee2ba633f2"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "882d254e-e9cf-4f0f-9773-8dcfd811e89e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5da04b1b-50c3-4e88-862f-06fad7281ce2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "15979f89-8ca7-4095-b0fa-f5c1368dc78d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bb6510e9-40c5-4045-91ad-2e50b41bce44"
                    }
                  }
                ]
              },
              {
                "id": "38aed8b7-2d91-48f1-b128-610b2edb4d0d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "dd0705ff-adac-4eb6-8155-3223189e23d2",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f61eb5a8-eca5-42f2-9154-d01b18df903f",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "78b95616-16d3-4cb7-b032-ca20d9258bfd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2f83087-5465-4f4f-a3bf-f994bf490ce6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a15c9572-905c-4f0d-afc7-99448f06cbd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a9b55e7-6f1a-4ff6-a098-a18843db240f",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f3fe27a-5e34-41de-9a59-b23c0a503041",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "4641224d-6fc2-44a5-b5ee-8ed02e71c975"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3959de3f-9bef-4f1c-b105-fb4171176efc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "08cda6c8-a5f6-4961-af19-65ae42adb09e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ed0e7fa4-eba3-4a61-87f9-26119d469950",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "711d648f-3029-46fd-83d0-6c70bfedc42b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7fdde92b-c75e-4993-9e7b-75048cc5758d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "87b8b8e5-3b7f-428a-9b44-8ec59cc02b70"
                    }
                  }
                ]
              },
              {
                "id": "39ebe632-604d-466c-8464-e384034dce9e",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "48b2df17-3d7c-4ac3-9a30-58a15fa34905",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "980de1c3-ee97-4158-9fd0-b036bfa8f115",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "d295572e-16c6-4f75-865d-fb8a8b8843cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83c49257-9461-4bb5-9eb9-1ef3b002e5e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5811df14-232b-4c67-a758-bf35b57bb102"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "ef6dd09a-b8b0-4ce8-9521-553f4e9e15ea",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b03a8de2-2102-4292-9420-ea9858a0526b",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "aa09f4d2-7d77-4ce3-8c5f-76f7a90cf32c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "6878ea52-38b2-46e8-8ca0-396014cc151d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5f70fc47-2c3d-433e-b0f4-6611c4133a16",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f2a3c608-29a8-472d-ae19-3c9070f85822"
                    }
                  }
                ]
              },
              {
                "id": "e0edf5b3-c2b9-4a1b-a2fe-2cf8cc24b9b1",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1cc58f64-a7cd-423d-a895-5fe8e6a609ad",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "20fb027f-78f6-42a9-8a81-2673c2203682"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e5d49219-61c8-4878-9593-af9246ee7387",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cd86ce35-4440-4eb8-98db-98d60a6f52c2"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3a400c98-4c66-4e2a-b1ef-38baac8bd31b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "a332118d-aed2-4d89-941a-62cb7317934b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fb5189ca-e3f9-409c-82c8-f2de28336e74",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "567eb2e2-0170-434b-bbcb-b626036a991d"
            }
          }
        ]
      },
      {
        "id": "3ed4436b-4e01-4674-9507-f3505bf450b6",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "1b73f25d-6c4d-4cfb-bb4d-21b87b05ee64",
            "name": "Negative Testing",
            "item": [
              {
                "id": "993c272b-731f-413f-82a1-a42dba0f4070",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0eb0c0e9-8cb6-4c91-a166-dc48887c8746",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa3269ce-a8fa-4f97-9d40-6115563d1fc2",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "3b8752e2-cbc2-4f60-9246-49e3ff8f007c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aab43d5c-5777-4266-882a-17d492b5aee0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "313be65c-a6b8-4022-990c-0bc0be341e78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b0555a2-60e0-44ae-88a5-93dda8f4e27e",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4203562-cb4a-4714-9a39-40c19b1af342",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "86648c70-a979-4af1-ae8c-a9a3b23f86ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac232395-a7a4-4e8e-9b57-31703ce31415",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "857012f4-898f-42ad-aff5-0e762d1048f7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "33ed531f-b0b1-4ac7-bd13-d64c47769f59",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d19cc3ba-ed26-49ac-aeaf-c865642c14ce"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a0bb904e-8e86-413b-bdd3-ae0df9be2a4f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c708060c-3555-4da0-b66e-1ff57c46ca21"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "894db366-99e3-4528-be9b-d51766cd6289",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "ea2c91b0-07b8-4a5d-b504-800e2e57ae64"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f82c8d57-d772-49d2-9f40-21f5d449f327",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "369f9c22-a3b7-4697-bd5c-5c382c7071bb"
            }
          }
        ]
      },
      {
        "id": "2bad214c-31a4-4635-8fde-8e251412da7f",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "757e71db-386c-4613-88c2-6950d93f8691",
            "name": "Negative Testing",
            "item": [
              {
                "id": "76343c7d-3657-4e2c-b4c3-27d8683797cf",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e3014554-96c7-43a9-a6f1-93ea625ac72c",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48b840b4-1d8a-4ff7-851d-a8cd628439fc",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "94e886ae-699d-4884-9a6b-ee03bd98f5b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eef2a668-52f6-48c2-82c2-79a1744fc702",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d647987e-cc15-4807-bd39-736ce5d5f7e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9320b270-6545-466f-87d8-f5b6edf7c72f",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7efa7a23-e39d-40cf-9cc1-054b5a1b70c7",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "0f846a2a-3f23-44e3-b219-a4d6e669aaaa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bef77705-d010-4731-8927-474c987eee85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2b6b81ad-e787-4f08-9eaf-7d4139e5fce2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0d185054-606b-4956-ba29-c38e35c98ae3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "03d69311-f7fb-4e88-a491-a107dcc3025a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7645ded6-8108-46a5-b301-ad7103594fc4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "41de2575-6e72-4ade-8e65-e07ed0b1c00e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c73c8e69-e1c0-41d9-8817-f3518b4a6e65",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "46c6c096-ecae-4225-8dbf-2764765b36a8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d547376c-4873-41db-9472-733ace50df2e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "907373b5-27ea-4f47-be6d-28d8167fd46d"
            }
          }
        ]
      },
      {
        "id": "7e38cb6d-dad7-4e38-9fad-ed5ab9896732",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "ae7ded0c-ca2a-4880-b69c-9a48348cb973",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c43b3ff6-462a-40f0-9e4f-92f34d7e3b77",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "dfbcf521-5a9b-41b1-adbb-9ee04c2fd048",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e57b416e-c8e1-43a5-8da7-438886b9e8a3",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "02904da2-d2db-4812-8c4b-0bea630a69e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bdade30-82d3-496e-91f5-51475cee9235",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1a0b7ec7-6aeb-48e9-913c-dcdece667473"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e70029d3-c301-4279-bb4e-5bba45950e62",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "535a00df-ddb4-4e56-b6d5-1ea4a15f9d4f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "2690be76-fa7e-442e-92f5-2ba0642f5151"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfa19dec-a9a2-469f-b653-a88b8b50c4f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "056873e8-611e-407c-b585-a222d41b693c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "97a25f7b-fea4-4c09-b1d6-5b657e6a2234",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "68a86337-405e-4fc5-9ba5-24f72106e86a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8a91db48-97f8-40cc-9298-052d86b658c3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c6463294-9e06-4439-ba9c-e3075aa9ffc7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bda44b1e-0396-4439-84e5-91903cd2c8c3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "9e65eb69-ff78-4244-83b2-fdc4a2620c48"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d98bce89-5d5e-40e9-a2da-717042251c9a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "48d3c598-fcb1-4ff3-8de7-decc58d2a5dd"
            }
          }
        ]
      },
      {
        "id": "dedd8114-7d97-4de0-90f3-4c40bbec0d17",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a4f09a67-8abc-4bb6-82fd-d1f9e8969415",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4d27cd97-6575-4380-ac54-ba34e0f073ff",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "b73e22cd-4efb-41aa-af32-c6660d1e0564",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e54b86e9-7c2c-4e38-8882-2989b8756b29",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "aedba1b6-3468-4ff3-a500-b64ac167803b",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1925,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 262,
        "pending": 0,
        "failed": 6
      },
      "tests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 517,
        "pending": 0,
        "failed": 60
      },
      "testScripts": {
        "total": 967,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 958,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 37.94778285533822,
      "responseMin": 13,
      "responseMax": 344,
      "responseSd": 30.86231398407205,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1674866378697,
      "completed": 1674866399952
    },
    "executions": [
      {
        "id": "26a17021-0908-43ba-bbf4-a61bd004c81d",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 253,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "5310a6f8-d1ab-4d72-934f-d14d7a76e03e",
          "httpRequestId": "902c85ed-ab25-4455-aa9d-1c3a65ffd7e1"
        },
        "item": {
          "id": "26a17021-0908-43ba-bbf4-a61bd004c81d",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "1cc75fbf-6be9-4222-9e0e-d7dc9b941a43",
          "status": "OK",
          "code": 200,
          "responseTime": 94,
          "responseSize": 0
        }
      },
      {
        "id": "1aaeaa2f-60ea-46b0-87ea-b3641e9c3119",
        "cursor": {
          "ref": "7c63e490-d299-4b9f-8113-24fe9612e865",
          "length": 253,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "be9b97f8-c5bc-42eb-b912-48006a608b44"
        },
        "item": {
          "id": "1aaeaa2f-60ea-46b0-87ea-b3641e9c3119",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "7a8c66af-cc1f-4c6c-94d6-8e0c8db96f64",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 0
        }
      },
      {
        "id": "d9b61396-fc11-43b7-b86f-7d835ef24961",
        "cursor": {
          "ref": "6c1e4c9f-1509-4443-b61b-0ab1eda4e48f",
          "length": 253,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "0e76c34b-c2da-4e47-814a-332922ce0ae4"
        },
        "item": {
          "id": "d9b61396-fc11-43b7-b86f-7d835ef24961",
          "name": "did_json"
        },
        "response": {
          "id": "313ceee6-8c26-4a30-9939-ee95ab5186ab",
          "status": "OK",
          "code": 200,
          "responseTime": 153,
          "responseSize": 1211
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18f08930-7f5f-4f1f-a1c4-cdb9a5a97be1",
        "cursor": {
          "ref": "23be9ece-a81f-4323-83b8-45bb76851924",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "6c94c9ce-face-4c0f-9ef5-f46b13f5e7cd"
        },
        "item": {
          "id": "18f08930-7f5f-4f1f-a1c4-cdb9a5a97be1",
          "name": "did:invalid"
        },
        "response": {
          "id": "c4c89bb7-6da4-4f37-8303-6f0dbea1fc4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "18f08930-7f5f-4f1f-a1c4-cdb9a5a97be1",
        "cursor": {
          "ref": "23be9ece-a81f-4323-83b8-45bb76851924",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "6c94c9ce-face-4c0f-9ef5-f46b13f5e7cd"
        },
        "item": {
          "id": "18f08930-7f5f-4f1f-a1c4-cdb9a5a97be1",
          "name": "did:invalid"
        },
        "response": {
          "id": "c4c89bb7-6da4-4f37-8303-6f0dbea1fc4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "df99c441-10e1-40bf-9c97-421a16bb97db",
        "cursor": {
          "ref": "a4b79a43-63f1-4a69-b25c-8fbe19cdd8e4",
          "length": 253,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "00ac2ac5-2fe1-453a-bb0d-441ee9085edc"
        },
        "item": {
          "id": "df99c441-10e1-40bf-9c97-421a16bb97db",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "ea221094-54d9-43b5-aeeb-a139bd9f844f",
          "status": "Not Found",
          "code": 404,
          "responseTime": 77,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d58ff578-6e87-4290-8cf3-9ed3b44a5822",
        "cursor": {
          "ref": "e1ba6571-1a4c-469f-8cc7-cdd75c674d00",
          "length": 253,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "b317a021-5171-472b-9d6c-52f6de627cba"
        },
        "item": {
          "id": "d58ff578-6e87-4290-8cf3-9ed3b44a5822",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "7f0b73a0-7a1b-4c6c-b427-f34c199e841b",
          "status": "Not Found",
          "code": 404,
          "responseTime": 32,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61807207-735b-457e-9859-2e4b4245422c",
        "cursor": {
          "ref": "1751d8c4-55ac-4c54-9e00-57890cbee91d",
          "length": 253,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "69bf9044-fed0-41a9-826c-a983ee665697"
        },
        "item": {
          "id": "61807207-735b-457e-9859-2e4b4245422c",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "46190b1c-b0b8-485d-953e-e8093fbc5da7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 31,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d28a8b5-cf3f-4616-aeb4-cc013b8adb7f",
        "cursor": {
          "ref": "e620bdd1-fd69-4e50-9df9-8a870c6fb5e5",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "e098963f-f0ae-48f2-9fd7-d8d733f7f774"
        },
        "item": {
          "id": "3d28a8b5-cf3f-4616-aeb4-cc013b8adb7f",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "7cf80839-25fb-4407-b2bf-bc0f5961362a",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 31,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d28a8b5-cf3f-4616-aeb4-cc013b8adb7f",
        "cursor": {
          "ref": "e620bdd1-fd69-4e50-9df9-8a870c6fb5e5",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "e098963f-f0ae-48f2-9fd7-d8d733f7f774"
        },
        "item": {
          "id": "3d28a8b5-cf3f-4616-aeb4-cc013b8adb7f",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "7cf80839-25fb-4407-b2bf-bc0f5961362a",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 31,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2e19143-7574-485e-bd4a-e30400a9a5c2",
        "cursor": {
          "ref": "67797a12-18e4-4402-982f-c88adbfb8071",
          "length": 253,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "46d1b684-ec92-4d8e-b243-87ca0132ae2a"
        },
        "item": {
          "id": "c2e19143-7574-485e-bd4a-e30400a9a5c2",
          "name": "identifiers"
        },
        "response": {
          "id": "b9d61760-6cb8-437d-b4c7-1d1063212ac0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "0e080399-182c-4596-89b2-2839d5c910be",
        "cursor": {
          "ref": "107af867-c902-4bb2-a75e-2c9c5d8ff7a8",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "2c9506c4-7edc-4b53-bb59-8c0f8ba7bbee"
        },
        "item": {
          "id": "0e080399-182c-4596-89b2-2839d5c910be",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "484bf91f-4e9a-4ee5-a899-8f6ba50ff041",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e080399-182c-4596-89b2-2839d5c910be",
        "cursor": {
          "ref": "107af867-c902-4bb2-a75e-2c9c5d8ff7a8",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "2c9506c4-7edc-4b53-bb59-8c0f8ba7bbee"
        },
        "item": {
          "id": "0e080399-182c-4596-89b2-2839d5c910be",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "484bf91f-4e9a-4ee5-a899-8f6ba50ff041",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a56bd82-224e-4e91-b50e-652dbe7c120f",
        "cursor": {
          "ref": "ade7293d-ff41-4067-b761-f68109b49e5d",
          "length": 253,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "da629ef5-c702-4f0f-a87b-fc5ee0f62163"
        },
        "item": {
          "id": "2a56bd82-224e-4e91-b50e-652dbe7c120f",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "781d9c7c-5943-4509-bfff-914a2eb80817",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92589a07-79d3-455b-89fd-d62dc3203326",
        "cursor": {
          "ref": "b3bb9801-483d-480f-bdf9-fbd3989a63af",
          "length": 253,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "8cb09888-abc0-4fd3-ae2f-ddaa1ddc8725"
        },
        "item": {
          "id": "92589a07-79d3-455b-89fd-d62dc3203326",
          "name": "credentials_issue:credential.@context:invalid"
        },
        "response": {
          "id": "49956b5b-adcd-4448-bc8e-130a245987a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 176
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92169717-3ef4-4c8a-8b37-672c9b6834dc",
        "cursor": {
          "ref": "9666677e-96cb-4f02-ac58-7666a547f1dc",
          "length": 253,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "431764b7-f375-4be0-aa63-c91ca1290516"
        },
        "item": {
          "id": "92169717-3ef4-4c8a-8b37-672c9b6834dc",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "caff1514-1bb5-40e5-b08e-93e193aa8a1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b318481-7d8a-4ee8-8f30-876fff3b4037",
        "cursor": {
          "ref": "3226dc9d-0bbe-4dd9-9282-33739989f9ff",
          "length": 253,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "a8c879a3-d999-4d79-8fa1-84a015522c48"
        },
        "item": {
          "id": "2b318481-7d8a-4ee8-8f30-876fff3b4037",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "13837f82-0b00-4b0a-adb2-8264e5af1c9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac40158e-0d0d-4a0e-a5bd-3b98e08600bd",
        "cursor": {
          "ref": "80644aaf-a172-48b6-aa2a-918cbd9b2147",
          "length": 253,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "2fdc95b6-243c-412a-880a-96afab9f6b48"
        },
        "item": {
          "id": "ac40158e-0d0d-4a0e-a5bd-3b98e08600bd",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "132e3561-0202-4e0e-91f7-aab32e73805d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca9b6978-e519-4201-a4c4-314c625b77a4",
        "cursor": {
          "ref": "ede5339b-a79f-4966-8df9-fa379cce7498",
          "length": 253,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "65429ca3-8d86-469b-babf-de5845e0abfc"
        },
        "item": {
          "id": "ca9b6978-e519-4201-a4c4-314c625b77a4",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "767e9c0c-1710-421f-8e78-44129fda3443",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccb05096-4531-4ecc-b4fd-31dd2cf1d245",
        "cursor": {
          "ref": "2a8daafa-ec80-429d-ab32-4544ab0e2df6",
          "length": 253,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "16500dd2-1715-477b-b497-4bb4de51f2a0"
        },
        "item": {
          "id": "ccb05096-4531-4ecc-b4fd-31dd2cf1d245",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "f9502f6b-d8ce-4c1d-841d-f26c7bba9ef5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "213f7783-b2fc-47dc-9f0e-abbdbf7522db",
        "cursor": {
          "ref": "16dbeb26-baee-436e-b3ac-221e6c6c6f9d",
          "length": 253,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "51c40d19-60c8-4ca9-a997-b0f3a3af8262"
        },
        "item": {
          "id": "213f7783-b2fc-47dc-9f0e-abbdbf7522db",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "c9278901-3259-4116-9e66-b5f136960f7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86f82424-1199-45e1-a682-bb99aa00b678",
        "cursor": {
          "ref": "5b8f0d81-eb34-4b91-9221-379b645fb82d",
          "length": 253,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "ea5958e8-96ed-4fa7-8360-ae995801af80"
        },
        "item": {
          "id": "86f82424-1199-45e1-a682-bb99aa00b678",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "dfff5eaa-ba9a-49a8-be08-69a22bad59f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52c68f03-18ba-4b27-a671-74d852e80585",
        "cursor": {
          "ref": "9a29f7b4-62b7-4824-a3ef-31e858110e0d",
          "length": 253,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "e1e1f7ba-4025-4039-8b30-53b1dee9a39a"
        },
        "item": {
          "id": "52c68f03-18ba-4b27-a671-74d852e80585",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "3ba19402-4ffc-4c38-aea2-26c5a44e314e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d74ff95f-3d6b-44bb-8497-00f63d37a3e5",
        "cursor": {
          "ref": "09f20d57-3132-4bb7-8fdd-bba1210ed6d1",
          "length": 253,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "5fdd7375-e905-4d0c-ad6e-903cb55747c9"
        },
        "item": {
          "id": "d74ff95f-3d6b-44bb-8497-00f63d37a3e5",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "8a3a245f-00e1-4fe9-bfff-e0cb24038b54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1437fcc-4e05-4829-ab54-b96726e36716",
        "cursor": {
          "ref": "03ea8689-6fd5-40d2-8eb1-fe7e80f3b598",
          "length": 253,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "a0d139fd-0583-42bb-8e1b-0ee0fb792397"
        },
        "item": {
          "id": "a1437fcc-4e05-4829-ab54-b96726e36716",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "02d25771-1c8d-47fd-8fcf-07c810731275",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac5d48e1-7d9a-4f6c-b949-4875f6c615b8",
        "cursor": {
          "ref": "45579fa2-6a76-42c1-b572-41a5a4504e15",
          "length": 253,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "dfa1fd67-c2cd-4778-8b5d-ddee02dff142"
        },
        "item": {
          "id": "ac5d48e1-7d9a-4f6c-b949-4875f6c615b8",
          "name": "credentials_issue:credential.id:missing"
        },
        "response": {
          "id": "6cac5907-0759-4c16-b2fd-36dc5b36454d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41e9613b-8e90-430e-a129-804801f55590",
        "cursor": {
          "ref": "9b0b2020-434d-41d7-ab90-568bdc9587fe",
          "length": 253,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "fba0ca93-b031-453e-97fa-ad2e82e2923a"
        },
        "item": {
          "id": "41e9613b-8e90-430e-a129-804801f55590",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "65f9d7d8-40ec-4caa-9529-6007fe1e2e4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e46857a8-8233-4dc9-b4cf-0594d6d4c8f7",
        "cursor": {
          "ref": "6eac5fdc-83bb-48c3-882c-2c69f0c406bf",
          "length": 253,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "3e31a127-70a9-40dd-90e9-f3bf622e2efc"
        },
        "item": {
          "id": "e46857a8-8233-4dc9-b4cf-0594d6d4c8f7",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "1fcc19f4-575d-409b-aa4a-090ea362316c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68fcb7e4-9bcd-473e-adf0-8e18abc7ab61",
        "cursor": {
          "ref": "58ddaacd-0cb0-4329-af6b-f876a28acfe5",
          "length": 253,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "c9d6452e-43f6-4632-a049-ec6c48d134c1"
        },
        "item": {
          "id": "68fcb7e4-9bcd-473e-adf0-8e18abc7ab61",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "e27f2c0f-2fec-434d-881a-8ee08301af0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0aeff3b-f748-42c9-b464-ac551677e58b",
        "cursor": {
          "ref": "e454f8c1-c34a-4d8b-a6d3-d077fbc7a18f",
          "length": 253,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "e36aadfa-b6d1-4e97-9d33-7010398868bd"
        },
        "item": {
          "id": "f0aeff3b-f748-42c9-b464-ac551677e58b",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "e9e082c0-2e4e-44e7-b788-2ae2003ebab4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9f467fb-bebd-4c52-8002-3e7afd2698dc",
        "cursor": {
          "ref": "07f0eaf0-d888-4e22-a3d8-04407e56b178",
          "length": 253,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "71880999-ab6d-4ee7-8acd-7f1e0848951c"
        },
        "item": {
          "id": "d9f467fb-bebd-4c52-8002-3e7afd2698dc",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "602312ba-4f5c-4037-9d0f-3566db1b87f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7cc19dc-b9ed-4b25-9f7b-796e70eb1d02",
        "cursor": {
          "ref": "139ff950-a7f5-463e-9c4a-e188f024c453",
          "length": 253,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "39ce3e5a-374c-45bf-a158-09bc25b1a462"
        },
        "item": {
          "id": "e7cc19dc-b9ed-4b25-9f7b-796e70eb1d02",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "627e20a0-f9ff-49fe-ad9e-9746931553da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9caf431b-16ae-4431-863a-aa43f31d5719",
        "cursor": {
          "ref": "4d7d6b4a-6045-48dc-a4b0-72fd4bddc13e",
          "length": 253,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "8de657ed-5d8f-4b75-807a-14168859a588"
        },
        "item": {
          "id": "9caf431b-16ae-4431-863a-aa43f31d5719",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "64d6f8d1-4738-40ab-a0a5-25d28f7b46a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "330f9a27-36f9-475b-89ee-c0cdbde76c23",
        "cursor": {
          "ref": "8ba32559-dd1d-4550-a83c-c9f6e0d79124",
          "length": 253,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "b786ac8b-adb5-4a22-b5c5-a3a32419c74b"
        },
        "item": {
          "id": "330f9a27-36f9-475b-89ee-c0cdbde76c23",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "339bcaef-047f-4e1d-a22b-93efd308294a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8aaf9d9b-e778-44ae-acf4-2b1831803f02",
        "cursor": {
          "ref": "89d38fb5-f17a-4af9-b00d-4ffdcc700d62",
          "length": 253,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "c8f98a84-eecf-4059-ab27-9cc404a976b0"
        },
        "item": {
          "id": "8aaf9d9b-e778-44ae-acf4-2b1831803f02",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "6d9d6312-97d4-4ed5-aa6a-216ffbb63bc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43ceb7b4-4982-4498-952e-a4354a8053e3",
        "cursor": {
          "ref": "4a7da255-b957-47f6-a70f-7c29e0886ef9",
          "length": 253,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "31255fcc-2b44-4f91-a721-4d87839160ef"
        },
        "item": {
          "id": "43ceb7b4-4982-4498-952e-a4354a8053e3",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "ee47b3ad-8763-4fbc-95bb-53ea9e0a9a8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce05ba03-456a-4d09-a851-970d913926e3",
        "cursor": {
          "ref": "a58d623e-7c6d-4343-9318-0a8d5a26a83d",
          "length": 253,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "44177cfc-b5ee-4c42-8f3b-db6bd02d2e57"
        },
        "item": {
          "id": "ce05ba03-456a-4d09-a851-970d913926e3",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "eeeedf5a-434a-4b64-b34b-e32ceafa2a8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc4fba65-88b1-49c3-bbb9-4ba082e034e0",
        "cursor": {
          "ref": "55c347be-9514-4047-906d-812fc016c8c5",
          "length": 253,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "f8c533ae-db07-40fa-bc01-98e217d488c3"
        },
        "item": {
          "id": "dc4fba65-88b1-49c3-bbb9-4ba082e034e0",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "1a440c79-9323-4aa2-a724-ba10784b06ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05f2d17f-734b-4849-b1b9-b7c04f6c76de",
        "cursor": {
          "ref": "9b769991-2568-4979-b280-8082daed2058",
          "length": 253,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "84844350-2d80-4826-9c8b-90cd7608c532"
        },
        "item": {
          "id": "05f2d17f-734b-4849-b1b9-b7c04f6c76de",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "33142733-ba65-4abe-b0c6-34897d4000a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3306e891-b654-450d-b378-d9c43b1034ed",
        "cursor": {
          "ref": "179f7b20-5e00-4f3a-8ebd-f43c653464d1",
          "length": 253,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "655dd958-7590-4901-accb-3cc371ebd62e"
        },
        "item": {
          "id": "3306e891-b654-450d-b378-d9c43b1034ed",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "f1c8b367-c9d8-4521-865e-d20b78a0b958",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18875a98-9337-47ad-821d-30d7959f7507",
        "cursor": {
          "ref": "cf41dd97-9af5-40e9-a813-84e4658220db",
          "length": 253,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "8695f780-4eed-4d3f-8cb9-64f6792a37b0"
        },
        "item": {
          "id": "18875a98-9337-47ad-821d-30d7959f7507",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "f091d351-3e4b-41fa-b210-b42e873924e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19f36d97-4f17-43e9-b3fb-6d83eadd7119",
        "cursor": {
          "ref": "6ebd58e0-ae38-4391-b1ed-4bc391e114c0",
          "length": 253,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "a38e0855-1da6-40cb-8e2a-435f77670e34"
        },
        "item": {
          "id": "19f36d97-4f17-43e9-b3fb-6d83eadd7119",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "d1e75f0e-5f16-4f02-a113-5e34287fd9d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "546ac85f-e4e9-4efc-a671-14080969ddeb",
        "cursor": {
          "ref": "2c29e227-4128-4dac-ab07-08213c4e69e4",
          "length": 253,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "7f830efe-19cd-49e9-af03-f490e6020c79"
        },
        "item": {
          "id": "546ac85f-e4e9-4efc-a671-14080969ddeb",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "bc496e39-52d7-4915-ab74-26218421c320",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e533105-cb53-4d3b-8aa6-9e1a73e6ab01",
        "cursor": {
          "ref": "c6c9a1ae-f8ae-4193-ae28-823a0e96b641",
          "length": 253,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "d0f4f916-0cc3-44a3-9b35-a49364aec96f"
        },
        "item": {
          "id": "1e533105-cb53-4d3b-8aa6-9e1a73e6ab01",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "b7c88fe5-89e6-4288-89bc-035b65af74a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "373d37a3-8529-4c2f-a1a8-84d4d84fab1d",
        "cursor": {
          "ref": "e1d03ca6-6be9-4659-8319-111dbce797b4",
          "length": 253,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "e82a8b3f-84aa-4baf-a55f-399eeaf4b1f3"
        },
        "item": {
          "id": "373d37a3-8529-4c2f-a1a8-84d4d84fab1d",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "36689c4d-f51b-4fe3-a757-3b394aed31b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d766774f-14f9-4b44-b255-2fd8f6e671df",
        "cursor": {
          "ref": "73684fd9-aa04-41c0-a5c3-3d1dfe46cc5d",
          "length": 253,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "86434dac-9a42-47d0-9489-479377fc6043"
        },
        "item": {
          "id": "d766774f-14f9-4b44-b255-2fd8f6e671df",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "320c66b2-7346-451d-b090-4baf1b75f5c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "848de9e6-c134-499d-9e5b-03c7aa8502b9",
        "cursor": {
          "ref": "1dd3a3d0-9326-49fc-9cf3-dfa67bc8dc0f",
          "length": 253,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "059f835b-1522-4e85-84cf-5e3190ae76ad"
        },
        "item": {
          "id": "848de9e6-c134-499d-9e5b-03c7aa8502b9",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "a406800c-d04b-4c19-ab43-274802879752",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df272e42-3511-43b2-a2de-e624d3faa5a0",
        "cursor": {
          "ref": "6421fd69-9585-484d-b8df-2af57a2815c5",
          "length": 253,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "ffcefb25-4108-4b04-bb6f-586588d1ef3f"
        },
        "item": {
          "id": "df272e42-3511-43b2-a2de-e624d3faa5a0",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "e33c7948-cd5e-47a1-a1ab-e1810cd6f025",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71b71d77-3a57-42b7-b7c0-629ba4a3a86e",
        "cursor": {
          "ref": "f706d70c-9144-4af1-967f-3074d60b081e",
          "length": 253,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "548e84e9-61c3-476f-b7cd-7da455a84806"
        },
        "item": {
          "id": "71b71d77-3a57-42b7-b7c0-629ba4a3a86e",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "58782508-c8ef-40a6-b46a-e2d42d720bcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08fcfe68-670e-4039-b0e7-8d12d54bb796",
        "cursor": {
          "ref": "62c865d9-6773-4cd6-b45d-525356b12572",
          "length": 253,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "91209e43-8403-482b-aec5-e561d91927dd"
        },
        "item": {
          "id": "08fcfe68-670e-4039-b0e7-8d12d54bb796",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "72a8590a-1533-4396-9091-9cdc333d4e57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "f0b9da2d-c340-413c-8077-174c63564d80",
        "cursor": {
          "ref": "a5a24fe5-7b8a-4a84-b714-abba704b16bb",
          "length": 253,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "c0cbaf93-ce34-4313-9c13-461fba5e3cf6"
        },
        "item": {
          "id": "f0b9da2d-c340-413c-8077-174c63564d80",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "8f08bc71-5f6d-4a16-baa4-3d32d9961a91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c62f81f6-ef05-4702-88ea-285c4ed63665",
        "cursor": {
          "ref": "54e73329-0403-46c5-8673-a2ef8c0ee596",
          "length": 253,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "d0ad02d3-cad3-407a-9cf0-6408ce9f3191"
        },
        "item": {
          "id": "c62f81f6-ef05-4702-88ea-285c4ed63665",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "a4b8ae5e-a8bb-438a-986d-44defcad5cca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23c88cbb-0a4b-4b60-bd59-690094575c53",
        "cursor": {
          "ref": "c98283a1-4261-43fe-b043-276cc925a065",
          "length": 253,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "82db0bbf-b1e6-4a0f-8be5-48786abbed1d"
        },
        "item": {
          "id": "23c88cbb-0a4b-4b60-bd59-690094575c53",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "05c4d40d-f200-47d0-8962-f57d8ba286d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cca5b34e-aad6-48f0-bd7f-07731c1d6a3d",
        "cursor": {
          "ref": "504cf237-08df-4702-a0c8-6a079c401fdb",
          "length": 253,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "2e69c62f-4015-46f3-a765-566d0a124409"
        },
        "item": {
          "id": "cca5b34e-aad6-48f0-bd7f-07731c1d6a3d",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "d32f00d8-c6d0-4925-b4b9-58e0d3a9b0fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d3e0a5e-6ea0-4942-b48a-102e1c5043be",
        "cursor": {
          "ref": "f2d40f7e-f14e-46ec-b0b8-f40bc9835d16",
          "length": 253,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "ef96d889-0d97-4ea2-8bbe-a32efe12edfd"
        },
        "item": {
          "id": "6d3e0a5e-6ea0-4942-b48a-102e1c5043be",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "6ffdfbf8-bd3f-41ef-8f17-f2c311b13a20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10fda1ef-70ad-4a2c-b51f-d304f05fb61c",
        "cursor": {
          "ref": "283ed323-4763-4bf7-86b9-ed914b64a218",
          "length": 253,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "389fbc01-a9ab-4078-b986-23dbd9a01d36"
        },
        "item": {
          "id": "10fda1ef-70ad-4a2c-b51f-d304f05fb61c",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "36e668a4-ba8d-4d1d-961f-ac31aab3855a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4163050-c57c-4bc9-920d-f5ca56dc0ee1",
        "cursor": {
          "ref": "1bd67d63-5d93-4cc9-bb9a-336414f77f35",
          "length": 253,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "8631ce5b-89de-42ae-964f-d74d55d4dfb3"
        },
        "item": {
          "id": "d4163050-c57c-4bc9-920d-f5ca56dc0ee1",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "3c9881ac-022c-425c-82f8-73fab1283e41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "573cc17a-31ef-47e6-aaf2-8ae0e96d0478",
        "cursor": {
          "ref": "53c09220-2bb5-470b-83c3-5d9dd25c0711",
          "length": 253,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "9e6fe7ea-3263-4739-a6b6-b2aa54c2e58d"
        },
        "item": {
          "id": "573cc17a-31ef-47e6-aaf2-8ae0e96d0478",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "1d665ba8-6fb9-409c-8aae-675bf59e38cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "138d428f-be64-4bba-a78b-572d30f1773a",
        "cursor": {
          "ref": "06f3fceb-5c49-43c2-a4e1-6c9d3bb2e09c",
          "length": 253,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "81c5c1dc-16fe-4f6e-b3bd-a5213ab76e54"
        },
        "item": {
          "id": "138d428f-be64-4bba-a78b-572d30f1773a",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "e035793b-384b-4518-b3fd-337fd8b07d28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c76eb3e-997e-4432-8902-89bfe472901f",
        "cursor": {
          "ref": "9be323c4-5630-45f3-a275-9098e7573cbb",
          "length": 253,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "41d01dbc-2149-43d6-8fa0-adead2a062c4"
        },
        "item": {
          "id": "5c76eb3e-997e-4432-8902-89bfe472901f",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "76001fe5-6abe-45d5-a910-080ec28ef02a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a7954f6-4af8-4655-8a4b-cb209b57d55b",
        "cursor": {
          "ref": "4fcdcb61-574d-40da-8e43-9f7be5b2324b",
          "length": 253,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "a412813d-8626-43d6-a5b1-65aba93ec813"
        },
        "item": {
          "id": "5a7954f6-4af8-4655-8a4b-cb209b57d55b",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "6abd4450-79fd-4185-bcbf-9ed2b171c789",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0932a30-02d2-4222-890e-66da6ced033f",
        "cursor": {
          "ref": "3ebbe18d-7982-4b68-9567-70bb2536d5c0",
          "length": 253,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "a33dedc3-c73f-458c-84d4-ecef8cacbe02"
        },
        "item": {
          "id": "e0932a30-02d2-4222-890e-66da6ced033f",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "d9fd0f5e-779d-4874-96f4-0a2cceb48a1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06ee9d9b-4f74-4927-95a6-00cff74f31c2",
        "cursor": {
          "ref": "2b7b228b-16eb-4125-9970-7afc8ba0eee6",
          "length": 253,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "b01db1d7-f605-4770-8d0c-3ab236a53532"
        },
        "item": {
          "id": "06ee9d9b-4f74-4927-95a6-00cff74f31c2",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "1ffa26d9-2ec1-4527-9c67-50f76c914cc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7377b676-c697-411b-8af9-55b46f3647a6",
        "cursor": {
          "ref": "52e298a1-19ea-4969-b095-2230ec60eba2",
          "length": 253,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "ae7002a4-b9e8-4bf1-9507-b5fd6fd9dd8c"
        },
        "item": {
          "id": "7377b676-c697-411b-8af9-55b46f3647a6",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "f6008ff9-721a-448b-a320-be35cfcafe6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b37a8e5-8eb2-41d9-92f0-be6ae9b74290",
        "cursor": {
          "ref": "4264bfcb-2c79-44c6-8b81-7373b1d5a5a2",
          "length": 253,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "3ea0cc55-fae9-4536-873e-d7c9a4830b3e"
        },
        "item": {
          "id": "5b37a8e5-8eb2-41d9-92f0-be6ae9b74290",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "253afb92-da89-4f1f-913b-36a98b4043ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19632553-de92-47b9-a33c-2b647d12c453",
        "cursor": {
          "ref": "54cb9c27-111a-4768-8ce5-5c7766b949cf",
          "length": 253,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "6708b50d-908d-462b-9c4e-4dfafd3c31d8"
        },
        "item": {
          "id": "19632553-de92-47b9-a33c-2b647d12c453",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "92feb41a-40f7-4cda-a344-a1ba9e25fc29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b8bbda7-0693-4282-b8be-60aa7ae4436a",
        "cursor": {
          "ref": "81907aa0-0e5d-4bcf-bf8f-bd9116dc84eb",
          "length": 253,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "ff0dbaa6-e86e-4858-84fa-603d449d7783"
        },
        "item": {
          "id": "5b8bbda7-0693-4282-b8be-60aa7ae4436a",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "41d11448-1878-4911-a4cf-b1ba4171a23e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e6a84ce-f432-474e-9bd2-8ad671915db5",
        "cursor": {
          "ref": "23a4cb7a-dcb1-4628-b97d-4fb3071d00a5",
          "length": 253,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "7e21299a-6083-4447-b491-4e53aafaf286"
        },
        "item": {
          "id": "0e6a84ce-f432-474e-9bd2-8ad671915db5",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "63df588c-2750-4cfd-b6c3-475dc9e68599",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc251657-51c7-45df-a497-ff2fc994f097",
        "cursor": {
          "ref": "bba2f488-4e7a-443d-bbb8-598665de9557",
          "length": 253,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "d4907190-2370-42fc-81f8-1c19cfac0897"
        },
        "item": {
          "id": "cc251657-51c7-45df-a497-ff2fc994f097",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "566fe66e-fdd2-4545-89e5-3dee5108254e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "248eb41c-7118-4cc1-919b-2f3ca94487bf",
        "cursor": {
          "ref": "6d39f79b-0f30-44d1-8d82-bc3a230583f4",
          "length": 253,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "af572a74-59fd-40b3-ab62-1d0a25ad5b5e"
        },
        "item": {
          "id": "248eb41c-7118-4cc1-919b-2f3ca94487bf",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "725c7fd7-ba0b-49ec-838e-d2ed1bd3cfcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5908821-92c1-472f-84a3-2e46a058d21f",
        "cursor": {
          "ref": "8b3d10a9-2578-404f-9121-f7084031665c",
          "length": 253,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "22f8cff3-16f5-47da-a88d-8cd5d804ae6b"
        },
        "item": {
          "id": "b5908821-92c1-472f-84a3-2e46a058d21f",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "67e1d97b-cdb4-488b-b1c3-3c601dc2562b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e573b834-bda9-4c9d-a11b-ba1a7c81db6b",
        "cursor": {
          "ref": "3fb96e2f-b1f7-417a-b2ae-80916a2dc283",
          "length": 253,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "189ef15f-abbb-40b9-ae1b-f38791a23830"
        },
        "item": {
          "id": "e573b834-bda9-4c9d-a11b-ba1a7c81db6b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "6c22c3a6-6d2d-4fcd-a525-aa2659604502",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5192b48a-1bd3-493b-818e-e1c3209d4075",
        "cursor": {
          "ref": "1709210e-7f34-4a29-b69a-44f45bfa2558",
          "length": 253,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "53a9f635-5793-41af-bd24-7c57a6522e22"
        },
        "item": {
          "id": "5192b48a-1bd3-493b-818e-e1c3209d4075",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "d5b93fef-ce57-40b0-b35a-2a77b563a1f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61a22b30-0291-4912-8661-7425c1fd9070",
        "cursor": {
          "ref": "49467dbb-44a2-463f-b6f7-add3fee2ba30",
          "length": 253,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "46023844-5b06-41de-afcd-365aa1bf9882"
        },
        "item": {
          "id": "61a22b30-0291-4912-8661-7425c1fd9070",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "116f984e-0468-4a72-9323-c7602de8ed7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35b7cf79-f4b6-4cbc-977a-a140d21a8868",
        "cursor": {
          "ref": "91ab4e0b-3c38-4ac5-8b05-89af128fdc40",
          "length": 253,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "dfea923b-9881-4633-9bac-4cde158e1275"
        },
        "item": {
          "id": "35b7cf79-f4b6-4cbc-977a-a140d21a8868",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "c90480bd-72e3-45e3-8564-34cea1cc92b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5af84406-6360-4987-b9a3-e554ecd00f15",
        "cursor": {
          "ref": "fbb4374f-139e-4563-a324-aa3f1c5c3e7b",
          "length": 253,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "4c57c7c3-5a34-4157-8117-1a22594d913f"
        },
        "item": {
          "id": "5af84406-6360-4987-b9a3-e554ecd00f15",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "e86f5381-6d16-4f1c-aa7a-6d8db5813c48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f30c828-5f19-4051-9e10-2e7c018c5445",
        "cursor": {
          "ref": "6921c5a3-bacf-4469-bf45-1e7902426a68",
          "length": 253,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "c9fbb402-0e7c-4e10-a5ba-b72902a50404"
        },
        "item": {
          "id": "2f30c828-5f19-4051-9e10-2e7c018c5445",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "cea38570-c354-4e2c-a74a-ecde5a8c29cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 684
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7398e8e9-ac94-4d10-86c7-e6e6e97bc05d",
        "cursor": {
          "ref": "7dc48c4e-50b3-463b-a03e-746ab8f37df2",
          "length": 253,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "a718cbeb-9add-4935-9d84-15a09a7d9e2c"
        },
        "item": {
          "id": "7398e8e9-ac94-4d10-86c7-e6e6e97bc05d",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "0b792ce8-0db2-492c-bd36-7ba71de7cce7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 683
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ca88b46-3417-4982-993d-ed449bca1cfc",
        "cursor": {
          "ref": "5e4b6425-bc96-4329-b5be-35fe43731a8f",
          "length": 253,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "57c7420c-88b3-402b-b5cc-13e9de0bd005"
        },
        "item": {
          "id": "6ca88b46-3417-4982-993d-ed449bca1cfc",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "31f2762f-0e17-49eb-9ed4-b5ea5c322ea8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50613526-7b50-4193-bc20-e4e98b08f8da",
        "cursor": {
          "ref": "6ff04878-ba89-4f92-acaf-f91229735bd6",
          "length": 253,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "1b5addd6-02b4-4d52-b943-ad8f4697fce5"
        },
        "item": {
          "id": "50613526-7b50-4193-bc20-e4e98b08f8da",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "8038e11a-a804-4994-8d9e-069a99a172a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a77cb38-78d0-43fa-aa95-8b221ef5fe67",
        "cursor": {
          "ref": "54273dcf-0401-45de-8547-2b053c75fb9e",
          "length": 253,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "815bf3bf-3849-40f0-96da-e20969bfb5ff"
        },
        "item": {
          "id": "0a77cb38-78d0-43fa-aa95-8b221ef5fe67",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "7f830466-0b18-499d-a6ad-3a0cbbfe432b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "173e9402-321f-44f5-b80a-21123f02e7b3",
        "cursor": {
          "ref": "a8aac23f-541a-4733-987c-6acd257d0eae",
          "length": 253,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "120a1dd6-1a68-4bbc-b9eb-1100dea052ae"
        },
        "item": {
          "id": "173e9402-321f-44f5-b80a-21123f02e7b3",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "d9f45e74-5586-400b-be81-2ddea2494d1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ea44eee-2714-4541-8e97-7c642d74d2a3",
        "cursor": {
          "ref": "7ea80915-bf7e-4142-9b36-63a14c37af73",
          "length": 253,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "29902fd1-fc89-4760-b4a4-366bb01a3f59"
        },
        "item": {
          "id": "0ea44eee-2714-4541-8e97-7c642d74d2a3",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "6cc26395-21ba-4c16-80f6-418180a7d7c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78619ba7-694b-4bd4-8c58-26aafeec771c",
        "cursor": {
          "ref": "50267285-6035-45ab-bff7-9d73a09d603a",
          "length": 253,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "37895b0c-fb36-4325-af96-c0b0aaf2c457"
        },
        "item": {
          "id": "78619ba7-694b-4bd4-8c58-26aafeec771c",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "22cda6cd-7614-47bd-ab48-92d4b3dbc5ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fee45db3-f7e9-445f-a66b-d9aabe188464",
        "cursor": {
          "ref": "2930bd30-148a-47d2-ab37-d9a0d10cf16c",
          "length": 253,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "57cb8860-b17f-4638-8dfe-cd16b57dcfec"
        },
        "item": {
          "id": "fee45db3-f7e9-445f-a66b-d9aabe188464",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "0331acc7-70dc-49f2-88f9-1be98381541f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3604035d-ea02-48c8-9107-12fbeeeb0dd1",
        "cursor": {
          "ref": "b6d54d97-b4a8-4390-b17b-715ac5465869",
          "length": 253,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "d8d0940c-37bc-4974-94fc-52df53f463ef"
        },
        "item": {
          "id": "3604035d-ea02-48c8-9107-12fbeeeb0dd1",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "ca751ef2-1743-4ba6-92e1-7966241560b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18fc1263-8dde-4a3e-b0fe-e325c18b6cc8",
        "cursor": {
          "ref": "876e5b38-6ac4-4404-8562-d39b0001da85",
          "length": 253,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "f7e6c8d7-6581-4279-93d8-315aa44c1974"
        },
        "item": {
          "id": "18fc1263-8dde-4a3e-b0fe-e325c18b6cc8",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "849943fb-cab2-45de-bc36-cc4af932e38b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "394ded37-ca2e-4a87-821b-63d6b712ae00",
        "cursor": {
          "ref": "98a65f34-6c54-4b83-b775-a51555291798",
          "length": 253,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "1081f934-52c6-4fed-954c-320b1aabbe27"
        },
        "item": {
          "id": "394ded37-ca2e-4a87-821b-63d6b712ae00",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "70dc8d09-dae7-4331-8452-13d9ae42f411",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "596611dd-e18b-4498-a0fc-daf4acfefce4",
        "cursor": {
          "ref": "58978de2-0f6e-4991-95e3-628a355f14a8",
          "length": 253,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "5d4fba5f-94f2-44a0-9f8f-d742b791ca17"
        },
        "item": {
          "id": "596611dd-e18b-4498-a0fc-daf4acfefce4",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "39e91a97-f9ed-43ee-90f8-7b6455ba1314",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42ea8b00-4483-45cb-a514-8f392ce0d43c",
        "cursor": {
          "ref": "29da77a6-e96f-49ba-a4f2-c9a25ed677bb",
          "length": 253,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "6e276abc-42cc-4e41-9abd-ee29008571fc"
        },
        "item": {
          "id": "42ea8b00-4483-45cb-a514-8f392ce0d43c",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "45f2b11e-79d6-4971-a9cf-c30bbad3e6d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1dcd44b2-eec4-417b-9c97-c04c7653b8b1",
        "cursor": {
          "ref": "90ce28e6-68fb-4cbc-81c0-e710ae92bea8",
          "length": 253,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "47d0d2d2-cc83-4dfa-94b3-23cade55fec0"
        },
        "item": {
          "id": "1dcd44b2-eec4-417b-9c97-c04c7653b8b1",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "5ff8ba53-1bcc-41cb-b716-9c21a1651eaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf7453be-290d-49e1-a8f1-ff282236c46e",
        "cursor": {
          "ref": "0c8dadd5-0ea0-4146-96c9-d45205f01a89",
          "length": 253,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "c9694a2b-fe9c-4fcf-998c-739789f938e8"
        },
        "item": {
          "id": "cf7453be-290d-49e1-a8f1-ff282236c46e",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "09bf70c8-1c50-4d8d-ab1f-8901b33b7b87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "499f896b-3df2-4e6d-a94a-13c78cdbab41",
        "cursor": {
          "ref": "5a381f55-e112-4867-b25a-2c9189bd9d2d",
          "length": 253,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "2c0ebc50-2475-41c0-a732-eb82dd859ecf"
        },
        "item": {
          "id": "499f896b-3df2-4e6d-a94a-13c78cdbab41",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "16c702e1-89b6-4d81-ad66-0c3a4042cb29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f70f7c00-2b15-414e-bc02-7d70c57c3df3",
        "cursor": {
          "ref": "95b7d6e0-4be7-41a4-822b-f98317f2fa71",
          "length": 253,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "75f2ea1f-126a-414e-add4-d72ec8ec8b8a"
        },
        "item": {
          "id": "f70f7c00-2b15-414e-bc02-7d70c57c3df3",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "6e6e43c7-fdce-4519-ba1b-7c7fd9ee2137",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d21f892e-57ea-40f9-b148-343f900cb6cc",
        "cursor": {
          "ref": "02afad04-c251-494d-b718-585bd339c816",
          "length": 253,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "2fc30f16-5184-4ecd-a6e7-b0565a4c592a"
        },
        "item": {
          "id": "d21f892e-57ea-40f9-b148-343f900cb6cc",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "7ae7986c-3976-4c75-a171-e3b348401f00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 515
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96d01169-a940-46e1-baf0-762e02f820e1",
        "cursor": {
          "ref": "e8ba49e8-cbcb-4a41-a693-1f61adbf16dd",
          "length": 253,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "8353329b-cff6-45b3-ac51-52a249a62db3"
        },
        "item": {
          "id": "96d01169-a940-46e1-baf0-762e02f820e1",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "3a4119e8-3ac5-45c0-8a4e-2a3b2ff8cecc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 514
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c06fef9-6295-4b9c-8435-ad5865dfe127",
        "cursor": {
          "ref": "e1f8f4cf-9b09-4896-ad18-7f766dc81f55",
          "length": 253,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "9056d5ec-5ac7-444d-925d-6025e4841ba8"
        },
        "item": {
          "id": "0c06fef9-6295-4b9c-8435-ad5865dfe127",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "835e714b-6788-43cd-a98a-7a222f6faa7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 516
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a5a5965-d7c9-480e-8a2a-457814ae86d6",
        "cursor": {
          "ref": "d111a9aa-35dc-4a9d-b916-53313846b057",
          "length": 253,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "e4438b93-df00-4e0e-8ea9-3ec11c8e534a"
        },
        "item": {
          "id": "6a5a5965-d7c9-480e-8a2a-457814ae86d6",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "28410ca3-7b11-48c2-8b1f-e0560eadfd78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a153aad-55a5-4285-90d5-ecc3a584c1ae",
        "cursor": {
          "ref": "cf426441-ae70-4a93-9e22-3a3ebf8bdcf8",
          "length": 253,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "471ffe8f-dfc8-4e6a-9601-83a4c872bb02"
        },
        "item": {
          "id": "9a153aad-55a5-4285-90d5-ecc3a584c1ae",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "40edf8b7-3c87-4abe-bf8d-405d4556dc33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 516
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82dec442-b68c-441f-99fd-337cc39656ce",
        "cursor": {
          "ref": "a38c7709-ea5b-4675-8d4c-3c77d30d412c",
          "length": 253,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "2ff8c256-f896-446b-93aa-edb8ae815fa6"
        },
        "item": {
          "id": "82dec442-b68c-441f-99fd-337cc39656ce",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "e5b8f181-e47c-417b-a4fc-171c9753a101",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f5b4a9e-6ea5-4330-a872-78f40f4484f2",
        "cursor": {
          "ref": "5e7c752e-c495-40b4-99b0-80f375d8d80d",
          "length": 253,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "477c9e2d-a607-4ec5-8526-0cfea4fea754"
        },
        "item": {
          "id": "7f5b4a9e-6ea5-4330-a872-78f40f4484f2",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "7f705431-02ee-49c1-b98d-3d95ba640811",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "363f18b6-b2b7-461a-a647-7713aa2a3832",
        "cursor": {
          "ref": "ae3aef45-617f-475c-a452-0c054793ea0a",
          "length": 253,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "bfc3e41a-e9d1-415c-a576-93af3ff9c1b9"
        },
        "item": {
          "id": "363f18b6-b2b7-461a-a647-7713aa2a3832",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "96630242-5480-460f-b208-db043c2d50ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad3e9fe8-2bbb-4299-858a-4b3264482652",
        "cursor": {
          "ref": "63a2a5ed-b05a-43d2-bafd-f41ccfaf244e",
          "length": 253,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "fb63ccda-2730-4cb7-a0a2-21b68c63bee5"
        },
        "item": {
          "id": "ad3e9fe8-2bbb-4299-858a-4b3264482652",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "9b978e86-01ed-440a-85cd-e77f6a5432f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba3b9393-9962-47c0-8f4d-0152bc7a1bab",
        "cursor": {
          "ref": "f3f285cf-9134-414d-84af-e001a6f1c2b4",
          "length": 253,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "7c745d89-b8db-40df-8720-869af576f7bb"
        },
        "item": {
          "id": "ba3b9393-9962-47c0-8f4d-0152bc7a1bab",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "762126ac-aa15-4af9-9c2a-e5dce1eb2b2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "693bec42-a8de-4f73-aee6-72d97bc62aff",
        "cursor": {
          "ref": "2b77b748-22f6-48c0-8d6c-9bab9bf4f942",
          "length": 253,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "51854e76-4c74-4ac3-bf28-8d197371c863"
        },
        "item": {
          "id": "693bec42-a8de-4f73-aee6-72d97bc62aff",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "73d47bfc-30f4-4d42-9494-2aa340cfcc94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "176eb995-4be8-4b90-b427-2f32a00bc7e3",
        "cursor": {
          "ref": "afd35380-7188-4d4c-b75a-9bca74ba3571",
          "length": 253,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "8e4552c4-1e10-454e-b1e9-6c84a851751f"
        },
        "item": {
          "id": "176eb995-4be8-4b90-b427-2f32a00bc7e3",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "ed2af976-4786-4f8c-92ff-1a627c0c58c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 128,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a8d97be-fad9-4acc-8a47-cffa5ece73cc",
        "cursor": {
          "ref": "534a8e50-2ca6-4293-a274-40879399d1a2",
          "length": 253,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "9f69b1cf-07d9-4fff-9150-6b10ce37f824"
        },
        "item": {
          "id": "6a8d97be-fad9-4acc-8a47-cffa5ece73cc",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "58e90dbf-cf1f-48ee-a197-4ac536cc3a54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:104)"
            }
          }
        ]
      },
      {
        "id": "1a385621-648a-46f3-9f55-2e15f9045271",
        "cursor": {
          "ref": "cac512ff-ddea-4e6e-a5fb-9b67df3f6eb5",
          "length": 253,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "3a64abbb-2c64-46b1-99de-2e8ea39742c8"
        },
        "item": {
          "id": "1a385621-648a-46f3-9f55-2e15f9045271",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "20eda83e-0840-49a1-932f-e0eaebb467ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "id": "43de36fa-9fe6-402a-b8d8-e87b215a4e8f",
        "cursor": {
          "ref": "9c64387b-ace6-4961-b3c3-e4eac459af88",
          "length": 253,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "23715d0c-f5d4-4993-a2af-7320da6dc498"
        },
        "item": {
          "id": "43de36fa-9fe6-402a-b8d8-e87b215a4e8f",
          "name": "credentials_issue"
        },
        "response": {
          "id": "a6675fdb-5074-434c-8cee-4b512d333c74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:106)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:106)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:106)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 5,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:6:106)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 6,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:7:106)"
            }
          }
        ]
      },
      {
        "id": "a1ccd599-914e-4263-b565-bde450fabc30",
        "cursor": {
          "ref": "153e2528-0ecb-4da7-95ae-e38eab77c342",
          "length": 253,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "a06b0286-eee9-4004-9429-9c37d98fb557"
        },
        "item": {
          "id": "a1ccd599-914e-4263-b565-bde450fabc30",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "1228894d-5407-4a2c-a458-be5444b3f4ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:107)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:107)"
            }
          }
        ]
      },
      {
        "id": "9431309d-b606-485b-8eaf-6cc243212dd3",
        "cursor": {
          "ref": "54feaaed-1da4-4e80-a73e-88a4bdb1ec26",
          "length": 253,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "b2bb656c-d771-413a-8d80-65f6bd052ce8"
        },
        "item": {
          "id": "9431309d-b606-485b-8eaf-6cc243212dd3",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "b8d4d83f-8608-4cfd-93b4-2d04bbfa5b8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:108)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:108)"
            }
          }
        ]
      },
      {
        "id": "95758048-a000-433a-8ecd-0f678000dd04",
        "cursor": {
          "ref": "1d5f0bbb-d5eb-4c8f-ae2b-d83685c12b04",
          "length": 253,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "41d54fa8-51f3-46a3-950f-35ff20bf2d10"
        },
        "item": {
          "id": "95758048-a000-433a-8ecd-0f678000dd04",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "baebd2cf-a902-4ba7-9656-a6f08d8e91df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:109)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:109)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:4:109)"
            }
          }
        ]
      },
      {
        "id": "cb99be4c-b228-43cb-a05e-4d32cd617f11",
        "cursor": {
          "ref": "09d3daac-0b30-42a7-8cc8-1860c0c78b03",
          "length": 253,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "74ab84cd-c0f4-41a1-b36f-438c726408c8"
        },
        "item": {
          "id": "cb99be4c-b228-43cb-a05e-4d32cd617f11",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "b8b12bc1-9ed5-47a2-a133-8d9b5890da42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:110)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:110)"
            }
          }
        ]
      },
      {
        "id": "19c06735-1bd6-43d0-9f0b-9b38acf202f1",
        "cursor": {
          "ref": "274c9902-1b42-4094-b845-c4fdc347c070",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "89efb92f-cde2-4289-958c-a24c1078dcf8"
        },
        "item": {
          "id": "19c06735-1bd6-43d0-9f0b-9b38acf202f1",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "d607ce26-0b69-426d-90cc-a9550e3ea2b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19c06735-1bd6-43d0-9f0b-9b38acf202f1",
        "cursor": {
          "ref": "274c9902-1b42-4094-b845-c4fdc347c070",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "89efb92f-cde2-4289-958c-a24c1078dcf8"
        },
        "item": {
          "id": "19c06735-1bd6-43d0-9f0b-9b38acf202f1",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "d607ce26-0b69-426d-90cc-a9550e3ea2b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8be012d0-3c01-48d9-bd9e-a304f33298dd",
        "cursor": {
          "ref": "a64c1562-fa01-41a3-879e-0a12f2d60f1f",
          "length": 253,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "5f459f1e-9c9d-4c3d-86f0-bfe9d03b09b4"
        },
        "item": {
          "id": "8be012d0-3c01-48d9-bd9e-a304f33298dd",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "f15d07ed-f445-4fa6-9edf-609282afb877",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 307
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07f29d8b-d359-44dc-9a71-679d343c98c1",
        "cursor": {
          "ref": "ec223fcc-e015-4b3b-b2fa-de9a6721f815",
          "length": 253,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "b4412ce3-c97b-40de-9acf-3c680fdae713"
        },
        "item": {
          "id": "07f29d8b-d359-44dc-9a71-679d343c98c1",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "729ab9a7-0905-4dbf-918a-f2b2602261d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 306
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17591075-327b-42d3-af44-249353e01397",
        "cursor": {
          "ref": "3b7b7ab6-e26e-482c-8965-ab6ed4db47fd",
          "length": 253,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "274ac831-8c37-4cb2-8583-ee549a6ae828"
        },
        "item": {
          "id": "17591075-327b-42d3-af44-249353e01397",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "8f86ab84-a5d1-4879-aebf-036cfbabd167",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 308
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4db444b-45be-4c21-bafc-910cb07658cc",
        "cursor": {
          "ref": "2c2ff5b1-27e6-4830-bf5c-1a79211610c0",
          "length": 253,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "714fbe5b-a227-4a6d-a8a4-5de250515bfe"
        },
        "item": {
          "id": "d4db444b-45be-4c21-bafc-910cb07658cc",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "06701911-d2c2-4abd-acfe-f882c53a1e45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "390d0c8a-d38b-49a3-83a8-419a94e25825",
        "cursor": {
          "ref": "330276ca-f6e7-4772-be3b-d8019cd5e462",
          "length": 253,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "f1db6e45-e9cd-48d6-8760-060c98e32a76"
        },
        "item": {
          "id": "390d0c8a-d38b-49a3-83a8-419a94e25825",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "036b8f31-ac1d-48c4-a7fc-bef3f17d26ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 308
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4850ab55-5f65-4a2c-a173-58043625cc21",
        "cursor": {
          "ref": "607c3e09-096f-40b6-af37-1f418ba9fad9",
          "length": 253,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "fbb6c1e4-a186-4b70-85c1-5f9c3297b576"
        },
        "item": {
          "id": "4850ab55-5f65-4a2c-a173-58043625cc21",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "82b7aba5-d0b4-43a6-ac8e-51138440ab9a",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "17951bf6-94db-4cc9-9e30-1bd5a2230346",
        "cursor": {
          "ref": "ddf37910-bdde-496b-9858-487d801311e2",
          "length": 253,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "f4017346-5715-423b-b356-5f750a62bb80"
        },
        "item": {
          "id": "17951bf6-94db-4cc9-9e30-1bd5a2230346",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "40ef79e5-fa1a-4017-b11b-5299116967db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3815ec26-77b6-4bcb-8f41-6cf00458c239",
        "cursor": {
          "ref": "a1656b0e-1439-4274-a0f2-d610494f55a9",
          "length": 253,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "081c02c1-9a87-46f3-b81a-9d9c62bf5e0e"
        },
        "item": {
          "id": "3815ec26-77b6-4bcb-8f41-6cf00458c239",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "018b804c-d7d6-4319-8c8a-2d1bacfb3b60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10e40016-2d5f-4027-8ad7-f6f583c0f0a8",
        "cursor": {
          "ref": "2d38395a-1c5d-46f9-82bd-55cf974607e3",
          "length": 253,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "da52da4b-75e5-4692-a12f-7a58d94743a8"
        },
        "item": {
          "id": "10e40016-2d5f-4027-8ad7-f6f583c0f0a8",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "5b75f2ad-7b1b-4f62-aefe-5dc9ef74b50f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "156f0502-69e2-4011-8572-4bf76db9b58f",
        "cursor": {
          "ref": "40239dd0-b473-4ef6-b9fb-25a91fdcf548",
          "length": 253,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "84a0055c-704d-41c5-9b66-8a5a16af20df"
        },
        "item": {
          "id": "156f0502-69e2-4011-8572-4bf76db9b58f",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "41e982c2-b8cb-4638-9108-0b8de684733f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe21efcd-fcdc-4900-a083-d6a79e4e0076",
        "cursor": {
          "ref": "c18d8e25-e00f-4eb0-8e85-f883bc250be2",
          "length": 253,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "23f4ba4e-be14-4d3b-8d6c-063858ad44f2"
        },
        "item": {
          "id": "fe21efcd-fcdc-4900-a083-d6a79e4e0076",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "cd221e6a-8461-4485-9fd2-5a9f44950767",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7315321a-d253-4ed4-ad72-93bac9134d9b",
        "cursor": {
          "ref": "e7b65f80-3ad8-4c85-a61a-da49f58268f4",
          "length": 253,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "b539ec36-31f7-4688-94a2-289e0b5ad413"
        },
        "item": {
          "id": "7315321a-d253-4ed4-ad72-93bac9134d9b",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "1f5568b0-4420-41ea-a3a6-7af89017b3b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdf3e322-068f-4199-a905-1ade082229c7",
        "cursor": {
          "ref": "da5a3adc-5efc-49da-ba43-f7cc11c5be28",
          "length": 253,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "142c649b-b7e8-4134-8efd-593d643a99e2"
        },
        "item": {
          "id": "cdf3e322-068f-4199-a905-1ade082229c7",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "c79e101b-0a2d-4f04-8573-e5bf94badbbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a58d0673-7278-4326-b6b2-5969abc5000b",
        "cursor": {
          "ref": "b13ba294-9ef5-406a-ab1e-cd5aa1798cab",
          "length": 253,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "6d54baa7-2421-4c28-9f47-9db7e7d0c68d"
        },
        "item": {
          "id": "a58d0673-7278-4326-b6b2-5969abc5000b",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "4be10680-2ddf-4625-8d40-fc124e1983cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29b19330-dc76-4eef-b97b-8ff9cc321e68",
        "cursor": {
          "ref": "926dbb29-e879-4933-9a60-a938135253d6",
          "length": 253,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "5391f744-50bb-484b-af3f-0366b431792b"
        },
        "item": {
          "id": "29b19330-dc76-4eef-b97b-8ff9cc321e68",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "eb67b30e-f497-407f-911a-9cec7a7d3074",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e298d89e-f8e9-487d-a860-a6c69b4da68b",
        "cursor": {
          "ref": "5e103a6c-e3a7-403f-a09d-a0cfe0ea59a3",
          "length": 253,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "8c712e60-6568-4f0d-8159-16d41a5fb2bd"
        },
        "item": {
          "id": "e298d89e-f8e9-487d-a860-a6c69b4da68b",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "028ef608-3352-4e37-a3a3-94b6c95ea4a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "795619cb-2cd4-46da-a69c-b90c66532505",
        "cursor": {
          "ref": "cd20f311-c0f4-4805-9ece-c8a00dfbd960",
          "length": 253,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "6c47b683-b736-47bc-9cd7-1824baa610a7"
        },
        "item": {
          "id": "795619cb-2cd4-46da-a69c-b90c66532505",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "84cba041-94f3-4604-be90-98179caacfe8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e92f083-82cf-45de-9bc6-e52eb792520c",
        "cursor": {
          "ref": "22819f0d-c391-4023-96cf-57f05e958181",
          "length": 253,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "02fbe387-2dff-4555-8fd3-a05edf146853"
        },
        "item": {
          "id": "1e92f083-82cf-45de-9bc6-e52eb792520c",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "bc6b3eb7-b3b0-4396-940f-32be1e90b37b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eac453c8-f742-4d42-bc18-310bad138a2c",
        "cursor": {
          "ref": "581991eb-7181-47e9-b157-741c9280ed45",
          "length": 253,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "2031e785-f611-467f-9c63-a0d98745fbe4"
        },
        "item": {
          "id": "eac453c8-f742-4d42-bc18-310bad138a2c",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "cf7d36d7-e666-4337-b905-d695a9b5365c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd67cdbb-5069-4d32-9f56-d68d871f58ae",
        "cursor": {
          "ref": "3bb93564-333c-4f33-b1a7-52bab5fbb1fe",
          "length": 253,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "8a0d7dd0-766d-4366-848d-4dc99d2deecd"
        },
        "item": {
          "id": "cd67cdbb-5069-4d32-9f56-d68d871f58ae",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "d7399fc1-13d3-437d-8c9a-a6987db80c03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4af691c-fde5-4144-901d-798f67508752",
        "cursor": {
          "ref": "bec2656c-eb5a-4359-b9d3-2e825a8b9ade",
          "length": 253,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "fe3de9f7-1e36-47ef-b1ee-bd2d306cc34c"
        },
        "item": {
          "id": "a4af691c-fde5-4144-901d-798f67508752",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "2606b75e-71f9-4ab6-8754-48fe5a97d3e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67a5ce0a-c376-492a-803c-134b9b721f00",
        "cursor": {
          "ref": "4f788ca8-2a3e-456e-9bab-dafcdae000c3",
          "length": 253,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "afde365b-6899-4c20-8946-9e56ce86357e"
        },
        "item": {
          "id": "67a5ce0a-c376-492a-803c-134b9b721f00",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "a327a7aa-2a7b-465a-a4ef-eb9df7ba252e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6c7250d-f83f-4ea5-b779-fe1be3b93e15",
        "cursor": {
          "ref": "5338354f-c0f3-42c3-a959-20acf89a9dd2",
          "length": 253,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "3b19ae44-3718-4cb7-8b0d-c2b696757a2a"
        },
        "item": {
          "id": "f6c7250d-f83f-4ea5-b779-fe1be3b93e15",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "e582d3fd-391b-439b-a116-50d1b4334115",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3d426f5-fea5-4766-9a18-5e2563e67da8",
        "cursor": {
          "ref": "abde57ed-4352-46b7-b256-680ad5cac3b2",
          "length": 253,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "41b479f9-e797-499d-b57c-57fc0b497fc7"
        },
        "item": {
          "id": "b3d426f5-fea5-4766-9a18-5e2563e67da8",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "d5c7793e-6f30-4cce-80ca-df78d8c5b079",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb607a4c-e9f0-4293-8d23-6d7c41ad8723",
        "cursor": {
          "ref": "32da5e29-3633-40b5-9800-a280e2aa8351",
          "length": 253,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "1e06dd73-99c8-442a-a62a-de18bdd7ebb2"
        },
        "item": {
          "id": "fb607a4c-e9f0-4293-8d23-6d7c41ad8723",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "bba7138d-d596-489c-baee-4419c5456a18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67a89d70-ddf7-443e-983c-522d89caf39c",
        "cursor": {
          "ref": "de9e6a73-f503-40b0-8312-58b1ea72edc3",
          "length": 253,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "6f1e2e92-ea47-4e45-af84-b5e5bcfcdf52"
        },
        "item": {
          "id": "67a89d70-ddf7-443e-983c-522d89caf39c",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "036c8f36-4b76-4a04-94a8-826b7e635be4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7053cbaf-fc82-4a65-9e97-56e9f9269761",
        "cursor": {
          "ref": "c0f2c62f-0040-4bda-bbee-64d2fc90f9ba",
          "length": 253,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "6e34c51a-53d1-4c14-96fa-56ae6c7ba680"
        },
        "item": {
          "id": "7053cbaf-fc82-4a65-9e97-56e9f9269761",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "9fb66ff6-a6d6-4277-9c59-8b440ac5b716",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f10e834-f8bd-4b28-a0bf-efef1deba091",
        "cursor": {
          "ref": "cedbcd7e-0357-4249-a8e0-49387584ae0d",
          "length": 253,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "244f477f-2536-443b-818e-1c3fb9e485ae"
        },
        "item": {
          "id": "8f10e834-f8bd-4b28-a0bf-efef1deba091",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "1af31723-26f4-4be5-805d-8e4c3deb2dcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a98b9c7-10e8-4082-a3b6-72f8e5ce0658",
        "cursor": {
          "ref": "566acdbd-9fae-4746-9fe9-c7cfc7503ca5",
          "length": 253,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "a6a745eb-4c99-486e-9b49-04b18367161a"
        },
        "item": {
          "id": "5a98b9c7-10e8-4082-a3b6-72f8e5ce0658",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "ab4cd69f-1660-4bf2-9553-655dc5eeef43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "253d2f96-7b8c-4711-822c-ecfe0864e937",
        "cursor": {
          "ref": "f4b2cbb2-94e3-48d4-805d-05ad2be08b4c",
          "length": 253,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "569b23c9-ec2b-408e-a3af-fb0904ec81df"
        },
        "item": {
          "id": "253d2f96-7b8c-4711-822c-ecfe0864e937",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "43b3ef0d-fe6e-4059-a7e8-e133cbd930f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85f8fb1e-42bd-4fbd-b3a8-81eeca46ce5b",
        "cursor": {
          "ref": "4d05934f-abd2-40b9-82dd-b4f60436ed77",
          "length": 253,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "5b93c44d-9ad0-4115-8684-e2417afb5ad8"
        },
        "item": {
          "id": "85f8fb1e-42bd-4fbd-b3a8-81eeca46ce5b",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "3d09555b-18e2-4f0c-9315-117893b06935",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe92b609-ab78-42e4-82a9-8d2101ea8181",
        "cursor": {
          "ref": "68a593e3-9bb6-4389-830c-ba382c20775d",
          "length": 253,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "33b3b9c0-09a9-471c-9843-4f146746a31e"
        },
        "item": {
          "id": "fe92b609-ab78-42e4-82a9-8d2101ea8181",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "31c586a8-e39d-45b0-a2ef-ef4892cccb10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "7f85b1b5-11bb-454e-b0c3-911b649bf68c",
        "cursor": {
          "ref": "ff2c7ae0-3bd0-4d49-88ce-4672672e6521",
          "length": 253,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "38e34b9e-09ea-42c6-85af-79d2ed141ce4"
        },
        "item": {
          "id": "7f85b1b5-11bb-454e-b0c3-911b649bf68c",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "b14dd06f-90d3-4921-9fc5-8a00bb287830",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "60f37f26-73fd-4c45-b5ee-d14dca5e1eaa",
        "cursor": {
          "ref": "cc9c5ff8-4dbe-4c0f-a2d3-ebf6079f33eb",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "ba0f110f-f852-47dd-98df-60e5b388ccfc"
        },
        "item": {
          "id": "60f37f26-73fd-4c45-b5ee-d14dca5e1eaa",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "df17769a-4f68-40dd-a085-883d8a2344b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60f37f26-73fd-4c45-b5ee-d14dca5e1eaa",
        "cursor": {
          "ref": "cc9c5ff8-4dbe-4c0f-a2d3-ebf6079f33eb",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "ba0f110f-f852-47dd-98df-60e5b388ccfc"
        },
        "item": {
          "id": "60f37f26-73fd-4c45-b5ee-d14dca5e1eaa",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "df17769a-4f68-40dd-a085-883d8a2344b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eda0a9a6-79b6-484f-b252-4f82407c5fe0",
        "cursor": {
          "ref": "31a5ac4a-1ee0-4147-ad56-116a9910fa3a",
          "length": 253,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "eef1ced7-8f10-4017-b8f5-4994b0f954a2"
        },
        "item": {
          "id": "eda0a9a6-79b6-484f-b252-4f82407c5fe0",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "b8d1b509-0d8f-420c-bf92-5bf4e7c2a605",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99082479-2993-426e-af78-ecea98d9a617",
        "cursor": {
          "ref": "296aacfa-cb25-4103-b22d-e2da440a854c",
          "length": 253,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "72154bb9-c0e0-4aae-abb1-bc0038b8ca3c"
        },
        "item": {
          "id": "99082479-2993-426e-af78-ecea98d9a617",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "c9cfdc34-a305-4f9c-b204-a5c1722d7ce3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e875aa8-41f3-4127-91ca-ebfe3a596c7f",
        "cursor": {
          "ref": "9c71a527-12c5-479c-8d80-69a09704b52e",
          "length": 253,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "3cf4fcd0-bcd6-449e-b4de-96a0290f544c"
        },
        "item": {
          "id": "4e875aa8-41f3-4127-91ca-ebfe3a596c7f",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "55e645db-a539-42f0-a14c-dd60e969de95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d651879-8b85-43fe-ae98-ee78799dd286",
        "cursor": {
          "ref": "fb774c2a-6666-4c93-b6df-ce2233b16321",
          "length": 253,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "b31f2246-22f3-47df-b4bd-05c0d631b2ec"
        },
        "item": {
          "id": "5d651879-8b85-43fe-ae98-ee78799dd286",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "99d62e33-862d-42dc-a28e-8de0672a5c31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed82ade0-b8c5-44bd-9208-7de437d6d163",
        "cursor": {
          "ref": "e213a909-d880-487a-bcbf-912f019e78e1",
          "length": 253,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "164cf385-9692-48e9-ad7d-2291e54ea210"
        },
        "item": {
          "id": "ed82ade0-b8c5-44bd-9208-7de437d6d163",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "aaaf9bea-d6b6-4dab-aacd-12f64e46e4ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57e275da-4f98-4c28-82c5-ff00d9869542",
        "cursor": {
          "ref": "139167d5-6fec-4445-ae5a-4561a95e345c",
          "length": 253,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "16a1cc72-1ae5-4323-ba06-df3fc22015c1"
        },
        "item": {
          "id": "57e275da-4f98-4c28-82c5-ff00d9869542",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "1d43affb-ee91-4fdd-b16d-1d6e9293c373",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "196bd85a-bad9-4087-b338-9df05779347f",
        "cursor": {
          "ref": "178d5014-3035-401d-a670-d6f1bcc8a63d",
          "length": 253,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "2ed81361-16b0-492b-acf6-20d582aea4e3"
        },
        "item": {
          "id": "196bd85a-bad9-4087-b338-9df05779347f",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "e644b3cb-76fa-40de-b86d-1ec1fe936f4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89edfdf8-8462-4c25-9157-242c24955b73",
        "cursor": {
          "ref": "1016c19f-10b7-424e-b5bb-223209f16674",
          "length": 253,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "02ceebac-977f-4024-ae45-2919517ede03"
        },
        "item": {
          "id": "89edfdf8-8462-4c25-9157-242c24955b73",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "be8ccdd0-0a18-44b8-a202-f66e9df692dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ae0f26f-24c1-43d6-8d7b-03046e4d91e7",
        "cursor": {
          "ref": "2ef4eaf9-af83-473e-a4aa-c7f4d825a2cb",
          "length": 253,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "4f152b21-5bff-48b3-a6ce-daf5ea89d921"
        },
        "item": {
          "id": "5ae0f26f-24c1-43d6-8d7b-03046e4d91e7",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "60a6200d-2564-410e-b586-4eec50a6435e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8d860c9-d8a6-4e86-bb5f-f4d5e10a8204",
        "cursor": {
          "ref": "3d4f735b-6547-48a1-ac19-1a1b1d10e971",
          "length": 253,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "dd1871d6-b4db-406d-9383-b066626f64f4"
        },
        "item": {
          "id": "a8d860c9-d8a6-4e86-bb5f-f4d5e10a8204",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "404cac0b-42f8-44cf-8dda-13504b6fe947",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46f51dd8-0523-4893-a3aa-11ef88ee6910",
        "cursor": {
          "ref": "57e5136d-81d0-4e76-a708-ab1fbf147af6",
          "length": 253,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "ef2d8589-9d18-4ed6-9a6b-83aa63cde010"
        },
        "item": {
          "id": "46f51dd8-0523-4893-a3aa-11ef88ee6910",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "5c48cab0-4eb3-4e0a-9368-864a1742e0c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91b1442a-26fb-4be2-a98d-b3b99a62e4aa",
        "cursor": {
          "ref": "ea8b633e-a341-4ce9-ba4a-4d21ad4fe914",
          "length": 253,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "096f7278-9476-4547-bfb2-c242cbadb570"
        },
        "item": {
          "id": "91b1442a-26fb-4be2-a98d-b3b99a62e4aa",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "596fd585-f447-47ec-baf6-8a33ec6fa293",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db2dac02-b617-4360-b3ff-6b80971c2676",
        "cursor": {
          "ref": "29f449ff-9662-4c09-9d48-92eee5d3bbca",
          "length": 253,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "07441016-4fe3-40ce-8449-20774e1fadb0"
        },
        "item": {
          "id": "db2dac02-b617-4360-b3ff-6b80971c2676",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "12cffd96-0101-44e8-82e3-dd7c2b5440b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ebd9dff-7359-4e8e-9270-13a1459ee386",
        "cursor": {
          "ref": "94352bca-40d1-4832-92b1-d3b2764a1aab",
          "length": 253,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "7d196f32-ce33-493f-a35a-46bc8812fc8c"
        },
        "item": {
          "id": "8ebd9dff-7359-4e8e-9270-13a1459ee386",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "13471162-99bd-4545-bcd4-00869181b80e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4421ff4c-e862-4194-9b1f-b689dfa29661",
        "cursor": {
          "ref": "7baa5b41-08a2-4329-a76b-0e0071e152b7",
          "length": 253,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "62a54ef2-5a20-4aa8-b260-381b7c333d18"
        },
        "item": {
          "id": "4421ff4c-e862-4194-9b1f-b689dfa29661",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "596385fc-7f21-438f-bbb4-141bc14ca9e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af1bcf50-4e11-4f4a-a967-1f58c09efcc8",
        "cursor": {
          "ref": "8d04d48e-00ea-464f-a92b-7a1988297d5a",
          "length": 253,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "1c54683c-ee18-4cbb-b73d-7fff00662633"
        },
        "item": {
          "id": "af1bcf50-4e11-4f4a-a967-1f58c09efcc8",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "24591c51-7da5-4e6e-9d2f-d45d3dc5ab07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f712834-61db-4f8f-b288-aaa8b99fe371",
        "cursor": {
          "ref": "5f6d38cb-0ad0-4d29-af3b-95ee372b1804",
          "length": 253,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "725f79b2-a756-4628-9d9c-18851e17e204"
        },
        "item": {
          "id": "1f712834-61db-4f8f-b288-aaa8b99fe371",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "804b754e-53e6-4694-8543-21282dadecd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5d167dc-7ba7-4700-a0d9-9008e2e98985",
        "cursor": {
          "ref": "726228ca-54d4-4912-8818-7bace06e852e",
          "length": 253,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "1bca645d-569e-4c8f-b241-48d77b6c0bd4"
        },
        "item": {
          "id": "f5d167dc-7ba7-4700-a0d9-9008e2e98985",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "760ba258-2297-4a1e-9a24-0d1a72ffcbc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8ee2f79-c455-4516-9aca-0d1ce5451c72",
        "cursor": {
          "ref": "bb96a26d-9432-44ca-b76a-f37200020a06",
          "length": 253,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "70e36e70-ae61-4633-b47c-f13cfad22722"
        },
        "item": {
          "id": "d8ee2f79-c455-4516-9aca-0d1ce5451c72",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "baccbd5b-4511-4ca6-b723-c1a7f171a658",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58844339-4873-4e28-9500-24329d233d7c",
        "cursor": {
          "ref": "c56a1fbd-1141-479d-873d-4000d6ea64ab",
          "length": 253,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "8b69071e-1b98-44b2-99cd-1e68dcccd30b"
        },
        "item": {
          "id": "58844339-4873-4e28-9500-24329d233d7c",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "ff182798-e516-495d-b1ef-3826d97eb837",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab3e0200-233b-4794-92a1-53614dff03b6",
        "cursor": {
          "ref": "54e147a7-9408-4052-b49b-03595903d4db",
          "length": 253,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "d220b32c-236f-409c-9d60-3210cd7de835"
        },
        "item": {
          "id": "ab3e0200-233b-4794-92a1-53614dff03b6",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "cfdc82c8-a02e-4d25-99f1-bf2bd6b7ffb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81eb757d-bcce-4174-a878-20030e32e6d6",
        "cursor": {
          "ref": "dc8db19f-7326-423e-be8d-1e768909c4cf",
          "length": 253,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "3b8c1c73-cb6e-42b5-9b64-b348700309b1"
        },
        "item": {
          "id": "81eb757d-bcce-4174-a878-20030e32e6d6",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "0327fa82-19e7-4f74-a506-896dde9ed9a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d1aba7a-8c29-4da8-8df6-cf32b28c0e28",
        "cursor": {
          "ref": "3487ead1-c56d-47dc-be20-76b7a897499d",
          "length": 253,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "ec88a27b-017e-4d36-a994-e52806558f02"
        },
        "item": {
          "id": "0d1aba7a-8c29-4da8-8df6-cf32b28c0e28",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "b5ba60ff-c1df-411e-acbe-1a281f045a69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e424e546-cf25-4d8d-8f5f-c015b317f1cb",
        "cursor": {
          "ref": "49ac5336-bc99-436a-a68b-3721d1547322",
          "length": 253,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "a3e007f8-aa3d-4f2f-85f0-9d57aa105efd"
        },
        "item": {
          "id": "e424e546-cf25-4d8d-8f5f-c015b317f1cb",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "5268313f-7b5f-4216-a0d8-a7539fdef714",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e0cd36e-7391-4bad-a193-5a4476a9bb1f",
        "cursor": {
          "ref": "a90252d6-d975-42b1-af5b-21720bc4cdb4",
          "length": 253,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "216407ac-fb97-49f3-aa14-7d7bd8cb8666"
        },
        "item": {
          "id": "4e0cd36e-7391-4bad-a193-5a4476a9bb1f",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "19dad2d1-4ea5-45a9-9dcd-22c45237b274",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a1facef-0a76-47d4-8087-9be6114311e4",
        "cursor": {
          "ref": "00faae05-52a4-48fc-a80f-103676cc758c",
          "length": 253,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "ac540098-5eee-417f-b7fa-f49e2c5a3cf1"
        },
        "item": {
          "id": "9a1facef-0a76-47d4-8087-9be6114311e4",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "494bdc6d-390d-4690-bcde-81b462b8d7c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ec26f47-9a71-4ed7-99f9-98497f47934f",
        "cursor": {
          "ref": "21d632ae-b14c-4dde-8998-0acde2512314",
          "length": 253,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "e0ae8147-00e2-4102-a18e-ac0b86cda0d4"
        },
        "item": {
          "id": "8ec26f47-9a71-4ed7-99f9-98497f47934f",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "b960e37d-a8ba-4740-a509-f2f5b536ce64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdf77d89-ef1e-4577-9982-a1e117be6db2",
        "cursor": {
          "ref": "dffe534c-4a5d-4252-bacf-df1b48f4279c",
          "length": 253,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "c5d20f5d-c232-4de2-b396-181acf2e0173"
        },
        "item": {
          "id": "fdf77d89-ef1e-4577-9982-a1e117be6db2",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "6fe308da-063b-44a7-9ef4-c6bcd4a6a37d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a64ae4ec-12e3-4c07-b28c-0d067dd17e65",
        "cursor": {
          "ref": "fb03a3d3-4c8a-45ed-8879-91b6516fbec3",
          "length": 253,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "16ecc14b-2dae-4be7-946c-f058d2b7a4ad"
        },
        "item": {
          "id": "a64ae4ec-12e3-4c07-b28c-0d067dd17e65",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "2c4325bf-293a-49d4-9dc6-2a86e31870b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b46fdc9-61f7-42eb-9dbd-092977f3a4fa",
        "cursor": {
          "ref": "2e2a5c9e-be39-40e3-af34-754a8546dca5",
          "length": 253,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "fb695612-da1b-4f4e-bcb8-c323f91c0101"
        },
        "item": {
          "id": "4b46fdc9-61f7-42eb-9dbd-092977f3a4fa",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "e42e80c9-ae2e-41d5-8641-3668e3e32c03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcf7ec2a-9d0b-489b-9e5e-93e649a2e285",
        "cursor": {
          "ref": "3f213530-5ebe-4a4f-9254-d099e34fdb90",
          "length": 253,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "27465a69-c1d0-4687-b545-4d7ee6fd0017"
        },
        "item": {
          "id": "fcf7ec2a-9d0b-489b-9e5e-93e649a2e285",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "15559397-fd62-4664-bb47-4a46399eaf43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d10ae4e8-d7d7-4c06-b0e7-f980e0871b2f",
        "cursor": {
          "ref": "50958259-e273-47f8-a03c-f1c7e2ca9364",
          "length": 253,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "d3712ffa-9a19-4127-9052-5a612aa72f50"
        },
        "item": {
          "id": "d10ae4e8-d7d7-4c06-b0e7-f980e0871b2f",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "89807a32-c9a9-4786-bfb6-8f689d9613a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5adcfad-550e-40e5-a77f-4667b903352f",
        "cursor": {
          "ref": "9edab572-98b9-495a-a50e-2a5f60004847",
          "length": 253,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "91721e0d-f30b-45dc-9e9f-7486abc246ac"
        },
        "item": {
          "id": "f5adcfad-550e-40e5-a77f-4667b903352f",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "27c4a6db-2e31-45fb-b19f-dda33aa966a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b1bcbc3-6d51-42f8-9fe7-ece060170ba4",
        "cursor": {
          "ref": "53d47984-2a26-4b9f-a61c-a1dfaca6714d",
          "length": 253,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "061ba7cf-3bc3-47ed-85f0-bc68ca131216"
        },
        "item": {
          "id": "9b1bcbc3-6d51-42f8-9fe7-ece060170ba4",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "a6ed914b-c97e-4cca-8baa-067d0bf0355d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4be6cc81-8721-458c-84f3-94f1c8d64577",
        "cursor": {
          "ref": "82f169e8-b35f-42e7-90fb-132722a9bd91",
          "length": 253,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "8ab06c65-4792-4dd6-888e-dea9b2060388"
        },
        "item": {
          "id": "4be6cc81-8721-458c-84f3-94f1c8d64577",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "9f8f1d81-ab8c-4d9f-8a4f-3d5872a2592d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0251219-1604-494d-932c-2b110fec8fcd",
        "cursor": {
          "ref": "09575927-7a7e-41f4-83b0-2a28cc74a343",
          "length": 253,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "699cb3d3-f709-41ca-a829-eda729a47de2"
        },
        "item": {
          "id": "a0251219-1604-494d-932c-2b110fec8fcd",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "fb348dbf-b0bb-4a36-9973-4d150965f64e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "034ee19a-b5ea-45dc-af1c-7f8496710ec8",
        "cursor": {
          "ref": "165755c7-ebe6-4be7-a8eb-684250bdf880",
          "length": 253,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "146b021c-709d-4cb0-a334-0d9225c65eaf"
        },
        "item": {
          "id": "034ee19a-b5ea-45dc-af1c-7f8496710ec8",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "5b704784-6b98-442c-99aa-35393d270aa9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7316e21-f129-41f1-9b0c-38a110f46fab",
        "cursor": {
          "ref": "3f084925-3f4a-4e8d-896b-cc9fbc4f0b2d",
          "length": 253,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "81e47d4e-d8e7-4a95-8530-158fe47b8b2b"
        },
        "item": {
          "id": "d7316e21-f129-41f1-9b0c-38a110f46fab",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "7c45098a-1d78-4881-9a36-f31b3714da24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8c58c63-79ec-41af-b61b-89c64f23874d",
        "cursor": {
          "ref": "4ca8361e-61eb-4789-98a0-c974c043b87c",
          "length": 253,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "a759f19a-6fcf-43bb-a970-d1358dd1208f"
        },
        "item": {
          "id": "d8c58c63-79ec-41af-b61b-89c64f23874d",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "9a7cda22-567b-44bc-9104-4cd573549836",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce421b91-e569-40c4-9b07-714365f863ee",
        "cursor": {
          "ref": "19210daa-e113-41cc-8641-656a01e3ddf5",
          "length": 253,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "ddab2392-0b8a-4f2e-9d85-00f4cbe34800"
        },
        "item": {
          "id": "ce421b91-e569-40c4-9b07-714365f863ee",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "7cae3d2d-3e2e-45ac-835f-8abc84fbd63c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fcc11a2-75a2-4159-bf45-afb23ba85f40",
        "cursor": {
          "ref": "cc497ad5-ab57-4311-b5a5-c92ddaa74614",
          "length": 253,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "32679c92-93ee-493a-905a-99cb1fe2e55e"
        },
        "item": {
          "id": "2fcc11a2-75a2-4159-bf45-afb23ba85f40",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "2995713c-ea89-48f7-857c-0b4f03decb1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a8710dd-3c8d-48dd-9fea-a7cbfe850199",
        "cursor": {
          "ref": "8a4ad5c7-0bed-4747-8a28-10b3908c87f4",
          "length": 253,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "19013723-5e57-46b1-bfd7-806f830aef3e"
        },
        "item": {
          "id": "5a8710dd-3c8d-48dd-9fea-a7cbfe850199",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "e39d1cc2-9630-4f06-9172-208549947906",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "658b71cb-74f7-4467-94c9-4d9a60d1fb9b",
        "cursor": {
          "ref": "5ab43a2a-322e-420a-97f2-3d603a5c579b",
          "length": 253,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "9ea0380a-e054-4281-bf49-6cb0f536817a"
        },
        "item": {
          "id": "658b71cb-74f7-4467-94c9-4d9a60d1fb9b",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "8f777700-9392-4380-83ba-236d4ddc6469",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0e90a3d-4089-4f64-9df3-c8114fe1f369",
        "cursor": {
          "ref": "ef0eb2d8-67e1-4498-b7b8-586cd0509d26",
          "length": 253,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "acf95618-18a8-434c-8d5b-6b760af3d2ac"
        },
        "item": {
          "id": "f0e90a3d-4089-4f64-9df3-c8114fe1f369",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "2cd9e3cf-54d3-48a2-ab72-1d47d4f858ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16f9c28e-ddf7-4b57-9723-a3748d0030b7",
        "cursor": {
          "ref": "01c54d44-a8a0-4a5a-a140-d4c9eb87b115",
          "length": 253,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "d549c4a0-9a25-4234-af9a-c0a33ea93f85"
        },
        "item": {
          "id": "16f9c28e-ddf7-4b57-9723-a3748d0030b7",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "70a2f509-3f33-48e2-abc9-7cd750f745d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42fa26af-3912-47a3-be5e-687ddd917afa",
        "cursor": {
          "ref": "b630d7b9-28e2-42ba-83d5-a6bdf2ca39ea",
          "length": 253,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "eb493996-8ffb-4e01-be28-a681a63a0f7a"
        },
        "item": {
          "id": "42fa26af-3912-47a3-be5e-687ddd917afa",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "d09c53f7-5649-489e-a445-1475f6d12073",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f2632f5-2710-4adf-b0e7-a9a96fee3a5e",
        "cursor": {
          "ref": "b221be82-47ba-4ca5-94a2-771f04c47ca1",
          "length": 253,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "75d8f419-fdf3-4849-ba9d-44168d7dcf4f"
        },
        "item": {
          "id": "4f2632f5-2710-4adf-b0e7-a9a96fee3a5e",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "d3aa7f71-5e50-4c67-bb1d-24e1088a6385",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37d96206-4b9a-41fe-852a-5ae4ff949ee3",
        "cursor": {
          "ref": "0e0f03ff-3bbb-4413-a4fe-e545f0c7e115",
          "length": 253,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "f27c4c5a-8046-47b0-808e-68d15d26f62a"
        },
        "item": {
          "id": "37d96206-4b9a-41fe-852a-5ae4ff949ee3",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "c8682382-2168-47fe-aea5-cb53ac0788af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6dc09a7-610b-49ac-be43-92d84dc10828",
        "cursor": {
          "ref": "6dc282db-1082-49fd-9253-415dabcc24b2",
          "length": 253,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "c7f0c82b-9fa6-4bc1-85f7-25bc0283d4a5"
        },
        "item": {
          "id": "b6dc09a7-610b-49ac-be43-92d84dc10828",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "fb3c36fc-d55c-4c15-af09-42f0ce01ec90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a79e97b-0045-4076-9a18-dae8e6f5bf20",
        "cursor": {
          "ref": "023e81df-c5a8-4dba-a2cd-742f2a1e4e8e",
          "length": 253,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "5959203a-419a-4cb6-afb8-1f3e426a6312"
        },
        "item": {
          "id": "6a79e97b-0045-4076-9a18-dae8e6f5bf20",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "c47425fc-d366-4a6d-b23a-fd00261c0ac3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd3005c6-0e2b-42e5-b45f-e56898efbc77",
        "cursor": {
          "ref": "fa1ce9da-a155-4d33-bb52-6066cb978149",
          "length": 253,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "70430298-c72d-4da1-98ce-b1c7e78c6d33"
        },
        "item": {
          "id": "bd3005c6-0e2b-42e5-b45f-e56898efbc77",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "8895f3f3-21ce-4a91-9d0f-67e2a1490c0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "002aa810-71e3-4819-a08f-2b7cb22a88f3",
        "cursor": {
          "ref": "8e74016c-5ca9-49dd-ae07-dea78f65d95c",
          "length": 253,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "3f0363a4-da62-4c0f-8e11-f0beb241fe66"
        },
        "item": {
          "id": "002aa810-71e3-4819-a08f-2b7cb22a88f3",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "93ac11cd-276b-4dd8-8a5a-75dd0771fd77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5610ffc-1879-466d-a519-2112b48f4d99",
        "cursor": {
          "ref": "d7a19cde-44d9-4172-bb70-4d12de0a8a9b",
          "length": 253,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "9e8835d1-0639-44ab-9025-e81429af4ed3"
        },
        "item": {
          "id": "e5610ffc-1879-466d-a519-2112b48f4d99",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "453d0abf-bf63-4ba0-ab82-a21b781611d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f16d0fb-9552-4ddb-b5b1-f9df66aae1de",
        "cursor": {
          "ref": "092376b3-4a88-4b02-8d83-3bf0b6f85507",
          "length": 253,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "5a734abc-f497-4711-9bf8-6bc178412954"
        },
        "item": {
          "id": "2f16d0fb-9552-4ddb-b5b1-f9df66aae1de",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "83c3b523-6ce8-416c-9b2e-223fb28f5e40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "949aa057-a724-49ba-839f-8e1372d9de2c",
        "cursor": {
          "ref": "7a6d36bc-a93e-4ff5-a852-4adcb245b047",
          "length": 253,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "76c35c0d-c7b7-4d8a-a6fa-291f524eea45"
        },
        "item": {
          "id": "949aa057-a724-49ba-839f-8e1372d9de2c",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "b63840d0-5968-4da8-99ab-776fc6e2c29e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53c37a8a-1982-477c-b0ef-2f480c483dc6",
        "cursor": {
          "ref": "b24e983a-40fd-4a82-969c-de131daf35ea",
          "length": 253,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "22e36ee1-c84f-4f91-b57a-178cc6b5c6cf"
        },
        "item": {
          "id": "53c37a8a-1982-477c-b0ef-2f480c483dc6",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "993f5df3-8bb8-42e9-89e3-fe73d8e42d44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a532b97-880f-4264-9b36-da64be294f74",
        "cursor": {
          "ref": "d166fb3c-ad65-4e2a-8399-787163c166ef",
          "length": 253,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "1faec22c-f3f3-4057-978e-90c35297534f"
        },
        "item": {
          "id": "3a532b97-880f-4264-9b36-da64be294f74",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "14b5eafd-0220-4de6-ad69-be0356ab39a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07a45376-2c80-4711-b0fc-15db3f687478",
        "cursor": {
          "ref": "43ae2b5c-0da6-4586-95b0-9499ad78a60f",
          "length": 253,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "7213c446-6973-4544-b888-c76b8821a66c"
        },
        "item": {
          "id": "07a45376-2c80-4711-b0fc-15db3f687478",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "e49173fa-ec66-415f-8f73-443c9b31e71c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 159,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55bf949f-0449-4576-ace2-8f02f6c154fc",
        "cursor": {
          "ref": "426821b7-0209-4ad2-99d5-6e10bc293a02",
          "length": 253,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "033c9e65-56d7-44a0-830c-de5246424be2"
        },
        "item": {
          "id": "55bf949f-0449-4576-ace2-8f02f6c154fc",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "18f64c38-2c13-4188-a385-8eefb50fe601",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f2db309-3d14-4a60-8926-fb162c1e42bd",
        "cursor": {
          "ref": "5ea5b7d3-e88d-40bd-a004-f9dc06c0bf10",
          "length": 253,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "cbdcab92-3b2f-4ed6-a884-909f90ba464d"
        },
        "item": {
          "id": "4f2db309-3d14-4a60-8926-fb162c1e42bd",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "71076425-c7f1-4832-bf27-cdc101fdcf97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22530386-8d5a-4d8c-90d3-f9f95c16373b",
        "cursor": {
          "ref": "a477d32b-c32b-4ae1-bd9b-81d77bbaac22",
          "length": 253,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "0474f0d7-d02c-4f95-84a4-7f8856bb9df8"
        },
        "item": {
          "id": "22530386-8d5a-4d8c-90d3-f9f95c16373b",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "a9ebda0b-5fa9-4f47-ba65-0093664c60a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "470038f7-ae6f-4648-a59e-b57a320a2968",
        "cursor": {
          "ref": "766b698d-5980-412f-b315-0e2bd736453e",
          "length": 253,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "9527d5b0-ecdd-4f6c-a14f-e2353af7db84"
        },
        "item": {
          "id": "470038f7-ae6f-4648-a59e-b57a320a2968",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "0581a32f-2989-4a52-bf17-1aa77bca2ab8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd02b836-8ab6-4a82-af9b-4eaecea9d696",
        "cursor": {
          "ref": "e9bdd2ba-fdf8-4835-bbbb-6d920de4c766",
          "length": 253,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "c470e3af-86bd-46bb-8a8e-0e81369731b0"
        },
        "item": {
          "id": "cd02b836-8ab6-4a82-af9b-4eaecea9d696",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "c3ea2dd9-5f58-4dec-817d-3c79a8d85858",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6e343f8-9ba3-478d-b52b-9e61fb9d9e67",
        "cursor": {
          "ref": "e851ceb1-afed-4f41-8dc9-0c823d4beb05",
          "length": 253,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "9994dc87-f061-42e9-a905-8bec3425a073"
        },
        "item": {
          "id": "f6e343f8-9ba3-478d-b52b-9e61fb9d9e67",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "a43cb1c2-02d0-4b53-a9c5-a1dd49ee140e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0f991ed-6aa8-4be3-a3ef-1b006fbc5ccb",
        "cursor": {
          "ref": "ae2dfaf7-a33b-4f58-a085-31e3e4e83c47",
          "length": 253,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "66541497-180d-4be0-82c9-e0fd10d92029"
        },
        "item": {
          "id": "b0f991ed-6aa8-4be3-a3ef-1b006fbc5ccb",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "053171b2-b340-4d8a-bb68-e61045fe0e35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef551501-762b-44c6-8412-4886d7103948",
        "cursor": {
          "ref": "09513f18-a86d-4471-a652-58a834b85d38",
          "length": 253,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "c4171d8c-e22b-416e-8111-68ae826a735b"
        },
        "item": {
          "id": "ef551501-762b-44c6-8412-4886d7103948",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "5d38a70e-20eb-4dd9-8e9f-ddfd3197fd63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e831da4c-3aa8-4f8e-9461-4fe98c8ee224",
        "cursor": {
          "ref": "5a7422cf-7c0b-4490-b579-9c361afd3c8c",
          "length": 253,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "d2fa2475-e8d0-4f98-b21f-30294a608779"
        },
        "item": {
          "id": "e831da4c-3aa8-4f8e-9461-4fe98c8ee224",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "001e09b7-2199-468c-9687-ddbe04f784eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2450bab-187e-4fe3-9916-648f4068c7a8",
        "cursor": {
          "ref": "528e49d2-98ff-4694-8d53-4a29c6a5dae5",
          "length": 253,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "d6d8f7f5-6d0f-42e8-8c80-205eee5c25fc"
        },
        "item": {
          "id": "e2450bab-187e-4fe3-9916-648f4068c7a8",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "ff3b15b3-a308-4446-b130-8b8be1f2c1fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4de84fce-e4f7-46e5-a347-d16803a5f88e",
        "cursor": {
          "ref": "6b2f11d4-497f-4054-a5f8-5398ee3df8f9",
          "length": 253,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "8b70d9cf-c233-4d08-a1b6-43954cab1f58"
        },
        "item": {
          "id": "4de84fce-e4f7-46e5-a347-d16803a5f88e",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "419fa61f-bc15-4f5d-8ab0-faa0577a4f00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f95f203-29dc-4748-ad44-b9a0e819c0e5",
        "cursor": {
          "ref": "7812a719-1083-4c05-9a83-3368fbad7fa5",
          "length": 253,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "c1b0d97d-4397-4228-b914-8e2a8697103f"
        },
        "item": {
          "id": "6f95f203-29dc-4748-ad44-b9a0e819c0e5",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "15740bda-ec85-4566-ac91-778a901d3a01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ef75ad2-7da1-48dc-9c35-1f55069b019d",
        "cursor": {
          "ref": "2127b9a9-92c4-4df5-bff0-23bd8274e678",
          "length": 253,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "1f6be670-4692-40e9-8108-73bb2b8c96af"
        },
        "item": {
          "id": "5ef75ad2-7da1-48dc-9c35-1f55069b019d",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "4a00cc38-13fe-40a1-a98d-aafd022e0629",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd16ed64-f02c-4951-9eb0-603909469412",
        "cursor": {
          "ref": "c4f0c1dd-e6b5-49bf-85d1-6a6adf272c3a",
          "length": 253,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "e0655e36-ccbd-4909-86e4-bc30d3f86751"
        },
        "item": {
          "id": "dd16ed64-f02c-4951-9eb0-603909469412",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "b43d2ee7-206c-494f-819f-a28883c9de1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8dbaa5b-54d1-493e-9d43-10cb3b6b4610",
        "cursor": {
          "ref": "36c63e8e-7b58-4a2f-8b4b-9f0fcff1e759",
          "length": 253,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "1c36f490-4c99-4b5d-bb3d-8d46009cc7e0"
        },
        "item": {
          "id": "f8dbaa5b-54d1-493e-9d43-10cb3b6b4610",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "12cc7daa-a620-4466-a176-e61ec96ddf10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4bf1862-cb16-48ea-b0d9-d49f7a54d3ce",
        "cursor": {
          "ref": "be98b69b-adc7-46c9-977f-4d5787be71bd",
          "length": 253,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "8ba425d4-8e16-4ae6-9876-ddd25b58b6b1"
        },
        "item": {
          "id": "b4bf1862-cb16-48ea-b0d9-d49f7a54d3ce",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "ccce9752-6991-4755-8986-ed6701f767dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8be2072-82a2-4c98-ac5d-6ac175e5d922",
        "cursor": {
          "ref": "4f766855-95a5-490f-b24d-cf08958832fc",
          "length": 253,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "1b0246fe-1b2e-4021-aa62-1405bfc9a8ae"
        },
        "item": {
          "id": "b8be2072-82a2-4c98-ac5d-6ac175e5d922",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "1460a79d-45df-4e60-a675-e4d6afa58592",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32089fe1-eb47-47b4-b137-b21fde6e78e1",
        "cursor": {
          "ref": "9e32ee37-0fc5-45d7-8daa-7cf22854b625",
          "length": 253,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "13b6cc11-1ad0-49ee-a1c1-07628864b388"
        },
        "item": {
          "id": "32089fe1-eb47-47b4-b137-b21fde6e78e1",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "9eac686b-b88a-40e2-b5ad-903131f84219",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4c0f038-2588-46ab-8a62-cbafddf486a8",
        "cursor": {
          "ref": "3f5ebd54-a4d5-43eb-9f24-f1d2de47d495",
          "length": 253,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "10f49dd8-84b9-4410-a8fc-05e2b0c9f8de"
        },
        "item": {
          "id": "c4c0f038-2588-46ab-8a62-cbafddf486a8",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "beedc567-3286-4c1d-bc1d-6417a552faad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e80ff388-2eb1-46c1-acdb-0cdb2a3d333a",
        "cursor": {
          "ref": "f1f3fce5-7605-462e-88eb-ac09e1821e6e",
          "length": 253,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "d021db74-51e6-4abb-918b-e10ee739fd15"
        },
        "item": {
          "id": "e80ff388-2eb1-46c1-acdb-0cdb2a3d333a",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "78b847ed-5421-42e1-b055-619a0d5f1ea1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c8ea2fa-8d66-4001-b264-c4f6f29ecad1",
        "cursor": {
          "ref": "46b9f7ff-c5c6-47f0-814f-0b3ca4c36622",
          "length": 253,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "5f151e9e-e712-4c3b-943b-9f55071ba9d0"
        },
        "item": {
          "id": "5c8ea2fa-8d66-4001-b264-c4f6f29ecad1",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "ffab54fc-3ab3-4bc5-8fce-3ad8e91ebea1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4713561f-7b0c-4639-a54e-4afe90fad919",
        "cursor": {
          "ref": "76bc3073-19e8-4c8e-9183-b08c6c7b53fc",
          "length": 253,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "13bc2f3e-cc5c-4de9-9864-26471742ff1b"
        },
        "item": {
          "id": "4713561f-7b0c-4639-a54e-4afe90fad919",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "fefb948f-c4c2-4955-9fcc-18e7a396c224",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aad4086c-0ab4-4ee2-b317-8f252670d087",
        "cursor": {
          "ref": "d03426d1-6697-401b-b700-45b780a8f919",
          "length": 253,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "c9189369-e060-4fe5-9a63-068b24b094c7"
        },
        "item": {
          "id": "aad4086c-0ab4-4ee2-b317-8f252670d087",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "8ffa9c7a-9281-4ab9-afe5-5df76397cf87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2213453e-d4c0-4fbe-98ae-674d9f6b4c09",
        "cursor": {
          "ref": "b69ece2f-afdc-4f52-a62a-de8dc5bb9d8b",
          "length": 253,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "d9958daf-ea2d-4e4e-9c14-2056965f5984"
        },
        "item": {
          "id": "2213453e-d4c0-4fbe-98ae-674d9f6b4c09",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "3fe4ee24-e7f2-4ade-a10d-902eed8d402e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3e0d144-f1e9-435e-a58d-bf412c6a4151",
        "cursor": {
          "ref": "23f6424f-330a-4608-94ad-76e73bd24ecb",
          "length": 253,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "b60e62bb-0bca-45a7-9dbf-9969bd031638"
        },
        "item": {
          "id": "c3e0d144-f1e9-435e-a58d-bf412c6a4151",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "1be1e236-1b25-4609-87d7-f02098ad814a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71d48cba-bf3f-41f4-97f9-1d91bf465c9e",
        "cursor": {
          "ref": "60d1c937-0334-40b7-a609-63df6a9d6dd0",
          "length": 253,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "5c903ca7-a11a-4bd9-acb0-108fa57cefac"
        },
        "item": {
          "id": "71d48cba-bf3f-41f4-97f9-1d91bf465c9e",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "d16f3903-5dd1-42b1-a59f-346e4ef3a931",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0e23d25-4f12-421c-b084-f0325bf775a3",
        "cursor": {
          "ref": "f319a43a-26c8-4af2-ac65-71ab1e55610a",
          "length": 253,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "276d6d9f-e2f3-4619-ba6e-050150835a09"
        },
        "item": {
          "id": "a0e23d25-4f12-421c-b084-f0325bf775a3",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "0d6f14de-56ca-4308-8418-ca15db438412",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "577ce44a-c33a-43a6-9c50-b5a6eed7a3c3",
        "cursor": {
          "ref": "83b43939-0428-4ba9-b8a4-928fc7732fb8",
          "length": 253,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "bcfe3a77-1fd9-42e9-9c90-cdc4bdf2e8f5"
        },
        "item": {
          "id": "577ce44a-c33a-43a6-9c50-b5a6eed7a3c3",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "e0031679-e85a-46f1-901a-58ee5398cb69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6145c6b4-5796-4f8c-b84c-cd0560cee908",
        "cursor": {
          "ref": "4df96974-bae3-45e4-b2a3-0feb625d5913",
          "length": 253,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "6af47e15-e4ca-4cf7-b7cc-bcbe1474d419"
        },
        "item": {
          "id": "6145c6b4-5796-4f8c-b84c-cd0560cee908",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "2a7a4431-d5ea-4ba9-88c5-3639f4545c43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "746163ce-24ac-47e6-aeaf-b3153c5eca3a",
        "cursor": {
          "ref": "ff19226a-37d4-4f17-8b93-42d0d87e1a87",
          "length": 253,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "81be163d-e92e-4712-bcb6-a0646edabf2f"
        },
        "item": {
          "id": "746163ce-24ac-47e6-aeaf-b3153c5eca3a",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "8dd741ca-b746-49d7-aea1-9b626ecdd926",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "664c3a67-15e4-4134-afb4-4271c5255755",
        "cursor": {
          "ref": "41b7299c-08f1-402b-86a5-7a824220aaab",
          "length": 253,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "753e3cc0-ac6a-436d-b596-7d18db14a388"
        },
        "item": {
          "id": "664c3a67-15e4-4134-afb4-4271c5255755",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "c41d2ed3-d1b9-41c1-8c83-a2a98dfac131",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82ae52a9-884d-4177-9e0d-dac2776c19a3",
        "cursor": {
          "ref": "2c661446-6348-42fc-b7f6-b31fb74b0899",
          "length": 253,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "19e3663d-0845-4eaf-aa25-bd3ef2a06eb6"
        },
        "item": {
          "id": "82ae52a9-884d-4177-9e0d-dac2776c19a3",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "bf770d35-3672-42ea-ae32-9b9150be9c22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14543f0d-0931-4ba1-9cf1-34a73786025a",
        "cursor": {
          "ref": "52fbbf77-9b4e-4c0a-8550-23d8d7413c2a",
          "length": 253,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "6d718ba5-efc5-41fc-a351-eaf5b0b64c6b"
        },
        "item": {
          "id": "14543f0d-0931-4ba1-9cf1-34a73786025a",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "4ae7953f-fbcc-4325-9d86-b71408bce9c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "698f7ed6-9e27-49ae-8485-19258b51e03d",
        "cursor": {
          "ref": "be04c1ee-ed43-455d-b8cb-179792d28a23",
          "length": 253,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "20016631-29c7-4e2f-8288-bbbce5b2c2ad"
        },
        "item": {
          "id": "698f7ed6-9e27-49ae-8485-19258b51e03d",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "fef93bb5-0f6c-4921-bcf5-6b7639aa4516",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74735677-6349-4baa-809f-040f5cfeaee6",
        "cursor": {
          "ref": "8f237a2b-0488-4760-96dd-7930f29a983a",
          "length": 253,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "4ec6f6ac-f331-4449-a898-4c990e2bfe9e"
        },
        "item": {
          "id": "74735677-6349-4baa-809f-040f5cfeaee6",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "6432ad2d-732a-42b2-8479-a58f2abf8387",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0cdbd53-666a-4276-aed5-5c066675be80",
        "cursor": {
          "ref": "40873888-2331-491e-818c-a85e28714c22",
          "length": 253,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "b4b077d8-b460-4c28-bac9-f1acbf028dcb"
        },
        "item": {
          "id": "c0cdbd53-666a-4276-aed5-5c066675be80",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "737fe3ab-ce67-4421-bfd7-6c9ea08beb03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbbac7a3-d40d-47bd-9563-30cf121f3225",
        "cursor": {
          "ref": "b5ccb316-6976-41e7-a8c8-efacce1ae9df",
          "length": 253,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "528aecfa-0562-4193-8661-7125542ddfd2"
        },
        "item": {
          "id": "dbbac7a3-d40d-47bd-9563-30cf121f3225",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "ce5b61c8-30d7-4490-afa7-b9c6707c8133",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01269abe-fb84-489c-a5a6-d7dade3cab7c",
        "cursor": {
          "ref": "2ec11b25-0018-4aa1-afb9-9039582bcede",
          "length": 253,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "973e24fa-0a7b-4185-aa3e-b900d5dbbc30"
        },
        "item": {
          "id": "01269abe-fb84-489c-a5a6-d7dade3cab7c",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "88d78a6f-d26c-4c7e-af90-026a5b67a00c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b31b955-d1a7-4ab0-ae75-56ef4a98ba68",
        "cursor": {
          "ref": "c9e08baf-d8bf-4881-ab12-44ae4172680f",
          "length": 253,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "895aa773-af98-41a0-9986-c8266004c1e2"
        },
        "item": {
          "id": "4b31b955-d1a7-4ab0-ae75-56ef4a98ba68",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "61390f4b-a54b-4653-a573-307d09c7bccf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd0705ff-adac-4eb6-8155-3223189e23d2",
        "cursor": {
          "ref": "4a7ed94e-1ae0-452b-8a94-31b2ec4a0aa6",
          "length": 253,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "2237d7a9-e82f-499c-bd05-b146e4060cb4"
        },
        "item": {
          "id": "dd0705ff-adac-4eb6-8155-3223189e23d2",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "f274ba89-1494-4eaa-9565-3acefeee746e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 31,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a9b55e7-6f1a-4ff6-a098-a18843db240f",
        "cursor": {
          "ref": "46ad0fb4-e88f-4ce1-8622-63ebffef521f",
          "length": 253,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "aac69647-7945-4a8f-9a4b-51f5531bc51e"
        },
        "item": {
          "id": "6a9b55e7-6f1a-4ff6-a098-a18843db240f",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "e82cb636-97cc-4ade-961c-96ba35c4a0d7",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 31,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48b2df17-3d7c-4ac3-9a30-58a15fa34905",
        "cursor": {
          "ref": "0fee1297-2549-4675-ada1-4145cfa16f3e",
          "length": 253,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "6e0b822f-288a-4490-9f93-3cce97867803"
        },
        "item": {
          "id": "48b2df17-3d7c-4ac3-9a30-58a15fa34905",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "692e4f1a-7353-40d3-b9a7-cf79f9cca2aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "b03a8de2-2102-4292-9420-ea9858a0526b",
        "cursor": {
          "ref": "8eb6d785-670a-4184-ae20-5d10b116e2c6",
          "length": 253,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "e15b5106-6696-4493-9fe7-76a039859643"
        },
        "item": {
          "id": "b03a8de2-2102-4292-9420-ea9858a0526b",
          "name": "credentials_verify"
        },
        "response": {
          "id": "aeac1e8b-d0f3-49bf-896b-46d67b3634b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:246)"
            }
          }
        ]
      },
      {
        "id": "e0edf5b3-c2b9-4a1b-a2fe-2cf8cc24b9b1",
        "cursor": {
          "ref": "3e777c3d-ae26-4a40-be4f-09841b1fc42b",
          "length": 253,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "1d143320-f165-44ed-b54f-b195aa1aabc9"
        },
        "item": {
          "id": "e0edf5b3-c2b9-4a1b-a2fe-2cf8cc24b9b1",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "b096a421-0ce2-4dfe-b07b-f1bcad33df6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:247)"
            }
          }
        ]
      },
      {
        "id": "0eb0c0e9-8cb6-4c91-a166-dc48887c8746",
        "cursor": {
          "ref": "3d9bd8ad-88ee-421f-8e48-85cb658f35cb",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "bde6565f-8cd4-495b-bbec-b79081ca7176"
        },
        "item": {
          "id": "0eb0c0e9-8cb6-4c91-a166-dc48887c8746",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "0eb0c0e9-8cb6-4c91-a166-dc48887c8746",
        "cursor": {
          "ref": "3d9bd8ad-88ee-421f-8e48-85cb658f35cb",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "bde6565f-8cd4-495b-bbec-b79081ca7176"
        },
        "item": {
          "id": "0eb0c0e9-8cb6-4c91-a166-dc48887c8746",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "0eb0c0e9-8cb6-4c91-a166-dc48887c8746",
        "cursor": {
          "ref": "3d9bd8ad-88ee-421f-8e48-85cb658f35cb",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "bde6565f-8cd4-495b-bbec-b79081ca7176"
        },
        "item": {
          "id": "0eb0c0e9-8cb6-4c91-a166-dc48887c8746",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "9b0555a2-60e0-44ae-88a5-93dda8f4e27e",
        "cursor": {
          "ref": "19546d50-d696-4c79-b37f-cde7eb04de68",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "4a2cbe77-3788-49e8-90e5-1ce4fafd052d"
        },
        "item": {
          "id": "9b0555a2-60e0-44ae-88a5-93dda8f4e27e",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "e3014554-96c7-43a9-a6f1-93ea625ac72c",
        "cursor": {
          "ref": "75d792a0-109b-4acd-9595-ee115521c861",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "507572e9-509a-4774-ae0e-ab23c3adb34b"
        },
        "item": {
          "id": "e3014554-96c7-43a9-a6f1-93ea625ac72c",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "e3014554-96c7-43a9-a6f1-93ea625ac72c",
        "cursor": {
          "ref": "75d792a0-109b-4acd-9595-ee115521c861",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "507572e9-509a-4774-ae0e-ab23c3adb34b"
        },
        "item": {
          "id": "e3014554-96c7-43a9-a6f1-93ea625ac72c",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "9320b270-6545-466f-87d8-f5b6edf7c72f",
        "cursor": {
          "ref": "b27699a2-9fa8-4d60-b2f7-e718c5de50c8",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "80515560-f01f-45db-89fe-510d2997c375"
        },
        "item": {
          "id": "9320b270-6545-466f-87d8-f5b6edf7c72f",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "dfbcf521-5a9b-41b1-adbb-9ee04c2fd048",
        "cursor": {
          "ref": "289f4ea4-266b-4f46-82c3-612fb1e094f3",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "7ae3626a-4276-4974-8c1b-300d48b5dacd"
        },
        "item": {
          "id": "dfbcf521-5a9b-41b1-adbb-9ee04c2fd048",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "dfbcf521-5a9b-41b1-adbb-9ee04c2fd048",
        "cursor": {
          "ref": "289f4ea4-266b-4f46-82c3-612fb1e094f3",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "7ae3626a-4276-4974-8c1b-300d48b5dacd"
        },
        "item": {
          "id": "dfbcf521-5a9b-41b1-adbb-9ee04c2fd048",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "e70029d3-c301-4279-bb4e-5bba45950e62",
        "cursor": {
          "ref": "96c17efe-35a2-43bb-8509-a2c96e722f29",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "902ef556-557e-4171-8c9a-21334838339f"
        },
        "item": {
          "id": "e70029d3-c301-4279-bb4e-5bba45950e62",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      }
    ]
  }
}