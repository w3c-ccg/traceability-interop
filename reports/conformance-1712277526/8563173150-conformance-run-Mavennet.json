{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "17f44f4e-c6c7-4b50-8597-3ca0b4040bfb",
        "name": "Clear Cache",
        "item": [
          {
            "id": "ec36761d-7f36-43cf-a897-92796ccbdfa4",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "29b0e268-dfd2-435d-93e3-fa4629281a9f",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "e4591934-96f8-4b14-adf2-74aec0f5bd9d"
                }
              }
            ]
          },
          {
            "id": "a4143cb4-db3d-4ab6-bf26-64f87453bb43",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b4fbe92c-2dd4-4f89-8331-3556316dc3e3",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "81c26a9b-48ac-490f-b724-3fb0831f823b"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "ef070fa0-bdd4-476d-867f-75483446791c",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "a98c64cf-f1a8-4e1c-bd93-1143f863b90e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b029aa26-d7e8-4b3e-b482-6f6516c4eea2",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a05f007d-27f6-4149-ba49-07954b1ee615",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3c0a20e0-6a6f-405d-bbe7-87a7f9d1bca2"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "86142328-8fe4-453d-83e5-90b828cb29f9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b6ce27c3-5e4c-4813-b46e-e3f7a1aaeeb6"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "6528ec7c-855f-4010-9838-12d5adbed2da",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c40f40dc-977f-472d-81d6-cdcd5ac82a5e"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "416ac411-cc5b-4007-acf6-d459265abf13",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "3e682c29-55ed-4f3e-8d36-da859dae397e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1884474b-e94b-494d-93b6-10512ded8ea6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f84af1b7-b425-48e9-ad03-e8ad349f1ed3"
            }
          }
        ]
      },
      {
        "id": "e0934cfc-917f-4ff1-aa1d-ac137d8744e8",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "1177e848-6a41-4194-be9a-e4f003cbca28",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5ac6f100-cc85-42bb-bde8-8fd4602b4def",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "95aae862-0874-45e3-b212-52b995b9aad3",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0438e4bf-7240-440d-9065-6eea17d828c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "65388d71-f208-4dbc-a7ef-cb91743b6b99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "877b8d20-bdbe-4240-a964-c42229055eb1",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "304baeb9-e516-4198-a554-03a50f6e0d3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b278507c-04da-4e9a-929a-cf3fce4e869d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c07c1df-e021-4765-b101-7425dc1405b0",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83d6a4b4-19cc-47aa-9224-5cad2f7200d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "95ec909e-6865-4024-acc1-90e59654da8c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d73d66ea-9500-47fd-8a8b-c07952f270f6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2306dad5-54d3-4b49-8c72-9791cda9d49d",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4c8d499-08b7-4ca3-83c6-cc6c1e8e5877",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "733b893f-2481-49fb-8b06-2613fce55088"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6aeadef8-e8bb-4cae-8e19-f39d4f339eec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0cf14887-bc42-4380-ae2a-5e76075259fb"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "adfc1130-3f33-443a-bd66-bd2c8d1b71f4",
            "name": "Positive Testing",
            "item": [
              {
                "id": "19db7d2b-50a4-4217-bc26-69ce90d92bf8",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "971693d0-006e-4e4e-b30f-b1e529e8e716",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "997da09b-9f38-4357-bc3e-b64fb7491cd1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bbd17ccb-3c98-4dc5-aeaa-53635c52d93e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "5a905b9c-9393-4d5b-9672-37bc487e7f52"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a7999c4c-0742-498a-8db0-347239d528ab",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "529b598b-2b7f-4b61-84b8-21642322e665"
            }
          }
        ]
      },
      {
        "id": "3a595bfc-0315-45e8-ac4f-83f937d4d68d",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "f60e17c2-b4de-49a4-add3-375b79cfaa86",
            "name": "Negative Testing",
            "item": [
              {
                "id": "100a61d3-8e4a-4446-8316-110b1d8a34e6",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "5c5a9a7c-8976-4894-9b21-0121e4946279",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc8ac44e-1e7d-4844-8ad1-ce7a02109a2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64b5e91f-075b-4793-90f1-990329e73d9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e96ff77a-6755-4cc1-afc1-4dd61a55a703",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "319a87c6-6bf5-423e-a4a5-7846a8b9a1bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d783a0e9-f21f-486f-a979-2daa5601c091",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db7eeae8-aa8c-4f14-89f4-dd8641eac049",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5dab71c-93fd-4fdf-81a6-50ed008d90d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db4dbe82-367a-4b0f-b3a0-c0e339f81a05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ac871653-8d26-43c3-8198-7d9f4269331c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4449637-c7c4-43cc-9505-dd9c21218d21",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "939680b0-2317-4966-b3ad-6a78dcc8041f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6bda6595-0038-4cda-a341-9d1bacf3e960"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78facb63-78d8-4cdc-98c2-2cf42784bbb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9616d625-efcb-4473-ade2-fa8687e8ae6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "859b21b1-5521-415c-8092-392ab6aefa66",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a639e37-be80-43b7-9b09-305424059587",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89713937-ab12-460e-83dd-2d6a298eb82d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba2f7677-1f3f-49d1-8196-b524206a89d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "371d88a7-0160-4b52-8628-5b578e1620be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61d71457-2a6b-4b7f-9234-5dab0aab54e9",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c27d4fed-3eb6-4306-af3a-f55c46baa810",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4128ec65-4e3f-4ebf-b8b3-d9d4f48f5676"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a8a34ee-f9a1-4d47-9998-ae5d63a376dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "18688a0b-eedf-4ebd-bc42-6c6c9e1b834a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d5e4de6-f3cd-4528-8333-17385bf31d57",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "830d55ad-8e13-4105-9f90-3a4ddfb22c11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eaa4dd3a-fc1b-40a8-982c-7d1c74f12c78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ae5eb0a-5db2-4eaf-9cb7-df29aeed1533",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "74ead2cf-6878-4cb6-a512-e4a111f2c972"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00ed4692-a72e-48d5-a82b-69e5db321df8",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d36bb7cb-9ea5-46b3-b691-75dd2ef3ec90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "290a431c-de1d-400a-b8f6-75aaf6064c22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6fe802e-f74c-48b6-967d-882e8bf52870",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d74f4d66-bda0-4e5d-b3b8-7ead56e5eb8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a25d3eec-a554-4bdf-911c-e313283a16ea",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48517d7b-f970-4dc6-b1b4-84d38039cc0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd1b80f4-824a-4820-a663-d3ad6a113ea5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8890c75f-911d-4932-8266-b7ca866f78ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3b90a7a1-0ec2-4a5f-95e1-b776b5bb6de0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d881dfb-b8c2-42e6-a786-1ac081ae15bb",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1795f8b0-9461-43f0-9fd4-0e5c2198c6c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "307176ad-5cb3-4b7f-983a-871c236e4804"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa9b994c-96f4-4c00-88c4-be39cdf0c126",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f6cb529d-a570-401c-9bb1-abc3661dc97e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41cb1d94-63f5-47e4-8d88-99629684429f",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdc4c53f-14df-4d6e-8c41-eaa04db5a3ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6542ab67-cba6-4342-8508-264b440c07c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c42f03a4-4c39-4ab6-a8dc-d56395a6ec99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8fd27d84-53b6-4993-9391-4b1488840741"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf60fd55-1d35-48fe-bfe9-527bbe4ee527",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "269dd549-3f21-49ed-a1d2-7d496047e02c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12d6c122-7daf-4ddd-a607-70c0effa17d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "615fb364-0652-49d2-a11a-35a797b8f6bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6e155897-3296-4781-818c-a26c8df0ac4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f52def2-3e74-4d3a-9c2f-bef4b96faa29",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10be3308-9e6e-4755-bebc-7378dd78c868",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec1bdcaf-f17b-4944-8b0b-136646162ac5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f54bcac-366a-4825-b57b-0b4fd85400c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2d16acf6-c63c-4df7-ae46-59b70ca94785"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74d24e89-d9c3-4940-a8bc-2eb5b3e4b65a",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51b1a753-79c3-4ae6-8072-b9e96b27162b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cb985b6-802d-4633-8dbc-cb81f649e105"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8a53b5d-6611-4a48-81d6-c8a2042c9ff5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ae64c263-3a7d-49b3-aeed-a50c81976881"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3b13dfe-1d46-42fb-bd64-174b7116b5ac",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1000d58-eceb-4357-9206-c9b15ff31934",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7717fb06-71c4-4373-9b03-c17d4cbd7865"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d867be8-0779-4ff4-862d-3ed9dfadd140",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b85f6825-b6e6-4bb2-8cc0-3d61c173fadf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d053860-8a43-4a80-af2a-bf27e850e796",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c0456a9-3a6c-45ec-b20b-e4d92caf7cff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e653eae0-9bc6-443e-99e0-c03a5fc4bdba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a079536-772a-4c12-bc64-6517ab76217e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f8e834e3-6ded-45af-8af7-6d593b161705"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b341267c-194e-429d-8d2b-5982a2620428",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8464eb99-e245-49fb-a33d-062e0935a07f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0422b49f-3260-47c4-88b2-10234ea7458d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58a8f505-32b5-41cb-826b-ff85ec0e985c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b903cbcc-650c-49be-8f4e-8f9f2a0682d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f370464-9560-4d30-9ea9-a3e780c53ed5",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "396d2ed6-a8bd-4897-8cee-bd22f3feaf95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "882ab608-783f-40ff-9990-813b89af31b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4f71c8c-b36d-46e1-a908-e840440e538c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "024174db-73e7-4277-920c-f38f1166be2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe2df6ca-c23e-4da3-8243-0f06bce6e3d0",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de9e7928-aabc-49f4-8bda-7f1b84c8f70b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b03018f8-a570-4963-bd32-4d58387d6941"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07058af3-e9ee-4c32-9a98-2bf81ad85fbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "7acfbd94-e123-4ef0-80f8-2d6f0a52dead"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11e708dd-137c-4ee2-be8c-8bb739eaa999",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a209be7f-8d82-48d4-b917-311bc9d7d60d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17b7e1b2-593e-4993-8a62-808d23886029"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74e240bc-6f94-45e1-8b6d-7083854f1c0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8ffdd4c1-8b3b-4cef-818c-ce4d5021abaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96832993-b1fc-4ad7-b9a5-458ef91269fa",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50901625-7c79-4607-a6b7-6714e5ab1f54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88472401-c89f-4f8b-a3cd-7e40f02b14bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c932f154-410f-4c9f-925d-31c8e88cbc17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "026d0697-e64d-4d86-9633-c13067930d7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ae2cd96-d69e-4d91-a108-d5ee9835d447",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be6218b3-c186-42f9-8304-08021eb53d39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42595097-cee2-4e04-9f68-bd2fd545492a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5364a436-390c-4298-9bef-73b33a5004fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e98e93fc-8c44-4f01-942e-6b5d2ebc927a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26244669-e1fa-4500-aaaf-5a1b181178b8",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f737c50d-9a77-4457-b403-6922e149496d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bafdcfb-c455-4f4d-9d36-56325d36ac19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82c459d1-5704-4d5c-884b-c366b74673f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4aa76ebe-b3c8-449f-a01d-6ab3e4656a2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12757300-e327-4a13-9d6e-1a9aa8c75ca1",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7264e1ac-6356-46f5-9ccb-37f7a4782237",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcd5261b-a3ca-4146-9a77-319f6fb32ba9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "500d20b7-713b-4762-9830-ffb59fca649c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "261a373b-3707-4b70-ab06-4c3b149cb5c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62d2a82e-9878-4f49-abb4-8cc5d7cbfcb1",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f2e5020-cc62-4e5c-b6e9-cce1dc190f36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74033d35-0a25-419e-83c4-17f3868767f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92d5a555-edc1-4502-92d3-62a832482a29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "265f026b-4f78-4394-bc02-90b9ab1f2943"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d22c7505-37e7-4f90-ba91-7cf809cd95bc",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31850722-1284-4ed2-950b-cc0cb15319ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7ea1356-1ee4-49b3-ba67-54a7bc9f627c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a385ba6-7814-4dc0-91f7-95afec9cea18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d7f42541-4e45-491c-aa76-c0c345f998d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "719d8b56-cecf-49d4-b981-04156837322a",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f94e7d87-fc93-4339-80fd-d01b05c0a03c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75a50951-6b6f-4900-aa97-28eb35578eb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de595130-b2d9-4170-ae8c-d739a198449f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "31af226a-24e6-4335-8068-e7f04227f6a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb748a8b-7b6a-4f7d-952a-3c04b96d1242",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05f9d8c0-6f1f-480f-99d9-1b03a669260c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e90aa3f-59bb-423f-a672-a339aa098a55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "782add15-9418-4bab-9633-a5ee52878608",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c9b1440e-725c-44b3-87ce-397a9f8961a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "783eb365-1f2a-44d4-9cbb-323fac0f52de",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfdf904b-0829-4cba-8725-583df6e112f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9438840f-850a-48b0-b91f-16ed223abf01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20cbe402-a05b-47f7-9c3e-d6e3062d5f14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "86835c52-ce20-488a-9dfe-b6b9a500c400"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b1ffb96-a4bc-4269-9107-915bd849f880",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c52483f4-0d0a-4c28-8c11-a87f9b6de943",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "543326b9-3729-4c7b-a36f-cf995f136db2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4ce6e56-1b22-4d4f-ae2e-870f826633cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f4f429f9-a131-43b3-8072-d9803473ac06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfba02c2-5901-41ac-854d-41316015f3be",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6b8e741-dbcb-4366-8141-acf83d06265a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3624c1c4-e10a-4c82-a3da-1a39096cba40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "135194a3-38a3-4bd5-897b-a00c233fb82b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "48036d5a-09a2-428e-947c-e2e51749be97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8684b26e-a8d8-4a96-a2a3-f89a6fc84398",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "559f81f6-dc2d-4883-8fdc-9f5095d0553c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e1f6e2e-39a5-4b99-a619-3db063c9a9b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26c321a0-8c6a-4deb-ae6b-0b2545006626",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3c00339a-fce2-4570-904a-2e4b1e5c4b76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87e1c0ef-6253-4ae8-b97a-e8312ffe18b2",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1778c0de-c83b-4189-a0f5-7573678b47a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37080309-3655-415d-8b6e-03c13c178960"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3786e52-6d92-4805-9776-91776d609ba2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b687272b-b32a-44df-b439-6ad51f0f70e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cba1634-cce6-471c-accb-a223d736fb26",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "daefddcc-90fd-4634-829a-a1ada598a2b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08403282-2ad0-4f57-84ff-5c85a5185637"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d5d0f49-04b8-402b-b250-e76f44097074",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9e7068f4-43f1-4d94-b035-c140f8688330"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d9a5627-c11f-4ed1-bca0-4f529344fcc4",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ae267e4-f5b3-4e5b-830e-7cf24da84fb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36ffc81d-3ad3-477f-a18d-86b55e3a4063"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5473756e-93c1-45ad-9921-b6c9381eeca2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "249166a5-3ac9-41c2-b4a8-ce5944523556"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6775dfb1-8047-4e23-b469-424adcaa562a",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6621de43-0a33-42dd-899e-383e6402610c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "baa31db6-541d-4f30-b9e3-8c8d32fc2b9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "995754bc-96bd-4671-8067-597df291882d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "bfccfe0d-36cb-4ab2-81cf-ee0c935e7a01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfa68a6e-89d1-4c3e-85a7-d84c6fe170e0",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c76f66ff-a258-4b4b-a10b-7ce325640420",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b117583f-24c6-41f4-937d-3ed43166acb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e699aafd-1900-482e-accc-b4bb4cb73a92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "83ab45ee-294d-4059-abec-1277d0c25e9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e7d78de-2fd0-40bd-bbb2-89b353361aa8",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fd75e8b-9747-419e-af23-51122227cf15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4d96856-6b61-4bf7-86ba-9476ae66abe7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c801906d-e3ef-4cde-84bf-567955335cf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "cc537bed-2afd-4775-ac4f-48cff23a7465"
                        }
                      }
                    ]
                  },
                  {
                    "id": "038a6138-a460-410d-9cae-deb2d8036812",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb698fd1-3b14-4b47-8708-b76a11f2b74a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33b57cd6-a5bb-4d5c-b10f-80dcd86dfb3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17bb3c99-47c3-4582-a07b-af056fed7de4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "fd9cc832-b1d7-4657-afe9-d43223a1815e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0969f55d-3822-48a5-a0cf-db57ba76dbb0",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30aae296-5366-4d0c-ad7b-8f391c5676f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1cb22922-acb5-4ab3-8bbd-41e549d53b37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c42eca0-8fe5-4809-84c3-a3d4d75a717f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "ff9c8017-7ce3-4c9e-9244-29fde477f7b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a511305e-4d7f-40d5-a65b-64d91737c50f",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e64ee67c-bf6b-4bc3-855c-43d41e366367",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9eefb96d-c549-4d16-ba1a-195cdaae8336"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ad62c63-762c-4c8c-99e3-624a27d92fe9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "ad1e639e-c2de-4020-8e4f-ddfb8d6d795c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b2f293d-faad-45a6-8304-dc127da75c09",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad9880c3-65f5-413c-b220-08a4ec92a2e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a501c18-2a32-4443-9e90-c536b1aee8ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c603cb7-e83d-4dae-b2a7-ba72b75cdee5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "d2f371ac-dd85-4845-acab-878be662e722"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cc818fa-6d3a-4801-a314-76bfc17ae907",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97430080-9e25-44c7-af7f-8f8d2a4a2e88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de7df7c1-4d3d-4d9c-b4b3-0dc154b6e88f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5c970af-6225-41e3-b651-312c3f0dc613",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "d744073c-eb2b-4e3b-915b-a5068e580e5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2597384-134b-4b84-84e5-9031fb2beae4",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "862f6787-860d-43f6-8537-6e9df69f7437",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f1649dd-a532-4e97-8e09-690d4d463e49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdb26138-a999-499c-8e7a-dd0f8bbffd04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "f178fe55-1164-4424-a533-d06912e042ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4275963b-272d-4042-ab0e-f71efbef0832",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f01455a9-8228-477c-8f95-563033601a1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e5314e8-4450-421e-90dd-c1c3dd581b49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b99a1bd8-7804-439c-a2ab-503a0320ea3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "e2feadfe-bea9-4c88-b9d3-e86fe617b571"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d975d78-8644-4bdd-a614-63df0b978179",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dd9a709-52d1-42e2-8f00-9dfe0da60914",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26d0b2dd-f58d-4185-b77f-8fb4e9a27cb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "208ed249-6d7b-4361-b8bc-7021bea8b730",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "340e93f9-c453-4415-b722-2d733136d3e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3643093b-383e-474e-bc83-0ec1684bd0be",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90865168-1833-4752-a0a2-eb8bc3e8dbc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ac0a3db-7576-4426-a864-524d177cc17c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a27d4f2e-3d32-4e35-a44b-84e5b58d7f3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2102328b-7d75-4158-882d-f69e8168a79a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cbe3a6a-b2ce-4147-a5fb-49255e761734",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92f058f6-dff5-464b-a906-341685028f59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7440243-7160-4144-8933-401b270e23d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85cb0eb4-6669-4e02-8218-a41f16a479e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "45c416af-1009-41a6-9fb5-3f03e8937860"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b1c3584-ec6e-45e9-8f76-336240ac0e89",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61528f23-95a9-4079-aa38-4a1c7e4b87e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85abc452-421b-4f66-9380-ba0a0d6d4f0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "351ab659-9bb3-43a7-bbd4-493c14decc7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5f646a49-65e7-4307-a872-f07ea5377f70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "303b5289-0eca-4dae-a4a1-fb43688b96bf",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49488f5c-c624-4c88-8f1c-36d9c7f9868e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "242904f5-a559-43f0-9c51-e522234e5391"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "348539a8-5a02-4dcf-9452-1593c71cb0be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3081612f-b3c1-45db-ad3a-3d6f92255771"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88abe648-2bc9-442f-a481-d91c2b9c837e",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "629079b4-c585-466e-b4ed-4baa77cc7e34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25f10f55-94c6-42eb-a094-b44a53fafcfb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5e190ce-748a-493e-b92f-e86f9d5c5633",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "14c09a78-8357-4261-8a00-cb8db423466d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11c8cbe1-08a9-4417-9a9a-e7d826c46a1e",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2386a576-bc53-41d0-84be-fe8716ff03bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "416a52d2-d55e-4730-abfe-ca343f6ae81d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daa86929-2b5b-4e1e-96fd-8f6ce5d81048",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "2aa1b0cd-077a-4f26-91c8-1a885786d0f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f43c98ad-ca34-45f2-9524-c4af33189510",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c5e9a62-28a7-452c-81bb-749d8d481d0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f57b291-aa1e-432a-9a5d-265e0adb177a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62cf166f-e29b-4aa9-9c12-5d2e7580be35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "97009e97-7d1b-4f84-810c-2eedd0c13fe0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c09bdf77-f99d-48de-99e5-5074ff7c812b",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "835010d5-7ac6-4244-85cf-9e93e2beb4ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c57f068-009c-451a-9b3e-fe8bafc0447f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b1e815e-0894-426a-a42c-8a225dccd915",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "14660846-7d53-4360-93c4-7883f932b005"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d52f63e7-5f19-4764-aea4-cbeae8a5e472",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a39aa61e-0a7c-4340-8141-5b338bb1d840",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "761821cb-9c84-4b5d-8e11-2e8b45729fe6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02433b1e-1cba-4bbd-8e36-78d9cfad8c73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "addb9f62-4b50-4aad-b6a3-724ee74cfb67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0100b652-480f-4a4b-b45c-76a6f068201c",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4849593f-e0e7-41a4-be8f-2f4e4cc7fd74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbe02123-388f-48ac-be58-531d97e0e2a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aff315fe-07ef-412d-9ac8-c6cd8683251f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e8c4c262-8f56-416f-8218-d25d859e1495"
                        }
                      }
                    ]
                  },
                  {
                    "id": "719d08f3-7573-4457-8b75-e3710871f023",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de378459-b8b2-42d8-b1cb-18d2e3eec1bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ceb57150-ad24-456c-a8f4-eb0ee2f1f9af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e863a5d5-f086-4c71-9b38-d817cb7ab0ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "09cf724b-2e01-44c3-b739-11483f1a3477"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb405f8f-5b1e-44f0-b93f-06ef900a8b67",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2573b9b-035a-4dc8-bb1e-6a60123e965f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d46d592e-6b3d-4c79-91f6-1766ff45ba4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7c346cd-eb55-46f4-991e-e332f6f1a4c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "aea2d7cc-a40b-49f9-86d2-dccae3cd596b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49233215-2e4f-48b3-ae3a-984f737f29b3",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19dda67e-3110-4a7b-ade3-536969439157",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db966396-9c33-4523-a8be-69fc0dad8e10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "935ee8da-88aa-462c-bf0f-6a9c4af05c0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "262cba6d-d558-40b0-be55-eea2ded4026f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d555f25-4d5d-436b-a189-71c8c1ad2538",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2e02319-d95b-4ffc-85f7-a25525f8448c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee386496-ff5b-45cf-8d90-5e8e8225242d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b333cc9b-9462-4665-8b52-cbab0707031f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "61743496-1f31-44bb-896a-c097ac958492"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1297a1d-abaa-44ef-ba7d-dbc7fbd94af3",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7662f1d-0cf0-43c4-8227-bbcc9fa99000",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "284eda06-8883-4393-a136-e86f2d24f70d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c44d3c5-eaac-45fb-8ae0-520f74675e38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "d2a75075-6aa1-4480-a42c-aa5e14454d42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa45c8ef-e722-4f08-affa-f7b5d446a3d5",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abf094e1-06ec-4a97-9b0b-1bccf7149f5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b2afea1-cdad-49bc-9b37-aedbc44bea2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5911230-bdeb-4636-b6f7-cb4649f1ed74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "81f469cf-b0c4-4ca5-9ea4-48152312e035"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c7bd47a-59a2-4f0d-88f4-4c10fa42cd97",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f9f2ca1-9482-4643-a0d7-3377b1118cb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2546749d-8869-4aa9-b1d4-8564eb882382"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "142923fa-342c-4d88-ba40-7e7741854330",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "55fff04c-072c-4826-9c65-f671ba601038"
                        }
                      }
                    ]
                  },
                  {
                    "id": "469aae33-ccd7-489e-9f5f-2b2a6f696b9a",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9fe2f22-21e9-410d-9daf-de88749cd3e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "858a15e5-39ac-4779-bd8b-0d29e894c150"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e1e8f59-a705-430d-94b1-10ecb28d0eb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "ca7cb657-a749-4e0f-bb00-22d87c30e6ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b46f583-9669-459b-b983-79338064e044",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "317f55fd-fef0-4e1c-857b-55777b7adc48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8940845-69a1-4e90-9e6e-db470db4a7ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7533d63-defe-4b47-a8cd-8bb99bea4daf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a668ac8e-5cae-4b22-89d8-e0b1ac314243"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4efd7345-193d-4970-83e4-e01f870a1f2d",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5576cde-c399-4320-9eab-bd06f5d3af9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53d2782c-84ed-419b-ae01-38c90a372596"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b28c5bda-acd5-45b9-acc2-564ce91b21b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a0bd8445-164f-4ddf-9123-4971479d94df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68fef63c-3658-4fe7-a189-ef2f89615a81",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f75aae7-8323-4f7b-9c32-b5e1e89eb9da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d36937c-0a0b-49b8-a051-a8c04c721a01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aed4b8e4-e5ca-4578-b24f-2b732880898b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "92c55dc6-fd1e-41e5-a694-4467b4db4689"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fc91a15-08a0-4059-8cbd-b29585bbc41e",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66ab5b9d-9c06-44e2-a5f8-61916f6d3486",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c329654f-f3ff-4e75-9bbd-acde194106b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f176823-ec8f-48bc-9c15-11c2caef42ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bdaa2958-4674-445d-be70-3d0c8235489a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "742c33ee-0299-4dbf-b583-ca2d6a2509d8",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "677a9356-e9df-4d6a-a422-8088ac1a2bcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a620c6e6-43fa-4602-9fcd-ce370fa43f44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2a9222d-0e33-44e1-b3d6-3a3fc3649bc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "8d32c43c-f291-490e-83d1-c323d87bd421"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dad84266-1a7c-4108-8712-941ff2452ce8",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68d347d5-af46-43f8-8422-b71893b8b1d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99d13630-7ad3-4716-8e3c-729bb147d66a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53e722e3-554b-40f9-b345-b448a033e4e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "480f9cfe-e8b4-483a-b32c-e794310abd2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e08e89f-3c0f-4f41-8230-17eac5b52cb0",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b85c81e-19dc-4eab-bb91-bb5f569f75bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bb7831c-3b6a-4e18-8bff-60d7e5dae11a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d0872e5-d43f-461a-964a-51899de6fec9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e9a414b8-522a-474c-8fda-0afa9560c27d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cbae2b0-8e57-4bae-8018-d984e3839d03",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f076f38c-7b5f-4931-a7de-431417a75f03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7187e2f-c541-41eb-bac7-7e25a8ad919b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6150457c-190c-4a21-bf52-8af3d39ce823",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2befdc1a-8491-408e-94ff-c570a1c362e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0bfd8f8-8e56-445f-b446-8b3095141ee1",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "865d8927-f7da-4b73-a9fc-dc66d4894160",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "293cebd9-1aa5-49da-9e28-0a1f38cd6a6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "718dcf1e-e699-434f-8a20-5c446fa3d7d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bbdaeae7-44c9-4cdc-852d-164955dcf83d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "395defb1-0487-4506-9c12-b8ffe899a6aa",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8339b9d-5a47-4f26-ad65-d8b7f4b1e013",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b378b75-b861-4d73-8f9e-5d93ae388f99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8493c43f-f260-4aca-9d68-6373dbd568d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "eb21d451-9c3d-4537-ba27-8ffecc735bb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60240b9e-2c65-4735-91f1-8a6f3a171e47",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78d62ecc-9304-4bd0-b74d-b72f743c104a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba81e158-9647-4a73-bee8-582e2022d395"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79e9eb32-9ff9-40d7-b3e1-3eec31008547",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4dafc693-90af-4a96-bfa9-92a21ed5c212"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfd6b56f-1662-4b20-a912-0b9c8fea584d",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0084b1f5-eee9-4e17-b1a6-abc99e7d23c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09db8121-1a85-4702-b62b-efd56c0abdfd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13e567ad-03ff-4dd6-8ab4-6165bb854d6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d71cb2d9-feea-402d-9fa3-9345e3497e99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86193be0-7d29-447f-8a89-3e4a10a52783",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "daa38e25-9187-4aa4-98fe-49c86d206ad4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a597f173-f57d-479f-ac5d-a766ba94865b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c258417e-d52c-4573-89aa-7a4bde2084bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "38241c3e-f6f6-435f-8dcc-c881c97fb15d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee7c0d16-6d24-4ff9-b1b7-d5c1d9d3fd81",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbdabd02-89ad-4c29-86bf-8f844e4358ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ce43474-fe57-408d-9df0-9496abe2a9fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e23e0317-3e88-4692-9197-4c238da08b97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "19dd2e05-c7f6-4c18-ab1a-587787c471a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72a9ecc3-d42d-4062-8335-b06d37f20e5e",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5717bcf6-a9f9-4cac-bba3-c2145fa6e12c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39b69001-a07f-4093-8151-d1735d889f1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c6b656a-a332-4bc8-8fc6-159664dc2b30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8c58a090-5e28-44d2-9a73-bf435a0b6496"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bb48eaa-0814-4bec-864f-a0af1ab7791e",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f5c0859-0da5-4c3b-af4c-3b9ba972ceb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3cd4ef4c-0499-44c4-9a21-fe7c3baa1bb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "552301f4-f6f7-4828-a94c-1a3f71d263b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "96421187-97b4-43cf-894e-59295b0c08b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35a2466b-ad2a-4a33-8b9f-935f5e448b47",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9306eb76-8ace-4928-8366-2560f56db9f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c634956d-f33b-49a4-a0e4-7004a91e1689"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d7cb95a-7804-452f-9759-883b1506ef7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2b870104-8721-4cc4-ab17-b9e7d61353b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39970e3d-05b7-4d38-81f7-f308d1b66e2e",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17518b95-b2db-48bd-b4cc-7748babdc156",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c03a05d5-79d6-45c8-8134-852cda4e0cc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aeed958c-e70a-4c10-b02f-52b6b3a565d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "424f76de-f8bb-4839-8fc1-14085270050b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b96dae0d-b9c5-4e11-8aa9-9453778adc38",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19565b05-3b65-4105-816b-8771a3348f5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41aed322-dffc-4373-9def-9c07116ff9c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4871a1e2-6a31-42ad-b8cd-fad86ec3da34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bb2adea7-0ed4-4a38-964f-95ee92d45123"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10a46450-5d6a-44f8-8e5e-7e7e291b5c8e",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ef98d4a-4d5e-4ee2-972a-4937eac7fdd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de16dda1-6c18-4f00-8277-d27b353e70a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da3bbef9-30d4-44b2-9690-e3cc666170fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "652f5faf-75fa-49f9-ba5e-0d2320da95c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15a02f4c-8caf-458c-bda1-82f70be51c21",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58bb50b9-afc2-4db0-9125-0c56f12c11d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e6a95ed-3b36-492c-aa53-f630d71aedf1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cb38678-7103-41db-ba8d-1f7f4f1192e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "881670ba-f728-4f77-ad0e-579ea13ba5f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce7363a5-4264-442a-b71f-96c6ed82623e",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d4138b4-611d-47f2-901b-870cac1e8db7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8d7a867-7c51-49db-8e76-4990b8ceb2a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e025c297-11ff-40a5-9d14-21b49609de24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "32c20a68-85c3-474d-a27f-a5ff0cff33d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "445695df-6acf-4de3-9e26-42e5b20b9882",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23357e6a-153b-426f-a9cf-93ef63347183",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b53be483-3f0b-4427-8cea-990a5daee913"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "362fb032-a034-4121-a6f4-7dd6f1eadfae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d42b080f-c14b-42ea-8448-80d200661696"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2919ddc4-7e26-45ec-a74b-85fe4b46885b",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c43cbba-7006-4945-ba69-d32163f617a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9c31bae-dce7-49f3-8263-2fce8371618d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4c8cb45-c9c0-4f4a-8613-b1b72d39d04a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "02c9ea03-4fe1-4b20-b0a5-9b6c2717b543"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b87d86b-8b27-45e7-a2ef-16ff4f93c06d",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca7eef88-81f4-4580-8b96-539b6406d091",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "463a936c-00aa-4c19-8aa4-8d0e65969651"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0161d6cc-055b-4846-8749-e8f2a81a5af2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "8a5df77d-666f-446b-a0c8-65e2a5a9c434"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a691a7c-8eca-416c-8fb6-4983c6343c66",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05b0ec07-c769-46a9-a622-7c207e7ced53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "264c47bf-18ce-4157-a1fe-68e8f594fa4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e4f6392-08f5-4576-a727-8584eb9cac2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "f6c22c98-ccbd-4d8e-a185-52e55e5dd7a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48f93aad-8050-48c5-a506-bd6329a52735",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d400b87-3aa4-42fd-995e-0a4ce9cbbddd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbb6aaa4-0568-43a1-89c8-22e63af0e60c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "623e0ca4-85a8-4a02-a878-01268ccc7885",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "74e7026a-10b1-4ca4-836a-c0f2fcf058de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b79ca05-9bcc-48ec-93be-87c1d9da5817",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e62644c0-effb-4324-a5bd-76ebfe9de802",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78f91f51-172f-4d8c-9098-3c3fac7349ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6210a185-65b2-4e5e-97f7-58a524d9ab09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "085c6b29-832e-400f-8483-f2e2a6228a89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0175bf0-2ed0-49fd-a08f-c32688e8f271",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b1e13f1-076a-473f-96ee-fc173a0b7131",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "078148bb-454a-4ac4-9903-3ca3e11a6842"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a976975-8847-4817-9782-57a01f33f0b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "e6e3b734-425d-438f-80b2-5ae801b32d07"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "0ae9b679-4ddd-4d12-92ce-41e34b956044",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "db9a69d1-5b1d-4b99-9205-423681545a9c",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9007a04-60fc-48ad-bab1-923841954974",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dccbf532-a703-4ba6-9d0b-feb3c4ecb14a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c766b72b-175d-40f9-be2d-60ef20f0b202",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "980e3a3d-07ab-4257-b07a-7cefaf7a28f7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b923616a-7f4c-49eb-8450-6747612081f0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5681226b-31c4-4316-8ecc-ddcfc7127b66"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ffdeffd8-6405-41d1-90de-84ed6528af85",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5f83daf0-936e-4dc4-ae00-f18f38bb0011"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6720d1e3-5532-40c1-b024-8556a8012017",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6450436a-c3d6-4c4c-8218-c690b2189539"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "57673934-7884-4879-aa77-f5fc7df40866",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c18a501b-c2b2-4c90-a764-43a257db442d"
                }
              }
            ]
          },
          {
            "id": "3cba5161-755f-4837-a9f4-3ca072f5b0ed",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d81ca22f-a933-4647-9f95-b72790afc671",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "3c8a0fbc-7623-4885-b120-c4faa85f5924",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87d8cb24-2a9f-444a-a5d5-cdc12819ff62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "acc503cf-52e0-4f3d-8fda-b8ceae969faa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4764409d-be45-4949-b9cc-339ea968b313",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2309e9a4-d1c3-4f64-b01c-a3e8cf82f45d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "cf1120e4-f8e5-4c02-bdf8-63253030f552",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7473cf51-9fe5-478e-8554-85b16a63a74c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7e98cb4d-9a54-45fd-8c4f-6d6c89f745f0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "557ed60d-ea9b-4970-8501-d69caa608f01",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "0c143767-35c9-499b-a436-5b0c420dfaa6"
                    }
                  }
                ]
              },
              {
                "id": "f762defa-033f-475e-9262-99c59a4c077b",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f0f1df39-a2f4-4936-9635-fa0d86e6f3d5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a5a95f08-c80b-47c5-a2cd-1a86aab74513"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "48d7a2e1-359b-460b-9842-150e2027ab32",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "4b3d13a8-e338-4240-9c66-b6901eca2273"
                    }
                  }
                ]
              },
              {
                "id": "f46b706a-3548-48c2-9066-a544e65e6c9c",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7c6828ec-c04c-40df-823d-e7245da6caaa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "59ff60a1-b89a-45a5-903a-9a2d6a48f327"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "82040c65-c75a-4012-b5ae-126b87ce9cad",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "8e91b379-83ee-4ac8-aac2-5102820c0f68"
                    }
                  }
                ]
              },
              {
                "id": "30a24fc9-a96b-452d-8378-df4f0b599c1b",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f5c94a7b-65d1-4d86-9431-07331fcb4ee4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "96d51f7f-d8c2-40cd-9adc-0c39bd107eeb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3eeee7c8-e1dd-4e48-a8e5-2fa473d78f48",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "2291abc7-87ed-47ef-870c-014aeae17373"
                    }
                  }
                ]
              },
              {
                "id": "9fb54262-480b-4e13-9969-a95d7683ff1f",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6b986325-9bb6-4c2a-a3b9-412212c58e3e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7d58f5d4-16d0-47c3-bcdc-1e506b49776c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ab9ff18b-cef0-48e4-a5fa-4d88a4f68542",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "e4ea6cb2-60e0-42e2-ba24-edb4ba0f424b"
                    }
                  }
                ]
              },
              {
                "id": "70a4842a-6bae-4e69-b0f0-3b6ae06612d9",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "beb4b5e0-2015-42b7-98bb-08078bb6a47e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5ec57fb1-d63d-44de-b5c8-bacdc32bcc45"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5cc4d93e-2f14-4143-8684-b165e742fc28",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "5f19356d-be75-418c-8dcb-3f0e5b82a9c2"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "00fe6bad-ba43-453e-8167-470bdb8bf109",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a1cab8d9-3238-4c92-b0e3-d83eb45a30cf"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "22fcd91f-17ca-4bbe-bff0-4a97979d9277",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "97be6d88-74df-4886-847e-452f95c9eda3"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0c0537c2-5497-4732-adbe-8c2133b4d5b8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "98da0c5d-4810-4d82-ac26-bb2c427bd7c3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "98cb24a6-5c5d-4f64-a7e2-080bc8db9e71",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "eb5d8722-003a-4c04-827a-df28d607067c"
            }
          }
        ]
      },
      {
        "id": "94a07c2d-01bf-49ca-b980-585605d0cc75",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "d4301b28-d104-4c81-8307-0f435dd03764",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c8f5a4a9-2591-46df-b16e-b722810f9170",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "b47c2225-ba12-4b79-b527-7533baeb87d3",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07b6757a-700c-493f-a422-ec5d0ac69464",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b3aff4c-4bd1-45fe-be83-388ed85abc2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d3feda7-a4b6-49cd-b5c5-cf87b403c996",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "2d295e36-97c7-4d8b-bbb3-107ccc7588b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad6a1bc8-b534-4d3e-bf30-fa99593531ab",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33e0bfbb-f9bd-4633-b0ce-f7ef34fe22c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "863d469e-24e7-4c03-bf90-4f3412b9e5f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63585b40-2b07-4e08-9369-a2145ab67ef0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a1d49416-7a86-42bb-b234-34c18fccac1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0aaa29b5-a1ca-4ca2-9486-08bd21aa2d88",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e75408e-f0e0-48dc-979b-d0e0438bce9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb7fd8b6-bb73-4b5e-b749-f2604109f0c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5609d999-5109-4bc1-b45d-1e5a5c98615b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0d3f1c14-5ce2-4c7e-9d1c-4851040f53b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef745593-a561-4ceb-9665-4d78e89dcdca",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cb96db4-18f4-40d6-a989-42c3fc091e3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3046c0a3-2add-49af-ac52-f230647b26e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a767fce-ce79-4a0d-a2ac-528ac27b2fdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "76e16dbb-f0c2-46d7-9edd-167a9bb62edb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4112b2ce-c2bd-462f-895b-f3145aefd3b7",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb803796-49d3-4dbb-87ee-34624d3244d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ef328ca-b231-4a37-8262-175710fb14a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8d903ab-017f-4084-b764-ae23a776d674",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fb7d43b1-3840-4507-bf02-55142355aa42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec6ee669-ff83-4c0e-b54e-c569bb2a8cc9",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7948caf2-1409-4f05-a47b-bc4f08e0a3d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ce69c06-3b7c-420a-ba60-6b262345e187"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dba4147-277c-476a-bb2a-4c891311a08b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b1b0c9e5-fd4c-420a-b9d1-e5b16c13b0ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa2b32fb-2033-4cf1-b9c8-ed57036a2104",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5662bc88-ad86-4245-9cd9-4dafce9add7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fccc5ecf-6408-41c8-85ad-6332138c5fb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66a7d64b-3f22-4d43-970e-33ad97daa7ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "c705b4b4-3184-4cee-aa98-06a77d1eb0db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27e9684d-ad5c-4515-91d4-191a2578a0be",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2caedfb4-8970-488f-8d6a-8c2f2753adcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6d7329e-2b7e-4e1a-bb18-211e93a660c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea5264e9-5346-4536-8b78-e0d36cf1e8ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b49d21f4-5d16-4843-8909-f48264d19394"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a4bdfa7-647e-43b8-8c35-77f181a87c09",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72296de1-e830-48c1-875a-61672fd6bc1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0806571a-90bd-401e-8655-cf6dc9c0b8cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e328e2da-4c84-4186-b5e2-a752396420cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bcfc9c2e-8f1c-46d9-9d60-f2474cfc5a9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58c972b2-82bb-4205-aa46-a229efbb41f6",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "290065f8-3e8c-44d1-a4fb-24a3340c2dab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1555e6c-469c-4278-9b9d-79e9998a4408"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db2a15cc-7074-4bdb-8d12-b1be13c58c6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fe74f699-a968-4cb6-be75-643f519650d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6a4712a-00c2-4cd8-8e1f-171b2e279e53",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7abd5af3-4685-4d9f-8ab5-359adb400dbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8692d38f-a48a-4c45-a653-24a0bd872c3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00b19c2a-019f-45f6-9f94-4480d5194839",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "830c96f3-f553-45db-a156-fb5cc1c2ebe0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "084756b9-4899-44ff-b5f2-952aa3748512",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c62d69f0-4e9d-493c-950b-68ba029429fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10c71281-92ad-4aaf-ab34-e134ffad9795"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63f7c486-8f17-49b8-be65-a3e53facb5e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4399f769-6b59-4a02-8844-74fdb484d5cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0f9b0ed-885e-4d84-a408-0b90822cb25f",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8716fcf2-8762-43a8-8366-ee426d5ae8bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72a4901f-ea0f-4a31-9e88-22e64a604ac2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab78f71c-b843-4724-90d0-876e16db89ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "940d2133-3660-41aa-b9fb-631797539f25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eab0ddd6-6fda-4b53-9760-b7aa231dac74",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6159873d-1076-4fe1-9a3f-3b26cce045fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c7435a6-a5ad-4de4-aaae-a3be6c6063cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed47767a-7629-4790-8868-acffac3c63c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "984bafc6-b256-4c35-a11b-37cc1e41061c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "737c0cba-9e7b-459f-a1bc-5a963d59ac30",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26516996-9694-43b0-bb11-9a9a7d4c2b18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "451c9c3c-955d-4464-b16f-ae7d1b06f6ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "498e1ef4-ddb7-41aa-ac53-7e4ce461cfcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "6cac1403-86e4-4b2a-b0c6-5e5a3dcb6399"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d4d3385-61b7-4733-b055-9d5ff6ee27a6",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13d517f7-8e5e-4bf6-a4bd-063fef3b122d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d2601b1-8032-4a33-a9b2-a65a35b1d5d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80b85a1d-42e1-4ab1-82a6-45f22764f288",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "10f774a0-583b-4873-8d55-a95be2d5459d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8c3c5c1-b3f1-4910-a106-c95b95509540",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2de7aa7-f34e-49a5-a081-fe9ddfa7a512",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96f988d6-30ff-42cf-af8e-88b65e9b0bb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "508b0682-6628-475c-8f63-2f8d64de1e64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "a91afb14-21ca-4501-b2ef-e6188c5fa82b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f21c800-681d-4391-8644-08c5b2a1b732",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b32d07e-8121-4f33-91d8-7a40e2dfbb82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11d8cad5-f047-42a7-949e-1719ba943009"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8471ebb1-24be-42d2-a087-d7c6bd0f6902",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "fdf3bf5b-df68-4b6b-b389-9706367d077d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "514a6451-034e-4ce8-bc20-7e5314a570af",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0df96fcb-7435-4caf-ac90-25252742ee00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06037f06-1561-4e24-a689-f5ff843bcd8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3078f5b1-b401-4077-a0d9-fb13d9b3a385",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "463928f9-f2b9-4431-9b58-f9f461be348b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0aea45bf-8a7c-4dbc-9ecf-1c3d6ad86f1b",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3daa58f4-8eb0-4879-9046-5ca3f2e2b1aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7418535-a428-4c12-9d44-7b5070f73b06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c074b4d-9366-4aec-8262-4630a89a2a20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bd0af88e-4aed-4b5b-872c-fbc51f68b3f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dcb31ef-1f03-4935-b5f2-a3e589507c31",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65580b5c-06bc-4d18-b61a-bfbb55404385",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab549f08-73cf-403e-a2eb-bc8bc591633c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91d976c0-6d92-4356-87c4-3e2183286410",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a55391ab-1b24-4a84-b0a5-3eb62810594d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0aec0a8a-3659-4290-bdb9-8f960cdc8684",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a38de28f-aaa3-4173-9b52-3ec1b06bcb13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10358752-0f19-4aed-b134-d42a531c6f42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "291fe587-145e-4bce-9a16-22836bb00e82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "23b8f12b-1cce-4a2a-9ead-ad716058187f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94d6d3b9-6006-48c7-b6cd-a8609d5c7ebb",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36434391-9ee9-45df-aa8a-babb5a81e45e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0ad4dee-2ff0-490a-9a69-c9ee3fdbb087"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74e9f98c-54ba-4348-b11b-4ab03666c248",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "329ef51d-0aeb-4320-9788-4e4b68a37b16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "223df026-5a8a-40a9-8c78-9fd756c5fd86",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f1c4946-804f-40ee-907a-c26f5673321c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9129368-5e13-4d4f-b21d-4773d5866f5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "387dc952-ebfc-4f80-aef1-10141710a5d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "81b536d3-f4d5-4b51-b73a-a5c2bbc4cbf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df8c0581-d05e-4a70-8f0a-fed7efa0dbc7",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f7528b6-c2de-4216-a922-560b18fa03c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62eba6bf-e204-4b6c-92b8-d256d670b171"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5539eb76-3e6b-4121-a225-f2a817514352",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "76d68748-c16f-45ba-ad88-9707059faeb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b200d28-28ea-41aa-b747-a78fd8ed3c5e",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cc5d9ae-6685-4217-95cb-a26127bd1828",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ced4a76-9e57-42e9-ba2c-ffd7988a1ee8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "103e4119-9c31-4580-8d3a-a5f15b398463",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "db8e0acd-36e5-4753-a48d-140e9bfcfbc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69e8b71b-befd-446b-84b3-d5791f6cdf71",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "943d1201-7524-4c18-b26f-4ac191ac9192",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c8225ae-e767-4392-9c2c-34695e86d847"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5468b1a-7574-4dd8-b75f-8a5e62f46eec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "27f85e33-597b-483d-b969-89a4a129dcef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82c4fa30-f5aa-44ea-ac04-514ed06eccf2",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79df9015-376b-42ed-bbfa-757fc31477d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84dc74c3-5b7a-4a97-b4cd-82ac21c8cee1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd2d76b8-0d87-4b2b-b7cb-29e9b65ec080",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e3e0b058-ce03-4106-8596-ca4546892784"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2774ae53-7639-4338-8caa-2d7733696582",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e5550d8-b1a7-4011-aac8-d54f0057eabf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a870e184-8f97-423f-be50-ea00a5f9a796"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ce8b5b0-cdc7-4135-a7ce-68098b4a92d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "86765a03-ec0d-40be-814f-54aa78459d5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51b0a0c0-e312-49b4-a6a2-e1d52ae4da8c",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c4449a5-df35-43ca-a968-0a87f6c652eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bb5c1f8-e108-4875-8876-9afa584afa44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a53ad500-6be6-440f-95c1-bf8d39cd5962",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7766499e-a36e-4136-9726-1c8e62e00bff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73a952a6-6990-4f27-9d67-1a7b0f5244f5",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08add414-67e6-4c01-b003-51e9920dbfc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae1abbae-534d-48ca-b1a7-74eda583dbcc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b314bd1a-bdd5-4992-9820-bdec0a64b973",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bdd92f2d-edc8-47f5-9311-e3c2df3f687b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5788423d-d51a-42b4-acb2-d07362985409",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55efb975-a094-444c-bbf2-a879b4dad84f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bae3a8c-d340-4188-afe6-189cb3ef0945"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7adfffaf-55f0-4460-a1c2-7beb1fc653dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5525c027-13c0-4e88-a3b3-02092b07e2a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf313956-5a61-4f06-ae51-15d9651aedea",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be071d4a-2ea4-43a1-9319-9ccf2cd8babe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83fe30d7-ff75-400b-a6a7-e646980a026b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04a8b817-59ec-4ff5-92ce-68fb55100233",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ea42cc1b-cbb8-4c14-b864-014c91b42ecd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e400a213-7240-4a2f-816c-641be81ac9b1",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c16ed8e7-04e4-46f1-a69a-18bb791dc904",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25a7c6f5-7070-4431-a9a3-ced3aa099e46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fddd09e2-ad37-4f32-8ae0-b45785987de0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6aea6a89-e53d-4934-a4fd-f85c53624826"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b2ff5a8-db17-43df-88f9-e3cba0adddae",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f870a23-a12e-445b-b957-6d614b1679b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f3024f4-d3c6-4246-81a5-030073d1f6b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c45e3d57-a620-4534-a640-eeabb1e2c627",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "56bb12ae-4985-45a2-9cc9-bc9f137b449f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68ae5ab8-5f91-47dd-a2b8-75459b829400",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa2919b3-9507-4c1c-a1a4-48bc665b866b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b1cc150-31ea-40c0-85bd-112fb4d7dc0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42471e83-8113-470d-9e3c-0ddebae47b4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2f41c435-f92e-48be-a8a3-713a32cf7de3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb8fe7c1-a8d7-4eb9-9d56-c709438c5217",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c2bc2e2-72d4-46d1-b253-58780ba0635a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce9347e8-ab70-4f57-af90-8692368eb865"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "083863da-518e-477b-b6b5-db15e51bf6b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cc343315-e3bf-4e4b-a42e-2982cbc4f5aa"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b014342c-5ccf-4219-b1c1-651b17ed4eae",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f91d1bd0-c6f8-4787-b33a-c1f9b2ef05d2",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a096e5c7-5042-47db-8436-b49a011a1419",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "db120e71-7afb-416e-b01c-9ae6b37bacc9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11f9e45d-4138-423b-a17a-c12885f8b555",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "08793a98-1645-492e-a90f-a2f4af9a6fae"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "250ac64e-4e3e-49ba-ae81-c1b8f93ac167",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cf10266d-59aa-453e-8f33-13163baaceb0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8032bebd-3996-45f0-bacd-78175f41d0eb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c5970fae-6ef4-4202-9247-5ee7cc89f963"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3daf498b-c8ff-47c7-b1c2-7dcb8b3e8b1c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "7d6c5086-6573-41bf-ac79-05a5cf9b18b9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c70ebf87-c6c2-4257-894e-a754d5775193",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "63971b3c-74cc-415b-8eaf-70f7805be304"
            }
          }
        ]
      },
      {
        "id": "b227089b-5f73-4f58-8e17-8439c30a7b46",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "746c1e6c-2fb2-4427-9f4c-e87bedd6c12c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ee4858b1-6cb3-4631-b7ff-1e15e859305f",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f82ef3d1-1177-4d44-94d5-55f7fdbfba5e",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32ad057d-3389-4836-b12d-a9b5d2a13478",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "451bf01b-83c1-43c4-b871-c2a7285c525f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1c3a243-4ffc-4bef-b13d-d39e810b57eb",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9be415cd-abc2-4c9a-8679-c32cd78ae835",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "944aaf18-a7e7-4559-bf72-f665d659da29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "315c30eb-9837-44df-bef0-d70fe0fa8406",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "054b2a51-ebf3-4896-bd1e-3fb1d9d5e28b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "daa5078c-1160-4db5-9208-b79dbd5fe6b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d874fce9-516a-4fef-97a0-c22dc6f10cc8",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f1d4a2f-5c7e-411e-b9c4-54e8a2df4b86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9bd66ed-84e9-4767-8f47-476c585973b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f0ac26a-25f4-400c-8d3c-bbcf7fa762a8",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a736eb9c-fedf-4d40-90b0-259c69d0c906",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c2cc9a3-4077-4420-abea-2119919daaab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74ccfce0-2d6c-4274-bbcd-183d0295224b",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "532f8fde-bdf1-40da-b6db-7511d8ec9017",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4a89a2e-aff6-4bdc-9229-a7fc4abd5d03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38dbb750-8d12-46c4-b5f1-982953949cc5",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc3fac63-e1c7-4feb-bab3-34c511bb1be0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79772cfc-9e50-4464-89fd-26212bfe4227"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0de3a210-900a-4001-9359-9b296c795d44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eeff6746-68e9-4103-9c94-39f239824778"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ed9dfbd-5571-4cdc-ad4b-061566982d43",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1840e76-b730-446c-8592-04a8d5b3ecc7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e078db0a-1043-4432-824f-272c6c08cea8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6877a91a-81e2-46a9-ab4b-7391bb234247",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1593035a-3a76-409c-8580-92feb1f99ed4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc6428cc-5006-4ef8-baa9-9a66658af584",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bafd7b6-4036-40ba-8f6a-6021225038da",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "71aa4b4a-6e7a-4daa-a049-6638fbf2ef32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45661a6e-1727-47c7-b676-b2d2b477bcc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0778acb-0f11-42e1-92dc-ec2c0aecbe11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87189d22-b647-48fd-a6b8-1bc973ffb5c3",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6aa99c27-2b3a-4cb0-8686-25d494b7aab3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c2d4a98c-69bb-45f0-92fd-599721bf40eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "254a06ee-0533-4529-8727-92c717f910de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fca1c8b-28bc-4781-b0db-f1467628f28f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b720b399-7d35-4058-a2d7-47b4acf229a0",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d9f91a7-cee9-42cc-adbf-225d1263c543",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97959050-1da7-4c7e-87ae-74b8e03a50b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "845897da-3924-414d-9ae1-a60d08281a58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3ed7b7c-ce20-4354-a4c6-49f38c2d0635"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4be7c0b6-292b-4f05-a88c-72a41a12502e",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "075ffb71-c12c-4f0f-ae8c-2477f0971334",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48f220f2-711a-4e14-868e-edec85f94af9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a66f37e-422d-4fd7-bf28-f076358b7d06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21521721-2020-4d02-9753-c865bc4bd3d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48f629c0-4910-426d-9691-acf5cac6d901",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b539494-5caf-4bfe-aa12-0a2812febc32",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ae253745-f54c-462c-ae68-f6b610d0245e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "526b15c7-1da1-4a25-bffb-cfed3b0af038",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "532fe9e9-85e0-4284-9e92-19286dfc6fea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91dbe629-373d-4e80-9f9d-a440a82dac1f",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba8fcac5-4967-470c-bf27-f4ae99e73a31",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "67c6207e-cd74-43f3-aa92-6adc4ddd60fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f631361-3d2b-4381-bd50-560c2273fc18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6e4fd66-9956-45f0-9970-9156b2d3c068"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7db84800-4810-44d2-8471-9480035dcdfc",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a0ec47c-6848-44f2-ad70-8e41519e3555",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "548121da-9581-49d1-884c-ec16564770fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42871b63-f4e2-41c9-9ad0-5803d8145ec2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87f13c0d-3efe-4813-8269-b668114ca219"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42577a2b-86d9-4e5d-83c7-d43b141e64bb",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca61e853-56f7-443d-a41d-6e036115cf65",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a9af1402-8cb2-4cce-af3e-cdbf643306e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa5b6469-e013-4174-8330-aeb228806be8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5261d887-d318-481d-8f35-80ffb1b4d172"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a30eb48-9d9a-4a24-946f-28c13a8d73e2",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f573099b-d767-443a-a2a6-1732c68906b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37fd07da-5da0-49e3-946c-8e73e0c21da7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dd5d856-881d-4ece-9970-e4feba6a6885",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "669d9c4a-9e41-4ea3-bc8e-1fbb264510bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1968f6a1-da0b-4829-8e87-25ca9a53069c",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a32e888e-e0e7-4151-ab3f-e6ca0b348d79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17c3b3e3-501f-4143-a47d-9209e8fdabb7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48f962c5-8a23-4b88-b514-30fd25ad97af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3123bf0b-a7a3-4c28-9571-15ec0d1d3f59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c15b985-3c13-43d5-89ed-55e4fd20c333",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "071cb5dc-3220-4bc0-8dbe-8d2e985e1e53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc90b8d7-3a3f-4f56-9f54-145a1d0629ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed3abc96-d63a-4ac1-8d3b-d7972f2ca328",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a352b9ef-2bde-45ae-893f-c2a9585ec232"
                        }
                      }
                    ]
                  },
                  {
                    "id": "781e83d3-7fbd-43a0-b2c1-6960f18d56f1",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a66eeca-80e5-4bef-abcc-10ae346fdd94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bedc650-99ff-4383-8d66-2184ecde2203"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99a35a1a-5f26-45c8-b020-2fccbaeb7640",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "829d5700-0d88-4b46-97d4-e6b0d90f38ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9669e971-7e4b-4867-92fb-10f1ca466afd",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1230abd0-6298-48a3-b5da-06ecb0d766df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55a3d87f-5937-4055-9df0-7c0f51ef0bce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d69d1a2b-2fbd-45af-b69a-e6b71d7beb9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "078048c6-e9a7-4114-89dd-461356c659e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cce06c13-5d88-44eb-8eb5-4b9ad1ec23f9",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd27bd0a-759d-4ca3-bce6-13834c8c813f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5249f842-e75c-4e39-9992-f30fab124656"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e58f32b-5d39-47fa-b440-b3c28d700018",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70aad441-2940-496e-826f-fdc597d1f2e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "536b2432-2a00-4c39-829a-81c17fd5a6bf",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bf46323-fef4-438c-bd68-880faacbe55d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d719edf-b21c-4aa2-9457-5b69d187a2fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b0dc328-dc5a-4575-aaba-014eac346a94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76b414ec-0dba-41c8-8125-bfd4db33ab6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4452aa9c-483a-4ffd-b59f-816185c66757",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6aec56f-ee17-4fd7-9cc4-301347b6c3d5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "255bb816-4150-47c4-9142-1d164a1d8928"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb05a852-ca2c-4a44-a316-53568e7b9b76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a7e8338-79e1-43e4-9f61-62fff03eb8c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29018355-425d-4667-84e8-1be26a4dcc9d",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3e64100-3a4c-43e4-8647-c57f0894847b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "383ac655-d3d1-4a82-bc3a-5d697f597f3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e66bb17a-a383-4068-9d68-833edb04e889",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f7ad2c8-5700-4d9a-a08d-277e66989d67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "702f83ad-e34e-4d94-a231-4d537cb3e527",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "060761a6-6383-4cfe-a681-6109f1f5dada",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "72598866-ea2e-45bd-958a-0d0c43aa85df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fda97b52-0711-4ed8-8823-4c4cd126db96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d02808b-6111-442a-ad06-d3d008a9cf51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3afc0f7f-2c21-4084-be12-3d1bf02a54a1",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c666b83-ebd9-46e8-9265-3040364cbac9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d2d2d6f7-bc79-4cac-b659-49bd4d4e6540"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a9395a3-e641-439c-8a2e-fe26385cc3cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3af0a806-802f-4a42-af00-d20eb9a2a614"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed9ceb40-06d3-42e0-b042-6f16b9f3ba75",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80d651d9-768a-427a-bb8a-6ab7440dd4a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e85a5427-3d54-46f6-9e70-703c78aa2b32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eec2c6a5-5e1e-462f-a686-90176b76dd09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9125f839-6d51-46b0-8eec-e0dc35979a40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdd91ce6-5fc1-431d-ac96-d19bbd19f8ab",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fce247b5-fdd8-4f0f-9118-31785a845031",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "baa97616-cffd-4480-883b-e0ca6d532197"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbed0ba9-558d-42a0-9f21-af48946923a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e2d21f8-fa22-40bf-940b-be8c50dc7714"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c51b71cc-d61c-4cca-a637-e9c5838eaa44",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "955f286a-100b-4f57-a978-2d970cd6b147",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ca0c41f9-fc43-4983-b3ce-f25995e27216"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ad78c8a-4a1a-488d-9d4b-f68c5caf5a0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b017438-5f08-45f4-a0a2-b9bf39eda32c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5087d317-f6f6-42ca-a572-3c3f0736ca1b",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a71b133-a51c-4d37-ba57-fd9ae0156112",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a73ba4c9-442e-4dec-8178-556a6da77d35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02f12964-90c0-4be7-b7c2-2e19df1cc898",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6cb23aa-ee4c-4ad6-bf43-e4297e18c61c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6037c85b-2ac1-40f0-83ca-4223cc1d9046",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa341300-f192-4986-9865-49e6cb42392e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6f496c18-3cf4-4a24-bfe7-b36ab79f2b59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "932c220d-7e6b-4318-b2cb-6c5c2e027616",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2591369-fba2-43bd-817f-f7aa5a1cea4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7b5d320-f03e-40eb-8f6a-06339315b5e6",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2f5c974-f586-4837-ae4d-291b623e320b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f8744929-9ad1-4e05-a1e2-2305fd02235f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31499e77-96f8-47f1-83b2-26e7228ebcfd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcbc9f62-2bc7-4fc3-9796-4288e22a949b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f76b28aa-5c4b-47b5-89c7-9db778bdf292",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61a1d1d2-34df-4493-99e1-a579e80ac0e8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8843cfd4-8f71-4964-9f96-002d155b3ab6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03de98f5-6718-4c64-b78d-a63571c3a07f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bce63ef-00ec-42ac-958b-cd93971a78df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d05e4523-ff3f-4572-b83c-5a125a6c0448",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bc75ef8-d9a8-4404-8d7b-5f9797ec47d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18d7830a-139d-4f6a-9fc6-323fda7f10f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08488ec7-e319-4efc-ab26-d87df4416d72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "027c6162-98ad-46df-b0e8-90edbc58cb21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4811dace-3e95-4fa9-8a1d-fd6a94366d80",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3706c5d-40ed-4451-91ea-06d7c6230098",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d877589a-e482-4e54-8464-73d6ac5ed32a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e25ab436-a942-472d-bed5-f13873568183",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9d9daad-e28f-4544-9daf-e9f060007a97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fee88678-d2ff-487a-917d-81ff62185d12",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb4d6b17-64a7-43e4-aae4-b886fb398298",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb749817-d62e-44bd-a98b-c40b1d12922d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e58de6ca-5624-475b-abff-c95f62958c5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67750077-5410-428a-bb85-ec9474a2aa9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f328c48-28b4-4cd2-be98-0da3b38c7662",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e1d4cb2-7d0d-47df-9b9b-c1442f4eb5a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29a01756-dba2-4f6b-aa1a-77b73f573677"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a691ff8-1691-4a15-9cb4-6d3e444df5e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9cac8b5-883e-41be-9056-2dedd6f7e98d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "220ec006-f273-4a7e-9a5c-e936770161fb",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "140a1077-0997-404d-ab88-6fa09cb6adb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cf7e34d-e31e-466e-9748-51425e2bdde9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3de11ac0-6971-48b0-a94d-1d6a289e9928",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd28da6b-8009-43ff-a212-066a32921fc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "001fb03b-d995-4411-8cdc-026ffd77dae8",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "166c4b82-a84d-440a-bc3b-7cd485202338",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fdf0ba8-d941-465d-96e0-91248d8bcb44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57ac4491-7f4e-49e6-997a-2a4fc81805f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f19552c6-d4b8-4800-921b-37ff25cce3ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "953ea015-5e23-4491-890c-247ec1d74607",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96a43888-d1ca-48ef-b24f-c37cd09f7f42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be72fb39-1731-4220-a1d4-fb5f1d03024c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54a95c40-84c5-402f-b7c8-16f912a79e3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9ec23a0-8d90-4526-bf48-88a21b532381"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0521bce4-542d-442c-b520-9ab3c2ebbd88",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac374e8b-6794-4e58-88d6-cb8a106bd359",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e58773c2-ef81-464c-97f9-28342dde06db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a758d15e-9f19-48c7-8d40-218cd2fade73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bbc015e-1e41-4163-b92e-6c3978f11ed6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80abdc5a-643a-46d4-aeb8-57e2ff8845b2",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b29553d-b618-46ba-97ef-5e9279a81329",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43cd1620-2332-4e50-950d-fadc0bb66383"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7750a79-1936-4fca-8a54-8ed9833d054a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6073e94c-31ba-4661-a057-1a8f6ef8ef8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8239d1f7-c912-485e-b51d-12407615f4de",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98fef488-cc64-4332-8ef0-64de9019b29a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75839afc-299b-4e97-b408-8f49de703d63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7eeb826f-eef2-4200-afd3-00f8b8c2fd7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "267c693d-604c-48fb-872a-00e0f0c8a6b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b73313ea-bd6c-464a-9e26-38d0796ecf42",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36cbd21e-1d40-453e-af05-83359ed55c26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a26e6cc8-457d-4701-9820-cc5905884021"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fcb1957-a5df-4259-a2ea-eaa9806bd19d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b516e5d9-fc57-49de-a8e5-10762233e049"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1db8d435-3928-428a-998d-cdda2c598346",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1b9a2d9-ca82-4d61-904f-0f366b2bf753",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa2c74af-18fa-4995-8bf2-c8fa08f10b77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7af028e0-4a6a-4097-a95a-0db0a05e0027",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bba3c36-d966-4e96-893f-080abb0793fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48abc55e-c519-4a45-a868-8e860b288e9c",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e038fab0-ac58-4d25-a9e4-78fd4432dfdd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f994a7ff-9e4f-4c95-a655-fcb1c195f1bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "046ca6a6-6908-47ad-b895-07d62ec5ef76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8118a502-2f38-4806-919c-3da0302327a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "956747fd-6b65-41e1-b8b4-6cd571f3458b",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee340d80-67bc-4607-8906-03bb7f4e4159",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cdf62ef8-ccd6-4996-92b0-fee7b9b69fb4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85474e96-3000-4179-9606-60cbcdebf1c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb344ab0-8d76-45e8-8f58-15d326065716"
                        }
                      }
                    ]
                  },
                  {
                    "id": "333a8075-e043-48eb-95ba-e834e07289ed",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0206b126-594f-4a8f-b935-67dbe9097164",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8deee0be-b6f6-4943-b5a1-84a589b3e6a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4845c91-9a3a-4b46-9053-39be8c08934b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a324a47d-d37e-4b52-bf31-918f42c212cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "382caaa0-e3d1-4b44-8873-8c707bb58b7d",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aec18e66-5bb6-4360-8623-16740484c47f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22a360a7-572e-4418-aafb-a24b819dda0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfcef98d-a83a-4c07-b589-3027498bc9b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d820ab5d-6182-4514-a27c-0dec06c655bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cf58ac6-943d-4898-b99e-2d76360743c8",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14760c3e-4623-4f76-b48c-e538b79b4322",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19c77b92-2e97-4721-872f-13570f4e03e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f00849b-0a46-4f08-8959-1730ace2dd6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c95b193-14da-4f66-b537-713b69d7a1d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "685b6f8c-9c8e-4dc0-9591-71782ebc545e",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6429b845-07cc-4825-bdb1-2fdb225977f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84466dec-0bfc-439e-8596-d1e36d8319fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab494754-e35f-4653-9b30-065a6cdbdea7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26620f5d-d709-4c62-b61c-e79139f524d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46a282e6-fa7b-43a9-a891-32031846a1b7",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f48f8fe4-2820-4ab8-831c-ca65658b7fac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fa5f441-d900-4289-9b3a-ec8919cd016c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18d651ea-a2dc-4cc5-8c51-72f02bdc3cb2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08f972c6-b1f0-4b02-a5cd-fa9f8cf31b9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80f2111f-0255-4175-9ff4-33ae2b63cc2b",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bae598f6-6e82-4305-b8c7-5458c90007d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "155c9558-dcaa-4f71-8381-a3ca034cd8e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16a9ebb0-cb9d-4d4d-9e76-3a76631cc36f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ca961d4-8e90-488e-a588-512b882294fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9246624e-7697-4373-89d4-59baeafb4473",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fb80d3d-1c01-48b2-b87a-597394586962",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ced31194-cf10-49dc-9b70-9f2ffd7df84d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9242dcd9-abf3-46fb-b104-2e2a458c6dcc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad6525fa-8395-4daf-95ce-e20680b50124"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8830242-2dee-4c7b-9887-459c572b364c",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a48632e9-0504-41ca-8f30-cdcc5aa57e8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8a89549-6cd6-46f0-9e61-0190f5c92776"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7d37eb1-7273-4888-b5f3-800dda49b22c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e8be47c-ce89-4afb-a923-8c29315f9414"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8aa48a84-cb8d-4c14-ad2b-cd675568f3c6",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e59879c9-0935-47f5-9d6d-fa6a0b4b93dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7891cd2f-00d8-4e3b-b5c0-f651c25b88e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c22ca82f-64c4-4537-9905-78590a3066f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a63492c-d36e-4e7a-81f6-33cc324ff4f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "721487c6-0a1e-47e6-aef1-e83c4ce3e672",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b74103e-2635-45db-b699-34a80195c3d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cc0025d-6d72-4625-852a-a5e7622b605c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b756d445-5363-4458-b14b-f0d42308134e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "179efb36-7ce6-4a87-a473-9ebbd184916a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "568a2943-3109-439d-9352-ba9b00f355d2",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f21a26e3-74ce-4695-b8d6-85d0bf1d27bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "953a99a0-99c2-4f46-b7aa-4eb45f44bb1d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d133feb7-d067-493b-93bc-d474dc3f3385",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58ffdf0e-5a82-496d-a023-0aa55f7b2cb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1aa6276-f540-47c5-9ad5-268319e6a523",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffc779e7-c50f-4cda-a477-6f57adc2b1a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35553966-7ede-4189-9372-7cc9e1ff631c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d37bd2b9-1097-4ec3-ac02-3c52e0a6e269",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "751cdc03-6d4a-4212-9856-b6a565058979"
                        }
                      }
                    ]
                  },
                  {
                    "id": "072517ed-aece-4737-85d4-cb0cf47c9d93",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f748d466-c23c-4bca-b96f-e7005e04eb0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b347433a-a0d6-44a8-9293-ccca4ae8abbe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc3b0c1c-0fe8-4ea0-970f-1d942adafbf5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f5918b5-0159-460c-91ca-2a3b841bc3ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4df2ce85-47c4-4758-8c46-8b28fae7bb48",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "815640e0-7f8c-4355-ab16-592e9d9b499f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd3f72dd-cc50-498c-bb61-d0bc8776efc6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7c174b4-e8b6-4c75-83a7-9420511ff16c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca366d1e-ffe6-452c-96ea-b8b384b9453b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d61c6933-bbc7-4eb2-a507-95530c46881e",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df166aa5-54a9-49c8-ba3e-886c3ef20a19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34d09776-b3ab-49c5-bb08-bf4ead3e78b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e24c1c31-a643-4f96-ab27-ce2037b284cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0484ced2-aaa4-4fb5-b8d9-6c3b9e5d6af6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9f36a97-cd44-4f21-9917-94252a661ac8",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec19a790-d42f-4055-acd2-038fce1054ec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "03f96ed8-6126-4196-baf4-ef8375d2d657"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e88231e-fa6e-42db-8df2-a163c44c344e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90cfa2da-d4ff-4611-87ab-364fcb05b005"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f467cffd-55c5-41c8-8a20-aed3823b0999",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8efb6c1c-3167-43e7-9e71-57f484709b07",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f7ea8657-0b1e-4c0a-b834-8b6fa299d62d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5f1ee76-71e1-437a-815c-0b321c736a0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "062eaec9-7c75-42aa-b84f-748c80d39dbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77b6e797-808c-4b2b-b51d-6554aaedda5a",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45a66514-2c69-4c87-b57e-cba2c7132acd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "acaeff7c-2b73-4be3-bf24-4351ccabb3eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f80475d9-59fe-4a35-afd7-dec2aaf478b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a08ec158-05fb-4d14-91d9-f251d9f775fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebf8770c-5351-4f16-95da-66c6818c7a6e",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1430fb6d-6285-4df1-a123-4dee642f074f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "69a45a59-85b6-4719-b5cb-5f75cbf74fed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd40b6ac-b5f0-48d8-9595-949930273f29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1560f30d-f4d1-4bce-966d-a63aa5adf4c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fad9f0c7-07bf-4188-8332-77c124a09b86",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7349df22-79ff-41ff-90e5-b3b039500e7d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d223c899-9ea9-4d4b-9c53-6f36c04feca9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28238855-4479-480c-9ed4-7c0c72247719",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50903181-5823-4a9a-9e92-601e26e2dfb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9caa7512-8aaa-4179-ae7a-9bb9b47983f5",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d28753b3-1efb-44aa-85d0-d9edbdddaece",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9082aa8c-aee7-4069-b882-7acec908b9ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6646467d-a80d-42c3-887b-0b2e83a1840f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd8dc8c1-610a-4ad6-a719-ab9cd37804a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46e5732e-2bca-4d75-b5ad-e85e0b9d3e63",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "313e9c5b-4f02-43ae-8281-2149ef1d78cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0af2b453-60ed-470d-950d-2975724fbc57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "114ab581-33e0-40c8-9d6f-64508de38fa1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e45f157-d214-4669-bfcf-666103bc0cab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5399d9a-50ec-4872-96a4-ece57cb10abc",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e625fd7-6879-409b-820f-89a04ec4f33e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e0cc46c-4b16-4075-99b8-307a91a70fcc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc349a0b-a91f-48aa-9151-f571e466d128",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3933719c-abc0-4ea9-9472-f93c2c2e7294"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c32d8c87-458a-4226-b5fa-e8bf2835832f",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f93416dc-917b-4d2f-a10b-6b5f18873e38",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0a74244b-eb1f-4842-8339-3807ee64d431"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a948cb6e-5ead-477b-8a16-c9627391dbd1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bff6b7d0-483a-4a76-8ae1-f23517d2c7df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20de70bc-d82d-4b2b-b370-567d2e6abf83",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d48bbb62-c677-4cd8-a38b-6718fd2bb239",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d513f5e-de9c-4dc8-9edb-12c39121cb1d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c75f70d5-7ab0-46af-914e-e19d49d26fda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18744865-db04-432d-9d84-a21ebf3c2995"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae6f5e5a-f0d5-4602-b868-246877827dca",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22a75636-0d5f-4eb5-ba39-526819ae43f9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f5ff266-d5d6-4160-8c44-6cacb62042fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f609e722-beea-4459-ba9f-e45e9c7e97a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37f02718-7782-4ec1-89f5-8b0d0e071910"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7cf258b-9d28-45c1-801b-31fb141d2f03",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee692465-0acf-4521-89bd-58b91d0c527d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "730cd528-0271-45a6-95f1-eeb1f926d712"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3c4dca4-f143-40fa-92d7-66004a123178",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7241ee4-cc52-4a6c-957f-bb0c356cfeab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e7fd9f6-0a74-485d-bdf7-be9e21a72aa4",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80592c26-2de9-46fc-9994-f351b0c6d0b0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c101956a-aa8d-45a4-a4e9-0b02288a713e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "215b17d2-9ff5-4516-8fc2-bde167103c5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "626a6b40-4a39-4177-bc87-0616f50beee2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb0aed64-7432-4214-97c8-540223d7ec72",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3367f7c-c5b1-41db-9f57-affd1ef464bb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "969fa6d4-8b8f-4dda-9b66-bf50d70d3b8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9bfe65a-c94b-49ec-9d8c-311f423522ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc7ffc40-7a61-4c51-bfc6-4dc7e790b952"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a24c4ade-7add-4f34-b4ad-17ef099b6a9b",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b02c27a0-0ee4-4618-bbf3-c6c64723cabe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8086e8b0-1191-418a-8a8d-a04a704ef9e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21d5f9c0-48d0-4bce-b5ee-b71b31604c1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b9d2fec-e5ea-4f9e-9acc-013689790e07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05b789c8-5cbf-4a3f-a41f-839ff99e7677",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52b9fdcf-4c36-419f-85e3-9638426b5092",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4378aa27-fbe1-4c1a-b517-0ba9e5297246"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23d7ab52-9c52-4ff5-b716-2e81112a36db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d524e4a-dcb8-4a15-afb2-d21fbf0c5fda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c970b53-19ab-4c70-8e53-ad6a3962c684",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2cb5408-fc9a-44eb-835a-991dae9ec985",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f55387cc-8439-474d-9a4a-13416d678ca3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cbfa09a-4a0b-4635-8b23-b73201e87090",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "103ff3dc-41d6-4e3c-9a99-ab80033bdf8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4f04246-96e7-4125-acf8-fb1121287276",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d732731-4c25-481b-b2d4-b6889daf6341",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0f0d16c5-2095-4de6-893c-ebedd42b218c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "081cf8e8-2675-48bb-b991-943614462f17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fc7d85d-ce91-4706-8ef4-b88bc391657d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f26823c5-d72d-46ff-93cc-8a5c89d804da",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f719294-a6f7-4edf-8ca5-da511eef2bcd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "702d1281-abcb-4f1a-b57e-13c9038c58e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c973410-74ed-477e-aee2-3ba66c3defbd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2f92548-2731-4b1e-9212-3466dc77d534"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7eef195-4c82-4afc-9d02-7e593b155ffd",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f5e3687-c1e0-4ce5-806f-2bcfe6bbfe5c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dfa929b2-84ed-43ee-9b63-972ab7ad6aa5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "864d369a-4f41-4ecc-810a-4536ce293baf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04c67ac4-2421-4d8a-8010-74832b400d1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5276340-53dc-42d2-9ae1-3db740666ae7",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d033789d-a0e7-4dba-a458-f7cd11171441",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "46d7dce6-4eed-4f70-bd5d-4095ba06dbc1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8be89de9-2016-484a-aa26-f8cf405c76d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20a4d5aa-9d64-4e64-b241-9f6210018a0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5463b93f-3583-410e-b313-273c74ca8344",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16f63aa7-2e41-4c34-acb3-8a95a969ce79",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a4c6a186-e257-4983-bb68-62111bf55004"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f75c655-2feb-4e13-8c7c-f83f8395170f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26953d36-433f-428d-8e9f-580446d7aff5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f1d2ff8-b435-45f4-be3e-a0d0597c0dd3",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bffa614-7f5e-4f2e-805d-a060a1e68996",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6ea217a6-70b4-49ec-bde1-574314d1ecfc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b15e3ebc-9d2c-4494-ba82-e9a3584dcd13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc113261-f42b-46d8-87a9-165f065bc1bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41350165-aeee-4c28-8650-5e8ad0c2902f",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31b6ec03-a78c-40f4-b405-9091de0b7ac9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "128d8faf-6d07-4d78-a0eb-3357c980141b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e03c974-8851-4415-9e04-4d0534825d9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70e58e43-0870-4d44-9b45-d322161be8d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6adf437b-981d-411a-b5a2-f65b215a1607",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "544049fe-d8b5-4f6e-856d-667ebf8344fa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3500fdeb-c8c3-41ef-9b1c-86e9f0086888"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "018b1877-75e2-481c-8f53-9c3193635722",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7e77441-ee3d-4a6e-82fb-c617d5d72ff3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a37e26f-8fbd-491a-8f2b-e04b803d96fb",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cc491fa-ed1f-470d-a92f-ba1ae8dec03d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6a7c4125-2638-4dbe-87c9-e0cf3867f831"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fca3bbdb-7698-4e84-88ee-fae877d05782",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "733e6b74-3ecf-4d90-8065-4aea84ebd002"
                        }
                      }
                    ]
                  },
                  {
                    "id": "625e8c63-f033-43b0-8214-2751a1ec2251",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2100211-954c-4f90-864a-001643ddf91d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "12445ff5-221f-46d9-935e-e69bf195e6f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2aafaf40-08b1-4467-a01d-02a01225eab2",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2817d69b-6869-470a-9d5c-0cf5f9c050eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10ab177a-3f6e-4217-9117-ce8dfce721a6",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65e730fc-f0a6-49f2-8644-e37f0e1c2a2c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "742aa8a4-02bf-4e2d-9e31-ce5681f40ce9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d90bc1f6-fcef-4b74-8dbb-6efc9c7c5a8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "956626a5-758d-4f71-9b18-e4df92da2fe6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a55d1dce-114f-4b3d-a495-948ffbadb8b0",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a06e096-4cc4-4c17-a951-27ba2c41aec1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7d40dede-db26-4049-ba46-e766050bea9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb25b061-1a26-4c6d-86e1-214df3723707",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9cbdf662-2f3f-49ad-adbe-66bfe83d4e38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fc1a5a7-b0e9-484d-9593-6329b58ee549",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43a612ee-ac8d-465f-9078-2720e3c2c1e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "83ab7c94-89d5-47b7-976d-bdda3bf2005b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5531b25d-6165-4f28-b168-ffe413b71738",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82575d2d-a35e-4d46-9d30-b25fd392e356"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42376425-d56f-444d-a7dc-e06f39f58970",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5efe1f6a-f2b3-4334-a963-49372b5e4a40",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0bfc3d20-8bc6-4c79-bff2-2da9327418f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b720bcbd-7001-40ee-b473-231adfc6fd9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cfbc6ef-9a4b-432d-873c-65711bc98c1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed0f3df3-c926-40b1-b2ed-f1d56baeb02c",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a025352-603d-4ff6-b30c-67d6306a8e54",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "88a49689-1263-43b5-b33b-d5e0160b0843"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b0596ac-49b0-4182-b3ae-ccd1e0572d7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84373ead-7c97-49e6-9892-93db96fa3819"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0f6ddbc-6958-4bf2-bbaf-6fe40bf9d52d",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d796c7fe-c6f9-44dd-bc99-b1698c4f3f26",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "845a293c-e128-4f6e-bd87-956be6f8af3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dca7e7c0-3f8e-4a8d-82f2-d71475496010",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c059323d-654a-4df2-b09c-2624b289ce53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ae851f3-7332-4ecd-b2b0-fa38a3ec5896",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e21a1476-9c3d-4767-b68d-1f47f8c0d79b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9131d661-df64-4763-b954-11437076691e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "edf91374-1714-4a5c-a4bf-4034f59eb703",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d76bca5-ab2e-4754-91b7-ac38837e1c72"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6c8c1b95-17cb-432c-b6c4-bf38f4a565e9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "98e47789-5508-4bba-8022-e82c44d9ce08"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7968a708-2df6-45c1-9a01-9fc33d6befdd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "31062b73-3364-4ad1-8adc-e21882e0e9b4"
                    }
                  }
                ]
              },
              {
                "id": "0e9202cd-c11d-4c3d-b786-a2494f14d286",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cf0f8036-a31e-405f-8679-e716197e6fcd",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d66ebf04-09a6-456d-a183-31a8b30cc079",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "cc52fdbe-0383-472f-8414-77c67c75d7df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db1c7cc5-e7e7-46dc-85e7-d1760b155b29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "97147270-5dd4-4412-ac4b-d4e3759354a1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1ccbc305-8492-4886-aa19-ddc720c1375e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5a214e87-3b87-400d-999c-cadc6597e9d6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d470051c-5338-404a-9f2c-4edb6cd24909",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "60f3f709-c8b0-4e04-a65b-b7b32026eaf5"
                    }
                  }
                ]
              },
              {
                "id": "5a14f676-67f2-47ed-b51d-fca7e8a6cb75",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "6410e34f-1680-48ab-b985-dfcde2f4030b",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "712aa563-295d-4b88-984a-e05145768228",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "fd3fe53f-53e7-4777-b786-cae4f643b249"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9347f2a6-b720-4d2a-bdc6-2a2b2c914194",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d05256e-58a2-4642-bee3-3365d0091df0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "e5aba851-eaff-4838-8b57-d538f3c6f020",
            "name": "Positive Testing",
            "item": [
              {
                "id": "7377ff5b-a8bb-49a2-a565-accd07fdac87",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2a1eba39-390d-490d-842c-ffcf9ce5520a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "ae51aeb9-02e9-4445-8f8d-6aa46d0b600b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5d7e6469-3e0b-4ce5-b61d-dcb7c9fc1124",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0b28f4ef-91bf-4a49-b305-82b329d79c72"
                    }
                  }
                ]
              },
              {
                "id": "0be83d1e-20d1-498a-9cc5-c98fd8e2b46a",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "baf543b0-3046-4eb9-8461-ee090dc95dc7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "09a766f8-7e3c-488f-8c17-f4393d7be2e1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b867346a-d155-444f-a176-eff57b51310f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c4d552b5-334b-4757-ba7e-6fffd4e5baf4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "df90c7ae-1ad1-470d-9923-5ceb5b1d4b5e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "861c6908-d39b-4a7d-baa6-cc4de0fde28b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0fb103d0-7542-4a4e-9f06-785214a98f64",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fa169639-55df-4ac0-8374-ae60fec70bf6"
            }
          }
        ]
      },
      {
        "id": "3f0ab67a-fab8-4c02-bae1-4b9fad58e2a6",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "08cccfbf-61dc-488a-a9a5-9ef29148d516",
            "name": "Negative Testing",
            "item": [
              {
                "id": "71499344-ab11-40bb-8198-75224c207d00",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "bcc623f1-6fb0-4dd6-9acf-41ff9bae7454",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f87dda38-9f9a-4cd3-8d7a-ca1c4f324e3b",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "3a7dd66e-ba63-4997-becf-fb33be07f13e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59d1ff9e-8651-494c-b044-8ad7215e1228",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "809d680f-bc57-4c28-ad54-5e5f2ef89f34"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "af7d5508-7838-412a-83fd-24513b60ee4a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bcb90dbb-5bee-4cbe-a7b3-251747035202"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b2b49887-0001-467c-ad97-12f8a61ee0ce",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7e8fa2d1-5af9-47ab-acf4-bd860de58094"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e12b3c3d-00ef-4c2f-8142-e56044e2c47b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "dc3a63e5-2453-4778-b0f6-0a1422e2bb1e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d2d0f5c1-e6da-4063-a77f-e01bb82a4326",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3998024f-ceba-45ba-981e-074b049b1d11"
            }
          }
        ]
      },
      {
        "id": "17cad84f-4153-489b-b82a-fda2632dc06d",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "f2d130e3-e3a3-4693-b1ee-ffca3481aab2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "08f7a526-7806-40e5-9607-ac37d8635e25",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "355763e4-2c2f-42fe-b51c-e90bc4acc499",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9ca0cfc-d5b4-4cbf-9a96-fbf2a21a2648",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "847092c4-46a8-4854-b2c8-6eaf4c219f0f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa1502b3-b39d-4cfd-953c-9926c2911379",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5ef34848-f304-439d-968b-358e13ffb2a0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c9aa19c8-efdd-4994-a9bc-b5a5835e4a13",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f93a9ed3-eec3-4122-8f6b-07f7153d116d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1db72e1c-954a-444e-acf8-2cc60f733284",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3d6c3b51-1a5c-4c33-91fb-78892ae3a517"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4adec737-1406-4904-9112-ba81649a2adf",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "a550f054-306b-4081-8b9d-95c31db41db7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6c5a4852-1c9a-422b-a115-707d53399496",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b0055a8a-cc9a-46d1-b902-2eee17d22e91"
            }
          }
        ]
      },
      {
        "id": "c19695b5-0b93-4dd8-9a30-e1b8f262fc9b",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "2597e52d-7ca9-49d0-9009-3f6f1111c2f4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e34c5b7b-14b2-42df-b47f-865242c9a4e7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0fb32996-564b-443e-8899-aa37cc5daf59",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d13c26c-914d-42a4-85dd-d0a2921c9694",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "78f3baa8-3ebd-46cb-a1b6-2e5f6fce777e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff35bb0e-3d2e-48d2-b027-02b7c346ecff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2ba7cdca-4d12-452a-9170-449416598ad7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bb01abe2-96af-493d-ba0e-1c4a61d9cf10",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9afce664-8b99-4a9d-aa0c-e7918cbc3d67"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "064eaa03-42a8-4295-a383-54a700fbb5fa",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "32105423-75a8-40fe-9089-e35df3f04fc8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "47c9dc35-94d5-405b-a1c0-89adfb0e7919",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "16d82549-e202-42fd-8146-f980f8e65c5e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f7bad1ad-290f-42b1-af0a-92f95988a49e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8ad9d0df-d9f3-440d-a9bc-4b62f202e7c8"
            }
          }
        ]
      },
      {
        "id": "6388b996-e7ed-4063-97b7-67ecf05c937d",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "92ce322c-fec2-4897-9b31-723446a02179",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "75b512fe-1604-4619-999c-cf9a3db525a5",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "40883bfd-cc00-4004-b17f-1b3d76396ced",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f152b811-0a1a-4d44-a139-be551de7b60d",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b4dd7069-de53-4ff1-ae49-6e34327352e0",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 71
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 82.05158730158733,
      "responseMin": 6,
      "responseMax": 949,
      "responseSd": 95.16777852250752,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1712277316313,
      "completed": 1712277345663
    },
    "executions": [
      {
        "id": "ec36761d-7f36-43cf-a897-92796ccbdfa4",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "ff7a6060-22ee-4cf2-9301-691d12f1c545",
          "httpRequestId": "cb738e90-9cc4-4611-b3d6-4ba2388e9859"
        },
        "item": {
          "id": "ec36761d-7f36-43cf-a897-92796ccbdfa4",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "649ffd35-c806-4c74-9809-026e60fb8ebc",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 0
        }
      },
      {
        "id": "a4143cb4-db3d-4ab6-bf26-64f87453bb43",
        "cursor": {
          "ref": "31e341b4-23a1-4bf8-990c-f653e39619c5",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "4a5a0214-c0cc-4a2c-9ada-628d02761e7a"
        },
        "item": {
          "id": "a4143cb4-db3d-4ab6-bf26-64f87453bb43",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "f4e77cf1-2bbb-4fb3-91a2-1e3bf8d58930",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "b029aa26-d7e8-4b3e-b482-6f6516c4eea2",
        "cursor": {
          "ref": "2869b313-a89a-4ab5-8a0f-210a04893435",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "7fa24e80-c869-4ce2-b634-86f328d5daf5"
        },
        "item": {
          "id": "b029aa26-d7e8-4b3e-b482-6f6516c4eea2",
          "name": "did_json"
        },
        "response": {
          "id": "70d2127d-b2ee-4c51-974c-4fa31ce543a6",
          "status": "OK",
          "code": 200,
          "responseTime": 266,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95aae862-0874-45e3-b212-52b995b9aad3",
        "cursor": {
          "ref": "07d12f22-5fbb-4b06-a5d2-a9a76daa6fc1",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "88f53a3c-3b16-4668-80e0-bad4141c52ea"
        },
        "item": {
          "id": "95aae862-0874-45e3-b212-52b995b9aad3",
          "name": "did:invalid"
        },
        "response": {
          "id": "0a22336c-5901-450d-850b-adc9af19c258",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 134,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95aae862-0874-45e3-b212-52b995b9aad3",
        "cursor": {
          "ref": "07d12f22-5fbb-4b06-a5d2-a9a76daa6fc1",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "88f53a3c-3b16-4668-80e0-bad4141c52ea"
        },
        "item": {
          "id": "95aae862-0874-45e3-b212-52b995b9aad3",
          "name": "did:invalid"
        },
        "response": {
          "id": "0a22336c-5901-450d-850b-adc9af19c258",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 134,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "877b8d20-bdbe-4240-a964-c42229055eb1",
        "cursor": {
          "ref": "37155107-2edb-404c-bd44-8cab750de3d3",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "3b6a6f18-7544-4b8a-bfb2-b3bfc07b9352"
        },
        "item": {
          "id": "877b8d20-bdbe-4240-a964-c42229055eb1",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "efeeb33c-9031-4454-b440-454b55db9b14",
          "status": "Not Found",
          "code": 404,
          "responseTime": 318,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c07c1df-e021-4765-b101-7425dc1405b0",
        "cursor": {
          "ref": "4f0d9b27-794c-4457-a686-3b8e2957d427",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "5ed58a78-0b07-4337-b9d7-cad97aaeaede"
        },
        "item": {
          "id": "1c07c1df-e021-4765-b101-7425dc1405b0",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "63effeac-3dcc-4e3f-aa0d-77cac31b064b",
          "status": "Not Found",
          "code": 404,
          "responseTime": 53,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2306dad5-54d3-4b49-8c72-9791cda9d49d",
        "cursor": {
          "ref": "6bfe0bfc-c52e-4585-918f-a82e35cebf61",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "6daee396-6327-4717-bd46-21d7df95ad77"
        },
        "item": {
          "id": "2306dad5-54d3-4b49-8c72-9791cda9d49d",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "3cfa9445-a4a7-4c84-9721-a8c81db71a2d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19db7d2b-50a4-4217-bc26-69ce90d92bf8",
        "cursor": {
          "ref": "8fabc15d-fab0-4e0a-adfd-716fac909568",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "4eaec644-2ab2-4d4a-acc4-67d7db217650"
        },
        "item": {
          "id": "19db7d2b-50a4-4217-bc26-69ce90d92bf8",
          "name": "identifiers"
        },
        "response": {
          "id": "7088d3b0-b900-4f9d-b14f-d11965363fce",
          "status": "OK",
          "code": 200,
          "responseTime": 171,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c5a9a7c-8976-4894-9b21-0121e4946279",
        "cursor": {
          "ref": "ea81bbc5-e92e-493a-80be-4258fd292edf",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "40e83d05-1fe2-4f09-87b5-4c0317f3670e"
        },
        "item": {
          "id": "5c5a9a7c-8976-4894-9b21-0121e4946279",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "01b29dc4-e1aa-4257-a8df-5502a5386b14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d783a0e9-f21f-486f-a979-2daa5601c091",
        "cursor": {
          "ref": "3ab60669-5add-4eed-b41c-2b2a5d79799b",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "091b5822-569a-47cc-bfad-a98d2da3cfca"
        },
        "item": {
          "id": "d783a0e9-f21f-486f-a979-2daa5601c091",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "cd57ed3f-3a78-4d1d-8b7a-061cd5307208",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4449637-c7c4-43cc-9505-dd9c21218d21",
        "cursor": {
          "ref": "1f16f54c-e9f2-4d5e-a178-4918fa22a16b",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "218bf86b-7365-4c26-b0ba-efc792e9b65e"
        },
        "item": {
          "id": "d4449637-c7c4-43cc-9505-dd9c21218d21",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "4d0709cc-003b-42e8-bfae-d945526d4ee6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "859b21b1-5521-415c-8092-392ab6aefa66",
        "cursor": {
          "ref": "7ec5bbe2-2de2-41ee-9087-50cee44d5e9d",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "35159ebb-61ac-4824-909e-5fad99683fac"
        },
        "item": {
          "id": "859b21b1-5521-415c-8092-392ab6aefa66",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "830e5913-8f07-4689-b262-bac9a09cd446",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61d71457-2a6b-4b7f-9234-5dab0aab54e9",
        "cursor": {
          "ref": "b708f7cc-65e4-41c9-a4eb-27b67d337faf",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "18d5b55c-9d55-4188-9192-8362e01fa90b"
        },
        "item": {
          "id": "61d71457-2a6b-4b7f-9234-5dab0aab54e9",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "8b195447-4f3b-4613-b8be-d8df958c4b2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d5e4de6-f3cd-4528-8333-17385bf31d57",
        "cursor": {
          "ref": "ae03e911-8f98-4446-b5fb-5c0f752a3c90",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "371b8d90-9042-45b3-a18c-5d6e9155041f"
        },
        "item": {
          "id": "6d5e4de6-f3cd-4528-8333-17385bf31d57",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "e6249cce-09b4-4165-ad1a-caf68115e955",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00ed4692-a72e-48d5-a82b-69e5db321df8",
        "cursor": {
          "ref": "6b3f3601-3bb1-41fa-a692-97a5529d093e",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "d85df72f-fdee-433c-b449-9ca94c084a3d"
        },
        "item": {
          "id": "00ed4692-a72e-48d5-a82b-69e5db321df8",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "bc15607e-49d9-416b-8b91-fd3f41d8239b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a25d3eec-a554-4bdf-911c-e313283a16ea",
        "cursor": {
          "ref": "fbf8211b-45aa-4a40-9e8c-30a53f91978f",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "d0669758-3f15-47bb-8b34-0fed368e0293"
        },
        "item": {
          "id": "a25d3eec-a554-4bdf-911c-e313283a16ea",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "677b3caa-55d7-4a2c-8f62-a430000dbbe5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d881dfb-b8c2-42e6-a786-1ac081ae15bb",
        "cursor": {
          "ref": "c337d44f-b008-4662-a645-bbaf9d6c0a85",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "c1d7c6cb-f3fa-4d0a-bbcc-c9f67bd5f788"
        },
        "item": {
          "id": "2d881dfb-b8c2-42e6-a786-1ac081ae15bb",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "333ea19c-f5dc-421f-9e35-515c1db9fd8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41cb1d94-63f5-47e4-8d88-99629684429f",
        "cursor": {
          "ref": "2e4f1d0e-2535-4063-8dd2-cc62493c8995",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "dbc822de-e0a6-4f90-9a4a-a9b8f61413dd"
        },
        "item": {
          "id": "41cb1d94-63f5-47e4-8d88-99629684429f",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "5c6a0c4b-95a7-43b5-8589-25d23c1fa519",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf60fd55-1d35-48fe-bfe9-527bbe4ee527",
        "cursor": {
          "ref": "bf68f4cb-afa1-48a1-8177-76e368b8eb32",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "c5f42082-7c75-4937-bfc7-d261339cfe11"
        },
        "item": {
          "id": "cf60fd55-1d35-48fe-bfe9-527bbe4ee527",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "e2113735-90bf-4268-913c-5bf767c6ce81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f52def2-3e74-4d3a-9c2f-bef4b96faa29",
        "cursor": {
          "ref": "4afec2cc-7db7-4315-91cd-d75151cb85a0",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "73b0ba9f-d0a5-4877-849f-d90cadb29d21"
        },
        "item": {
          "id": "7f52def2-3e74-4d3a-9c2f-bef4b96faa29",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "d8baf489-3de0-44d5-8aaa-cac7340ed3d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74d24e89-d9c3-4940-a8bc-2eb5b3e4b65a",
        "cursor": {
          "ref": "1a9fbad2-c417-40c2-b8f0-dfa07274b283",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "52abeca0-6466-4c54-b3f0-f4883e6807af"
        },
        "item": {
          "id": "74d24e89-d9c3-4940-a8bc-2eb5b3e4b65a",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "e954a951-edfe-4d50-bd1d-1a5ef244098b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3b13dfe-1d46-42fb-bd64-174b7116b5ac",
        "cursor": {
          "ref": "17a8e10b-5182-4a26-b710-fc3da1d34a80",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "33d8e74f-9593-4b1d-b73c-d927a4a3f078"
        },
        "item": {
          "id": "c3b13dfe-1d46-42fb-bd64-174b7116b5ac",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "2cb0ff55-adcc-458d-b944-6aeeb3a9abcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d053860-8a43-4a80-af2a-bf27e850e796",
        "cursor": {
          "ref": "4dae7ff0-315e-4b14-a111-a78bac77f125",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "3a3866ba-1a58-4337-be4f-56395b7d6606"
        },
        "item": {
          "id": "0d053860-8a43-4a80-af2a-bf27e850e796",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "a50bdd77-a136-414e-b3e0-59c55c3eb494",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b341267c-194e-429d-8d2b-5982a2620428",
        "cursor": {
          "ref": "ab13f901-dac8-4eb2-8d10-8ce151a03895",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "66767cd4-0e03-4a5c-aaa0-eb3b903fdb7c"
        },
        "item": {
          "id": "b341267c-194e-429d-8d2b-5982a2620428",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "26cb1869-d97e-4950-8467-d0b2d09850b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f370464-9560-4d30-9ea9-a3e780c53ed5",
        "cursor": {
          "ref": "bc15de95-e737-4eb3-82b6-25680ddbb5f5",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "0e76d313-5547-4834-abe6-32f30e70c0dd"
        },
        "item": {
          "id": "6f370464-9560-4d30-9ea9-a3e780c53ed5",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "c0715fbc-7361-41e2-89bd-9c2c2582f7b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe2df6ca-c23e-4da3-8243-0f06bce6e3d0",
        "cursor": {
          "ref": "2c2b12cf-89ba-4d13-abb1-9ed35f53ffe7",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "6fe6504e-dfd1-43bc-a862-057719faac9b"
        },
        "item": {
          "id": "fe2df6ca-c23e-4da3-8243-0f06bce6e3d0",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "522d576d-0b2c-4440-bb6b-27fb6ed4c334",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11e708dd-137c-4ee2-be8c-8bb739eaa999",
        "cursor": {
          "ref": "96d08890-12f9-4ae4-8fdc-18379bd98712",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "ed49b6bf-3bf9-4798-8063-0ef34e461850"
        },
        "item": {
          "id": "11e708dd-137c-4ee2-be8c-8bb739eaa999",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "18cdf22a-a455-4c02-9c61-b2180ab2af19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96832993-b1fc-4ad7-b9a5-458ef91269fa",
        "cursor": {
          "ref": "0168d40f-ffaf-490c-a0c2-1e83c5efa92c",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "72d66d3f-d100-4f71-8198-248fb486a430"
        },
        "item": {
          "id": "96832993-b1fc-4ad7-b9a5-458ef91269fa",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "b7df980c-4f39-44e3-b44e-e2979e670c50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ae2cd96-d69e-4d91-a108-d5ee9835d447",
        "cursor": {
          "ref": "df03be11-6363-40cc-a981-18c04fc515ef",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "28cebd1a-93ad-4444-a7c7-b550a170e448"
        },
        "item": {
          "id": "8ae2cd96-d69e-4d91-a108-d5ee9835d447",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "40c2c594-2d38-4768-af3b-20380a8cce2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26244669-e1fa-4500-aaaf-5a1b181178b8",
        "cursor": {
          "ref": "d914b295-689a-4eef-90b1-3b4fb929adfc",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "b4a22202-c02e-452a-bd27-a97e702ebfaa"
        },
        "item": {
          "id": "26244669-e1fa-4500-aaaf-5a1b181178b8",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "18a94d24-ce8a-43dc-8b69-3cb76861dff0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12757300-e327-4a13-9d6e-1a9aa8c75ca1",
        "cursor": {
          "ref": "2aab9bcb-a5a2-4bf7-8f54-35b1a09f23ac",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "c529749c-459a-4191-a87d-a036a92760fd"
        },
        "item": {
          "id": "12757300-e327-4a13-9d6e-1a9aa8c75ca1",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "008b9a81-e0fd-4335-b04b-38b484de7e89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62d2a82e-9878-4f49-abb4-8cc5d7cbfcb1",
        "cursor": {
          "ref": "da0395d5-b676-41cd-a509-1569fbeb1652",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "ae59d410-5598-4340-b93e-c6dbf3fb4bdc"
        },
        "item": {
          "id": "62d2a82e-9878-4f49-abb4-8cc5d7cbfcb1",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "2e922aaa-af1a-42a0-957c-8501d32553a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d22c7505-37e7-4f90-ba91-7cf809cd95bc",
        "cursor": {
          "ref": "13f4f022-8e1c-4a22-8930-2d15b0865df6",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "10dceaa2-00ce-40ce-9534-a8e3e8e66dad"
        },
        "item": {
          "id": "d22c7505-37e7-4f90-ba91-7cf809cd95bc",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "1567d2e7-adea-404b-b992-5f0ef0a8773e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "719d8b56-cecf-49d4-b981-04156837322a",
        "cursor": {
          "ref": "9d784428-e79a-4775-b130-58f913fbff6a",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "3c32d7f1-aa3e-4b34-941a-90c9f94c31f7"
        },
        "item": {
          "id": "719d8b56-cecf-49d4-b981-04156837322a",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "aebe670c-f99b-4044-ba07-454077d23990",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb748a8b-7b6a-4f7d-952a-3c04b96d1242",
        "cursor": {
          "ref": "f410a6ca-2588-42b8-995d-79b982bef7ac",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "b24609fc-b9c0-4a09-abd2-25d7d2a2f35e"
        },
        "item": {
          "id": "cb748a8b-7b6a-4f7d-952a-3c04b96d1242",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "a1a28ed7-38be-435a-9851-b9f21668da3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "783eb365-1f2a-44d4-9cbb-323fac0f52de",
        "cursor": {
          "ref": "1737ce84-7aaa-44cf-9c49-ae5704e6fa3d",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "f04379de-344f-4441-a3c4-d01095e8aed7"
        },
        "item": {
          "id": "783eb365-1f2a-44d4-9cbb-323fac0f52de",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "e5f71d72-1f35-4548-8045-f31930ae97cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b1ffb96-a4bc-4269-9107-915bd849f880",
        "cursor": {
          "ref": "6897a722-09ed-4f90-a832-bbd2ff2543e1",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "bab7c167-8959-4e92-b27b-6ea91b79c3b3"
        },
        "item": {
          "id": "5b1ffb96-a4bc-4269-9107-915bd849f880",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "ee31df98-8ace-4b79-84ea-7a1a697a1ec1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfba02c2-5901-41ac-854d-41316015f3be",
        "cursor": {
          "ref": "bdc7cf30-8966-4375-8865-2786e9d5f178",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "3a0d5981-5948-4a40-8868-7bec06ff36d0"
        },
        "item": {
          "id": "bfba02c2-5901-41ac-854d-41316015f3be",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "430e134f-b7bc-4e85-9145-69487fd8c297",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8684b26e-a8d8-4a96-a2a3-f89a6fc84398",
        "cursor": {
          "ref": "77f1038c-d47d-4e04-9f21-c15117e79426",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "d870a959-d0ab-40c4-9412-42b2daa5dee7"
        },
        "item": {
          "id": "8684b26e-a8d8-4a96-a2a3-f89a6fc84398",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "17a0d7e3-21c3-457d-8dee-01fa0cbd2c75",
          "status": "Created",
          "code": 201,
          "responseTime": 949,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "87e1c0ef-6253-4ae8-b97a-e8312ffe18b2",
        "cursor": {
          "ref": "21fee3a3-fec1-4005-a0fa-0e12d83bc0c2",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "df17e8c7-3777-4660-9dbb-904f98dc004a"
        },
        "item": {
          "id": "87e1c0ef-6253-4ae8-b97a-e8312ffe18b2",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "b112d52b-4aa8-46c2-aa83-a5101c1c4625",
          "status": "Created",
          "code": 201,
          "responseTime": 284,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "1cba1634-cce6-471c-accb-a223d736fb26",
        "cursor": {
          "ref": "4bf139c8-0bd4-4334-bc85-c5cc87459565",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "633da6bd-3569-487e-a297-cb9934eaa973"
        },
        "item": {
          "id": "1cba1634-cce6-471c-accb-a223d736fb26",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "84124b8b-f28f-45bb-86d4-4cec09a59480",
          "status": "Created",
          "code": 201,
          "responseTime": 280,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "2d9a5627-c11f-4ed1-bca0-4f529344fcc4",
        "cursor": {
          "ref": "9def29f5-e674-47d3-8f17-4c0a4e79d666",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "a15cbc81-d2de-462d-b2fb-fecc5482c1ff"
        },
        "item": {
          "id": "2d9a5627-c11f-4ed1-bca0-4f529344fcc4",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "863c8468-2008-4ccf-a925-fc6009f79151",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6775dfb1-8047-4e23-b469-424adcaa562a",
        "cursor": {
          "ref": "ebe5e82a-4a24-47a8-9d4c-976525b8e266",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "74c4ef01-c6b6-4ec1-a3ca-408104b3de31"
        },
        "item": {
          "id": "6775dfb1-8047-4e23-b469-424adcaa562a",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "d8ece6c5-c63a-433f-b212-9774abd86ac0",
          "status": "Created",
          "code": 201,
          "responseTime": 385,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "dfa68a6e-89d1-4c3e-85a7-d84c6fe170e0",
        "cursor": {
          "ref": "40659e12-a894-491f-a042-d04ea9ea9699",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "80c2f2fa-c81d-475a-908f-795ed3924ecb"
        },
        "item": {
          "id": "dfa68a6e-89d1-4c3e-85a7-d84c6fe170e0",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "fd16e16b-97c3-4819-98f4-c5c80b56627e",
          "status": "Created",
          "code": 201,
          "responseTime": 299,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "3e7d78de-2fd0-40bd-bbb2-89b353361aa8",
        "cursor": {
          "ref": "60edc591-0685-4ead-959b-66a58a41dd79",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "6533210f-31a4-4b4e-984f-f0c0437fa922"
        },
        "item": {
          "id": "3e7d78de-2fd0-40bd-bbb2-89b353361aa8",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "46a98329-3c72-421e-a10a-f6be400e7c2c",
          "status": "Created",
          "code": 201,
          "responseTime": 277,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "038a6138-a460-410d-9cae-deb2d8036812",
        "cursor": {
          "ref": "48e831e6-0002-4925-807e-7a444d6559a0",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "663bcebb-083c-4072-b038-b891a7f6c7fa"
        },
        "item": {
          "id": "038a6138-a460-410d-9cae-deb2d8036812",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "c49627bc-5af4-422c-ad67-69ba750abcec",
          "status": "Created",
          "code": 201,
          "responseTime": 374,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "0969f55d-3822-48a5-a0cf-db57ba76dbb0",
        "cursor": {
          "ref": "69c334cc-4792-43b5-81ce-4f7a77be0beb",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "45542d2b-8860-4eb2-b316-60a307a67915"
        },
        "item": {
          "id": "0969f55d-3822-48a5-a0cf-db57ba76dbb0",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "98c49881-7a3a-4939-9d20-92d28b898c26",
          "status": "Created",
          "code": 201,
          "responseTime": 270,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "a511305e-4d7f-40d5-a65b-64d91737c50f",
        "cursor": {
          "ref": "20a79852-5886-42cb-90f9-19cb07e67e5d",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "44d4ee83-ecd5-437e-a370-7ea5cd53c7d4"
        },
        "item": {
          "id": "a511305e-4d7f-40d5-a65b-64d91737c50f",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "518d0760-7604-4cb5-9965-ed958866ae51",
          "status": "Created",
          "code": 201,
          "responseTime": 266,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "8b2f293d-faad-45a6-8304-dc127da75c09",
        "cursor": {
          "ref": "31456659-47b9-411d-9e2b-0db851526c1f",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "2718eb29-be00-4380-bd56-73c2971bf808"
        },
        "item": {
          "id": "8b2f293d-faad-45a6-8304-dc127da75c09",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "0d0a2318-4bad-42a5-b900-476f590945dc",
          "status": "Created",
          "code": 201,
          "responseTime": 268,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "0cc818fa-6d3a-4801-a314-76bfc17ae907",
        "cursor": {
          "ref": "9141dadf-9b67-4741-89ef-746cf9b2368d",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "be4df1e2-4ad3-4570-9e72-2a66a21a0885"
        },
        "item": {
          "id": "0cc818fa-6d3a-4801-a314-76bfc17ae907",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "ae32c8db-06e7-431c-975c-0bb82776d371",
          "status": "Created",
          "code": 201,
          "responseTime": 294,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "b2597384-134b-4b84-84e5-9031fb2beae4",
        "cursor": {
          "ref": "132b15cd-595e-4bba-ac87-e20aedff72eb",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "31338abf-c7bc-4d76-b7a3-2a6465e5b77a"
        },
        "item": {
          "id": "b2597384-134b-4b84-84e5-9031fb2beae4",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "45310783-ee7b-44f1-b7c5-787f79c8122d",
          "status": "Created",
          "code": 201,
          "responseTime": 295,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "4275963b-272d-4042-ab0e-f71efbef0832",
        "cursor": {
          "ref": "f8c171f2-6e06-42b3-9fa2-5077cb3ec90f",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "e7779972-3429-4f2d-b91b-ba413144456b"
        },
        "item": {
          "id": "4275963b-272d-4042-ab0e-f71efbef0832",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "e1210220-c12b-4459-84a5-8acff47ae32e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d975d78-8644-4bdd-a614-63df0b978179",
        "cursor": {
          "ref": "bc6f6e28-d332-4f76-9362-83a037ffd641",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "c566002b-9eb0-4106-a669-7b8548cfcb79"
        },
        "item": {
          "id": "6d975d78-8644-4bdd-a614-63df0b978179",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "c0961a54-3a27-466e-948f-9d381041a2a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3643093b-383e-474e-bc83-0ec1684bd0be",
        "cursor": {
          "ref": "4f11d714-3e46-42e0-b0fa-3534375bfd9e",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "13f42292-9021-46b7-9147-6772953fac72"
        },
        "item": {
          "id": "3643093b-383e-474e-bc83-0ec1684bd0be",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "6147c089-87f1-4cf2-80cd-775054ae6ffe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cbe3a6a-b2ce-4147-a5fb-49255e761734",
        "cursor": {
          "ref": "2a151d36-fc6e-4798-b0d1-e7eda4e8881b",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "c19188fb-dea7-4286-864a-f201bb883a35"
        },
        "item": {
          "id": "1cbe3a6a-b2ce-4147-a5fb-49255e761734",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "7b38245c-57e7-43a6-8822-e22471c44236",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b1c3584-ec6e-45e9-8f76-336240ac0e89",
        "cursor": {
          "ref": "e61754bb-cc58-492c-911e-8fbc872c5aa1",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "46af18ab-d4e3-4312-832d-6d6ab16b8767"
        },
        "item": {
          "id": "3b1c3584-ec6e-45e9-8f76-336240ac0e89",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "7aac849c-c3d2-477a-9432-7c1410747c31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "303b5289-0eca-4dae-a4a1-fb43688b96bf",
        "cursor": {
          "ref": "68e77447-9b51-4caa-8b5c-ffb57a61f3d9",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "192f121a-6f25-4137-a8ee-341d436544ea"
        },
        "item": {
          "id": "303b5289-0eca-4dae-a4a1-fb43688b96bf",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "371001c5-f8ee-4fbb-9f71-a2e5c62933fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 123,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88abe648-2bc9-442f-a481-d91c2b9c837e",
        "cursor": {
          "ref": "7c080c82-6d08-4cc1-b1a5-ffd6a34f473c",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "ce03c12f-cfba-49f2-95af-b82b65165d8a"
        },
        "item": {
          "id": "88abe648-2bc9-442f-a481-d91c2b9c837e",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "2d0da15a-1794-40a4-8047-a4dda1243315",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11c8cbe1-08a9-4417-9a9a-e7d826c46a1e",
        "cursor": {
          "ref": "bb0b7d8a-e49d-4975-9bb4-5769ebdad86d",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "ce656896-f547-48c2-9e22-0f7366e589ac"
        },
        "item": {
          "id": "11c8cbe1-08a9-4417-9a9a-e7d826c46a1e",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "f343cea8-b200-411a-9fe7-6851d7fe28c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f43c98ad-ca34-45f2-9524-c4af33189510",
        "cursor": {
          "ref": "21f1630f-0635-4151-96b6-8844c7da4001",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "4bd37c3d-5da2-4f03-bf1d-2637ab98b8d4"
        },
        "item": {
          "id": "f43c98ad-ca34-45f2-9524-c4af33189510",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "946426ba-a910-425c-bd44-07d3c5a028ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c09bdf77-f99d-48de-99e5-5074ff7c812b",
        "cursor": {
          "ref": "902a3d7f-7bb2-4f5e-85ba-69da8b045a82",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "23b6da14-0615-460c-b6e2-831a2652fb81"
        },
        "item": {
          "id": "c09bdf77-f99d-48de-99e5-5074ff7c812b",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "b6ed3dbb-8e69-40cb-83dd-47a125f5ac35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d52f63e7-5f19-4764-aea4-cbeae8a5e472",
        "cursor": {
          "ref": "2f6562ad-3f15-4a87-90f5-a78d050f711b",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "cb731109-0e48-4cca-bc76-72f3db116c30"
        },
        "item": {
          "id": "d52f63e7-5f19-4764-aea4-cbeae8a5e472",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "c7541250-473c-4798-82d0-b109d6d61030",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0100b652-480f-4a4b-b45c-76a6f068201c",
        "cursor": {
          "ref": "dc3630b8-1014-46eb-b496-903c81f570c7",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "def2614d-c656-46ec-bcc4-9514f19ccfce"
        },
        "item": {
          "id": "0100b652-480f-4a4b-b45c-76a6f068201c",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "991919c8-3c80-46ca-bf5a-d50f4e333f29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "719d08f3-7573-4457-8b75-e3710871f023",
        "cursor": {
          "ref": "31c4a2ae-0226-4857-bc56-8a0675d9b004",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "957882a4-13c7-45fb-964a-b81cc2ebb566"
        },
        "item": {
          "id": "719d08f3-7573-4457-8b75-e3710871f023",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "cfc2b893-ff6a-4413-86ac-7bd64e46a1fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb405f8f-5b1e-44f0-b93f-06ef900a8b67",
        "cursor": {
          "ref": "1d5d36f7-f6eb-478d-8c2c-898039de8210",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "68ce08e6-e89f-46d6-8d70-07dbcdc4fb5d"
        },
        "item": {
          "id": "cb405f8f-5b1e-44f0-b93f-06ef900a8b67",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "0029970c-9b0c-429b-bac3-0c9f72d004ea",
          "status": "Created",
          "code": 201,
          "responseTime": 285,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "49233215-2e4f-48b3-ae3a-984f737f29b3",
        "cursor": {
          "ref": "fd6cf9ff-ede0-4a73-9f85-db059a826c61",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "e64f4d76-eabd-4280-b323-a0c6b1031ca4"
        },
        "item": {
          "id": "49233215-2e4f-48b3-ae3a-984f737f29b3",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "8efd2b3f-5e1a-460e-92a2-7b76098f4fe4",
          "status": "Created",
          "code": 201,
          "responseTime": 281,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "4d555f25-4d5d-436b-a189-71c8c1ad2538",
        "cursor": {
          "ref": "80d2c77f-bd2f-4030-818b-3ef9227be41d",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "a29008aa-b4dd-49d3-9ecb-6f143a9979e4"
        },
        "item": {
          "id": "4d555f25-4d5d-436b-a189-71c8c1ad2538",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "b644cea7-8e24-4920-9744-b4893a4397e8",
          "status": "Created",
          "code": 201,
          "responseTime": 280,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "a1297a1d-abaa-44ef-ba7d-dbc7fbd94af3",
        "cursor": {
          "ref": "110d5fba-72fe-49b3-bf60-37e7a7f73ea0",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "e17ac505-3684-4462-bb95-ac7f9fe029f2"
        },
        "item": {
          "id": "a1297a1d-abaa-44ef-ba7d-dbc7fbd94af3",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "228ed409-fe92-4e71-9ec7-75c25394683c",
          "status": "Created",
          "code": 201,
          "responseTime": 276,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "fa45c8ef-e722-4f08-affa-f7b5d446a3d5",
        "cursor": {
          "ref": "7baf7807-9cfd-4282-b95b-49efc527eb71",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "11f42396-5155-4467-98c2-10dea45f4290"
        },
        "item": {
          "id": "fa45c8ef-e722-4f08-affa-f7b5d446a3d5",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "2227127f-3174-485a-9c35-6c775273e6fc",
          "status": "Created",
          "code": 201,
          "responseTime": 275,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "8c7bd47a-59a2-4f0d-88f4-4c10fa42cd97",
        "cursor": {
          "ref": "507b8d90-9b1e-4fba-a45d-0d97f491c188",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "72b0d50c-ac27-48d6-b0e0-3dda1be67931"
        },
        "item": {
          "id": "8c7bd47a-59a2-4f0d-88f4-4c10fa42cd97",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "cc478655-414a-4f7e-ab48-0a0f919c4d65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "469aae33-ccd7-489e-9f5f-2b2a6f696b9a",
        "cursor": {
          "ref": "57df9631-e572-434b-84c1-f0f7757fd780",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "b1251b8f-8088-4364-8cd6-bdfce986256e"
        },
        "item": {
          "id": "469aae33-ccd7-489e-9f5f-2b2a6f696b9a",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "891aa5e8-d5af-42e4-9756-92a69d90249b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b46f583-9669-459b-b983-79338064e044",
        "cursor": {
          "ref": "8fb3aa7a-41d8-47b0-9704-a5d36278c16a",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "6a20c7f2-984f-4eda-9368-d4f6782c6a8b"
        },
        "item": {
          "id": "0b46f583-9669-459b-b983-79338064e044",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "43a9970d-04a9-4c27-9080-5b59d218636c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4efd7345-193d-4970-83e4-e01f870a1f2d",
        "cursor": {
          "ref": "09a087a0-2298-4f54-8c4f-edd78f03ca55",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "0b9f7ac5-bda8-4100-9aca-30bc6abdbcea"
        },
        "item": {
          "id": "4efd7345-193d-4970-83e4-e01f870a1f2d",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "43356a77-7c9b-4f94-bb26-5752e693bfec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68fef63c-3658-4fe7-a189-ef2f89615a81",
        "cursor": {
          "ref": "42983bb1-1138-4a76-8437-e1dba1109675",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "2501482f-09bf-4424-8cb3-7d234660afa8"
        },
        "item": {
          "id": "68fef63c-3658-4fe7-a189-ef2f89615a81",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "de53e2fa-35cc-4bac-b2c4-0df573b254de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fc91a15-08a0-4059-8cbd-b29585bbc41e",
        "cursor": {
          "ref": "813580dd-a848-47b1-bf67-07595f9b068a",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "12b16583-e751-4693-98e1-75db2c9423ef"
        },
        "item": {
          "id": "1fc91a15-08a0-4059-8cbd-b29585bbc41e",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "899143cf-548b-4cb1-8b27-aca6073d144d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "742c33ee-0299-4dbf-b583-ca2d6a2509d8",
        "cursor": {
          "ref": "ae38dc9e-948e-47e9-9bc6-00877c35f30e",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "c3219643-81eb-483c-bc7f-67f4b535c1b4"
        },
        "item": {
          "id": "742c33ee-0299-4dbf-b583-ca2d6a2509d8",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "99c604cf-94fe-43a9-9eb5-dd2627669b07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dad84266-1a7c-4108-8712-941ff2452ce8",
        "cursor": {
          "ref": "370ca265-ab09-410c-b31d-ca0c43907638",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "c6978760-9417-4a92-a476-085cd18f44b1"
        },
        "item": {
          "id": "dad84266-1a7c-4108-8712-941ff2452ce8",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "674e4594-0041-4d07-b6db-7fbf03e01c3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e08e89f-3c0f-4f41-8230-17eac5b52cb0",
        "cursor": {
          "ref": "fb981611-c5b5-4b7e-beb2-b95e295c1751",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "248faf32-9b93-4234-b537-dbec49450bc7"
        },
        "item": {
          "id": "0e08e89f-3c0f-4f41-8230-17eac5b52cb0",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "786cc6ab-01b4-44e4-acc1-dd451f34f7da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cbae2b0-8e57-4bae-8018-d984e3839d03",
        "cursor": {
          "ref": "a6c0b66b-3d98-4242-8646-9bd0eed8ee81",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "7f19fcc3-28f7-4599-8a3b-6ef7bea5044d"
        },
        "item": {
          "id": "8cbae2b0-8e57-4bae-8018-d984e3839d03",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "792a9cd5-035b-45de-87f1-49bdb2b58ab1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0bfd8f8-8e56-445f-b446-8b3095141ee1",
        "cursor": {
          "ref": "4dd1c67c-8e9d-4db2-9049-a47c6f86a9a4",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "80f99353-a189-4ddc-b230-118f81f490b4"
        },
        "item": {
          "id": "c0bfd8f8-8e56-445f-b446-8b3095141ee1",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "9cb6b68b-feba-4a82-a792-dd73b86559a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "395defb1-0487-4506-9c12-b8ffe899a6aa",
        "cursor": {
          "ref": "00651f1c-5dd5-493f-b42a-1efbdbe0a70f",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "fc41c08b-d100-48cd-bd2a-42b47fd1edcf"
        },
        "item": {
          "id": "395defb1-0487-4506-9c12-b8ffe899a6aa",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "cb5c45ae-30b1-4d77-964c-98ef193a74e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60240b9e-2c65-4735-91f1-8a6f3a171e47",
        "cursor": {
          "ref": "41ab2cf1-11e3-46ab-9f4a-def2ec38f3a1",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "1d7e3173-07ea-46d8-a5ef-1b9b590147e2"
        },
        "item": {
          "id": "60240b9e-2c65-4735-91f1-8a6f3a171e47",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "4c2ad3c6-d6a2-45aa-bbf1-ef87894cd33c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfd6b56f-1662-4b20-a912-0b9c8fea584d",
        "cursor": {
          "ref": "8d786357-1eb2-4b57-901c-fd282bb8fadb",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "f6b0eef9-1253-4bf5-bb85-15de6678ed02"
        },
        "item": {
          "id": "cfd6b56f-1662-4b20-a912-0b9c8fea584d",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "02510522-0d5b-462c-9d9c-e824748d7650",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86193be0-7d29-447f-8a89-3e4a10a52783",
        "cursor": {
          "ref": "358c68bc-6cc3-4728-8bf9-789d2a4ff10d",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "92d25757-1b9d-4907-8e5d-d570c123218b"
        },
        "item": {
          "id": "86193be0-7d29-447f-8a89-3e4a10a52783",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "867918e2-ec9b-4eef-8536-4b1bf5d90d50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee7c0d16-6d24-4ff9-b1b7-d5c1d9d3fd81",
        "cursor": {
          "ref": "131a8146-166e-4572-8448-379cebbf776f",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "43d70949-6522-436b-abb7-6d0c22fa5047"
        },
        "item": {
          "id": "ee7c0d16-6d24-4ff9-b1b7-d5c1d9d3fd81",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "920e13c8-68d4-4744-b961-d4cca0ff9436",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72a9ecc3-d42d-4062-8335-b06d37f20e5e",
        "cursor": {
          "ref": "c94b7550-fce4-4d32-9ad1-e60b312a4679",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "621026c7-4680-4c3a-bf2f-818a92cd331a"
        },
        "item": {
          "id": "72a9ecc3-d42d-4062-8335-b06d37f20e5e",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "0ea0aa3b-2b7c-4ce1-af24-b3df18462e8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bb48eaa-0814-4bec-864f-a0af1ab7791e",
        "cursor": {
          "ref": "ea0acd37-1864-4c25-80cd-71347fc5d283",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "f038f5b0-4fec-4fc6-895f-58204714b7cf"
        },
        "item": {
          "id": "9bb48eaa-0814-4bec-864f-a0af1ab7791e",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "0b83de6d-f487-4295-863d-9686898baf62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35a2466b-ad2a-4a33-8b9f-935f5e448b47",
        "cursor": {
          "ref": "e6e468cb-740a-4b2d-a538-0bd7820c7c75",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "8802e513-e77e-40d6-9d3e-73bb7caf3866"
        },
        "item": {
          "id": "35a2466b-ad2a-4a33-8b9f-935f5e448b47",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "5ec5bfc3-679e-46e5-aad7-db7303b033d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39970e3d-05b7-4d38-81f7-f308d1b66e2e",
        "cursor": {
          "ref": "23295663-526e-4889-b299-8e6515b053ec",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "b95e89d7-fcfa-4ed9-bd8e-9a1033640626"
        },
        "item": {
          "id": "39970e3d-05b7-4d38-81f7-f308d1b66e2e",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "43e0d46c-426e-4b06-94f8-90113faacb8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b96dae0d-b9c5-4e11-8aa9-9453778adc38",
        "cursor": {
          "ref": "a3840820-c16b-45c5-b6ee-bfe3740fea77",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "6e25c83c-3ba2-4613-8ca1-14b6fac1b3b2"
        },
        "item": {
          "id": "b96dae0d-b9c5-4e11-8aa9-9453778adc38",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "4ac176dc-979a-4330-b02a-217eb661e0c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10a46450-5d6a-44f8-8e5e-7e7e291b5c8e",
        "cursor": {
          "ref": "8ccf88bd-649a-466b-acd6-66f52fe2ef2d",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "e7febbea-c066-47c8-b491-3dcc6990f3a6"
        },
        "item": {
          "id": "10a46450-5d6a-44f8-8e5e-7e7e291b5c8e",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "b1b34284-6f26-42e0-a4a4-7b069fa43a75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15a02f4c-8caf-458c-bda1-82f70be51c21",
        "cursor": {
          "ref": "f09f4f4d-86ea-4446-ac50-995627cc112e",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "17e89f18-805c-4b23-ac90-ead34d8b6f14"
        },
        "item": {
          "id": "15a02f4c-8caf-458c-bda1-82f70be51c21",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "45920c34-4c4f-4353-bd3b-4bf528343587",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce7363a5-4264-442a-b71f-96c6ed82623e",
        "cursor": {
          "ref": "657de168-3e8f-4aa3-8d0d-7f69a52482fd",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "a8e971c7-fa52-4c29-a0f5-302f9426a92c"
        },
        "item": {
          "id": "ce7363a5-4264-442a-b71f-96c6ed82623e",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "50b8525a-7d3b-4bae-9fa0-ebf0323758c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "445695df-6acf-4de3-9e26-42e5b20b9882",
        "cursor": {
          "ref": "989f4a11-ec95-4ec2-8f95-6efb18abbd44",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "3431a7bc-f498-4435-9b7e-f1ac58bc534e"
        },
        "item": {
          "id": "445695df-6acf-4de3-9e26-42e5b20b9882",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "c5bbdea3-9c41-47ee-bd91-2cf6054ff362",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2919ddc4-7e26-45ec-a74b-85fe4b46885b",
        "cursor": {
          "ref": "fde4768d-2b73-47d1-bb6f-3032b7b234d7",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "3f3ac8ce-55e4-422a-b3ae-4ca216b5c4ac"
        },
        "item": {
          "id": "2919ddc4-7e26-45ec-a74b-85fe4b46885b",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "c8253f51-2fa8-44c3-b832-3a0bde9ca641",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b87d86b-8b27-45e7-a2ef-16ff4f93c06d",
        "cursor": {
          "ref": "6f2eecf3-7b14-4a5a-a77b-493d14b3da72",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "0d42c72d-63bc-420b-bd5c-62285912f6e1"
        },
        "item": {
          "id": "6b87d86b-8b27-45e7-a2ef-16ff4f93c06d",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "dad193ef-e7a7-4b09-ae0e-2390fb1be425",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a691a7c-8eca-416c-8fb6-4983c6343c66",
        "cursor": {
          "ref": "25575490-58da-410c-b45d-82e1ee79417c",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "d950a398-a2ce-4d07-b536-4e653e6afe2f"
        },
        "item": {
          "id": "1a691a7c-8eca-416c-8fb6-4983c6343c66",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "e13b42b7-4be0-4221-b786-e5cf03c606ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48f93aad-8050-48c5-a506-bd6329a52735",
        "cursor": {
          "ref": "a3e8f101-134b-4ab0-8679-6e25c6c6dad7",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "d74027e4-bee8-42d4-a8f3-96d875c917a2"
        },
        "item": {
          "id": "48f93aad-8050-48c5-a506-bd6329a52735",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "6ad80f11-0b37-4a94-b92f-a9bb6771331c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b79ca05-9bcc-48ec-93be-87c1d9da5817",
        "cursor": {
          "ref": "3c542f30-5462-4c57-9665-49deaefa126a",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "3b018d80-69d0-4ff8-baf8-4add0df850fd"
        },
        "item": {
          "id": "5b79ca05-9bcc-48ec-93be-87c1d9da5817",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "5f5438de-1308-49f4-8887-62827ce58697",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0175bf0-2ed0-49fd-a08f-c32688e8f271",
        "cursor": {
          "ref": "1acc1fea-f6be-4f21-bf5e-79c76d5b09f1",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "ea2ad031-32c6-49dc-a5f5-72c1f4b83549"
        },
        "item": {
          "id": "a0175bf0-2ed0-49fd-a08f-c32688e8f271",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "c4993f51-bb68-4069-94b6-e656c78a4e82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db9a69d1-5b1d-4b99-9205-423681545a9c",
        "cursor": {
          "ref": "4850e3c1-bf64-4768-b3a0-a0ba2b9aa37c",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "bcdab55f-28d9-42ba-b839-10dd27c13e39"
        },
        "item": {
          "id": "db9a69d1-5b1d-4b99-9205-423681545a9c",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "8765ef85-0deb-4d3d-81aa-4445c1b2ca5c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c8a0fbc-7623-4885-b120-c4faa85f5924",
        "cursor": {
          "ref": "d815a9bf-8072-446f-8ead-77187269e5e4",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "87bfa617-1f2a-4994-89d9-00cd5ae20e1d"
        },
        "item": {
          "id": "3c8a0fbc-7623-4885-b120-c4faa85f5924",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "d80db970-e7ab-424d-8a2f-25bd8ca8d944",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "cf1120e4-f8e5-4c02-bdf8-63253030f552",
        "cursor": {
          "ref": "ccfa1490-45e9-4e89-b28f-907b2183b638",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "6f00a18c-26b7-4e88-afec-a3a5d779bfe0"
        },
        "item": {
          "id": "cf1120e4-f8e5-4c02-bdf8-63253030f552",
          "name": "credentials_issue"
        },
        "response": {
          "id": "f60e557e-82b1-4733-84fd-814e19390935",
          "status": "Created",
          "code": 201,
          "responseTime": 287,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "f762defa-033f-475e-9262-99c59a4c077b",
        "cursor": {
          "ref": "86b21c07-a5b1-4ccf-b046-64318601ac91",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "7c9c0dae-c9fa-4a37-9997-bbd47ce88c50"
        },
        "item": {
          "id": "f762defa-033f-475e-9262-99c59a4c077b",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "446add65-251c-4c10-a23d-c80d9c12b2cc",
          "status": "Created",
          "code": 201,
          "responseTime": 439,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "f46b706a-3548-48c2-9066-a544e65e6c9c",
        "cursor": {
          "ref": "25296ee8-62f3-4886-99c3-dd8d964eb151",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "49bae30f-51c9-4cb9-9951-1e32449df405"
        },
        "item": {
          "id": "f46b706a-3548-48c2-9066-a544e65e6c9c",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "b8962eb1-19c3-4b30-815c-473f79728d60",
          "status": "Created",
          "code": 201,
          "responseTime": 289,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "30a24fc9-a96b-452d-8378-df4f0b599c1b",
        "cursor": {
          "ref": "09b8d4b1-51f4-4341-97cc-5c37933b0dab",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "2f018771-326c-4c73-bc51-8cdb00d6c370"
        },
        "item": {
          "id": "30a24fc9-a96b-452d-8378-df4f0b599c1b",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "63651c0f-ed37-4719-b9e9-79cdbc0f3367",
          "status": "Created",
          "code": 201,
          "responseTime": 289,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fb54262-480b-4e13-9969-a95d7683ff1f",
        "cursor": {
          "ref": "4ef203e3-d497-4052-8965-af4aad812958",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "fe399e98-5bc1-4fa1-8a70-d111b62b08b6"
        },
        "item": {
          "id": "9fb54262-480b-4e13-9969-a95d7683ff1f",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "7f9b9094-50b3-4a89-b489-64566e7ecec6",
          "status": "Created",
          "code": 201,
          "responseTime": 280,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-04-05T00:35:32.481Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-04-05T00:35:32.481Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "70a4842a-6bae-4e69-b0f0-3b6ae06612d9",
        "cursor": {
          "ref": "f09fd3f7-9501-4ae0-b375-605d136f0ccd",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "e2eea355-898c-449c-bf8a-58568d96d320"
        },
        "item": {
          "id": "70a4842a-6bae-4e69-b0f0-3b6ae06612d9",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "09e7d3c2-8c30-4290-991e-9f42ae20f69a",
          "status": "Created",
          "code": 201,
          "responseTime": 318,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b47c2225-ba12-4b79-b527-7533baeb87d3",
        "cursor": {
          "ref": "092dbb8d-8d5f-4b97-b485-f84be4537639",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "fe702394-5484-4386-b93a-9e6412c3a6f9"
        },
        "item": {
          "id": "b47c2225-ba12-4b79-b527-7533baeb87d3",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "923df76b-914e-4992-84d2-0628790902a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad6a1bc8-b534-4d3e-bf30-fa99593531ab",
        "cursor": {
          "ref": "7cef905f-377e-4cdf-8c25-8258d8c2e596",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "ed8dbf2a-524f-4ce7-ad22-8ccfde7f452b"
        },
        "item": {
          "id": "ad6a1bc8-b534-4d3e-bf30-fa99593531ab",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "cb30652a-3d0e-46ad-b398-8f53e728871a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0aaa29b5-a1ca-4ca2-9486-08bd21aa2d88",
        "cursor": {
          "ref": "11a3ebb4-1f99-46da-a328-37eb45cc3944",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "0ad04171-da5c-415f-84e7-e014e6580ccb"
        },
        "item": {
          "id": "0aaa29b5-a1ca-4ca2-9486-08bd21aa2d88",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "77bcdaac-59cc-4623-a2ce-661d9bb85cce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef745593-a561-4ceb-9665-4d78e89dcdca",
        "cursor": {
          "ref": "83e3a0b3-428a-4ff9-a291-979228f7ab10",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "d7afaac8-218c-418a-851b-490dd9437f7d"
        },
        "item": {
          "id": "ef745593-a561-4ceb-9665-4d78e89dcdca",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "9b6b728b-770b-4207-adef-cabdd45580fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4112b2ce-c2bd-462f-895b-f3145aefd3b7",
        "cursor": {
          "ref": "4c98fe09-93f4-4bb6-a30e-74ce73ddcc25",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "6c9593a1-83ea-43f5-ad3b-4c8824bd95be"
        },
        "item": {
          "id": "4112b2ce-c2bd-462f-895b-f3145aefd3b7",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "2619f1cb-fb57-4e37-86ad-dc595ac7430c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec6ee669-ff83-4c0e-b54e-c569bb2a8cc9",
        "cursor": {
          "ref": "f6066326-84ad-4cfe-b96f-4cd5f591c7fc",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "c2017cd9-3bca-4a93-bcaa-51259e5718b2"
        },
        "item": {
          "id": "ec6ee669-ff83-4c0e-b54e-c569bb2a8cc9",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "7422143d-a099-4b9e-9069-7441797263da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa2b32fb-2033-4cf1-b9c8-ed57036a2104",
        "cursor": {
          "ref": "726d8a99-d49a-4282-ab7f-9876f12262ee",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "6ce1ed24-8b66-4e1c-b03e-fdb89af0a3a0"
        },
        "item": {
          "id": "aa2b32fb-2033-4cf1-b9c8-ed57036a2104",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "38c136e6-caee-476a-8062-3bc19157dedf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27e9684d-ad5c-4515-91d4-191a2578a0be",
        "cursor": {
          "ref": "fdd91507-4d8d-431d-ba57-ff2ccc13716e",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "d86636cb-5b91-4aae-88a2-6aacc84b1e4d"
        },
        "item": {
          "id": "27e9684d-ad5c-4515-91d4-191a2578a0be",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "69978f3e-3cf6-4719-a588-e4880afbe816",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a4bdfa7-647e-43b8-8c35-77f181a87c09",
        "cursor": {
          "ref": "c856b4a2-e203-49dc-bfe8-965534b27f28",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "414af1c3-cc0b-4215-b162-7b715e0b9484"
        },
        "item": {
          "id": "9a4bdfa7-647e-43b8-8c35-77f181a87c09",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "a2c42c4c-2332-4fa6-bbf5-8215947b358d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58c972b2-82bb-4205-aa46-a229efbb41f6",
        "cursor": {
          "ref": "6d05057f-336d-49bb-8e28-096b854900af",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "12772abd-c2ed-49d7-ba62-c1ce385f1240"
        },
        "item": {
          "id": "58c972b2-82bb-4205-aa46-a229efbb41f6",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "32f08007-8f97-4cc6-8ed3-c2be132c8475",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6a4712a-00c2-4cd8-8e1f-171b2e279e53",
        "cursor": {
          "ref": "2bea7e76-ecab-4134-a090-cd60d327008e",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "91cec525-58d8-4dc3-8bfa-b9eaf6297e1e"
        },
        "item": {
          "id": "e6a4712a-00c2-4cd8-8e1f-171b2e279e53",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "4045efe4-4770-4a6e-b8aa-f9e52ef637cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "084756b9-4899-44ff-b5f2-952aa3748512",
        "cursor": {
          "ref": "3746e39e-d64e-434c-99ca-85c66738b3e2",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "81cecf7b-87fa-471a-8f27-4aa680ca1db2"
        },
        "item": {
          "id": "084756b9-4899-44ff-b5f2-952aa3748512",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "8357f32c-5aef-43c5-8fa2-eb860774ad13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0f9b0ed-885e-4d84-a408-0b90822cb25f",
        "cursor": {
          "ref": "96cabd61-758d-4bce-8caf-d633a1fda619",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "1aab99fd-fda7-4da7-b9be-57a93133c938"
        },
        "item": {
          "id": "e0f9b0ed-885e-4d84-a408-0b90822cb25f",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "935d2758-9756-4c36-8ff7-b3ff35a33719",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eab0ddd6-6fda-4b53-9760-b7aa231dac74",
        "cursor": {
          "ref": "d97f12dd-e6d3-4b4d-8941-b82aee0b895d",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "0a3c757d-22ac-4748-80bd-106b5a5c0b99"
        },
        "item": {
          "id": "eab0ddd6-6fda-4b53-9760-b7aa231dac74",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "a259a31b-249d-40f7-8fe2-a78506c51f6a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 106,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "737c0cba-9e7b-459f-a1bc-5a963d59ac30",
        "cursor": {
          "ref": "45145ca0-1bb6-474d-9047-56a62bf26201",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "b7c524e6-74c9-4827-a071-ca6dae56d008"
        },
        "item": {
          "id": "737c0cba-9e7b-459f-a1bc-5a963d59ac30",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "76f64f2f-28e6-4b26-b460-7cb7a57386ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d4d3385-61b7-4733-b055-9d5ff6ee27a6",
        "cursor": {
          "ref": "e895e49c-9f83-467b-afc6-65bda144f4c4",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "b117b76f-e856-4a83-b21f-bca42ccbe8bf"
        },
        "item": {
          "id": "3d4d3385-61b7-4733-b055-9d5ff6ee27a6",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "62c0af01-f2e4-4987-95c8-12bea9cf1da6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8c3c5c1-b3f1-4910-a106-c95b95509540",
        "cursor": {
          "ref": "9bb02b9e-bc41-46a8-b77b-bd060868873a",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "59535903-1600-416d-9ade-5a350b018750"
        },
        "item": {
          "id": "a8c3c5c1-b3f1-4910-a106-c95b95509540",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "5d1e11c5-52b3-4c51-89aa-b6d22dab72d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f21c800-681d-4391-8644-08c5b2a1b732",
        "cursor": {
          "ref": "56b4425f-936e-46cd-9e6c-c31ae6c59fe8",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "b6051a54-9e05-4be7-8598-7852da24c7ac"
        },
        "item": {
          "id": "6f21c800-681d-4391-8644-08c5b2a1b732",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "b95caa9e-8609-4a79-bff8-cb03468b9f9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "514a6451-034e-4ce8-bc20-7e5314a570af",
        "cursor": {
          "ref": "7d7d8bf0-9e22-4480-80b1-011678fb7654",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "7b54b47c-d029-40d4-8627-7e0e6a6a4432"
        },
        "item": {
          "id": "514a6451-034e-4ce8-bc20-7e5314a570af",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "7bee5425-634f-4b98-9f3d-c6cb745e17f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0aea45bf-8a7c-4dbc-9ecf-1c3d6ad86f1b",
        "cursor": {
          "ref": "8bfa5568-e5ea-4db9-91e8-8a044ba6f35d",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "60d9574b-07ca-46ab-a6b3-8c76d8136918"
        },
        "item": {
          "id": "0aea45bf-8a7c-4dbc-9ecf-1c3d6ad86f1b",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "f92ed692-ca31-42e4-9717-4768b5781855",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dcb31ef-1f03-4935-b5f2-a3e589507c31",
        "cursor": {
          "ref": "2bbf162b-18fc-4bb5-87d0-0b14860052db",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "38add09f-1d1f-4148-9ac3-b89b15d3b1cd"
        },
        "item": {
          "id": "7dcb31ef-1f03-4935-b5f2-a3e589507c31",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "bdcc1bbe-df50-4053-bb75-8e68da4e4a88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0aec0a8a-3659-4290-bdb9-8f960cdc8684",
        "cursor": {
          "ref": "33e429f8-7242-4b0c-82f4-425365ea7373",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "1a83e426-a587-44a2-9778-926a368688d0"
        },
        "item": {
          "id": "0aec0a8a-3659-4290-bdb9-8f960cdc8684",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "d1366ccd-f046-4bb3-8c1d-05e8dfbef0d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94d6d3b9-6006-48c7-b6cd-a8609d5c7ebb",
        "cursor": {
          "ref": "1da71584-d935-4fd6-95c0-e5f9ca242d11",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "2b032545-bfd8-43e7-bab8-8efdd8d9c00e"
        },
        "item": {
          "id": "94d6d3b9-6006-48c7-b6cd-a8609d5c7ebb",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "b23812ec-3b30-4957-9b3f-e95b9fef224d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "223df026-5a8a-40a9-8c78-9fd756c5fd86",
        "cursor": {
          "ref": "5c50fc1b-0ea4-4f8f-b27f-d22eeec2bf29",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "36b0855b-0c85-4241-8066-77d416e0788d"
        },
        "item": {
          "id": "223df026-5a8a-40a9-8c78-9fd756c5fd86",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "b02c83b4-12a4-4841-afc4-ec4a93284bdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df8c0581-d05e-4a70-8f0a-fed7efa0dbc7",
        "cursor": {
          "ref": "2927a511-bea5-4b33-babd-a69f6d4fa791",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "fdae0332-ecd4-4f62-8aa3-f831b05360ea"
        },
        "item": {
          "id": "df8c0581-d05e-4a70-8f0a-fed7efa0dbc7",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "9c53b839-b384-4921-9120-1eda1e083b48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b200d28-28ea-41aa-b747-a78fd8ed3c5e",
        "cursor": {
          "ref": "8e49c156-b4c6-48d6-aa9b-6b3806930faf",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "1f4ea036-1ece-43a7-9862-21cf68ae273b"
        },
        "item": {
          "id": "4b200d28-28ea-41aa-b747-a78fd8ed3c5e",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "8a560b52-e389-4640-aa8b-c0ebdc9346d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69e8b71b-befd-446b-84b3-d5791f6cdf71",
        "cursor": {
          "ref": "56cc48d8-38f2-4d40-a55b-b1693a2d044c",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "514ad9e7-8c91-40b7-9dbd-8292df5a664b"
        },
        "item": {
          "id": "69e8b71b-befd-446b-84b3-d5791f6cdf71",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "f72f8c05-34f8-4be3-a495-410725dfc091",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82c4fa30-f5aa-44ea-ac04-514ed06eccf2",
        "cursor": {
          "ref": "223a2453-8216-4414-8e37-e020c854f7fd",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "3337afaf-3674-418b-81ea-7ac9f6cb2107"
        },
        "item": {
          "id": "82c4fa30-f5aa-44ea-ac04-514ed06eccf2",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "12890d1d-ad14-461e-9650-43f2ae5a6e8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2774ae53-7639-4338-8caa-2d7733696582",
        "cursor": {
          "ref": "c0027f6c-3d75-4914-9d55-bc943ca0e461",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "c0a94b32-0401-4618-b368-e791968bc1c3"
        },
        "item": {
          "id": "2774ae53-7639-4338-8caa-2d7733696582",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "9633d59b-f000-4f9b-80bb-0b16641dc3f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51b0a0c0-e312-49b4-a6a2-e1d52ae4da8c",
        "cursor": {
          "ref": "d8f27d0a-5c65-4bb8-b65c-a20c3109c81b",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "edefe9ba-9e2a-432e-8af8-2471c956eeff"
        },
        "item": {
          "id": "51b0a0c0-e312-49b4-a6a2-e1d52ae4da8c",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "990a43c6-6ad4-4fa6-9f58-3d407286b13a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73a952a6-6990-4f27-9d67-1a7b0f5244f5",
        "cursor": {
          "ref": "34065152-213a-4447-b6ae-c64240cd3bab",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "8d10855d-96c8-4335-aa1d-13df9ec7c771"
        },
        "item": {
          "id": "73a952a6-6990-4f27-9d67-1a7b0f5244f5",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "e0813dd3-e921-4693-adf9-fc3f067b9311",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5788423d-d51a-42b4-acb2-d07362985409",
        "cursor": {
          "ref": "ea977908-bb30-4c65-b1dd-a29f7ad12c5e",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "81268fe0-f302-4287-948e-5004904fb0bd"
        },
        "item": {
          "id": "5788423d-d51a-42b4-acb2-d07362985409",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "3edb7906-38bf-488e-a1af-e66e7dc39b1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf313956-5a61-4f06-ae51-15d9651aedea",
        "cursor": {
          "ref": "01a611ba-ecdc-4e79-ac55-f2e90d312bc2",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "df99ae23-4447-4b40-a09d-06facaa7588c"
        },
        "item": {
          "id": "cf313956-5a61-4f06-ae51-15d9651aedea",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "f8904223-114a-4e3e-8263-491865b0ed00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e400a213-7240-4a2f-816c-641be81ac9b1",
        "cursor": {
          "ref": "c8a31216-d4f1-41b4-871b-ea01a503138f",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "6f23c5a9-d31d-494d-9412-789f39031445"
        },
        "item": {
          "id": "e400a213-7240-4a2f-816c-641be81ac9b1",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "367f8217-11b7-4de3-9d22-4c9319309ff3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b2ff5a8-db17-43df-88f9-e3cba0adddae",
        "cursor": {
          "ref": "6bf30b2a-f4ed-40fb-9d6c-eb178e835c8c",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "9425d612-c7d2-41fc-ae49-e9575fb434a2"
        },
        "item": {
          "id": "7b2ff5a8-db17-43df-88f9-e3cba0adddae",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "e4bcc33f-e5ea-4994-b8eb-250a8eb898e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68ae5ab8-5f91-47dd-a2b8-75459b829400",
        "cursor": {
          "ref": "33b40829-b3fc-4185-9d31-257b2f226edd",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "87c18d42-bd54-48d9-8961-4e978e0a4a09"
        },
        "item": {
          "id": "68ae5ab8-5f91-47dd-a2b8-75459b829400",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "b413a0d7-84bb-474d-ad6a-0236100813dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb8fe7c1-a8d7-4eb9-9d56-c709438c5217",
        "cursor": {
          "ref": "27c8d254-1243-4dde-9db0-cd1f6afafc8a",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "6babba32-a93a-4bcb-8008-18b9da169805"
        },
        "item": {
          "id": "bb8fe7c1-a8d7-4eb9-9d56-c709438c5217",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "4c861142-4b4b-48b4-af13-0c240ccaa604",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f91d1bd0-c6f8-4787-b33a-c1f9b2ef05d2",
        "cursor": {
          "ref": "a26a8060-70d6-46f6-98a4-08779e26da23",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "72538502-1cbe-4f18-a7bd-7b13d3cb8261"
        },
        "item": {
          "id": "f91d1bd0-c6f8-4787-b33a-c1f9b2ef05d2",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "8a3cdb99-f7ff-49e6-a588-ba04958f8e13",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f82ef3d1-1177-4d44-94d5-55f7fdbfba5e",
        "cursor": {
          "ref": "83b1e115-ac7c-4658-a46c-c0c1e38f9b99",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "2d9935ef-e7ee-4234-9ab9-03666750f20d"
        },
        "item": {
          "id": "f82ef3d1-1177-4d44-94d5-55f7fdbfba5e",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "ec7581e4-75c7-4bc8-ae5e-d1eec53b7fb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1c3a243-4ffc-4bef-b13d-d39e810b57eb",
        "cursor": {
          "ref": "660b2012-ed91-48c4-aab4-278235b174bb",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "d977aec3-9897-4ab4-841a-ea31e92c577b"
        },
        "item": {
          "id": "c1c3a243-4ffc-4bef-b13d-d39e810b57eb",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "22b73684-197a-401e-838b-f7b018439b4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "315c30eb-9837-44df-bef0-d70fe0fa8406",
        "cursor": {
          "ref": "0cd992ab-ccfa-4cb2-b31f-89ade8e8f275",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "51118991-6474-4eea-92ba-690727c2ef36"
        },
        "item": {
          "id": "315c30eb-9837-44df-bef0-d70fe0fa8406",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "0456ba82-89bc-41d1-ac46-3bb0ae1f44fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d874fce9-516a-4fef-97a0-c22dc6f10cc8",
        "cursor": {
          "ref": "db18fb69-7534-498d-bd1b-6a09fc508a12",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "7a5b50ea-2c0e-423b-9471-cfedb7440c10"
        },
        "item": {
          "id": "d874fce9-516a-4fef-97a0-c22dc6f10cc8",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "e5828765-f13f-48fe-a412-bfe9ae612f57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f0ac26a-25f4-400c-8d3c-bbcf7fa762a8",
        "cursor": {
          "ref": "842547dc-f5ce-4016-bb89-95f4cb0b98cd",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "f6ff871f-af64-4d1d-a268-1e2bb6c92461"
        },
        "item": {
          "id": "4f0ac26a-25f4-400c-8d3c-bbcf7fa762a8",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "c6444807-06ac-4fc1-8187-b23710d70e5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74ccfce0-2d6c-4274-bbcd-183d0295224b",
        "cursor": {
          "ref": "8cd7b651-d302-4fc6-8524-bdd4731580c4",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "4e808499-5054-477d-a46c-5f5da78aba15"
        },
        "item": {
          "id": "74ccfce0-2d6c-4274-bbcd-183d0295224b",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "97338676-0cf6-4865-8960-2a9c9552a147",
          "status": "OK",
          "code": 200,
          "responseTime": 112,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "38dbb750-8d12-46c4-b5f1-982953949cc5",
        "cursor": {
          "ref": "f3031320-346d-4abb-a084-7853a6b6188e",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "31a5b96a-962d-44e5-b3ef-f617d701eedd"
        },
        "item": {
          "id": "38dbb750-8d12-46c4-b5f1-982953949cc5",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "94365843-cc65-4d34-8c7b-be7b5a84fe4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ed9dfbd-5571-4cdc-ad4b-061566982d43",
        "cursor": {
          "ref": "82422443-693b-4cf3-b233-2a639f5dd5c3",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "5ba77a1b-497c-4bed-bb3f-45efb50f966f"
        },
        "item": {
          "id": "8ed9dfbd-5571-4cdc-ad4b-061566982d43",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "6dfc16f8-6171-4148-8337-cd35fdcea5c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc6428cc-5006-4ef8-baa9-9a66658af584",
        "cursor": {
          "ref": "f7134952-42d5-460a-a869-a7200c573cf5",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "7ce49d04-a430-40c0-8671-4869e495903e"
        },
        "item": {
          "id": "bc6428cc-5006-4ef8-baa9-9a66658af584",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "8db323e0-9bff-40fd-9993-f048318915bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87189d22-b647-48fd-a6b8-1bc973ffb5c3",
        "cursor": {
          "ref": "4c25c376-73cb-48cc-aa26-5ae6c1dca402",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "e72c13f9-3a31-496c-b7d0-a22684c49471"
        },
        "item": {
          "id": "87189d22-b647-48fd-a6b8-1bc973ffb5c3",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "5ef860a7-4e59-47ea-a728-b53332dcbc04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b720b399-7d35-4058-a2d7-47b4acf229a0",
        "cursor": {
          "ref": "c4bbb1fe-e7c5-4315-8dc3-e66598af5232",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "fc68c67b-56f2-4147-89f7-48847fe8ad6f"
        },
        "item": {
          "id": "b720b399-7d35-4058-a2d7-47b4acf229a0",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "5e1cc51f-cc69-4c8c-96a6-d559e5f63263",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4be7c0b6-292b-4f05-a88c-72a41a12502e",
        "cursor": {
          "ref": "7270447c-9918-4e65-9fc8-2d6f8b0ae166",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "c213ee96-dd0c-4b78-892c-0a6757c2f1bb"
        },
        "item": {
          "id": "4be7c0b6-292b-4f05-a88c-72a41a12502e",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "60ae3fb7-0b63-40d7-9a32-57c07ccf3091",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48f629c0-4910-426d-9691-acf5cac6d901",
        "cursor": {
          "ref": "e0a335e0-6f8e-49ac-b8f1-1dfd014f835e",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "c53823a7-2839-401d-966a-7044b484f703"
        },
        "item": {
          "id": "48f629c0-4910-426d-9691-acf5cac6d901",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "2c23ad78-bdab-47fd-aeda-a2a040649ea6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91dbe629-373d-4e80-9f9d-a440a82dac1f",
        "cursor": {
          "ref": "955fb500-82fd-4b14-81ba-a65b8028062c",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "cc9aabb9-197e-4141-a890-3a7c9911c1fc"
        },
        "item": {
          "id": "91dbe629-373d-4e80-9f9d-a440a82dac1f",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "1a1a7d7c-9517-4b37-a934-2dc987a70f9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7db84800-4810-44d2-8471-9480035dcdfc",
        "cursor": {
          "ref": "49676b50-de2f-49fa-a301-102ee8f7928b",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "ee2ff40b-7ee7-4a60-b680-877e08abafaf"
        },
        "item": {
          "id": "7db84800-4810-44d2-8471-9480035dcdfc",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "69917b85-a303-4948-82f4-f7ddf325b7ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42577a2b-86d9-4e5d-83c7-d43b141e64bb",
        "cursor": {
          "ref": "07ecd288-33ac-4210-b567-071d3f87f5ad",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "75c386a9-7fb1-4a2c-a26d-1d072cab9fe2"
        },
        "item": {
          "id": "42577a2b-86d9-4e5d-83c7-d43b141e64bb",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "3c7c2f4d-1876-431c-ae53-fb6c633517b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a30eb48-9d9a-4a24-946f-28c13a8d73e2",
        "cursor": {
          "ref": "326eda7f-3b4d-4a32-8bef-d57e36aede63",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "d87e0284-50a4-403d-9948-b267233a3e19"
        },
        "item": {
          "id": "5a30eb48-9d9a-4a24-946f-28c13a8d73e2",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "b5c6bb67-a685-4d5a-a7e9-2fc4188f91b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1968f6a1-da0b-4829-8e87-25ca9a53069c",
        "cursor": {
          "ref": "f9eb0b3b-0dee-4f4b-a031-17e4d0f68aea",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "59c0a75a-aac9-4b25-921d-1c8005f663e4"
        },
        "item": {
          "id": "1968f6a1-da0b-4829-8e87-25ca9a53069c",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "dcd814b6-fa3a-4f46-9908-368164225e00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c15b985-3c13-43d5-89ed-55e4fd20c333",
        "cursor": {
          "ref": "c3bfc0ff-c352-4d78-a62b-d1b7d4672810",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "f8ba578e-5965-44f8-a86f-6cb427ed70cb"
        },
        "item": {
          "id": "1c15b985-3c13-43d5-89ed-55e4fd20c333",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "be915da3-f1f3-472a-a21a-17d0e13e3a29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "781e83d3-7fbd-43a0-b2c1-6960f18d56f1",
        "cursor": {
          "ref": "073cf476-c5a8-4e4f-90d8-1e67b46af337",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "185a3b5d-e5c4-470e-879b-9762d9727ab3"
        },
        "item": {
          "id": "781e83d3-7fbd-43a0-b2c1-6960f18d56f1",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "72258491-378c-458d-8c59-9f1cc35dc248",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9669e971-7e4b-4867-92fb-10f1ca466afd",
        "cursor": {
          "ref": "352c74a6-f8f0-4f10-9550-22688d9c268c",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "2676a17a-d4f0-4c44-8696-b6a9aa77ee83"
        },
        "item": {
          "id": "9669e971-7e4b-4867-92fb-10f1ca466afd",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "7d3032a5-e9e5-4f4c-82cc-7038f6eff04a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cce06c13-5d88-44eb-8eb5-4b9ad1ec23f9",
        "cursor": {
          "ref": "04e3096e-85ac-4b43-9da4-6c848ee7af15",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "1abf3956-2dfd-451f-820c-0fbd589dc84e"
        },
        "item": {
          "id": "cce06c13-5d88-44eb-8eb5-4b9ad1ec23f9",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "1ad38f86-cba1-473d-9b4c-274d70b2e5c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "536b2432-2a00-4c39-829a-81c17fd5a6bf",
        "cursor": {
          "ref": "418f2304-0146-43bf-bef5-7c9574ffe7e4",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "e8e73313-6b86-4d18-b542-dceca9b3a620"
        },
        "item": {
          "id": "536b2432-2a00-4c39-829a-81c17fd5a6bf",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "08c3b62b-420c-4374-b13b-742255632f99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4452aa9c-483a-4ffd-b59f-816185c66757",
        "cursor": {
          "ref": "4af1f08e-c0d1-4e0a-a82d-8bda888b3ffd",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "b4927cbb-28af-4754-a260-e1eae37d1fe7"
        },
        "item": {
          "id": "4452aa9c-483a-4ffd-b59f-816185c66757",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "5832cdd4-386e-43a7-a8b0-02d8cf8b63b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29018355-425d-4667-84e8-1be26a4dcc9d",
        "cursor": {
          "ref": "e1dfc1be-6415-44c9-8d53-0e8b42d2b5d9",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "5e065eb5-b02b-4158-b626-4dd5b22e62e3"
        },
        "item": {
          "id": "29018355-425d-4667-84e8-1be26a4dcc9d",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "c4e8382b-1b0a-4745-9b86-b74096ef1511",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "702f83ad-e34e-4d94-a231-4d537cb3e527",
        "cursor": {
          "ref": "0d5fbdfc-b278-45ca-ab64-32d075860839",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "e6fda6f1-ddb5-4ca8-9947-7f7a17c5382c"
        },
        "item": {
          "id": "702f83ad-e34e-4d94-a231-4d537cb3e527",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "a28360d0-fc6e-4eaa-98d9-9c03103040db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3afc0f7f-2c21-4084-be12-3d1bf02a54a1",
        "cursor": {
          "ref": "addfc4ac-d84f-4f54-a29b-f42e153359bb",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "4f3f314c-828f-4a26-9814-21bec0d0bc45"
        },
        "item": {
          "id": "3afc0f7f-2c21-4084-be12-3d1bf02a54a1",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "30ddfe8a-997e-484d-9de0-21c208715d85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed9ceb40-06d3-42e0-b042-6f16b9f3ba75",
        "cursor": {
          "ref": "c9ca5ec9-29ad-43dd-8e48-280f79a2483a",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "df146da5-7208-4d6f-9ed5-89ed203ce64e"
        },
        "item": {
          "id": "ed9ceb40-06d3-42e0-b042-6f16b9f3ba75",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "a6663e8f-e322-4b6b-aa61-97145bce4272",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdd91ce6-5fc1-431d-ac96-d19bbd19f8ab",
        "cursor": {
          "ref": "ae5796d8-4ffb-44d6-95d0-cbb87c037163",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "04e38748-ffe6-4756-bb39-de3cf0eb1dfc"
        },
        "item": {
          "id": "bdd91ce6-5fc1-431d-ac96-d19bbd19f8ab",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "feebebf2-f1e8-45f4-bb43-b5679489bfe6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c51b71cc-d61c-4cca-a637-e9c5838eaa44",
        "cursor": {
          "ref": "cbe072d8-97b7-41ca-ae66-2173f89defdc",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "6d0ab23a-ca5b-4517-8e53-97cdc90b7378"
        },
        "item": {
          "id": "c51b71cc-d61c-4cca-a637-e9c5838eaa44",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "8b84559e-ecfa-49f1-ac2f-8d0e44f96bb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5087d317-f6f6-42ca-a572-3c3f0736ca1b",
        "cursor": {
          "ref": "d6f858aa-9b0f-4eda-b8fb-496813a60eab",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "1bf8f128-c0b0-4465-9dc1-9459bae3ed5d"
        },
        "item": {
          "id": "5087d317-f6f6-42ca-a572-3c3f0736ca1b",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "21353c4b-7c49-4773-b3f5-132b9d57a46c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6037c85b-2ac1-40f0-83ca-4223cc1d9046",
        "cursor": {
          "ref": "fef410bb-8343-405e-b377-982e7bd870b3",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "d96a460f-bfa5-4ecb-9300-4713a7a83540"
        },
        "item": {
          "id": "6037c85b-2ac1-40f0-83ca-4223cc1d9046",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "a3c4a3fe-1190-4b4b-9cb3-e7cc01819f62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7b5d320-f03e-40eb-8f6a-06339315b5e6",
        "cursor": {
          "ref": "fa3c8f27-82b3-4d6c-bf3d-f6540c9d1e6b",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "e8764f76-e6ba-404f-920d-c0ad8ef3cd29"
        },
        "item": {
          "id": "f7b5d320-f03e-40eb-8f6a-06339315b5e6",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "63652962-0e5f-4adf-ac53-af9d3c5affd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f76b28aa-5c4b-47b5-89c7-9db778bdf292",
        "cursor": {
          "ref": "93674707-e414-4629-bbd3-e2727eb56f87",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "0201248e-a605-4989-948e-2aae68c9670f"
        },
        "item": {
          "id": "f76b28aa-5c4b-47b5-89c7-9db778bdf292",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "c56d79c9-1a4c-4f70-8d47-0b74077e9347",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d05e4523-ff3f-4572-b83c-5a125a6c0448",
        "cursor": {
          "ref": "2acd258b-5b16-4dc3-a0e5-207e374fe246",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "1d29063f-29e1-4ce4-bd7f-578d1caae131"
        },
        "item": {
          "id": "d05e4523-ff3f-4572-b83c-5a125a6c0448",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "4c7f1dce-fb19-40b5-8517-ca64a4c78e59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4811dace-3e95-4fa9-8a1d-fd6a94366d80",
        "cursor": {
          "ref": "b2d38bb3-0657-441a-9ced-6a0b4bfbd228",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "3ce3bf71-7ce8-46e8-ae65-df2e2522a2db"
        },
        "item": {
          "id": "4811dace-3e95-4fa9-8a1d-fd6a94366d80",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "f5454c59-bcd9-4a17-ba6c-2d77c82271bd",
          "status": "OK",
          "code": 200,
          "responseTime": 113,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "fee88678-d2ff-487a-917d-81ff62185d12",
        "cursor": {
          "ref": "8981674b-d245-4c5a-9ac5-89d14f29ac25",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "cf023a5c-a4c6-4b4c-bc35-4e9a17ea81ac"
        },
        "item": {
          "id": "fee88678-d2ff-487a-917d-81ff62185d12",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "31979c20-ed3b-4c29-92b8-df6e608a7913",
          "status": "OK",
          "code": 200,
          "responseTime": 124,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "4f328c48-28b4-4cd2-be98-0da3b38c7662",
        "cursor": {
          "ref": "669cf2e1-9ef5-40d9-851c-05dfff59d59a",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "5af4c7bc-b645-4d2d-be6a-8b0e612cbafd"
        },
        "item": {
          "id": "4f328c48-28b4-4cd2-be98-0da3b38c7662",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "be9abfc4-36ef-4dbc-9b47-4cc360c3b820",
          "status": "OK",
          "code": 200,
          "responseTime": 131,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "220ec006-f273-4a7e-9a5c-e936770161fb",
        "cursor": {
          "ref": "64bbcc5d-c3c7-4783-9fea-ea04ad80136f",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "464a47f3-65c8-4ac0-a23b-66802d77e670"
        },
        "item": {
          "id": "220ec006-f273-4a7e-9a5c-e936770161fb",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "07700423-cbb8-4a75-b722-36dfc21700bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "001fb03b-d995-4411-8cdc-026ffd77dae8",
        "cursor": {
          "ref": "6c8002a8-9064-4f13-90e1-80cf8aa4c588",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "7c23f9c6-dc5b-4780-acd7-f7ac4067632d"
        },
        "item": {
          "id": "001fb03b-d995-4411-8cdc-026ffd77dae8",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "148f7221-8600-41e9-a43c-41714728d44d",
          "status": "OK",
          "code": 200,
          "responseTime": 117,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "953ea015-5e23-4491-890c-247ec1d74607",
        "cursor": {
          "ref": "78842ac6-d4d2-4dc0-9c14-ba25c0fd805a",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "1fad049a-092b-45ca-9fce-2db66ac7d94e"
        },
        "item": {
          "id": "953ea015-5e23-4491-890c-247ec1d74607",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "3a736326-9d76-4f78-a0a8-29cf4c130a01",
          "status": "OK",
          "code": 200,
          "responseTime": 121,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "0521bce4-542d-442c-b520-9ab3c2ebbd88",
        "cursor": {
          "ref": "61a84ec7-b555-4c63-ae05-e30d60e65859",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "5c2b79df-3b12-4bed-86a1-dd089c7820cc"
        },
        "item": {
          "id": "0521bce4-542d-442c-b520-9ab3c2ebbd88",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "fc913f15-6c50-4ddb-bf12-29de5e47b3d7",
          "status": "OK",
          "code": 200,
          "responseTime": 125,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "80abdc5a-643a-46d4-aeb8-57e2ff8845b2",
        "cursor": {
          "ref": "27186ac2-55a3-4b10-8a91-131a253dd8bc",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "e8b6a5fe-835e-4d28-a0f3-7d23952a2578"
        },
        "item": {
          "id": "80abdc5a-643a-46d4-aeb8-57e2ff8845b2",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "4706ac50-2591-4c1e-9152-b10965112c83",
          "status": "OK",
          "code": 200,
          "responseTime": 142,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "8239d1f7-c912-485e-b51d-12407615f4de",
        "cursor": {
          "ref": "ed6dacdc-c293-42d3-9ab8-a3be396d32e2",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "a3aecce3-1b23-4aaa-997f-12ee9f3dc58c"
        },
        "item": {
          "id": "8239d1f7-c912-485e-b51d-12407615f4de",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "4e654fda-22e6-4c83-83ce-158cafb2538f",
          "status": "OK",
          "code": 200,
          "responseTime": 115,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "b73313ea-bd6c-464a-9e26-38d0796ecf42",
        "cursor": {
          "ref": "f0fac424-5f42-44ee-ad3e-b337dd7c330a",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "365e0b57-19eb-4fff-be36-3bc5f3f737ad"
        },
        "item": {
          "id": "b73313ea-bd6c-464a-9e26-38d0796ecf42",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "0c796858-0dd2-4062-ad73-ce47f55b4d09",
          "status": "OK",
          "code": 200,
          "responseTime": 125,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "1db8d435-3928-428a-998d-cdda2c598346",
        "cursor": {
          "ref": "37ce3c3e-125f-4dd8-a690-321649d66d01",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "84d1ed8d-7272-4ecf-8ee8-f3ac793bd19d"
        },
        "item": {
          "id": "1db8d435-3928-428a-998d-cdda2c598346",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "793923bf-6647-496f-9ec7-61a25693dc11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48abc55e-c519-4a45-a868-8e860b288e9c",
        "cursor": {
          "ref": "91839bd1-d410-448e-a267-fa59916ec507",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "74a88866-ccf9-46b3-ae62-c414144f9fb6"
        },
        "item": {
          "id": "48abc55e-c519-4a45-a868-8e860b288e9c",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "2bb30660-348e-41a1-a827-59eca329be75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "956747fd-6b65-41e1-b8b4-6cd571f3458b",
        "cursor": {
          "ref": "b322f0c1-0e0b-4f34-8023-d34f9eafe167",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "180d1e7e-ef09-42ee-8ca8-778d3c2dba16"
        },
        "item": {
          "id": "956747fd-6b65-41e1-b8b4-6cd571f3458b",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "a63eba0a-4e33-453b-8582-f2a2f49694b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "333a8075-e043-48eb-95ba-e834e07289ed",
        "cursor": {
          "ref": "76eddc8a-1716-48ec-bd36-c44c8923d562",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "880f84ab-5893-40ff-919e-b04a2ae9d387"
        },
        "item": {
          "id": "333a8075-e043-48eb-95ba-e834e07289ed",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "867c3ce8-1db7-4350-aed8-64a963f477f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "382caaa0-e3d1-4b44-8873-8c707bb58b7d",
        "cursor": {
          "ref": "89cb96a7-e27d-47dc-80bb-1441d9c3e8ca",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "67f63148-1c53-4bbe-8077-9915090a9a03"
        },
        "item": {
          "id": "382caaa0-e3d1-4b44-8873-8c707bb58b7d",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "158a1cf2-92aa-4b0b-84e2-dd65ab7e1851",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cf58ac6-943d-4898-b99e-2d76360743c8",
        "cursor": {
          "ref": "70e17d5f-e793-445f-8ebb-c44044db7691",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "69707810-acb0-4034-94d0-19295aa70aa3"
        },
        "item": {
          "id": "0cf58ac6-943d-4898-b99e-2d76360743c8",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "4eee5080-03b5-4916-93cd-f28e46030f28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "685b6f8c-9c8e-4dc0-9591-71782ebc545e",
        "cursor": {
          "ref": "b3fd67b8-a699-42b2-927a-82400a880583",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "f961b93f-534c-4cef-b05d-184035f2ae0a"
        },
        "item": {
          "id": "685b6f8c-9c8e-4dc0-9591-71782ebc545e",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "49424dc8-d9d1-46a8-8a26-81104ce9273f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46a282e6-fa7b-43a9-a891-32031846a1b7",
        "cursor": {
          "ref": "2e54d806-dc11-4260-a220-7fb2eb30c4f5",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "1bf0a45b-beb8-4079-97b8-5bd9668ff4de"
        },
        "item": {
          "id": "46a282e6-fa7b-43a9-a891-32031846a1b7",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "e69c2da6-234c-458f-a5f8-8d37b14beef7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80f2111f-0255-4175-9ff4-33ae2b63cc2b",
        "cursor": {
          "ref": "713ca237-9c9a-4027-aefa-ff6c125c3898",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "57dbdcf3-22af-47aa-b17f-2df5ea3bae36"
        },
        "item": {
          "id": "80f2111f-0255-4175-9ff4-33ae2b63cc2b",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "44661058-c268-4406-8267-9fc92e665440",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9246624e-7697-4373-89d4-59baeafb4473",
        "cursor": {
          "ref": "1c76c213-f424-4507-8bb0-7ae94f6bdc83",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "91623a85-31c2-49c0-9054-9e27043e5dd1"
        },
        "item": {
          "id": "9246624e-7697-4373-89d4-59baeafb4473",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "01de2168-2a08-4cca-b2bf-c1493da30e9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8830242-2dee-4c7b-9887-459c572b364c",
        "cursor": {
          "ref": "dff42f83-ba77-467c-9422-706aa5f99972",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "57d58b33-b809-483e-9269-d5d751755ef1"
        },
        "item": {
          "id": "a8830242-2dee-4c7b-9887-459c572b364c",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "28df2bf5-d778-4230-89c6-9ccf17843616",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8aa48a84-cb8d-4c14-ad2b-cd675568f3c6",
        "cursor": {
          "ref": "b37612f9-b37c-4c78-a179-7c9db0301a97",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "0019a712-f3c8-4bcd-8021-c58fc7b418bb"
        },
        "item": {
          "id": "8aa48a84-cb8d-4c14-ad2b-cd675568f3c6",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "09e405c6-9052-49bf-8964-e12483672364",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "721487c6-0a1e-47e6-aef1-e83c4ce3e672",
        "cursor": {
          "ref": "ceadde1e-04f5-4c61-9d07-453e97f21b66",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "f7f4fd5e-bf5e-41dd-8234-320edf0f8816"
        },
        "item": {
          "id": "721487c6-0a1e-47e6-aef1-e83c4ce3e672",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "9150328b-c48c-4d15-b6a6-ca303e3e734e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "568a2943-3109-439d-9352-ba9b00f355d2",
        "cursor": {
          "ref": "b20191f8-4dca-4486-a1f0-804669ef7bf7",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "fb2e91cc-a884-4f39-831c-3b2577876809"
        },
        "item": {
          "id": "568a2943-3109-439d-9352-ba9b00f355d2",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "e546aa61-8c1f-4452-af00-d5e3f2545d76",
          "status": "OK",
          "code": 200,
          "responseTime": 124,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "a1aa6276-f540-47c5-9ad5-268319e6a523",
        "cursor": {
          "ref": "6cc2aac8-0eff-47cf-af38-877fe395a623",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "31c18cd0-766c-42ea-a571-80ea0f4315e8"
        },
        "item": {
          "id": "a1aa6276-f540-47c5-9ad5-268319e6a523",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "d0719631-6759-4eff-bfa8-a3f2febaca9c",
          "status": "OK",
          "code": 200,
          "responseTime": 118,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "072517ed-aece-4737-85d4-cb0cf47c9d93",
        "cursor": {
          "ref": "35e37899-65a0-4ee0-9619-d040527f37ff",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "581be6b7-5e4b-4e04-8471-8bacc7de056d"
        },
        "item": {
          "id": "072517ed-aece-4737-85d4-cb0cf47c9d93",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "144e93b4-95a3-4e5a-86f8-2ba68207a59e",
          "status": "OK",
          "code": 200,
          "responseTime": 113,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "4df2ce85-47c4-4758-8c46-8b28fae7bb48",
        "cursor": {
          "ref": "15119ced-4e31-4eeb-9694-ec01b737deb9",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "fc0bc600-0f8c-4cab-bba9-3c1d568285f4"
        },
        "item": {
          "id": "4df2ce85-47c4-4758-8c46-8b28fae7bb48",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "50f433d6-02d8-4e0a-8a06-13420d031b71",
          "status": "OK",
          "code": 200,
          "responseTime": 112,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "d61c6933-bbc7-4eb2-a507-95530c46881e",
        "cursor": {
          "ref": "2c537c85-f54e-45dc-9403-632c5ecd94f6",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "18117bd6-6a98-4786-852e-3379f42a16ea"
        },
        "item": {
          "id": "d61c6933-bbc7-4eb2-a507-95530c46881e",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "0839ae2b-b38a-4e7c-b3dc-fd37a6eb583e",
          "status": "OK",
          "code": 200,
          "responseTime": 132,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "c9f36a97-cd44-4f21-9917-94252a661ac8",
        "cursor": {
          "ref": "42cff3b4-1445-4bfe-b39f-e954748a1eed",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "3873de2b-f8be-4b33-a520-8c4f39cacfb5"
        },
        "item": {
          "id": "c9f36a97-cd44-4f21-9917-94252a661ac8",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "bfa2cc00-e648-480d-954e-c1012e9652b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f467cffd-55c5-41c8-8a20-aed3823b0999",
        "cursor": {
          "ref": "d155bece-d444-429c-b150-9d4775928554",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "6d9d95d0-c1d7-4f09-a668-096ed32ac46e"
        },
        "item": {
          "id": "f467cffd-55c5-41c8-8a20-aed3823b0999",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "95c67d35-bc42-4589-97c4-f8d4e1438da9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77b6e797-808c-4b2b-b51d-6554aaedda5a",
        "cursor": {
          "ref": "e97600d0-c727-402d-b98c-2619662b9cec",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "2585d548-a0dc-4d34-9076-906e2b157ada"
        },
        "item": {
          "id": "77b6e797-808c-4b2b-b51d-6554aaedda5a",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "92b401da-acb4-4c51-a49f-2be511166f41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebf8770c-5351-4f16-95da-66c6818c7a6e",
        "cursor": {
          "ref": "fd876405-9717-47ac-a1b2-ee311fb92796",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "d7295533-7b6d-44be-8f65-78995d9864f4"
        },
        "item": {
          "id": "ebf8770c-5351-4f16-95da-66c6818c7a6e",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "bdec2195-7347-41df-976b-a9cd8e73c492",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fad9f0c7-07bf-4188-8332-77c124a09b86",
        "cursor": {
          "ref": "fa106e5d-6a2e-4699-818b-8eb84f401549",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "15a8223a-73c3-4731-906d-fbe414f40283"
        },
        "item": {
          "id": "fad9f0c7-07bf-4188-8332-77c124a09b86",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "e01d90a8-bad9-4ccc-be93-ba16ea082926",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9caa7512-8aaa-4179-ae7a-9bb9b47983f5",
        "cursor": {
          "ref": "c48c5444-191d-437b-87d0-a23479ebf5e9",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "1bb3bdfb-d3e5-480a-a49e-ddd855cb05f7"
        },
        "item": {
          "id": "9caa7512-8aaa-4179-ae7a-9bb9b47983f5",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "d77edb0d-090c-4396-bea7-09273983d43c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46e5732e-2bca-4d75-b5ad-e85e0b9d3e63",
        "cursor": {
          "ref": "1a6f8406-4a05-405f-8ea6-e35a703e2ac5",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "83d76ee2-9208-4070-989a-3fd89f4e95f3"
        },
        "item": {
          "id": "46e5732e-2bca-4d75-b5ad-e85e0b9d3e63",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "1021b2c9-5d9e-46ee-b9ea-fcc1b29c331b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5399d9a-50ec-4872-96a4-ece57cb10abc",
        "cursor": {
          "ref": "ec895f6b-bc0d-4637-bf4e-47eece672876",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "7fb0f1bb-de83-4344-abb9-4c8fcb7ca0df"
        },
        "item": {
          "id": "b5399d9a-50ec-4872-96a4-ece57cb10abc",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "a8715230-a55c-4a22-aef3-99e9b764db02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c32d8c87-458a-4226-b5fa-e8bf2835832f",
        "cursor": {
          "ref": "b5bb3939-e9dd-48e4-b0af-4bfaaf45514d",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "2b0e6c1a-fb4e-45a9-9db5-8e960e8d6858"
        },
        "item": {
          "id": "c32d8c87-458a-4226-b5fa-e8bf2835832f",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "eee965ac-e87a-4ac8-bfc1-884b7abbb2d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20de70bc-d82d-4b2b-b370-567d2e6abf83",
        "cursor": {
          "ref": "0bef0777-8db1-447a-a54e-8e7d5d7bdef5",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "3c836140-18f2-440d-b3e4-8ed25031679c"
        },
        "item": {
          "id": "20de70bc-d82d-4b2b-b370-567d2e6abf83",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "f45493a1-3690-49d6-9213-d7b2c4557327",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae6f5e5a-f0d5-4602-b868-246877827dca",
        "cursor": {
          "ref": "5eb8abca-c35d-499f-a56a-e609f902b592",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "ca2bc14a-2745-4875-ba8a-f8e4665b9d81"
        },
        "item": {
          "id": "ae6f5e5a-f0d5-4602-b868-246877827dca",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "99cceea3-d77a-4377-b38d-e8de50bf9be2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7cf258b-9d28-45c1-801b-31fb141d2f03",
        "cursor": {
          "ref": "02325131-7c85-41f1-93cc-ef12112ea041",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "f27f813e-4548-4242-9203-7840ca892085"
        },
        "item": {
          "id": "c7cf258b-9d28-45c1-801b-31fb141d2f03",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "9be1157f-673a-4120-b2c7-70d93d59830e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e7fd9f6-0a74-485d-bdf7-be9e21a72aa4",
        "cursor": {
          "ref": "4d8cef25-9969-4627-b80d-3adb871a62ba",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "f55c029d-0f19-4ba2-8cc3-544c4fe8ed58"
        },
        "item": {
          "id": "8e7fd9f6-0a74-485d-bdf7-be9e21a72aa4",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "c16e3d50-7649-4c1c-bfea-2cede3eb5b12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb0aed64-7432-4214-97c8-540223d7ec72",
        "cursor": {
          "ref": "223657fc-78bd-4469-8437-bd74e31dde42",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "0def55c1-2c9c-4950-b049-f55148e7db52"
        },
        "item": {
          "id": "bb0aed64-7432-4214-97c8-540223d7ec72",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "59982ddf-5b76-4414-a803-0ae85ab3b836",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a24c4ade-7add-4f34-b4ad-17ef099b6a9b",
        "cursor": {
          "ref": "0bf3d26b-789b-4725-b156-c239220a143b",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "e2b371d5-c30b-4b45-9f94-239052db9e63"
        },
        "item": {
          "id": "a24c4ade-7add-4f34-b4ad-17ef099b6a9b",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "090f41e4-6dfc-4a8a-8cc8-6b21fc5baecb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05b789c8-5cbf-4a3f-a41f-839ff99e7677",
        "cursor": {
          "ref": "39a3a215-4733-4447-8e57-cde6ee25666b",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "b7dcaad4-b59c-4ddf-9129-11ed47e1f5d7"
        },
        "item": {
          "id": "05b789c8-5cbf-4a3f-a41f-839ff99e7677",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "3c05c01a-8895-48ee-a08d-efd529b384cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c970b53-19ab-4c70-8e53-ad6a3962c684",
        "cursor": {
          "ref": "f4a7b6a0-89a0-4b84-bd1f-4310ccc6a2d8",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "b5821a7c-d76b-4594-ac85-c0c4fa510df5"
        },
        "item": {
          "id": "2c970b53-19ab-4c70-8e53-ad6a3962c684",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "c259ab2a-059f-4f39-b467-3207d55424a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4f04246-96e7-4125-acf8-fb1121287276",
        "cursor": {
          "ref": "e7993c65-5a2b-4100-8f8f-dbb5b320f19b",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "a61df47b-5ede-4d9c-8b74-9c9bc6a886a2"
        },
        "item": {
          "id": "d4f04246-96e7-4125-acf8-fb1121287276",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "3b6aed9f-2744-4df7-b2c0-c5a31dfb0f81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f26823c5-d72d-46ff-93cc-8a5c89d804da",
        "cursor": {
          "ref": "98ac8e0d-a631-418a-bfb3-aab1fed3be88",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "7a3ed4c1-978d-46ff-a6da-9dc93789f9bb"
        },
        "item": {
          "id": "f26823c5-d72d-46ff-93cc-8a5c89d804da",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "06ff0316-207b-432e-be30-5f1512072ff2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7eef195-4c82-4afc-9d02-7e593b155ffd",
        "cursor": {
          "ref": "cc869b14-9bdf-48d1-8ca4-14cba586a580",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "44816dd1-f8a1-4fea-b420-38f665141844"
        },
        "item": {
          "id": "b7eef195-4c82-4afc-9d02-7e593b155ffd",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "3ce2951f-4acf-4ebb-a775-dc899e72fb0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5276340-53dc-42d2-9ae1-3db740666ae7",
        "cursor": {
          "ref": "5999342f-5e98-4a41-8286-52d8a03f5389",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "6ffdcc35-2847-492d-bb0b-9cf475bbfc4c"
        },
        "item": {
          "id": "a5276340-53dc-42d2-9ae1-3db740666ae7",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "13393254-7b0f-41c7-ba5f-e432708c2cd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5463b93f-3583-410e-b313-273c74ca8344",
        "cursor": {
          "ref": "9470395c-56c5-4869-afe6-4d878abcfb81",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "8a3ba4da-4ce8-49a4-a221-4af87ca43b2f"
        },
        "item": {
          "id": "5463b93f-3583-410e-b313-273c74ca8344",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "d0debe30-c9eb-4d43-a475-e079f8eac4e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f1d2ff8-b435-45f4-be3e-a0d0597c0dd3",
        "cursor": {
          "ref": "f6720c5f-fe92-46cf-b10c-c3b1674fcd38",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "4e10b480-760f-482a-b102-69ba3c847128"
        },
        "item": {
          "id": "4f1d2ff8-b435-45f4-be3e-a0d0597c0dd3",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "88417327-f903-4661-b408-8be096ae70ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41350165-aeee-4c28-8650-5e8ad0c2902f",
        "cursor": {
          "ref": "622904a3-9376-4d2a-99d4-338b1dbb2a56",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "215444ed-66a2-4fc7-9939-a6e622d5d045"
        },
        "item": {
          "id": "41350165-aeee-4c28-8650-5e8ad0c2902f",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "3b6129c0-b620-4186-b65c-217fdb98436c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6adf437b-981d-411a-b5a2-f65b215a1607",
        "cursor": {
          "ref": "e39072eb-8a79-4139-be4b-bd2e1b275ed6",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "de162ddd-7d24-4ee6-a6ca-b4207196869b"
        },
        "item": {
          "id": "6adf437b-981d-411a-b5a2-f65b215a1607",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "12ec72fa-30a4-4ad7-b12c-a5c8f27e662c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a37e26f-8fbd-491a-8f2b-e04b803d96fb",
        "cursor": {
          "ref": "bfdb7323-ecfc-4ca2-b947-361ca7a03445",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "f8b7572e-143d-4bc4-84ba-e52c4d1b7a65"
        },
        "item": {
          "id": "3a37e26f-8fbd-491a-8f2b-e04b803d96fb",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "8fd6772d-f0ca-4687-bc22-3842b10b536c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "625e8c63-f033-43b0-8214-2751a1ec2251",
        "cursor": {
          "ref": "7967db0c-5964-4b45-849b-0f5e51f8c055",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "ea940e59-7193-4ed7-9ec9-baf0c66946bf"
        },
        "item": {
          "id": "625e8c63-f033-43b0-8214-2751a1ec2251",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "16179737-009f-4970-9fe3-808db8aafa22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10ab177a-3f6e-4217-9117-ce8dfce721a6",
        "cursor": {
          "ref": "06127902-461e-47ce-8ebe-ef014d62827b",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "5ef45f17-67ed-4fec-b995-6b9b52650f76"
        },
        "item": {
          "id": "10ab177a-3f6e-4217-9117-ce8dfce721a6",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "502b7430-18dc-4c38-b614-8106b4c846f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a55d1dce-114f-4b3d-a495-948ffbadb8b0",
        "cursor": {
          "ref": "35a237f2-967d-424a-9cc9-3ddf3cd96c38",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "df38f8a9-17c0-4364-a870-38e18c55ea06"
        },
        "item": {
          "id": "a55d1dce-114f-4b3d-a495-948ffbadb8b0",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "6fd610f2-5776-459d-b7c4-0a127cf434a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fc1a5a7-b0e9-484d-9593-6329b58ee549",
        "cursor": {
          "ref": "f34ea93e-ac69-469f-a027-68057f6a3994",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "fa780207-9213-463b-b4c7-85c4aad7d336"
        },
        "item": {
          "id": "0fc1a5a7-b0e9-484d-9593-6329b58ee549",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "3767ddcc-5493-41e4-a53e-b403af06d636",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42376425-d56f-444d-a7dc-e06f39f58970",
        "cursor": {
          "ref": "6c7d0c98-fdaa-4f21-9e9e-25b128ad6fca",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "95d3de08-9e02-4977-bc08-2782e3f49c10"
        },
        "item": {
          "id": "42376425-d56f-444d-a7dc-e06f39f58970",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "9229b8c7-521d-4569-a548-b3f1c7a08ea4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed0f3df3-c926-40b1-b2ed-f1d56baeb02c",
        "cursor": {
          "ref": "e5a447cf-6b1b-41dd-b50b-7af1982919b0",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "3a19375d-63f8-4b3a-b7b8-a19a405b67e5"
        },
        "item": {
          "id": "ed0f3df3-c926-40b1-b2ed-f1d56baeb02c",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "074d8ba5-38d0-4960-87c7-c061a321b57c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0f6ddbc-6958-4bf2-bbaf-6fe40bf9d52d",
        "cursor": {
          "ref": "e8bf7e20-f75f-4215-9629-a5a9a17b57b5",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "b74d2238-f49d-4603-8e46-8e34be68e888"
        },
        "item": {
          "id": "b0f6ddbc-6958-4bf2-bbaf-6fe40bf9d52d",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "33508553-f87f-40aa-a5da-173ea861a6b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ae851f3-7332-4ecd-b2b0-fa38a3ec5896",
        "cursor": {
          "ref": "11b692ff-e1b2-4bff-a7f7-4e7a980f0f5e",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "00f086f0-429b-41e6-ace5-e65853fa7884"
        },
        "item": {
          "id": "3ae851f3-7332-4ecd-b2b0-fa38a3ec5896",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "16c42eee-0ba8-4cef-bff3-1b4debed0957",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf0f8036-a31e-405f-8679-e716197e6fcd",
        "cursor": {
          "ref": "b13ac0a9-8f47-437d-a8e6-e304aaba37c5",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "83acc38e-f0d6-4064-ae9f-035bfba1fb0b"
        },
        "item": {
          "id": "cf0f8036-a31e-405f-8679-e716197e6fcd",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "ce975077-7868-4aad-b0f2-4844855bd1ff",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6410e34f-1680-48ab-b985-dfcde2f4030b",
        "cursor": {
          "ref": "f8571b3d-1aeb-4eff-b389-517fc91ea8fa",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "3f5bfc32-769a-4408-88db-0c768a2ce2ed"
        },
        "item": {
          "id": "6410e34f-1680-48ab-b985-dfcde2f4030b",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "2ebf8ddb-1617-436b-96ea-0445f886c3bd",
          "status": "OK",
          "code": 200,
          "responseTime": 107,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "7377ff5b-a8bb-49a2-a565-accd07fdac87",
        "cursor": {
          "ref": "bf08277b-57ae-4d9b-8634-086310c6ad13",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "c52137da-5b82-4edb-886f-014f289733b3"
        },
        "item": {
          "id": "7377ff5b-a8bb-49a2-a565-accd07fdac87",
          "name": "credentials_verify"
        },
        "response": {
          "id": "55d4c87a-cfad-4dfc-9600-4d810d6501a9",
          "status": "OK",
          "code": 200,
          "responseTime": 109,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "0be83d1e-20d1-498a-9cc5-c98fd8e2b46a",
        "cursor": {
          "ref": "8d404580-c343-49c1-b122-442f2d006de6",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "b905d2ee-043f-44a7-be45-d7cd91cb2cbb"
        },
        "item": {
          "id": "0be83d1e-20d1-498a-9cc5-c98fd8e2b46a",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "40796632-a2c6-405c-be6d-4dcdaccd4638",
          "status": "OK",
          "code": 200,
          "responseTime": 145,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcc623f1-6fb0-4dd6-9acf-41ff9bae7454",
        "cursor": {
          "ref": "6f4c67b8-b8cd-4cbd-8ba4-092895d3c01c",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "4b859b81-3f12-4e3e-a1af-f1177b32f104"
        },
        "item": {
          "id": "bcc623f1-6fb0-4dd6-9acf-41ff9bae7454",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "f56c0f89-4240-48e1-95f2-1c9e251d4ac2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcc623f1-6fb0-4dd6-9acf-41ff9bae7454",
        "cursor": {
          "ref": "6f4c67b8-b8cd-4cbd-8ba4-092895d3c01c",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "4b859b81-3f12-4e3e-a1af-f1177b32f104"
        },
        "item": {
          "id": "bcc623f1-6fb0-4dd6-9acf-41ff9bae7454",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "f56c0f89-4240-48e1-95f2-1c9e251d4ac2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "355763e4-2c2f-42fe-b51c-e90bc4acc499",
        "cursor": {
          "ref": "456c7e82-7d6e-482d-9981-373afccb3401",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "a9018fed-2d6a-40d7-a940-d7054a96ee21"
        },
        "item": {
          "id": "355763e4-2c2f-42fe-b51c-e90bc4acc499",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "76705a57-8647-4a06-8a3f-8aa6a21ebdcd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fb32996-564b-443e-8899-aa37cc5daf59",
        "cursor": {
          "ref": "78a1eedc-8ae6-4493-9ae4-3a3e5d21eca8",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "72eb888d-f479-4f7f-80e1-128668db2f5f"
        },
        "item": {
          "id": "0fb32996-564b-443e-8899-aa37cc5daf59",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "1ad240be-883b-4c8f-b629-af25c4da6849",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}