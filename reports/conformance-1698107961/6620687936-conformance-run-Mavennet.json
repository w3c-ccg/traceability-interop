{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "8a5ed203-45d4-410c-8017-293d534dc0f5",
        "name": "Clear Cache",
        "item": [
          {
            "id": "35eaf5f0-6c9a-4bdf-a02a-0335ffc25623",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8f6142cc-9ce8-4d85-967d-7d5e6d8f437c",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "50d7b05e-db85-4cae-bc07-70b85c4476c6"
                }
              }
            ]
          },
          {
            "id": "7f2b8672-a7a0-4dd8-806f-b6942e00eb39",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8a5fb78f-12f6-4778-9b8b-cc4f60c36fa9",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "e310393f-19e7-41c1-b80c-6e3a9951c892"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "c3f5a86c-10ca-4720-a428-e77032a8e975",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "908fcfac-18e1-469b-ba1f-2695a74ea024",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f760db71-3e3a-49c5-89a3-ac1bd287c18a",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2b8e5eb0-18eb-406b-b927-7d7bf820543a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "10f58b10-3463-4a20-b1b6-1b918b9fa0b3"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ee88700f-b67e-44cc-b3a7-3dc3fcf526a9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d949d4c1-5b90-46d8-a519-3f6d5eb22e20"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e38d5edf-b046-47c4-9760-e30d9742e36a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ecc03934-bdb9-4738-bbe6-327626ed3652"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "816c1dbd-1bf1-401d-9069-999d3d7a08f0",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "51329a51-a1f7-4d8d-98a4-e44d182d96e2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1af725ee-1609-4144-bc5b-b0c0007693c2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "74d2590a-bdbb-4869-ac89-65f6f215842d"
            }
          }
        ]
      },
      {
        "id": "adbbf50d-95b3-4d25-8c01-50158aeb5f01",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "673efcad-68cf-46f8-9c72-663531dad08e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "71dad948-6528-45fb-bdca-80fa8248749b",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "7020d5a6-c6b5-4f97-bdd0-ec3f19a21a03",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35c5bc4b-a630-45c0-bcd2-04b836419c98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "54068b01-5b18-48a4-bbbc-d291fedb3b51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3f971fc-3dba-4f7e-8f05-6769e73c52ac",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8253e01f-79d7-4da6-ae43-82f7cd266394",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "56a19629-c5e8-4830-a56f-3b19e616adce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18601c77-6771-4dd3-84d8-32e9a77dc691",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e848d129-3a9e-4fd0-915c-eab6abd72aa1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f7e77daa-0d9a-4723-8d03-abc210855354"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "1d6a2e08-c5e9-457d-ae3e-7277b940b7fd",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b4b1af3b-a3c2-49ad-addb-bffe1acd9ffb",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12a8ee31-2bb1-4dcc-87b8-1015e5a693c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d7f59789-0d84-4d82-8b6e-eb0cb9a913dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "734925b6-6986-4935-90c4-e7e33eed1e8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2915df65-e5ba-4b8d-bd81-75639a10abaf"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "b03e59db-a51e-476b-8370-7a3fe286fae8",
            "name": "Positive Testing",
            "item": [
              {
                "id": "5977543c-c3d6-4479-9582-8ef3e139698d",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2f638657-cf85-48ae-b692-762bfc7ba1c5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "89e444b0-69be-4e33-9570-0309de454ab7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "df0d5236-a244-4e9f-b40e-5cc49174deba",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "ac43c2f7-cb46-4995-8eb1-61c479e2579e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8d7fa968-e049-46c9-adae-5504d215a6ef",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b0d35633-cbc6-4f0f-b502-479790d85c08"
            }
          }
        ]
      },
      {
        "id": "e8ef29b1-1b72-40fd-bd73-43ac10a2c87f",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "9bf6fe2c-7be2-4f25-b3b0-d23de65db800",
            "name": "Negative Testing",
            "item": [
              {
                "id": "31f8f284-34ae-4d64-bc2f-bde49411ec7e",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "17aeca3c-c3a6-4b61-b7b4-94c88279c35e",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5784d70d-d6c9-404a-8057-90b9759cb62b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ace2ae18-e49a-4eb7-859a-6070cfd620de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fff0862-2764-4853-8585-80ce9e67334c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "daad24ef-08fe-4966-91f9-74a57024d8dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5eefba47-a8a3-4f3c-b42b-ad58f785dc5e",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7bec807-60cd-40d3-83b3-9a1f9f3d225c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11978466-189f-44fb-88ad-64afc0c20ad7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ee31707-0d42-403d-8e33-b90c808ec514",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a2105e39-4ddf-4dae-adcc-138f44a9c6ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "722d9de2-4579-422e-be5c-cb3e208a3f07",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ee46357-ca43-47c9-a9b1-e8256a71917f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13e93190-ffed-4a1b-9465-604fd48bab23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "608adb87-bc1a-46ec-8710-1db5336165e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e1b6fbc5-53b5-4152-9722-d76c0cbe4ad2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "800625e3-3b16-4d0a-a730-025ffc1fdf67",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f01f678f-d843-4f89-ac52-221fe89572d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "260af147-9d28-4405-be04-19512dfade0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73aad131-5445-4c13-bed2-230947a84718",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6e2f7159-d2c5-47fb-850b-09d72627bb26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7be4f864-498d-4f7d-87c0-28d906ec43a2",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3100ad02-4a5f-4f4d-b7c1-a33a560f650a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e39009cb-fd97-45ac-8d38-0f905ee7717c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d85a4784-0f7a-4dcc-a643-26929002a49c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a47bfa58-71c1-49c9-8c99-e390ef53ce5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1920fd16-24fc-4f3b-9942-ed609c6b6d47",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ae03c93-54b0-4227-852e-0a6a8e45ccbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f727da28-dba9-4e2f-acfc-5f3f9810d197"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0fa2a5d-a06c-4e9d-b708-ca2ed161fc03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "86bead52-3f80-4a79-bad5-704201d5ae5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15587291-e9a7-44d2-93ad-0c46bc7cc1de",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1c4d372-0748-4704-9e8e-fbf077a6f243",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26755470-74aa-458f-997e-2a3f7f51d330"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5de77dbe-cd48-46f4-a462-7c4ff68e493b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "32e25dbb-e0e1-416b-b987-98df956660ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "383cd5bd-c3a4-442d-acb7-b1ced3d5f4e9",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2b9353c-6cd7-43fd-800b-9209ba4ca426",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fe2c5a8-2ca5-45a0-b29d-dbfc8659ef7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c74d73c4-99d6-4b0a-a58a-467e14190c22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f0a47fce-7d22-46f5-b134-777203fbc32c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2714c4c-a2ec-44f2-a895-34fdfcfd577a",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1ad021f-8f59-4d5a-90c3-4a4a763d658a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1334254-957f-417c-a699-5d25f1ae9c26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6c81700-9060-4f82-aa8b-9983a1826280",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "41679429-b153-478d-8f16-115b6ddc131e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63131ed0-aa84-45c9-b541-68b3e3db5373",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e23de28-e8b0-4537-bd95-a2e83abacc1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3fadd02-2b27-427f-9285-002cbf76ad03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04e37dbc-51ef-4da6-9039-b9927a34d22c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0698adfc-81d6-4d6e-bee4-f0a444828430"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf0ab5fa-73b6-4e86-af81-3c6df38d6c5c",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80234c4c-96ff-4e89-a3f6-dc9255131c3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ee3a128-9643-4500-8279-a9149e8f6e15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebeb24cd-0e0f-4c24-8e4d-399243685938",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bc2906ff-531f-4319-8f32-e539afb6bfed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac9488ed-afc0-4f52-83ce-9a3e87c99aac",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c921752-296d-432c-98c7-229dfe459a74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6574f6c-5f75-4c6f-972c-5b93c6e3a8c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46b233f9-f785-4996-aac4-8953b01c2fae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ffde0f8d-bbc1-4fe9-9122-2809036a367d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ece4b38-d1dd-4930-8d12-c07dbe050a74",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "315fa8ac-3ef2-44f8-8f32-4adf3c676117",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc3c512f-9ea7-455d-9f23-40fbdf9a687d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "352e5f53-7bbf-4a89-98a1-b7c13062e3a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3e24ce63-dd96-472c-b2f6-d76455e59883"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e2a734d-9541-4568-8b7e-7e20aa876f93",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2eb8035-1ac9-4eb6-b01a-06f096b4fe16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d9164b0-205d-4054-8e3a-cfd3c95a4299"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de34eb1e-4575-40c7-9a0e-eee98ae6dc56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5b27255f-77bb-4fda-b9df-deec89ec03e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbc01283-e74c-456a-b2f1-a9c8cd584fc1",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1b8d020-6054-42a0-9a4a-0a27ed22ade1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a7285e8-a678-4a9c-9038-57b9063205d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "449abe81-d6ec-49d0-8918-f6bb335b46f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f35fb95e-42b7-4d8b-8477-5858bb237e27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77e633cf-13ec-4d0f-b693-6eef3833cf6c",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed65d880-ccc3-4191-9247-db5951ee8d1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8997ae40-44dc-42fb-b020-c5f6207be653"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a70cecc4-e7f1-4664-b9cf-0dbf8bbaf369",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ae5eeee3-c185-4073-908d-a2d9ebcb1d76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1addda4d-c7b4-4cff-9f33-03e9de58ac01",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec94dcad-7e6b-4ce3-986d-34a15af9f625",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "951d6704-2ed5-419a-8d68-5f0df48fac28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "292eda33-3baf-4d4a-83c1-568a5eee4b22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5086f6b0-ff91-4809-ad43-902841349f43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddbaf0f4-e754-4253-9b53-90ce76ce9665",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b43bc87-b3a3-401d-b837-6daa96b84c53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a721994-5ced-43c9-89a9-da62217a66ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a64b55e9-b0e4-4a78-85d6-d7b40a6d0f3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "fdf0b9c6-a0f0-4a03-b666-64cbb2c50e09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "597f4be6-8eb3-4d2a-ba4f-17e8d8b526df",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0474db83-1b01-4319-972f-ed557687fb21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe49668a-d683-4c1e-8a14-28cf644e5689"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2566e3e-c345-4ca1-b256-0e28d9fe0bd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f13c86a6-a9c1-4a68-a90a-4131b3830998"
                        }
                      }
                    ]
                  },
                  {
                    "id": "868350dc-9d7f-433a-8352-2c942c4b520c",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d2a9db0-df95-47c6-bc56-76c7ef14626f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "179ecc72-9efb-4849-bf74-462884e3fd81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8e2228e-410e-4fc7-83e6-841163bbdf6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f301dcd4-60b8-4a4d-8113-ee1d628814b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91b4ff29-32b4-4899-bad0-3824f243ff70",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abdc6d90-d9eb-469a-8f0c-9e1c737d712d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc2666ac-378b-4f63-ac86-616e6cc28626"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20075643-95cf-4489-9d3b-44bb0755dbcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4728dd4f-af7a-4962-87f3-9117d59d8b92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f514840-3302-4152-8051-83d5a2f55918",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00bd5018-82b8-4d2c-a73f-4b9244722228",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d89aab8-2e99-4472-93c0-43255f8baac5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c92f380f-7fa6-44b8-a8cb-9dc7e6975b23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "dc97cae6-9064-4fa1-a3e8-8d5785f449ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92a9ace9-a16e-4a55-9d99-e24292069fce",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d7b13a8-02ff-4514-bd06-9934655fa5aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3e507bf-8636-491b-aa80-5a950e1018ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76f70e62-451e-4251-86b4-8b2a0dab1a98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "859fb952-34ba-4fc3-8327-691aaa8aa55a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d5eef22-b809-4d1c-9b71-84af29f8bfaa",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94f314a7-e58f-48a1-8aa9-56f4bb7813ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa9dd6af-6680-49da-8aba-098071350e87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b8c3c34-ae73-45ca-ac17-dd11e93504c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "c52ab72a-f665-46a1-93ed-bc9d891e8d75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fe385ba-de1a-4c12-aa0a-4c09171f00b9",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4564c566-238f-4096-9210-bbbed0b485d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb7fd54b-3b53-46fb-a004-7305533a7b5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dee7275-0187-4517-a5c3-15d79b0f8cc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1bb72656-1e97-42a0-8d37-4660bd0e4e43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e76a961c-6bb4-4df3-a4fb-e8142f10a3d1",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68264af8-80dc-446d-bd27-64925914cc0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "500e2945-b806-4400-a324-1bef22e8f5e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1886f19f-ffd3-4eb0-8002-4d5b746b70aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "53b7891e-201e-4cd4-9aa4-12b60b635de6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9f20fb2-b606-4c88-9ca6-33778bf02140",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc60cb70-8c09-4db3-bad6-18d492173932",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9dffe0b-8f1a-44c3-8ead-c937b41a947e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82a0252f-711c-4966-aa59-25f6320cfc8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "af2b683d-fdb2-4be2-b488-6e3e39302897"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20a206bd-fc6c-4556-9f89-63d12f538168",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb481f56-7893-40f3-af00-066654ce0fde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67da45cf-d322-4ea0-9007-047145845879"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0aff5a28-e1f1-402a-bada-138b2829b5a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e866ade3-59b6-45c8-975f-2adbd683231b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab11ebe0-ae74-40c2-a46f-bbfb0633e2a7",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1329715b-11e4-4a85-b6b5-38f998e9907b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75664133-d538-44b0-a5b8-53fec0a12d84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67c6787d-2dbc-404a-ae81-d269ff749f90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "36800d36-0011-4615-92f2-fabcafd04052"
                        }
                      }
                    ]
                  },
                  {
                    "id": "853c61b1-5f09-42aa-9f5a-1d6420f7aef3",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42bc7445-c8a7-4963-819f-8bbc84c200eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42a5844c-8a52-41f5-861f-685a4e0e3347"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "568ac542-cacc-4098-91f8-7d15ccedfca6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "75174771-c144-4a95-aaa0-db0024f7164c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da5dca05-19f7-4348-93ac-bac096177771",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58a62601-75e3-426d-9353-b26a48e35760",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "779fb3e9-ce1b-4842-98d4-5d9421964116"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db1144ce-b799-4d51-a057-48b36d006755",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4300b6f8-8c3d-40f7-9e1b-53d1ba60cca1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff8418f5-e229-4756-aaff-4fd35f336974",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d70561c9-cd85-4322-87eb-4b3619415ce9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "340249f6-ab2f-40fc-940f-15d038a91672"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98d61390-ee97-46cf-9acf-d6e31545bd52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "108e3571-3a87-4eca-bd25-d7e131204db7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73425e00-b8da-4664-8c29-d3531cfd6007",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7557741-3cd6-48e8-a448-39e82f20faee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c6be0d3-7862-4920-80a0-750b89135427"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd20a113-046b-4f8d-bf1c-eff0d6f8938b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "efb8f3f4-46b3-49fd-b098-e5e054b18caf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ff53add-4ef1-4fe0-a2fb-c3314668d357",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dcf0f65-eaa1-41f0-9d12-cac137618780",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c5d71b2-3e0c-45c9-9f09-ba68180d83ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6120ee39-24d6-4d01-b384-0b048d8009ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b4df92cb-faae-4c94-b58e-345cec140494"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3856fe43-b013-4698-934e-576e615cf16c",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff393b1e-5c44-4f77-9bb9-2277f8e5d8a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16b5f6b4-2cb9-480e-933f-0792821bc71c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21dd13bc-70f8-46fa-a636-1a42767f29ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "a4db6a16-3735-4825-ba93-94df8540d525"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5485345-4e6e-4d39-acea-337126b129cb",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c051146-b44d-4c0a-bec9-ed3489976dc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e9fa6108-90a3-483c-8ce2-129ccdfc7fb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a51bc16-4fdd-4151-8e50-0d2760b27ab3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3963c808-c881-4db6-b98a-d30d57207bc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30cefe90-7da5-4f1f-a99e-10f55814d7e6",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12154142-6560-41f5-abfb-8313557ef9b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d18c36b4-b8ed-4442-9753-0b46e0ab9bac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6e0e79f-8763-4fdd-be49-a80beac0524f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "46a09071-1ecd-486e-83ad-6a4b3fdc77c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f1b48f3-4234-4b3f-b1ca-704fbbc7f76d",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f8b59b4-e43e-43ab-95d7-baa2d7aca70c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12e9150b-43ce-4a88-b711-766014a7636f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec159b5e-1434-43f7-87fb-088c5446f0c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "5bedaf25-e710-4231-b3bc-1824e35faff5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "968b3a17-2a87-4958-9be3-319836f770e3",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6497b0eb-65ba-4a77-8971-dac032ed8596",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d3235de-1095-4b14-96fb-4dbe314c7749"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fccf8d43-de22-4570-b13d-a2b192f27aed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "0e01d418-8455-4e29-8533-5c58c776b04d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20ddb092-50ee-4cac-8447-22a0c45715c0",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d08a876-62e2-49f8-bf49-d7f165a8bbd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9926bb16-123b-495e-8425-bfa292c56cd5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a501746-3d52-4e70-b5ee-b91db4d91bc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "1ded6ef7-fc60-4ea7-8c19-e5fd8151edf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1bfc099-b200-4c92-bd64-d766490cbec8",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6e8c50d-be3d-4577-a732-6d8836aa0f01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6572a0d5-4cdd-44ba-a47d-dfff3a4975d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d1ac832-35ff-412e-8602-98a82dd24383",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "027218a8-2a44-461d-87a5-53b34d9c5bef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a69bda5-88b2-44ff-8313-72c6bbf904c3",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1749a2db-463f-400d-aed6-0d04d1078bae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7460b5e-1272-4eaa-9490-7bc3a8ed84e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32a04dbf-b5c6-403a-bc18-1e350b868df9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "922f8020-74da-4c29-91fc-730afd5c9eab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50847704-78cb-454a-814f-8f8ffc912bb4",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "830e6de7-ca26-4bd9-9c73-8d556ac026be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f145144-9214-49b2-a653-2fe239555c17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3b6c62c-1f20-4049-866c-58df793e444e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "3c6a42be-2e1c-4650-bb5d-9087be86f40a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84ee2a91-18c9-4a99-a75d-a958a5f65a3f",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2884a470-ebe3-4dd1-8f76-44cf63a3c6ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c4abefc-8383-46c4-9853-e21dd972c645"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "560852d9-ccb4-4fdd-af2c-d6eadbb0108e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "ce9f9fcb-def7-4368-ae45-88976e9e84ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "252f09db-dbc2-4ce0-a563-212c14a43076",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55659ab7-4407-464d-a775-e9c4a7785f05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28d23755-a788-4cf5-9acd-2c4280e9d995"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6db40754-1396-4389-b9ce-0a44bd05c86d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e3021e39-dab1-4921-8ce1-147700ea7776"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf3eb8fe-d24c-425a-a1a5-8c78a9b9dc74",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "693c5471-72eb-4190-bd77-f5d5d732cb3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab5b7f55-cc60-46ba-9798-db2a59e1aa8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d2f4e81-f076-4a9d-8057-9d04a91b9cac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "590779e7-0c6a-4c4a-9038-80ff2af95e93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d379983-3950-4573-ba93-9a90144c2635",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3e606c0-b961-420e-a1d8-a0c16144c850",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f676cb30-1d14-403b-8f28-9437ded8f087"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58138062-aaac-4f19-85e7-e76ca316fad2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d5bf17aa-f845-47a9-81cf-0a9f26266e64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4663ed0a-6119-4c98-8b7c-deeac63556ec",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a028d35-b273-4832-ba5e-1a448669b278",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f0ce0e9-4089-4c94-a8f9-604aa4426dc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4db0b51-ed16-4374-9641-ce71429f8e37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3bce4d08-229f-497f-8953-71c1d3cf030c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ce670bd-71db-4a45-9c57-e49e3256f4d3",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6b7c4d9-24f9-4edd-bfdb-cdb08c363a7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd0acd71-6bd3-47f7-84e4-6ebb0338d994"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a792516c-da5d-44ed-95a9-45ed4981b8b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e206496d-3934-4c10-9f6e-39a432ec42e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c487704c-111b-4503-b3a8-eb0d4f14e6e6",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "071dfcf2-306e-4cca-a01e-501aa3cade79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5be971d-54e3-496f-93bb-3e5af8754a64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d4eb68a-d1ee-4e5c-afa3-5ad0565e951b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "23550987-86ba-4629-90fd-a503f3064a50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "799b19b7-8d0f-4b7f-8aae-9e57180276df",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "220ae099-3547-4bd3-ac3f-bfb6e6b563f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7da16c02-8370-45bb-94d2-53031c4537b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cf1c81c-e585-4b17-8019-805f16d8d6dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "45078b26-2eca-4b6a-9144-3f94fcb33ea4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa0b5871-805a-4191-9fcf-5a50e8b3dbf4",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db6fb5ac-f083-417b-8348-62e24fbcb6a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31f43070-d7df-4f32-bd62-b27853de05e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e6b0cb9-294c-4da7-819d-aa8b1bd4aede",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f0393e59-3cd1-480a-bf7a-9e630de0f836"
                        }
                      }
                    ]
                  },
                  {
                    "id": "661c58cb-5cf0-47f4-a386-16c4bb64a113",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf8d5102-2b1f-46c8-8b87-05baba1e8ef4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6582dded-4647-4be8-8917-07cca291fadb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1697603-027a-4fc5-965d-8757e33c8a32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "da2f7a79-f259-45e9-ab46-4831d99367d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60018931-a607-4960-ba76-3610b041eb1c",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48131d96-c31f-4f19-a331-009160ab427a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4616c59c-b674-4b0f-a49f-0c62fa8f75a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42ec1f65-4627-45e1-aeb7-efb03eddfd07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "65fee753-c8c1-44c3-bd8e-e90abdff7c75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92ac2be2-4fbc-4dbd-9f71-f9460d2b804f",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b3926af-4bae-419b-8b40-a7897a492879",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c20a440-65bc-4171-b5bb-0791fe9c10ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2552f2e2-85ef-4dfa-913b-0d7ed18c9d3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "84641098-beef-4e45-bc1e-48919cdd7512"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d5928db-ae70-4671-b92f-dca984454062",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3196f30-75fc-48a1-8188-d6226de26b72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b075e57c-0c10-4595-8773-9c7b77a5bb41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e38c5b77-5d1a-4508-acb1-efff788c102c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "5598ce8e-026b-4d7b-a1f6-95f79ecdf818"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b385575-2fdd-4a42-8185-9c63f23ee40e",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51f3e562-9b10-4709-846e-6ab63c2db2d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "850d962b-1134-4d21-82bf-a5c7419c2be6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e729eb2-f10a-45a5-b54e-e76eb0c53113",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "cabc7189-f089-460b-84a8-2228d23e55f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c893cafb-dff5-4674-8de7-ce5ba6ca8fdd",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a99f91b2-15f1-4f1d-b7c5-bc121d3d1ed0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "835c94e0-ef23-4509-8412-95a476d1fe4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d21768e4-0874-4eb2-ba39-57807f0ea842",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "254dd0d4-549f-4015-991a-edfb4bad982f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dbd4bd1-f302-4122-9e85-f4f8d2d582e5",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9de90f2a-196a-4ba3-9f22-5db27e62c768",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "498b5ef5-e2e5-4100-9a92-311043e481c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2397268-eb8d-4ede-8bdb-ba5dcc6ac305",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "6e503e7a-8594-4ade-88e7-a11a41774b58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a3a74e1-39a0-4915-838d-5e4d8c555ea2",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "747ad9c6-df3e-4854-83a0-7db35e6eed9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d37413a6-3813-4c4e-873e-25f782f9084a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d066ee4-2043-4f52-9309-04b56d92be2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "92dbeaff-0dc6-4d67-b0d8-85df9ff569b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6782a105-0c7b-450f-b716-7f720437ae30",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "566ddf4c-0b97-4b5c-882a-0ac41739f4fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9c82adf-6e0f-4392-b97c-274bb469325d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c820ace-5ea5-4b22-9907-cf68bcd6f2dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "de6b7a5c-30c0-4899-96a5-2e83a29941cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a85033b-d792-4549-9c59-6296eda8142b",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c1988de-b4df-4367-b3c1-09cecc9fb995",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b69f99f-1f69-4572-b9a0-5491b17a5979"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c55d15a9-89f2-47e8-95ed-9d0afa78c62c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "9d39a756-75d3-4704-9bb5-41677751b224"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0742ce49-21b0-4af3-b251-40b9445cc991",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5237de7-d861-457c-a20b-2a7c23e1e6bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc76f9a6-ba4b-4e6b-a14b-36873dfebd72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a80d37d-1315-46c4-aa78-922bc27b8d4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "dcc855cf-30b2-4789-81f8-d0e3217cfb72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4fafb25-31df-4488-a4fc-a68423732860",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3831bf5a-8ef7-4490-93fa-7172442eb10a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ded86652-e826-4738-8f32-ae17fce52fbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b27204ad-777c-410d-8f17-a779df412716",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "367040ec-1953-495e-ac87-9fe04222efc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f55f6594-e8e6-47a4-95a3-17da8d3aafba",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f7be17b-4828-4a67-a4e2-7f2b9788e686",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec6810da-0661-474b-9160-3705b2b35c06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0bfa7b5-9236-4788-b6dc-9a3dc15db624",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b4260f45-03ae-4672-a4b2-4621d7c6a080"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae217fe3-7bf5-4bfd-9f35-67ab09977dca",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a62a3b81-04c0-4027-ae0e-503837e3398d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2964cc2a-f0e2-43cb-a9b0-953bac256696"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f841ffd2-26c3-4d38-8e48-8624948c5721",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "62c6d129-1e45-4a71-ad00-782448b079bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc044330-0d9f-4fc9-84c5-b6fd9f8c12fd",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28c6b143-382b-4c60-b7ec-b2f22194bb87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9279adf9-6d42-4422-b1a0-f6a6131d1981"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7de360f6-c5a8-450a-bd3e-aa37f9410fc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bf1dfc48-4054-4e9d-9f35-7e4eb9fb5f3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2104fb42-3be5-40ba-bec2-303ae2e4d073",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f46a7f8f-305b-4b12-813b-cf751e003939",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41a1a328-be77-4306-8441-d49a98bb9348"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b169df8a-3c28-4d7d-a961-918166281e4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "fb64f605-a8ef-4901-a527-aeb1d194e247"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fadf940e-7f86-4859-aabe-0b4165a399d6",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38b140eb-386b-4475-bf4e-17308f15009e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20609e51-a015-4104-bc24-47a2db7425f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "460cb575-de17-461f-9e7c-a624bf85f979",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "c3e9b8cf-7e36-4d27-83ba-4b52a2bb0e14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc6b3c90-8a1f-4e20-ae3c-952ee12ceb83",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8270a33b-1165-47d9-bec0-757367f6c0b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00f4a4f0-5c21-42b1-b2b4-dc5dce7c9a78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2256313a-1e9b-4044-8966-404e928d6691",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "64f57ffb-7efd-4d3a-b3b2-58cff220b5a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "988ad8e6-3c72-4781-9e7e-03174de529ae",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3db71335-13a2-4acc-82db-780829027d0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0e141c7-a9de-40de-b7bf-e225a569a114"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "806a89d7-4984-41d7-999f-cb1a0292b833",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8c797bd7-8590-4ab1-b558-2c48f138c8d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb7ebc91-77c6-43df-93c3-61bdb0396830",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecb325a1-5f20-4018-a70e-6c220764edae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49c692e4-90ec-44f0-8b4d-df27d52d4622"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05ff966f-6eba-4210-b32f-cc74605557d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "dafb1c8a-cc4b-4da9-9845-c001908b4eca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23193163-f99b-4669-9bd4-b41c8f1df194",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7c265fe-c6f7-4000-919b-d987d436dd26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a66f3a6-983d-4fd5-8d87-873e39edce20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "129504da-b2fb-4345-b0e6-7ea4084b22f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "57d829c8-9cb2-48dc-8160-dc1af86c69c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4044968-737f-4414-b2d1-47c8f49b66c8",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "915b72ff-2a50-4a93-8eab-656f2496eb9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15e60f6b-79ac-4d83-8653-56c4c977ae63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5efec25d-0240-4593-bfa4-6ba0cba2ea8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f1981015-1b85-446b-b78d-2d5c7876e89b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bafb9cb-6ce4-4c2b-ac4b-97e53809128d",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "674beae0-234d-4e24-81b0-e25997861862",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "790a3780-5ea2-41b6-9349-87f5fcbdb800"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2e291e0-f195-498b-8aae-9f058e135910",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "652a2f50-6a17-45b9-b97c-7d28bfc5ea66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50731f36-44b6-45c2-b34f-affee35e4467",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e94c064-214e-404a-a20e-1f555f6e885f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "769cd86b-91f7-418c-8cc7-6e389ff72d9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf83ba1b-29a2-42be-b630-0dfba9e8e348",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8b89aca8-039d-4a28-b1ad-875ddc0de74d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b41e929-fa28-4d47-919b-aa3e8833c1c2",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49e72768-ffbf-4dc2-b273-d82313b90234",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11c7f012-7d64-4ff9-b23d-b4b5b9e00e1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9f80b92-22e1-44bc-8150-6ef8114777dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3bd7298f-7ca4-49d3-88c0-6773f4716a35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52e0ebac-43f8-4cfe-9be7-4013a908fcd6",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30d32052-205c-4257-a884-745cdfcc7082",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f1bb015-06bf-4b1a-b20c-851ee0130595"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87778801-87e8-4d40-b5b5-4cb16318b6fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cb50b7e5-0cba-4c73-95da-f528ae9f46ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "989afc63-9586-4991-8bad-7e2e279cb3fe",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9a4eccf-651a-4fcb-b9ca-f1934eb52ca2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30111ad9-f394-47df-931a-58c9d9f406a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2778a96-f046-4e16-b69a-7f71d0b7434f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2ad6eaa8-86f3-4dc8-acba-8fdf1473d2e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea1f2626-db8c-4291-bc73-22ec21853e3e",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6256d210-bdf7-46f8-badb-f1bc418ca95a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9359bfd6-510c-486c-86c9-55de51f3cd5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83ec649e-05ef-44d9-93fa-fe707c97ed60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2d1d113c-8435-4df5-a66e-d90e53e27f46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67b451e3-4d81-40c6-b724-96156d15ba9a",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52e5011a-4392-42ab-9069-4ddea346485c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ecf492c-6e2a-4872-a4f3-3041d3abdec8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28bcc715-b32c-4451-8a11-a4e56401db06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "30dc8adb-fe07-46a5-b979-f2d99330c788"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89110bd1-71ad-4662-aa24-eaa48926ea8e",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d86b79e4-317b-4823-9f15-904c10a806eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62986d03-1087-459c-9d15-94eeec7c6f84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "780139eb-4b99-4255-b459-94b6e6448c44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "597c52f0-ce65-4b19-a521-d2c9ad5c9cd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "109ecaa6-f4c1-4a80-9a3a-f67742f683bd",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62d025fa-3f4a-4fb9-a357-c7f0c922381a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76f9e57c-57ad-4fb2-a1d2-50ed7e98b913"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbcc6a23-329b-4c49-a267-ae2b82d58baf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "43d194dd-94b8-4bb3-82b7-dbd95fff62a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44a99984-3800-46c1-b2b6-f5fc316513d6",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfc6afb0-5939-43c3-af0d-902b0428029b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18646c3d-109d-4db8-808e-f39450e2374e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23cbc386-e974-4282-97e5-1a9a4d92b5dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a9aac12a-c8cc-4b84-802a-06101e1d7d40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ffd4c25-0609-471b-9a63-5988c26cb9b5",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1e4a524-cd39-48d2-add3-6940cf8f250f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0650eefc-3136-49e7-b5c0-a88709263027"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e876bca-a661-491f-a6da-02a6dcea2ad7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "93aa8892-d48b-4ba7-9d57-e2e906c6fcf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da0abc73-625b-4e7b-ba4f-4de644941528",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2942e734-235a-459d-bf4d-29e24a67d29d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9804764-dd09-467e-a7a1-36673dc6c3fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3576ea2c-935d-48b1-8ef1-fd0f4de3ee9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a14c263a-1dc8-4399-8d39-f5406cf6574f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "433dab32-86c7-4855-ba85-b6fb3c26a944",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f24543fc-80d5-4315-91f7-a213a2bdfd05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6167a700-82b9-4d01-9b2e-dbf1b2ab21a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bce3838-2ffa-409e-85f1-10502d0b62af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "6592b6fb-62ab-4873-b116-e611f3bb320f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df085547-684a-43cc-a511-89e82b8e4316",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e28f9a69-6f1b-4b88-8317-326476b762e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1517ee7c-0503-464e-a0e8-3dbffcfbbd75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c55552a8-432f-4ccd-8823-8398beb33d38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "548eabc5-de86-4bf8-95cc-4a488049dda1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "815677b3-b877-44c6-a9ef-467bfcca7437",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adb83b9e-c033-40ae-b784-363ac8058eef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0c47611-45bc-4ad1-9ca8-6383df16256d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52b3dcd3-7d78-4413-99a2-b648440c0f0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "a5f24a60-b5ea-438c-b8c3-16e7ff848235"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c2191d6-c9c4-4a39-a361-8e22bae26a72",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "314d2d45-646b-404a-8681-74defe7081e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a01cd3e6-daef-4dda-8e97-db7148cbb349"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83f7318d-3e01-4d7b-97ac-66a013eb77b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "2be46037-82e3-465c-9498-63c2883a0dc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e006a4f2-3759-44c4-bce9-1fee9e40d3f1",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68abd252-cb42-4895-846c-ec58b2ff782c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "411798aa-454a-43a7-8e68-69e0673c5685"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "857f8639-b22b-45b4-9ea0-3a3b902b14db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "c7080f99-0d12-4549-a98d-aa97825536d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ffb1baa-ed35-4ba9-80c5-aebf716118b2",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f1c7d3b-d8f7-445c-8c3d-88492bd1521f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "6be33d3a-f447-4fa9-8614-64084c13447f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c3c214b-8637-458c-b383-b2990f8e3581",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "b3b0c0a5-13cd-4ee4-82f8-54e2e446638e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "8a991104-d36e-4913-96c6-0d0473f2fbe1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9757d954-2382-4e52-8c75-329e14d9142b",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1c4e801-de09-48ab-bba0-db08a7cb3b94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9d5226b4-966b-460c-b183-d608ff1d7555"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73a5721c-6754-47a3-8bb9-f946f86bae64",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "483a2e32-dec4-46e8-8239-259c34a79967"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c9094d41-874f-4777-beac-95e1590fc648",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bc377942-d36d-4751-89b5-69e48a9c4cbd"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bf543fc4-2b97-434c-a9e8-5d88aff63b71",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "33953e2e-9b2f-40f2-9c75-2042343f4677"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "053ad74e-3622-437b-8a83-2453251d85d7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "08749e7e-34d7-45d3-80c1-21d9b055d872"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "2f4857cc-32f8-4096-bec0-af68f9f06703",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b123b988-708c-4153-8053-b43c7f77fff6"
                }
              }
            ]
          },
          {
            "id": "61637339-347e-4758-9de6-7aec510b3b31",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4d6dc81c-e736-4617-baa8-31422fca69a8",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "24f5a6ca-5767-491c-bf7c-3cd15a735f75",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ace3e47-b880-41ae-82f7-f00588450dfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "75d01368-8710-4d63-9ded-7ef70a2e949a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5011b0d9-9ed5-4fa3-8f92-9fd76836434a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dace88c7-a357-420f-99db-fd31e610e4a0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "20eda294-877c-4870-ae4f-4b5ac69922d0",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a2bce813-eadc-41bd-9bc8-72a612139ced",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1e11ae11-619b-446c-99a4-6535867df746"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f4fd538e-95b7-46e0-ba3e-e20d995585cc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "cde163b0-7931-420c-adcd-51d0aee8cea7"
                    }
                  }
                ]
              },
              {
                "id": "97048d7f-a8b5-4355-a740-24097d63fde5",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7088b1f6-65ec-4646-b7e9-d9e11270627c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a69cd589-ed47-427c-a067-b49e43e5c459"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b1ab7bd2-bd3a-43e2-81b1-727d28e1f88c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "5ac40fb3-65f8-4630-975c-65d6bcdfa0d8"
                    }
                  }
                ]
              },
              {
                "id": "0a126978-e37b-4274-911a-07a1585dcbea",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "448533d7-1f19-46a6-8cbd-e9e389ed8fb7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "57fed187-c266-45e6-8c8a-683547c49e79"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "82d1490e-9a13-4dc1-bc02-f5f9c4a93bac",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "bd419887-f7ac-48cc-b67c-620a276368e0"
                    }
                  }
                ]
              },
              {
                "id": "ff3783f6-5500-4ee3-ba53-1b865e8a4383",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7cfb1465-4875-44f9-9333-71d266c15a12",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a09e5b45-b988-4c09-a878-b7fe4f75870c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "54a4bb19-4e32-444f-9fa0-178eeae2d172",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "7a7a7e47-a5f8-45c7-a455-9b9892332f8a"
                    }
                  }
                ]
              },
              {
                "id": "6b4520c6-ddd8-4fb4-bd3d-336d28ecd26a",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "caa42314-fd73-4102-9d92-3a1379f70e43",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6ed5ff38-2f91-406c-be1d-d726966233a7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "793b473e-2aa8-436f-a836-ab5433fae56a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "2eb3d383-d136-4008-92c8-88336cae900e"
                    }
                  }
                ]
              },
              {
                "id": "68555ca9-a25f-4fd1-822a-d537f4487e46",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d232e6fe-59e8-4512-bea1-96f751604c61",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5b0af18c-77c1-414d-a5ba-8d945f204ea8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "93d34183-d385-49fc-9575-eb47bdc5022c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "8f5f7527-e1f6-44bf-a51c-f623600c9a35"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1e486285-7757-4e28-9de0-6d5f69b4f571",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "603161a5-4b99-42e7-b05d-0a6e80e3b290"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "8095c202-d11d-448f-9230-53028f459be7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6c7ab87f-a92e-4ba5-98fe-4ceb6ddc5105"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bee24e87-fa94-4560-9a72-89f422511406",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "f8511934-f1b3-4e2b-a825-9578bf19c349"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3b5876d5-553c-48d8-87d7-9777cabbd900",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ab4f62c3-273e-4877-a990-e3fc9d7fd23f"
            }
          }
        ]
      },
      {
        "id": "3418e461-afe4-4147-9296-c4d6af085e77",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "3e644f99-7519-4ff8-a3e4-88ef7fb3027a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f81badfa-0f4d-4cce-a293-fca73df891d6",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "3e83cd68-be53-4bd2-b877-d613ce3527a7",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "043ac985-48b5-4cd2-9519-e34357bc7923",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b00ade8-9eda-49b7-b9c4-7b93edcb5a55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d68e9aca-6494-4c4d-be41-ad506970fec7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "ccdcb1bb-d0e7-42d3-a3b2-f5a713cc6bbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "365a0ed4-1c94-45e5-a04e-4d86dcb5bf77",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47549346-ad27-44a9-bf67-a39089f6d6a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45ed6aa7-39e4-431d-9615-1b0b2f678bb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d6e641c-70c6-41ae-a29c-346e6e8c071f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "876968cd-fd33-4141-96a9-09950a8535de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3091801-0ee2-4242-9ca9-7e11c21b80f9",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1733e81d-2be4-4145-8e49-5a92eddb51fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa5cc483-0443-475e-8493-ff3134bd5731"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c2f9d05-4eb5-46de-965f-5a15545b1f51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "86d51ae5-58da-479f-9aed-b9af2285bb57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c3961e9-ed4f-4c1f-a7e4-d20a6c64c035",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9442635-4bfc-407b-acbf-89ee84ab011c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "836b4808-3ee2-4fdd-b47c-69f675f6b7bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5247bfb4-2d82-4ba6-aaee-84de1db57faa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "14cd33a8-c9ea-4103-9d99-564a14c98265"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4808a577-9d79-436f-9dac-e6fdd4dca470",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6cb4d7b-7d2d-404b-82f0-22b519472de8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "172b8dc2-8598-492a-8a34-d9872f9148c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c26cd356-19c1-48d1-8c37-2b91ec1a4fb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8f4a000c-d6ab-4881-a6dc-c568c54befe5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e75b893-506c-467d-88d8-84cce5e90009",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e87f1fb-d73d-48b0-b2cf-79d0f564cfe0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1cde45df-f268-481e-a837-90fdf5e9373a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52f5a83b-90f7-4aaf-b60c-e835c3f62340",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0f14cc7c-30a1-40ad-bd67-8e37f1036a8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db52694b-609a-41a4-ac22-cfa83fd9900f",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d19704fb-2317-437e-8310-1e65dc26767b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf0e9b8d-a340-40e7-a260-bec3f18eb7de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d477e546-1102-4569-8ff9-69d0c4eab9c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "8e4e31f1-b266-4a93-808f-9585a5071a55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bda244a5-f19c-4795-8d43-2de359bcac68",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8041b0e-2ab0-45d2-aeac-5da317b7b225",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08f1d804-ffa7-44c4-ba00-bd2025052623"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff1f6848-3aea-4c73-a60f-1c54c76ceca2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d346dd39-99ec-4581-8c09-f43e09bddc4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53e3b501-93e9-4614-8795-42a8e0f024c4",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21f064e4-68d3-4d7a-b1dc-f8273540b2e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6798c2d5-1bbc-4d70-9793-f7e7840308d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed6c4ad2-1e50-4665-8431-09cb0d93f6bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1d9a2b14-2fc1-4eb1-ae86-cc3385e61786"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d1860a5-fb20-4986-833f-d66589a62844",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9cf7967-1c7b-4ad0-99b7-d0ece6ccae64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f8cb1b0-d1ad-4065-a1e1-c558cc46dad1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1d62e48-3c38-4616-9796-0ebdf190cc3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b6cca1db-f65f-4a8e-8f08-0d16ae4586b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c782f7b-7731-4349-a81d-17f0e2a10920",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7362dfb-10b1-49d6-8b59-5cb5510e4203",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60a5ae11-4c00-4982-bb09-9647c40309fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ced3a1dd-8f34-4366-a5f1-3fa148c006eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "20ff5713-fa93-4ba3-b9d9-1d628be26d9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e64e9b33-8cbb-4674-bec7-0551eb922020",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41edfbba-7406-44d9-b079-f8c8cf1a0551",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "816bb027-dd6d-4a9a-b98f-73cdc767dab1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a28633ad-1ea7-4236-9efe-f930d32765ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9c95b536-5724-4f78-a30e-e0ff9c23f33e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "633e49c4-97e8-415e-95d2-9d0d37d37187",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76d8b654-27fb-49a0-b24b-c3b690c4fe2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e538115-6908-4b79-816b-dec45b9de1e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96bebcf8-9100-49f5-bed2-3271e0fec54a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "47890034-54fe-4a71-8ec9-d07cec30fd39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5794824-97e0-4bda-85c1-b3228f3449c7",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63885ca8-9692-4b27-adda-0129c9031565",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8eb399f-e4af-4f9a-b555-bbb4bc63b15a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51352356-bc09-4433-81de-cbe1f82f1c04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "a755d11a-e2fe-4c2b-a572-6f3471d03250"
                        }
                      }
                    ]
                  },
                  {
                    "id": "addaf0a5-669a-49d5-977d-8a56a8a2ccfb",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c003be2b-91b8-4f7a-9789-fac3ee3eb499",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84814b7b-99d8-4194-9507-7447de5bf099"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96639b9b-f200-41ca-8c9c-04fe33451069",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "cbfb5ae4-7870-4807-b1c0-7bd2bae03a95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96fa45f7-4a75-4baa-803a-71641077694c",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c46da3d4-cde2-4fe9-947a-737ca6681af8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8dda567-b650-4fce-ae1c-62f403624388"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5eea6af9-54fd-477c-b132-fc674818e9ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "006bfd5e-bf8d-4955-918c-81ae73688fee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7d3f3d5-d375-4718-8fc9-a4aca5f9ad5e",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bff4fe9-652e-4911-8bc4-971f6c3fcd47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16bd2101-f69b-4c68-81a3-f46e2b1921fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19d05053-7687-4602-b46e-0bdeddd472ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "6a21648f-380b-44e4-8dab-c1461ad8d8a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77fe7c63-1f56-4d1a-8422-0736883c0111",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1849590-6e14-4ba7-a60d-64ade24c4a8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0852fe23-87c2-4b54-84b7-1c056e0af878"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "704254b2-cbbc-49a2-ac7b-438767c4d3fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e933a66c-8d00-43fd-9e26-60f41c173ded"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2cf6487-5246-4292-b317-690ecc11d2dd",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fb7d9c6-7edf-406d-bed0-3089a6ab1254",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17b1f4ff-766c-4fd5-a7d2-eee5f43c99bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33b48681-9414-4286-a1d0-be0b4c3604fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fcb9a298-5239-43b6-95e8-308f0d439967"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1951519-c3e2-4841-817e-927f507793b0",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b968565-b954-465d-bb13-57442ecef186",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8997307-2d20-42b2-914c-e6e13242f658"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c72d49c-2d00-4686-982e-2358c24a36f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "18be543a-daf3-470b-81d6-5e4a5483eee0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3ddd8bd-af34-477a-be3d-d99b254313ba",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c66fb94e-d4c6-4162-bbc5-5016c0b09f97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8677687b-ad77-4dbc-8906-d47d32d3dda5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad9e895c-1834-4c31-abdc-c816c9ca7010",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "89fe0689-f840-41ff-ab25-31ada298a2e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd944089-239c-4655-8f56-5d95b2bf7948",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ca656b4-fd18-4b42-9bf2-fc88813a5211",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9bac2cc-c690-43c1-a2f0-1f88e23a771e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58809589-481d-4355-ba50-dc6340774e33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cfc3b8ff-5378-4870-a405-99d4f38fcd58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "deb7eb9f-02e6-41fd-bdf9-85c2ad7e19ad",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d7b0b35-d90c-43b7-b541-2504970f9aa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e41f024d-c4cd-4f1e-8c97-8fb00e2eb6e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9f5e21b-c2a6-436a-a1fa-90f79babd01c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3eb51231-562f-42c0-940b-004628086701"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90892e24-2b6b-4f59-b9e3-5ded941e4a57",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e615c53-d95e-4cbf-aaf7-9afe2192158b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36d48195-8e17-419d-8158-059e70fd70da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "446fe173-5d2b-421c-b77e-5572e9af2756",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3f75dfef-a913-4a37-8e03-dd4e94ccad00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e5a57e9-0b28-49ad-9e91-e3ab395bcee0",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df4b009f-50f1-4e91-8e44-65dcc7e0d2a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fb672b5-d8b1-4d92-80ae-81f793026959"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "791826ac-968d-4a01-aada-b169e82e7154",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e982ec92-33bc-4da0-ab41-61df1da51bde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33a8bbbb-9c49-4353-a6e5-db4f0fc7006e",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3eee79de-77eb-463f-8186-b34d35dd6000",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2adce0e-4127-4d44-809c-f1cb22adb1da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9144040a-90cb-4bb9-8a5e-5f9122e7bb25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8b48979b-0900-464a-adad-36d5ace355d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f6d1dc3-a16a-41a8-92f4-8f3cb70c673e",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d90f6fdb-1166-41ed-9932-63740acf9b7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "055a6625-72b5-4538-b5da-25e1a1543899"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68c36a94-d164-481c-8eb1-a31d014c88fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "22bc72e8-8522-4dfe-9f67-f6414d68b6bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea9ec69a-f15b-4ea2-8f76-a1a45dce7418",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81e68368-306b-459d-98ab-ce0f129fc488",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16f878f5-ffe0-4453-9fd8-1719865a32d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8527325-b854-4f50-8f44-b4828360fd21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f353be7a-04ed-4ed3-b25d-49d98af3d777"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d39a06d1-f3c9-47fc-935b-08e304b420f5",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0136a134-2d26-4434-82d5-ae41cb0e955a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42e3ed52-08bf-4579-a558-b5a17da8cec6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec4f626e-f8a5-4763-8782-dd900403b2a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4fcdb55f-f612-44dc-b27a-120c67936ae5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c1e51be-590d-4b9d-90a9-ad44dc74f792",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f683a6cd-0614-4091-beae-5bc3b180f9d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f44cf9d3-5853-462a-991c-f213674be3db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "debb95c1-3904-4a56-9a9c-5c51a9d6ff22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "519ede3b-58e8-40ca-a287-0e63d65c1f33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f62f4e5-07b4-4ba3-8d8c-0911a2fcad24",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50d1c41e-3b5c-4540-8cbc-1dce8a02dc8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f7cb96e-6e8a-422f-b078-cfbe0be37f4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90026d89-062e-4ea0-858d-c788f0cd9d57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7466ca6e-3986-4ddc-a2e7-46233542d09e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9c84f57-2b29-41c0-9599-f8796955d47d",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2371907c-d4e6-4c48-ad91-c6428af29cc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96985a92-47c3-4b4d-b1e1-0496376b68c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffd1892a-2bcb-4ad4-a2de-b134a1b7c210",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6e4f2839-384f-4252-a387-30561a7291b8"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "8abdbe69-7301-4303-b8eb-64baa5da2289",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cfa68806-e812-4a62-9cd0-86544ab636f3",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9073f015-084f-4145-a7f0-7fcdc80ebdce",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "c92881fc-912a-42ad-b6c8-d552704102a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "580554c0-d211-4fe5-883d-04ea4943574c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "eff3d25d-2644-40f6-96ae-a28d5544ea51"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c4d8581b-48f8-432c-a0a1-27e942ce9950",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3dd2e592-0571-4c34-b4c3-622733879668"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "250e4cb4-af59-40ae-adbb-212554c33953",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0b0c1f57-ca25-4ff1-96a5-67718b4e0991"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2b16fc2e-1b0e-47a3-8a77-1f1a7d3e9625",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "705b5136-be57-407b-b677-ed0066f3ed34"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "36339cd0-01ef-4283-99d4-e8bf1751d483",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1c6bf8f4-80bf-46a2-966f-3a8b667875ac"
            }
          }
        ]
      },
      {
        "id": "0fe0f18f-e502-48a9-b811-5cd241b2bda6",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "32b653d8-fa11-4ce4-bcf1-e7d31977d241",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1a67c2a4-40ae-4dd4-bf5d-db7b18a68866",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "d1cf4b30-a0f3-4591-929a-7aa09f9dacdd",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9563978d-aab6-4470-99df-4698c0abc991",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09ba27b4-f562-4644-ace9-7afc4e1a4f74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "255e7bec-f5dd-4ea6-82a0-a5d327a7cac2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "cfd0266c-9fc4-4121-b593-f267281a57fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3072532-1984-4434-a7c3-c176ced8d21b",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95202332-7356-46aa-b57d-c6caf0a7e006",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a08b107-183e-4f38-aedf-7eaaedf62dc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57a29a3f-ed38-462d-ac92-07ebd83037a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "87b1930f-6b9a-44c0-a73a-7381c6d433c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1eac2d21-a2aa-4917-9342-e19aea3a3967",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e4b2aa2-8086-499c-b72c-7ec64706ad7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80063d13-b00c-49ef-bbb6-bfbed80e656f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61dd3fe2-d5c2-4bac-ab24-bbdb0b0cff90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8cfd2ab9-883b-4293-87af-2cb98d8d145a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76f5e16a-b3e3-4812-86b7-e680077e2ba9",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc34a502-2b78-4265-9433-e6dbf66a74da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55b65755-c6e8-4433-ae25-da0f35193166"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c728cfa2-4e7c-4d29-9289-8646e4ace73b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "535ebd32-7390-4b5d-b85f-638500600838"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12e1a065-facf-4203-8759-61b4bf361078",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93e291d2-0c41-4dcb-bb37-f3e387698e61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bc3d03d-a99d-4cdd-a1c2-d0b8ffb19440"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16c61114-6758-40bc-ac87-264a1abf7305",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5a82c183-9c85-4d12-b792-8424b8251f55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49eb8810-9178-45f3-9b14-e0e6b174ca77",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35519245-90ee-4a22-acea-745283bfd674",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5915e380-d036-4b15-b4c2-7dea221cd604"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "857211ab-583c-4db4-9a55-daf56719e703",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "096bbfd6-8977-4d1d-b759-561e51c867f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da0ec63e-1eaf-40e6-9262-b4ff795f12b3",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97ca07aa-9f14-41e9-b200-3790339b1ebe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f9607c2-bc4f-4aeb-bea6-106591b9b5e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7609639-52a9-456a-9fba-de5f10f7a5cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "c7f5ebe6-9bca-45a9-ad8f-1c8d4ff536a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10c69385-1b9d-499a-ae43-dd7477833a52",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa1820ec-04d5-45c6-87ef-138b90956617",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23e86f85-f015-4bf1-bb18-05a3f0fa789b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dfdea63-d3a3-44a5-8d8e-c3d40d08c1d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1d68750f-bcaf-44c9-ba3b-f1e199737a50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4af218b-4ec5-43ba-87de-a6eabf4e7e68",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a43a8b86-e527-41c4-955f-947f95512a66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "faa6bbe8-32eb-4350-b802-eea7050a02cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "171d307e-97a9-4028-821e-abf8f219d563",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "61dc9a3a-89d1-4caf-ac64-b7294b254de3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65eb28b2-478a-428c-9b79-586de0a81eb7",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3aff920a-3d83-4dfa-bcf6-cff802710250",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8be2b89-2b31-411d-a0f9-a90339f67b01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59b72781-bef6-4925-a035-662a8a3203bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "29d7d08d-9a39-474c-9a1d-b7573aaeb13b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e3e5820-6a92-4d7c-b256-b38eaf45ee8e",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6081b1bd-69b2-4df6-91af-b9be6cf70d10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e3a700d-75ad-4f91-b7fe-799d87924d3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e033e612-f410-4fa7-bbaf-f90cf3f86996",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "3a9f65b8-742b-4798-a3e8-6804e2998b04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e53c428b-64c5-4234-8071-db599a06b5bb",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "896ba18a-e1cd-49ab-8f1b-e50e5810ee76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b9b1c78-9361-4e0a-b2c3-cbda36b26d4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96edc069-dab4-497b-b187-b3693329aa98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5a0365f7-970f-4cfc-af7e-f7c9e9da27a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5909f2cd-aa31-4396-92c0-68407922cbb1",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2e596c6-5ad8-4a96-982e-8732ee4b56fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aea7d97e-da2e-4831-8f4c-18b029373000"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "266f7504-72a2-4f31-8b3e-54ccfb76d22c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "266ed4cb-3f8b-4a24-817c-48a918e040f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54503343-c4dd-4513-8e3f-97bab66a2c48",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb979b7c-f299-4c57-ac0f-026d6761a5c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99b4d3c9-7fcb-44c3-94d1-5c6aa2d8e337"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "616f7850-3974-4678-8725-9f81a0894c58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "cc3b92c1-c1d4-43c7-b561-4694223e4805"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f93d9f7-fba5-4764-87e3-2922dc174b25",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0a5abb7-a040-414b-bc28-fa684e5181a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4145b06a-be31-4dcb-ab13-a32e151f3036"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3ba38f9-8f04-4056-9b14-31d69062cb04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "42ef91ed-b9da-47a0-a869-1bea03737b4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a86475c-3542-4d99-b62e-6b03d948a6f1",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21b9f5ac-fc9e-4f13-adb0-99c7f5e948a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76089c91-8f6d-409c-b7f3-1a26394f6f37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "500ece0e-6ffd-4982-8cea-2175e4942eb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "17aabf5c-2ed0-4cf5-85a8-e01911266828"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76f63984-91c8-4db7-8ac3-c91bc36815fe",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a76ee91-b4e8-49fe-8235-7c8c9ca3f216",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7a9287c-17e1-44d6-801e-1bba3011740f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67a36e6d-4a39-4f6a-8c8c-1f1ec1e2bfa5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "b4ee9a77-e2c4-4c71-87db-c631c2bc8392"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25d2c657-0ddb-4638-92ba-20f0fb96f4d5",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec8b8cfd-b42f-4bb2-b29e-024fa9242b5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdc6d18f-1ef4-4eb2-8772-5f066444037f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22115352-0174-48a8-a9a0-f6611d656ecf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "98b194fd-2dfa-4c57-b127-e20036c4e151"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a24e7ff-d244-4b79-96c2-74ae7c2e0926",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22b91a43-c405-4fa6-b4ed-66f509f7b1f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "855c6f54-38bc-478a-91ea-86522e994f99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c5ddad3-ee5a-4b16-a28c-ebcb619fb652",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d8907e7b-c743-4c8d-ac8e-297ea50a5438"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a77af97-54e2-46bd-8991-da511b19509e",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e693d6e-2031-44aa-bd66-888c9a97ec86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e87a1d4b-dd1b-4bbe-a12b-62a19a0930e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf26d1a9-e9db-4512-9a3e-177059eff2e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "238703eb-6e5d-4210-a109-73652f9b3978"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0890f5c9-740a-401d-8335-a0580fdb72ef",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d204b5c0-7d3a-46f6-8d27-9f5ee7bcf37f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56b104c7-25e8-4688-85be-7104c4dbb8e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95e2713c-8ac0-421f-a0d9-33c5436a061c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ba5031f5-9089-4c13-aa7e-8222ffb45cc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4059be30-8a35-4825-bee7-40d8854b9982",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32f465bc-b092-477f-ad56-eb36b6c89128",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9937b16-7dcb-41ee-8d99-8175819c4778"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6641f01-9156-47e9-a82d-a29b44f236eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "89f8b627-c01c-4800-8af9-89ac493417ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00926b59-c3c2-4987-aa1c-fd0b95d06df4",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "572c7cde-fbc3-490b-abfe-53c080e59ceb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24895a2b-fc3c-42c5-9761-d801363b1661"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e741bb0f-2795-4efa-8a3f-ec05f1c8906b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0e215d92-58c4-41c6-98c2-5235bd3eaf6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cc04ee3-7bfb-474e-b1c5-a7ed3476e794",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "405dc15c-8e0f-40c1-8dbd-8d939c26fce4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b718daa0-67cb-4dbd-9514-213ad1c9492f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55012cd6-e70d-4ad5-b125-fa29edef43d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2d9d0c85-70aa-494a-8891-6d36271f4abf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b1b6228-191e-4263-8dac-2ccb95bb0e2e",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dbe3951-950f-4b7c-a0ce-b4d776966eff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2d29d9a-0379-4acf-b0fe-8e3fb398e66f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7a277af-348c-418b-be0f-1ed710a05117",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0129c86e-7970-49af-9898-87fcc3d5fa92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbe68cda-ce43-425e-92f7-29e8f56dbdea",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe774e48-634b-4efb-8dd6-d808afaa8b95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33006b1c-a291-42f7-b887-5dbb7419303a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3741a0b-0122-4b25-922b-7dff7f8729ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5de2cb37-977a-40c6-8be8-9285daaed293"
                        }
                      }
                    ]
                  },
                  {
                    "id": "defd5cb9-495b-4349-9e32-fd2353a4ee88",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "244a0dd0-18b0-4329-a61d-0013367677dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4b20d52-444b-425f-a7a6-7f869312131c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffa9c865-44e3-47db-a0fb-57b7dc70f82e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2cc4080d-19f7-4e98-b2f9-0a545718fd29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67e375ee-7844-479e-8bff-ffbb63203f12",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b10f52e-724c-4175-a7f4-ede7bf7e8b8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1503848c-f215-4abb-9955-6d955f11355b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f337b32-5030-47cd-bcb7-420d4f28fe0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c26ee99d-74ef-47fe-9484-15b9198ca4e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c25e179e-5230-4a2a-bdc4-485913465255",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55c438d1-e7d9-488d-8644-89fce12e3027",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be022547-608c-437c-a114-eb9b33e11df7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a63919dd-5998-42a9-b06a-12afa74ae1c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "aa5cc805-acc4-44ff-8397-5fe25ef1570a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6854fcbd-524c-45ea-ac1b-68eb69e4b02e",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7854fa58-a0e4-4e49-8837-8ae8927d0cf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ad4ad57-8752-452e-b9f1-4fd73365d258"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83dfbad1-9f22-4c97-96fe-75dd1c49f902",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e16ed7fe-2c4f-408a-8b12-37b551420c98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d61da8f9-9a13-423d-9068-2b7b2a121931",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6da04ca-0438-4c52-984a-9cd09d11b1e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85a9f7a9-31c4-4374-a8a6-f968845cbdb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c022296f-0a69-4e67-a7da-fde42dd15ac4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "451d6816-f995-400f-bb97-80ee5cfe4a88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6e91239-2fbc-480b-aa3d-7877a8e095ba",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24147fc2-cafa-489f-8aba-83e064338991",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38d1f7fb-73a3-45a8-81aa-1948d9e9c3d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64bf5e7b-a227-4d09-a274-2d1068393705",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6156dec9-50aa-4f40-83cb-6be8a31ab53c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e6e6b00-6850-4884-a428-c53572c500e1",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b5eed07-2502-4d23-b3c1-6b92f831ba98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be41a03d-d1b3-47b9-90a8-bdefd1198b9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b333a773-48fe-4113-bb28-ce3dfed62b6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f81d8dff-7326-4b8a-935c-05416f5bac46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c3d149f-03b5-43c9-8122-a43eed891984",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6468c5d5-260f-41f6-abf0-0be1ac9f2aa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbd3e57d-d261-4337-ac67-03b0ae000be1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62a7054f-6731-43d7-be46-e822ea8531f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d40fa1db-0aa1-4c9c-819d-efb32b781cfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c58222f-1090-4c79-92e5-843852ca948e",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcd38c7f-dfd1-49c1-9dff-119fae84a93b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6497cd9d-cf4e-4481-94a4-f869f8d863f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "165c2c32-fbc5-4163-bd88-0aee60ec4775",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9d29961f-57e5-4f4d-b9a3-1cfaa2995f95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ddf4676-0ee8-446c-aa2d-a5948b420a6e",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c503d4b0-0794-4707-a41c-c6c30a30762c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17cc09c4-5616-4a2a-8caf-663c5da87576"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f41e53c1-052a-43d2-8f75-b8d624928349",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "eee24ffa-e84f-482b-abca-298f6cf9b722"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de93bda9-ca58-4fdc-b8f8-5d423354a6a6",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f17bbfdf-82fa-4a7d-b08a-1e52c6f1b812",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2572b7e-cc53-4863-aba8-7bdae75299c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "716bd0dc-d8c8-43bf-b515-c2b700eba865",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6a217db5-20a4-4312-951f-8b92d5f2ad63"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "90dc7f06-0190-4775-831a-9e3d23b46973",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "bc3c6b55-3a49-4f71-8648-dabb7d8eb09f",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67aed89a-328e-49ad-b326-ce7d51857cdf",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "d878e0fa-b68e-4c0b-a614-2247bc4efd5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "825e5448-1472-4e26-93f0-88ae89239fbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "75d27f5e-4c77-4f41-8779-052f4b822bf1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b80b01e8-aa07-4e7c-aa3f-e9840f09593a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c9e3ac00-6a93-49df-bfef-d162cd94f771"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "10daa047-0ee9-4ad7-a12c-aaac39fd21c9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "98199e60-5f7b-4c65-aa22-52c99e8c0e65"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fc935303-105d-4e49-b7ea-71457ac6d0aa",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "fa8d9a6f-e10b-46be-9ffb-d5c312a3e2ab"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d03e66df-4b15-47ad-abad-025e7ca77ab7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "576ce2fe-8387-4859-84cb-287ee5b79f1b"
            }
          }
        ]
      },
      {
        "id": "b002b3cc-c9d8-442d-beb0-11530c64ab3f",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "000b077b-5ff2-411d-abfb-28589e09c112",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3cfe0bdf-3e9b-4854-ad28-e5f960759fbb",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "b8ecbbd8-3d73-4597-8cdf-465eda1dda3b",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a83eff40-758e-41bc-92ae-fffe26a0e3eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "669d03f6-c95a-447b-9fc7-918b363d6788"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e51fd80-d154-4025-8988-b7b0756a4b4b",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "786bf3b3-1ddc-4c79-9f16-387a604f5bc5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbf48227-84b6-4835-8aea-5a950b398fe3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a87b9288-6f9e-4442-a360-da5e3e8e95fc",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10b8f691-efbe-4007-8969-b8410a85d133",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7527eae0-85cd-4654-ab16-0d7103c77230"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4131cf9a-ae8a-45de-8f97-93c7222eeccc",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a4f2306-455a-4180-9bd8-f502cb702643",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78760a34-297f-4f41-8235-cf00fd395f96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e246e3a5-1b07-40ca-ad98-76551f0ffd3c",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04eac894-9bdc-4bd4-b6dd-27e82634e601",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fd479f6-74ab-4e2f-b09d-4783ef8c4f97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f0dc737-2e22-433a-9163-3e403ae7062f",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a6746d9-8e30-4ac4-8ae9-6be21ba5a71e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9b2d370-7092-4e0c-8d5c-2784707ef48c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da57cef3-8ff6-4aef-a8d0-7b336f99826e",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f97de7b-1406-44a4-a9a2-7f0f78253235",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5ff8f9b-06a0-48eb-8025-83ebebbd477c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdf08ee1-2533-4c7a-b942-8120514ea368",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3656a7b6-a0c5-434e-bbd1-a54a39dd41a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31fc32ac-3f98-40b2-a6cb-816935f3e494",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c5ce319-cc0c-4b20-87b4-11f2fce53d96",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e2e39b9-d30f-4b09-be46-a8e133b9f32f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd9d13b2-4ac8-4508-8d4a-3277a783ab8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7372ff2-4881-424f-a064-db871a9a78ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2203b664-cd46-4f39-a391-b0c2c0d9d82c",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85488e8d-f6db-4b16-a9e7-010b821ca72d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "825d852a-6b60-43a0-ba48-af5d5d2325f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b35365c0-c7fa-4ec0-a183-949fe1b700b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3470bfdd-7000-4b08-bca2-a978a284c6d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7015232f-d5a0-4e5a-9109-700f8592409b",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7923f18-f093-45d4-9230-355bd47e289c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "323b2d68-fe85-45d7-835f-a55cfead8497"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e79b2e4c-9b72-4c06-ad03-5cb6d41d2725",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb059c73-7024-44d3-ab6e-4842bfdb303f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1b06936-5d68-4365-91de-575a20e39605",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da2853f4-f5df-4ee7-a414-3582b1b508da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75b5ac48-bda2-4fb5-b447-f4ee9076da1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c81fef62-f038-49b7-ae75-bc4a853214b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "247ce9cb-4ba4-4381-8931-6397e28e6b2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81e38134-cf52-4594-a8d9-5580aa85565b",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cc39272-5c17-4338-b8a8-8a4468cf8457",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92ec7bf3-5734-4a80-8f42-2334f0c22890"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08d0c87c-a61a-47af-b73a-2f08dbbde1e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f45a7e1-d694-4cd1-b1a3-b6366c1e0d7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a06b0030-facb-4826-9cc0-e6c2894d834a",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60b2b209-e381-482e-93d2-35c29c32a39a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8981e9f6-f59d-42e6-9442-897c6c6c1377"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d21914c1-d331-4262-af01-2dae0393f921",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b925772d-655c-42ca-aaef-eae7a6aa4fa2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ace6b3a0-6248-407e-98f6-2fb10c0fe8a1",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2de2083f-1391-4fa5-9385-79ddc2369c79",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cc1de5b2-9a1d-4acd-9489-68d73e884bfc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b149f640-387f-41ca-9ff4-81f9af0bac62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14389976-03d2-43b7-9bac-f5b941b08e7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a3f7fb0-4abc-4479-bba5-23e91ea31d40",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "668f2877-b4ed-4f9c-a9ed-0131273b5abd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d4dc919c-8cbe-4ab7-995d-0c36a3f1675e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f86e68b-deda-43b7-a76d-097e2fe52047",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7167e78-c7c0-484f-b847-fff394c011f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "249ee472-5f54-427e-aab1-3325a99428da",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f2a40fa-356a-4afa-8137-c1674a9b9a3e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d29f4a8d-8c0e-416f-900f-6585580cfdc8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7a2b7cd-c678-44d8-af6c-400d32e5301f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b987c1a-42e4-48a8-810f-43866fb519b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7477fcb-7f3b-43bd-9c4a-b0ce8c85108b",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85e3ee03-8374-45eb-9a9f-b628ba5f6c34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4cb6ab5-0fec-4774-a3dc-2f6a1eabe218"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a62e85ec-25eb-43d6-b572-b993a8ee3b59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01303858-152e-402e-bc3c-a8ea23008cc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cb89b5f-c656-4d9a-9e01-1661205eb47b",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49d2fdaf-6a4d-462d-88eb-814b6e1262c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a00c66e7-cd37-4efd-8b56-340ddd9efa10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd2c4fd8-8247-40ad-8a9d-8adeb6771eda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d594b35-9397-4fe7-85a7-44deeb3da5c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ea9b8d5-b057-4806-8bf2-164f9a65b87c",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48bc2496-93aa-4f03-b7ee-8afe42ca635a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c187ed99-ad83-40ab-b100-ec6452aa0956"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c5198c3-ac14-4bec-94ce-49baf6a6511f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cdda6c1a-d03f-484c-9d8e-ca8bdb29dd27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11f9728a-a312-4f5e-8d4f-dd663207e7c3",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b7a0243-6eeb-4772-a68c-f407ae8bdd7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52852ed4-7fdb-435b-b523-63a64d1b9c30"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d67aa52c-4f3b-44c4-b0e6-db7c5639e23e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8562a3cf-a294-4562-8c99-de007363671b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0cd0272-5a4d-4f6a-8d79-45e8ca42380a",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5f18079-0236-4ea7-a614-d50f480ddfa6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7746eee4-da77-4555-8108-04cab8f9db6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8142f73-3158-4da0-9190-3330f7fd5c79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60ae3fbd-426e-4af2-baec-a215265cbec1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51e2d389-d64f-45f1-a75b-553bed7803b7",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4406ec10-328c-40b4-98e9-7203590f7159",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70df4773-be44-4783-b5fa-3a9fe9b83029"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e8f366a-590f-45cc-9515-9b71b61fc938",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0abd8cb-50ea-4e77-bb39-825e4c057ad6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e08e352f-b643-4050-8765-a55811e87d4c",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dcd5a2f-646b-45e8-8f25-1a3f37dc401f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6bef1ea-f9f6-41c1-82c9-a93e0838b2f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "773f73ae-39af-454a-9016-579f863061fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c7081a3-2fbe-4cbd-ade3-870c5b368e74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5523d28b-a346-4ab3-a659-aedbbf0dd6ed",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72f72d37-f28c-48cb-ad90-588959df9108",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d672c8ad-f99c-43d7-9217-5bd428e48c5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e817353-b291-4978-bb53-1b677c4bcb7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "045ddfa8-348d-4005-a2ba-fc4b154b52c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7eef191f-13dc-4bf7-8d6e-ba142c23f40f",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb905175-dee5-40d8-bb03-84208d72c09a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6e6a49a0-580b-4a2f-83ba-ebd9705a378c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "144a9d44-0afc-4ad2-8307-279345476bba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d638e36-fb9c-4c64-b289-e0ad023ca031"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d03a8397-67c2-4260-9147-80cfd7ea6ee7",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a17d690-cd30-40ec-a7e4-fe841c992b21",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "436163e4-a428-41a8-a791-9a130d16d79f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc15614e-936d-4abd-af4f-df8a011f4ce2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2da00dce-8433-4372-8c1b-0f69f2882702"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca1e1802-b1e7-4f46-bd87-ddedc7d68ecc",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07d0d58f-269c-4f5f-bee8-972a56faf80e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c2be5d8b-3732-4b8d-9e24-a0b978086558"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef38263b-b47c-460c-89ca-821b959e68a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10221ab3-f155-4cd9-b718-4ed346c4913c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74de1cc2-5f7c-49d0-8b9a-b2f33bb59934",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9e9886d-c4a3-4218-b3f2-33e4f6c955ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "868b98c4-e9b1-4716-98d9-0ace50a19650"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e624e7fa-f710-4ce5-91c2-0abbc6975943",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b4026fa-1a7c-4a7b-beb7-c0e338372cc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23bb4289-3f6e-44db-888d-de04ed865be5",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22a56ed0-7203-4830-a81e-d6b8fc644436",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "95cd50aa-9d59-458d-a041-fd2d42b5995e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e18d3a6-c8f2-4c49-978d-b7d30f2b2d27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68eb153c-b41a-47e1-bc7b-d0b2b8e6bdb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a593fcb3-463e-410b-88c7-b09c1320d097",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9664f839-a341-4458-b0be-6f5a805ea992",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1dfc2c71-9476-4de6-b508-24b560bfd0b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34792132-4dc8-4dc1-8fde-afed27faa6b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83584e70-1159-4a4b-a533-c62d8bd9c655"
                        }
                      }
                    ]
                  },
                  {
                    "id": "565221b5-5152-43dd-9412-b36aa2b77663",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ca913e7-5e6f-48b6-8a7c-d514e82e6893",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a98cba8b-5c8e-4222-899d-330042e908c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87df44cf-409c-459a-af91-129c494b37b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ef76eae-d39b-4de0-a0b3-b46e11f2f483"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b94e557-dc32-4af1-852a-241f220c4785",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fec5b0ea-a721-4a55-a254-dc92a1dd2fb4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "125de5d8-0c55-44a4-b7f2-1cf30f727772"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6d1cf43-bd31-4136-92c5-ee4d3acb232e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a3b0b83-74ff-41a4-9449-7c5b0029959c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb5e8770-c644-456d-9016-95aa7a2cf205",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c170215-6f99-42a4-aba7-e220585d47b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7c9a26e6-ab43-4984-a1ca-7e4cca410e90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "644ac647-4b65-46d1-9c91-65219559bc1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e55d8ae-4df2-4cc2-82cd-77d5c6287916"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e802398a-48e8-4a92-ac52-5d1e9a29692d",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5c70ce1-525d-493f-9aa2-066393b4a509",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e25fc08-345d-4a1a-ac82-15106404776b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b13f9aa8-54cf-4864-92c9-82792cf8daf0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df81660c-b777-412e-b2e5-3fee6b9c4767"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4e18644-476f-495b-90b3-a8259c1893b4",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb9b371d-d5c8-408a-b326-2c2c6d9e5514",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b13de9d2-5ecb-4dcb-bd9b-2e253f6dc1ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67ff8f5e-f2be-4105-b635-f1a756c00f6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f876a6b8-f602-4d03-aedb-3d048fe02a93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "637e8c1d-ca7f-4fb6-bd0d-86b016a53666",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fd4f44d-9f7d-49b0-83f1-ee01b8fe9b3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1afa436-1042-4197-8558-0e7657095c30"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cf790e8-879e-4af2-a455-e450bdf9eaa6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37ffd0b2-a327-4fd5-919a-feb86c8156ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f82db9f-47d1-4f1a-bf8c-1c654266cad1",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4bd35f4-ce18-47ff-803c-733dd0f03923",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b2e9d46-498f-40f4-b1e2-b3a705703fe0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49d25265-bcb4-423d-97ea-5bb0f777e38b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec0717c1-9d57-424b-87c8-c4322bf3f529"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e30d5123-bc28-47a5-a256-cc9ded235f7e",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e6f7883-1be7-471f-8826-6a77028eaebe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "614a98c5-04c3-4487-b8ec-6f8962367137"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e0947ad-fe7a-4b4e-88e7-81493fed067c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d6cd032-34c6-4ac9-b9e6-f933d9465428"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c8265e6-3641-46ae-9e7b-d8e11121a7be",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09f92f00-7fd0-47cb-9c3f-6e73f7c60902",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db89142c-7615-4694-afcc-0564147b4af4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24a4c111-eec5-4252-9b30-92a0479009df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee6cc973-9c03-4d8c-b580-02c1782c3aef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "240428bb-1317-4de8-9505-c17becade5c0",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbf279b9-b253-4009-86d3-9023b4884d29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "254e35af-0d3d-42c7-887b-bd765847141d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb39333e-e56d-4c29-ab41-18e2af41d0ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89257dec-3fec-4a01-9a18-72c757594af7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c11818b4-b4a0-4c38-bf30-75bf132abc71",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d22a03a7-1a22-4808-be17-c22134b41b07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef1d59db-30e7-4f03-a989-060c7899727b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26226166-683f-404b-84ff-3cd2e4b8959d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9867ca65-2c59-451d-ac9e-1384467e51f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0e54c61-56a7-4613-b1c0-340e9959e297",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82e29e21-ddc0-453b-ab07-1ac4f002a6a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c0cd399-ae5d-4d04-bfb6-6aafa0e4de83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1abaf24-4830-419d-9eb1-a2776467db14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "006de20a-e543-4f4f-b0c3-16906d9e539f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38f231a2-212e-4b74-8d30-ffe459c441f1",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cf0c35d-1212-4274-b54a-cb2617bf0dec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "278e846a-97c6-4cae-bd9c-eb5b2dfb5bcf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b487912-04b1-40ff-a494-215e6b33e808",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45c60798-3edf-4975-bddd-df4fafdda0d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68b90699-eaad-4d7b-9ebc-7af88fb732bc",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f154f0f0-4862-459e-b5e4-d94ba6d7ac49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4c32242-28ff-444a-b0cd-af53d3837813"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9e56508-aa2c-4920-becf-07d32264eac4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ebb9e84-8742-41ca-96e9-acb7056a42f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b02056fd-4a61-452f-bc36-55ffa008f70d",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25f2d20d-3013-4977-9c73-504177f6a9af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2bce263-2b99-46fe-afee-92aaf47d6de8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a34c17ec-9545-4041-aecd-e7813557ffa6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74d31973-28ac-4912-8148-a9de8cfabe32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c52b87f2-2de7-4966-a4ef-22d32aae0fa9",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a237663d-bf0a-4629-adf9-b8d17c2e8934",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a66d92ea-21a9-46bd-9b16-f860c7ac70fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec220661-dd1f-44a4-9905-7b114a969a67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "159bd24e-0625-4f65-a1fa-2b31d8347a4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16dcf895-1286-4dbe-a561-1e8a5c6f62db",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9fed08d-64b9-4da9-aac9-8e6b6025ceda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73d09c4d-a06f-44e1-b368-379662120f2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c56ca88d-d74d-4696-957c-77a6d90cb0ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1650297-9edd-48e8-9e01-99c9f88c6d3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5290baf1-ebc9-4fda-a0f8-072cc2cdf761",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e7feafc-4943-4cd6-ba26-566689a61fab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5aa6ed57-d05d-4fa1-919c-f67baa451011"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b94eb7c-45b1-44da-9040-9a34b6e4744e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebe38299-40b8-440f-8bff-76467b32f0e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b09b2255-f0d1-4831-877a-15d231c9de21",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81d45550-6127-4d64-8e32-af16fc1798e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ff100e4-4d83-46c2-9a33-642e10cda704"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64a459a2-a894-49dd-955c-b3327a9f79de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88f2d33f-a3e5-4dcb-b42e-041605740b7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bec79db-5554-419d-ba45-64348bf0aa30",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32c794dd-407e-4ff5-90f6-3cdc55061e20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a55ace38-9e9c-4908-b657-b52072c9055a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a339636f-6908-4155-90d0-f22b8bc07580",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb7c7111-7685-4735-b668-6d1917812b1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7adf788d-baa1-49ce-b51f-19863afe6caf",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a06356a0-b63f-48b2-85de-1d5b88b432f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd9a6ec5-5861-43f2-895e-c7f62b26b585"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "adf2cb60-d960-4556-9104-7efbe6d1f27d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e425a3e-a422-4e18-9324-8560e52b87fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04d1328a-e227-43eb-b83c-d4f6de863d10",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "185f1f48-942a-44fa-aac7-df390e0f17a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8a3308d-3f39-46e6-a1d1-1c2fe30b2cd1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4748ec60-af1e-4f27-891f-4059ef12e08f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e3941c7-45f5-491d-8712-a2a44e766ada"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7f20b45-66d2-471a-abcc-d0b16f1a9dd9",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0d4a72d-9268-4cd7-90f9-21f1cd0d4672",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68c6e5b2-55b2-4134-a065-9ca62b662cc8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2274c5f0-db7e-4358-a641-3e58e2915c7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78cd21fa-2c25-4c51-8531-c758c7c21432"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41555f79-8c4c-462b-9aa1-a4a0b1f75531",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "487ad3e9-399c-4b09-b787-4c7fbb603ebe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "170bb4ed-fee6-4621-94fc-9517de58f95a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49c67dcf-46a2-418a-a241-ab28e1e20114",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94b746b3-2286-4339-a566-a1a115f6387e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39d3925c-cbdc-4991-ac44-9d658a475847",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd636525-d94a-420f-a107-b93d687927e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b96bbec-5c78-49bf-a96d-f93c83489219"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3fc5ed1-a2c5-4583-b644-4e90b64dec57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5845e42-9ab3-404d-8220-edaf5bd028d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81a0950b-292a-4e55-8add-8358d508c746",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7479bdb8-2145-4b51-bfac-4c304f0b897b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1181db98-76ef-4db4-bdad-b1baebcae526"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0fb50d0-4354-44db-b405-a620e1db415f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6d6ea77-f8ff-4188-ae05-3c7cfdfb1f5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6493d74-e95f-402c-ac49-6b879cf6ce98",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e1fd339-2423-437e-ba16-fc0b05bcb4a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55649ebf-c0c3-4b55-bc95-74121521fa1f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46beeadc-e219-4e5d-ab92-24d5da02bdd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5df50936-9b33-4d66-8893-75d9966df940"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92e8e62e-e862-4c03-af39-930f7e64c32e",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d002f2c3-c611-467c-96b5-c64f26b1eee4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd84cf68-1256-4be3-a507-6f2173d9764c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41015618-fb33-4fdd-bc64-805010336c89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08329bd2-74cb-48ee-a72d-cf427c481d4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5a42f72-307f-4b80-a941-c467b04efcea",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5566fc65-8132-4214-be96-28520060d296",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc07adf1-213d-4809-8568-b883cca13241"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a66548a-fae1-4e00-9820-d580896a8d34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cf64f6f-ce5f-42a9-bd6d-6e3e9fb2c1f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c67431b-d5fa-4c7f-bff0-9f7bc8fe266a",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ec2446e-f098-4f57-8005-35520dcf942a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28bcdfb3-3a6b-4a45-9e94-b26dbb9758c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89d9cfe7-7caa-4552-a074-ba43b78531bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c999b22e-ddea-4683-8619-7813f504522f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e3371d6-8286-4b5a-97f1-b32cd3c80e4b",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c0218f1-db55-4338-a8ad-8bc085e5835d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8496cba-24d8-48f6-ad41-b9494a28c76f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5060a4c9-3542-45cd-aaed-5b8a3b3df069",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75f88065-0ecf-4c74-b6ff-5e4a1787eb41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3faf97c5-2535-4832-8998-966f3090df01",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "448b10a3-4650-4ab8-bd55-4ca22ca13be0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34808e3f-999b-412e-9443-16ce522c7b16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "338ad097-013d-4d4c-af05-448b58e6a866",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a78941c-4b73-41ef-a973-d493ecdeacdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39a9bb99-c1cd-40e2-b575-b0a5699784f8",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0545dd8e-3f7c-42ef-b8df-cacc559d9641",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec4e7b2b-b564-4115-bc17-0be766567dab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e6033f2-96f3-46c5-a361-84b56a5529f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3227bf94-ef4c-42ba-8fe8-02f0ac4a4697"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd8af6f6-53e5-47e3-8772-88dd79d6c280",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cf70989-9a5a-43f4-895a-a544f9a0959e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f78e6b3a-d613-427a-ba47-4b5eea155c25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "715369d9-d72f-4d01-be97-1eacd811859c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f123d155-7a64-4d76-a648-f1afa41f2096"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea9e9217-6cf5-4fff-b1d3-3eb83e70a814",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27553af5-bf80-43f7-841c-c4feb764ee1e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "59ee0545-2519-4947-a7c9-20cfe1a05f24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3760df0-f793-403b-aa5d-2f34fc572d2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7ceb8e5-0def-4a1a-ab52-67a59c893696"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4bd82b4-8455-4fc1-b235-68650fa0bdac",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a23b170-f2fd-4199-9e86-0bd002727fa1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e419b4c-a573-451a-a735-d1f06dc1a61c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3dc4bc0-ea75-4034-98a2-c83e8e2c2721",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8a7a521-1b0c-4094-8e5a-1b5b615dedf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1ceddf8-7260-40e0-9faa-b34af553c9b1",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba029621-385a-4330-bff4-2def7647e808",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9864b3ff-cc44-4fdc-8162-d9404c043c40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2aab7d79-a9a7-4b7b-b010-fa51d89d00a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5154e6b2-6de7-4db8-b39e-00715ad71550"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e8dd470-8429-40e7-9b4c-b029432f0ec8",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b60a795-8c78-4eca-b7a4-05dc441b9a7d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e8c1d72d-e692-43b5-b5f6-3c8fe567c9d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea156ea5-0ac0-4caf-bea2-f71783dd82e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b07fd275-9ef3-47f7-aa54-3ade0f2ece70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f94be96f-f367-47bc-a75f-2cf748a05676",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76897464-b8f0-42df-857b-068f7af4a2e6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0e6d7030-f00a-474f-98b6-2acabee1baa9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c4af34c-0706-4b1e-acb3-2dfaf3986c24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f537d9fd-1691-41a7-99ce-866f59bb596a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "344c2b21-a3c4-47f2-a04a-0e0e4ac71518",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55f5d48c-c5bd-40c0-9ae4-5cbf3532f89a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb0259a0-51d6-417d-b219-e031bb362e67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "933ac723-8659-40dd-aebf-8932dac60864",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "384277a7-6c1d-46ae-b7d7-1e4d4ae42a90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72a483af-ba33-48d2-ab2c-57791f9f99d9",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "531b4893-f73d-4117-a85f-f69def416a35",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e64f0c53-476f-4ff5-b4c2-8f5a28e93710"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4285bf2-43c4-4a74-a49f-d725d79d9a02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "549a9791-1995-4ef3-a28a-2e50449a21d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be13a784-7b59-4077-b502-2edcb39994d4",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "348b3b97-7f65-4687-961e-a5b75d62d55b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a050f801-120b-44da-ba77-120bc6a3a418"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e07a0f2a-e783-4544-acae-5351f0241e77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e24a01d-39b6-4f60-ba25-c5b2757c0d12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4363fbb9-b6f7-4a85-8edb-af3347e80be5",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2d49920-38cd-48e3-b776-d9750934686b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bbccd394-9202-4693-b995-97421c42429b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1e0ebb7-2d4e-4eba-91f1-12744ab96422",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72d018a4-3eca-482c-b1b4-8744876f2a36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd23eaab-2bb5-475e-87e8-32764c4dcc3c",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8146f6b5-8125-40d3-b61f-31b6d7194ad9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "40c5c595-0c6c-4279-a131-2768afba936b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43a5cd5c-2aba-4e2f-a665-fc6f1f8b107e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82397e46-ac18-404a-a89b-15f272d0b4ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a85fe33-2fe8-4709-a23a-0a69d8dc2765",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e68559b2-1a11-46a1-8379-875dd8e9fe05",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6cc9c49e-c294-4159-85d2-120c75eba866"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0980522-e5b8-4dbe-b0dc-ff3ae409e1a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86486ad5-921e-4d71-bc8f-2757c6396bb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cb881a0-f90a-4a9c-b03a-7377390198c3",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2be2b919-a1df-4e24-8cd8-4392e30b06b6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "13f61fcb-5c08-451b-8400-c41e00780ea0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db722354-50c8-4d42-8455-16fdd4d69baf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22b7db65-3d08-4315-8abd-0a6bedf2c29e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ca71775-0806-4d14-aefb-19e81e8a24ed",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a67fb929-43a0-4bc1-830d-64a1eb2f229c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "81c9a345-bed0-489a-9cd0-2ef807004b0b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4858f2dc-4535-42f1-9983-48927e8c1492",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "babf61f4-3744-4c44-a905-345e1362b22e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "409aaaee-7dc6-4429-82c4-89c1b2d836e1",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45e72888-8edf-4a37-89cc-2ea32429f65c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ca9ba526-7e92-4171-9b17-78a8bfb55aae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fe35eaa-8b53-401f-b1b1-dd7a57d7ad30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56bf3c99-3e5f-436a-bd37-139371f5b271"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a283e4ef-52b5-4667-a648-2f9bb1047c56",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d79784d-74d1-455e-81f8-f12bea081fc5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a2d832b3-7b60-4bb7-9a3d-072666af2039"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85e5e1ef-31f9-44a4-88f4-280f4f5abc73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d6668e1-7a0b-4ec8-9ec4-65dd06092987"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37360087-6305-4b72-945d-c0dcbbad2249",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2425b4f0-e1fd-4d1c-994f-83b917788d0b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6e819f9f-6435-4508-9fc6-e71940f4acc2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d228b02b-4dc4-4146-a7e7-210cf0b25a21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "954360d3-f7e7-4cb4-a0d1-f2014ae4eede"
                        }
                      }
                    ]
                  },
                  {
                    "id": "202fbd4d-60f8-419f-b2e1-3c050b3a57ce",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06912131-4b5a-4884-9e7e-8f37036661ec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f8118e6d-a7ba-4008-ad19-1e40fa75b4ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fe98a59-bddc-4cda-a4c0-3f8df30ffcae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e38091e-c16c-4904-871f-ca746097bbbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32016bcd-b060-4d06-841d-1972fdb7fa9e",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41688069-b8c0-4f41-8cd1-bf41ab122ad5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "65115067-f462-4d41-97e2-8bfab4b7aac1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3944a92c-118b-4526-b877-6d8cdfd05a35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dad28141-55cd-4f4b-88c7-db7bdab9b3ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50078854-ead9-4cf6-bc4d-b4e528b85657",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98d19616-9171-429f-8833-497c6d63d138",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "516d0a4c-d147-4e4e-8e15-3b60c1d7fad1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28b9634c-56ac-46e7-bfc0-54bdad92728c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ed5ecdd-46be-4e96-a43a-882a82eca61e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2fcc9bc-8489-4855-9ee7-28f1bc3b5991",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87833727-bec5-4df9-b06c-7e18bffc9949",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4e08e3fb-96da-4405-83d6-d3a74c2bad13"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e9a4fd4-9652-4e2f-a285-9375cb59bdf8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9ae3b04-0fb5-4e7f-87de-410f5afb3694"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a278c60-0f62-4838-a827-f2634ab17612",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5be7b612-062e-49fa-8310-d1ab6bf36306",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "539e3f63-52ba-4ebf-8fdf-76317e998786"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a9a7cb1-4f31-4f49-b1d2-f392f2b55454",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e028b68-69d3-4538-8227-9e3b34015874"
                        }
                      }
                    ]
                  },
                  {
                    "id": "789583a2-952d-4204-b41d-03cfb9acb8bd",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c281aee6-3ecc-45da-9a93-0af9fc408bfa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c9655f8a-05e4-4a89-b60e-79eeb4066fcf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4243d53e-8811-4cb3-9662-97cb81fd393b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3fab851-48a5-4e12-b6ff-62fd741a49d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28bc7938-d5b2-46c6-b21f-95a8dbb4f13a",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c76cbb6-159e-49fe-9bf7-4966b5d1dd7b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b672c59c-64f2-488c-afb9-f6c58834229f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "849af7a6-91bf-46f4-ab21-c596dfa19132",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a154c5b9-5ba7-4085-bdb4-779150edc45b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f6bfd55-85e0-4e82-8531-0890ec15b13a",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "685f1a48-8bf1-4533-a828-bb4132c93855",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "00580ae2-79d7-406b-aa2e-c405f12327d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f53fc61b-7625-4284-987d-fd39164361c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b176ee7-08a1-4741-9b02-389f09bc5a84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e3a6bd8-f2d2-4bbf-a535-132c19d5c1aa",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca20b12b-a8a5-4841-9a16-bacb7c186dbd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9a1b2c1e-9c54-4cac-bd53-f6f1362c8f75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "597ba640-7891-4e6b-bb23-e9fd46b31e72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ad62128-a415-4850-a215-fe5e395a4eb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d50d1040-fb1b-47ee-baf5-f2be80b772ef",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4ea7a9c-6451-4b74-bff5-34cf42c29538",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "759eb955-b98e-447d-9627-31cc6e4320eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4cdc3ad-6309-49c1-87a5-c07ce5fcbacc",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1579cdd-4246-4a8d-99f6-1fabf89aae1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5d20b59-cbfe-441d-911d-ab30e7bfc1e3",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adbd980b-6b38-46e1-800b-58ad59ef8020",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a40dff81-354a-4bb0-beea-b0304287c15f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dabdfb33-f1da-47f3-b862-b3576d4dc912",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f528b2c-c506-4123-8480-28f95e5811e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d272ee3c-f20b-46cf-8801-60fc05042c0e",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b28acc79-af95-4663-8331-da0e632af62d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1cc5ad5e-7ade-4128-99c9-6873d33b19b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25ada78c-ed1b-48d9-bc1f-9b67467b4f49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5eb025b-91c6-40e6-957e-b98bbc1ecc7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0f5914a-71b8-48b0-9b3c-06603cdb6724",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5ad2baa-080c-481e-8090-4f1c9966005d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ddb4a71-273e-42a7-bf0d-33cbebf802a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2825fa1c-29af-410a-9904-42f498db9721",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2476154c-3a3f-4560-b0f9-b1f67fcb0290"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2650f546-6151-4f75-80a3-b0abba88c6e8",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b1d4db2-4f74-4d5b-87ba-56a65f8f4d5d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8ef6e1fc-8392-4585-947e-ea6212e5c529"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6166c21a-4310-4ad5-a141-589f71c4f3cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05c38998-6a2a-4ca0-87bb-473c2c34eb4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f04a8775-25b3-4180-b15f-886ab03c4681",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd497819-abd1-4cad-81ea-ead66ff473a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e206aabf-878a-4df9-8f6c-523675a16f57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0afbe069-039f-4960-8153-79d5427435ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b84e2a39-f4df-479d-b58a-32776c43e5a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6646eb32-bea5-4ec5-ba0f-d1a85ac66b15",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d8c4194-f8fc-4d88-91a8-297731f3e4f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a6c793ee-9c5a-4d3e-a30f-819fb61d6a7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4655baa-587a-4d64-89bc-8ad82ed93d5d",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04052265-08d2-48a4-b9b8-906eb6939c95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "110f86a2-3ea2-4124-b4d9-4cc3a131d685",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "387de980-d7e5-4390-a736-3f96fa4d3776",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "02384105-7a73-4931-8f10-b86f66d2eb40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "188f2f22-c568-4716-b59f-d585d7be3fc8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1266bb00-1c89-416d-a4eb-7e4e9e08748f"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "52328331-8f11-4ff1-8c69-e4028d34e1ec",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "41ba1d8d-2d3d-4d71-a08a-375cd13be8c7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e00ec574-a6cb-4fad-85b2-cc718b2fbf3c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "dcb70900-f41f-45ac-abdd-6c578ccd1287"
                    }
                  }
                ]
              },
              {
                "id": "15850840-c9dc-4182-85ca-2a765ae75218",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f7729561-493d-4846-a237-03b4aafde0a0",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9254a26-5abf-4dd1-9a5f-187ff4e79520",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "7187dc47-3e90-4d6a-8f9e-f480c4f11311"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68add754-e6c0-44c4-8d30-145a5a0748a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "49bac809-0f60-4199-8cb6-fa68ae087697"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "40fda297-9d3d-461c-a095-42120d95ad7e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0db0137d-b4ad-4d7e-b104-ca34312d307f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fb582a8d-5d39-43f7-ad5d-4de08d22ede0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "31126f17-226f-47ce-b642-3d4c8d397d29"
                    }
                  }
                ]
              },
              {
                "id": "56a73763-3049-4b7d-b717-dbf1d78a38ab",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "dfc7a577-edb3-42a0-9954-94648dd21cc6",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fc19a0f-e660-45e9-931b-3fb7e18cd0fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "2312d6ce-7f3c-48e4-b8bb-a75d1a591fd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6049da0-afdd-43c3-96aa-0f16cfa62ae5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f5e9077-c5cd-49ad-ba2a-ba2bf7b25319"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "0c2a482c-a25b-4fdf-b2d6-ec1e214798ee",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c7facbf1-7d24-47f0-8b67-92c68c28a70a",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4807ad1f-3b17-4566-b017-065797588dc7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "4f1ef0c3-75a3-470b-912f-ed9f41e48b77"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5569eed1-c600-4fa5-9017-ddd70ee22953",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "30e8ad65-553e-4f9d-8a8c-e953640b25af"
                    }
                  }
                ]
              },
              {
                "id": "03b808d9-2c55-4472-9bf0-6b81c6f14c02",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "527a9597-443b-41aa-adb7-c25a834dac59",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "68dbac88-cbdd-4a75-a816-d6a37f82d05b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "226558aa-7d0e-44e7-ae2c-2870d4625f97",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "88cb29e5-861c-4b4a-813e-019af7f268fe"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "61929b55-9aa9-457f-9923-b1a893b33ac5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "b34c6c84-68b5-4f14-91c9-2d300ad2b480"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "daf0e405-4a26-4a69-a266-07b7cf3e9c81",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "68417dce-ad0b-487c-a13d-3c9145c527c4"
            }
          }
        ]
      },
      {
        "id": "9361ca82-8b0e-4ac5-94ed-1a2dbe022aeb",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "64c79ceb-a7c5-454f-a3ea-d645ea0f0b73",
            "name": "Negative Testing",
            "item": [
              {
                "id": "65bc4a15-a6cb-4481-89f1-527952c507ce",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f2af77b3-a8ad-4a39-97b6-7ed1368e65be",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4c76bdc-5e28-400e-a552-290f46ebce3a",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "d22ec2b3-1e0c-4f5c-a1df-4d06fb2c86fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1edb4106-5b3a-44f5-b660-4ce2b99ca84d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b775c6c0-9dd5-4b83-be38-ff5e7b230566"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f66f2ef6-e94e-4d52-ae56-e2bea13ecd93",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e5ba8f2a-b2a1-4af2-ba20-07913755b2ac"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "259c324a-a3df-44f5-8311-01e7f0aa5cdc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "aec571bc-8da9-4710-b5d7-4326ee0e6b1f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4fd3c528-bc73-4f6f-ba08-bdfb5bbde8b2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "5f04faea-4538-40da-b5d8-02db57cf5769"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a7dc523c-fbb8-4f32-857b-1fe0c3f91dfc",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "06541f58-ae15-4161-bb76-630442a71714"
            }
          }
        ]
      },
      {
        "id": "b6a364c9-ae1e-4e0e-a6c9-3148fefe6f8b",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "5a64ed58-92db-4699-a1b0-e4e3ad5cf030",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ecdd3225-a3b5-49e2-9dd2-dfec552b92cf",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e5c55506-093e-4fee-a287-19fb5f6d4b87",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58e05483-6e21-4a3e-94e4-1749f3fea42c",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7cefbc97-7dec-41b4-b06f-b6abcacb5967"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fee65ae9-2eac-4a09-a22e-46b4ae2703a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ec22e4fa-a8b0-45e0-a777-a10b2177ae31"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e8595f76-1c28-4441-918b-411d79e99072",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0bbd2b57-84ba-4632-bcf7-06c878508a4d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b7972720-8b60-4f8f-a6c5-49fc06f1f3e2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9878e758-9a83-47d4-9d04-b022027538b3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "866cc101-c786-4af8-b9e7-92b182ac82d7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "947a5817-e3d2-4a14-b5fe-28163cd1116e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d988bb29-70f2-4545-bf22-db8750199b4e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6f9df258-7c0c-46d5-8c90-29a87453748c"
            }
          }
        ]
      },
      {
        "id": "42745220-b46b-40ae-a67c-52b7bff950ea",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "43f0b28a-fe9e-45df-be77-eb476e38bcac",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8bd07610-feab-439f-8eda-6a6e7cf7b6f7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0a5b757b-447d-4b66-b35d-39d65ea13974",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efcb7ac5-404b-4dbd-ad9b-2c502049fc2a",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0576dbf6-ac38-4da1-b947-a8ac4a0f9ece"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b799733a-f976-4f96-b16c-4bcca9b75190",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "65c45eab-b8c6-4bb4-a1d1-0e54e3f62b41"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dfb916a0-46b1-400f-b8ff-fc6b717613d7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "91f88436-94b6-4139-8877-59f17f049cf3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4a81adad-7f65-4ecc-826e-65fffeb224a4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "40a3fe71-256e-40da-9809-360d32c9a8c0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "17f4473b-6a68-4110-bb77-8885992a5f40",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "a1f6a101-ebba-491b-937c-a434f96515ab"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2dcd1dac-1fbc-4371-865c-e147fd3159cf",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "84fa25ea-ce5b-4683-aa84-b42185b84496"
            }
          }
        ]
      },
      {
        "id": "abebcdfb-57b1-4cc0-a5ab-8b4f95eab9ca",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "15da2a0e-f45f-4a4f-ba02-1b1917513134",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "38776b39-e9be-4d55-99d8-fb0467101f31",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "42f1c9e6-7b58-413f-ac6a-b3c6d0f5318b",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "610ffb39-8d1d-44e5-83f4-bfdded783c99",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9ee79f39-d21b-4497-9c2b-6a0ff55a5c0e",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 69
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 117.30175438596486,
      "responseMin": 8,
      "responseMax": 629,
      "responseSd": 66.0057958412853,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1698107630344,
      "completed": 1698107679846
    },
    "executions": [
      {
        "id": "35eaf5f0-6c9a-4bdf-a02a-0335ffc25623",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "5bb6a75c-63b1-4108-b37c-3053b55167d3",
          "httpRequestId": "f743fede-16ce-4938-ab47-63e11bddfe1b"
        },
        "item": {
          "id": "35eaf5f0-6c9a-4bdf-a02a-0335ffc25623",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "4c05dcfd-d851-4327-a145-d4ea225b0b09",
          "status": "OK",
          "code": 200,
          "responseTime": 75,
          "responseSize": 0
        }
      },
      {
        "id": "7f2b8672-a7a0-4dd8-806f-b6942e00eb39",
        "cursor": {
          "ref": "bf3ede32-dd93-4a95-b76e-147568ac1e92",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "cbffafc5-44fd-4e7e-8c7c-ab82f9411232"
        },
        "item": {
          "id": "7f2b8672-a7a0-4dd8-806f-b6942e00eb39",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "f5cad9bd-a6cc-44b7-bb87-02a8318dace7",
          "status": "OK",
          "code": 200,
          "responseTime": 8,
          "responseSize": 0
        }
      },
      {
        "id": "f760db71-3e3a-49c5-89a3-ac1bd287c18a",
        "cursor": {
          "ref": "73b15aab-c23b-4941-9550-3bd4e9db1879",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "816893a1-b3a2-4076-a140-f418fce5ca86"
        },
        "item": {
          "id": "f760db71-3e3a-49c5-89a3-ac1bd287c18a",
          "name": "did_json"
        },
        "response": {
          "id": "86bf1853-1d78-4c31-8569-ddede124ca3b",
          "status": "OK",
          "code": 200,
          "responseTime": 272,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7020d5a6-c6b5-4f97-bdd0-ec3f19a21a03",
        "cursor": {
          "ref": "fc7266e1-219b-4b88-98c9-93b80b075725",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "3162720e-8b56-4cc5-a536-52b908d829da"
        },
        "item": {
          "id": "7020d5a6-c6b5-4f97-bdd0-ec3f19a21a03",
          "name": "did:invalid"
        },
        "response": {
          "id": "8144b813-b3f1-4a8f-87c6-e011e2ba04a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 159,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7020d5a6-c6b5-4f97-bdd0-ec3f19a21a03",
        "cursor": {
          "ref": "fc7266e1-219b-4b88-98c9-93b80b075725",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "3162720e-8b56-4cc5-a536-52b908d829da"
        },
        "item": {
          "id": "7020d5a6-c6b5-4f97-bdd0-ec3f19a21a03",
          "name": "did:invalid"
        },
        "response": {
          "id": "8144b813-b3f1-4a8f-87c6-e011e2ba04a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 159,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3f971fc-3dba-4f7e-8f05-6769e73c52ac",
        "cursor": {
          "ref": "7b11f3ea-c96c-4875-a6c7-f7969607dfab",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "3d602f0d-b9aa-4488-a136-1e016e7ee977"
        },
        "item": {
          "id": "f3f971fc-3dba-4f7e-8f05-6769e73c52ac",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "b10bc900-0350-4524-9f3f-1e1a1962fe31",
          "status": "Not Found",
          "code": 404,
          "responseTime": 149,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18601c77-6771-4dd3-84d8-32e9a77dc691",
        "cursor": {
          "ref": "205c7bc2-8d77-4fb7-9ae0-a881badd7499",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "247732ce-36fb-4030-8a9b-6e1d57f3255f"
        },
        "item": {
          "id": "18601c77-6771-4dd3-84d8-32e9a77dc691",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "5bdd5bea-9648-48c1-8b92-9c34a04b01ef",
          "status": "Not Found",
          "code": 404,
          "responseTime": 97,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4b1af3b-a3c2-49ad-addb-bffe1acd9ffb",
        "cursor": {
          "ref": "3ee338f4-28d5-4c10-bfb3-b96a7dc2e1e8",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "8078e723-2799-45a0-a590-e3ebfe80c457"
        },
        "item": {
          "id": "b4b1af3b-a3c2-49ad-addb-bffe1acd9ffb",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "98e6166a-8570-4910-8f2f-db1d53397ebf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5977543c-c3d6-4479-9582-8ef3e139698d",
        "cursor": {
          "ref": "538e75b0-4124-4534-bd91-b1d7264cdf0e",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "b37d2d9c-4c7c-4a96-8794-fa4a488e9563"
        },
        "item": {
          "id": "5977543c-c3d6-4479-9582-8ef3e139698d",
          "name": "identifiers"
        },
        "response": {
          "id": "b8fcb2be-b9b2-4087-a8e3-736ce3217bf4",
          "status": "OK",
          "code": 200,
          "responseTime": 130,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17aeca3c-c3a6-4b61-b7b4-94c88279c35e",
        "cursor": {
          "ref": "99c2ff10-3384-4987-9fc1-904d60bdc474",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "1eba627c-cdbe-4eb8-869b-948ea412d62a"
        },
        "item": {
          "id": "17aeca3c-c3a6-4b61-b7b4-94c88279c35e",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "d6d20368-da1b-41f8-9f9d-d74114c91536",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5eefba47-a8a3-4f3c-b42b-ad58f785dc5e",
        "cursor": {
          "ref": "b9210264-dcd4-4f56-a8d8-7bf130498705",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "1c5118bb-4162-4edd-a431-8e34829189de"
        },
        "item": {
          "id": "5eefba47-a8a3-4f3c-b42b-ad58f785dc5e",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "0965896f-24ba-412a-abf6-63f1be35c254",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "722d9de2-4579-422e-be5c-cb3e208a3f07",
        "cursor": {
          "ref": "f2021e8c-4711-48bd-979e-7d1744bdb3af",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "5c667a97-6b0a-4eb5-9cc2-3890e753a00e"
        },
        "item": {
          "id": "722d9de2-4579-422e-be5c-cb3e208a3f07",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "55ddbffe-0887-4e16-a815-a0e0fc31945a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "800625e3-3b16-4d0a-a730-025ffc1fdf67",
        "cursor": {
          "ref": "f04c9b76-3d01-44f7-b604-3dff65239eb9",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "6070603d-1145-4305-b7ef-67128ea958ec"
        },
        "item": {
          "id": "800625e3-3b16-4d0a-a730-025ffc1fdf67",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "b2ce52cd-98f3-45c2-ba5c-29920c780636",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7be4f864-498d-4f7d-87c0-28d906ec43a2",
        "cursor": {
          "ref": "0fdaf791-e8ab-4b1b-bbf3-3f64575e52f5",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "14b6b292-34bc-4f56-8a6a-0e661f8876ba"
        },
        "item": {
          "id": "7be4f864-498d-4f7d-87c0-28d906ec43a2",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "f665f300-2843-4bc7-b839-de9d4d619ff8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1920fd16-24fc-4f3b-9942-ed609c6b6d47",
        "cursor": {
          "ref": "4eb7fd8a-3b44-4288-8ceb-2d93cd16da07",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "93c2343d-17af-4218-b0a2-9cdfe1a912a9"
        },
        "item": {
          "id": "1920fd16-24fc-4f3b-9942-ed609c6b6d47",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "7bd88965-2cc2-4be2-bf3b-1e65a17777d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15587291-e9a7-44d2-93ad-0c46bc7cc1de",
        "cursor": {
          "ref": "d6eb19c4-09f3-4dea-8c51-4107e073c0b8",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "9762cee3-312e-4ce3-b087-54a99a3b5ead"
        },
        "item": {
          "id": "15587291-e9a7-44d2-93ad-0c46bc7cc1de",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "fd414899-1064-421c-906b-3d24df89485c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "383cd5bd-c3a4-442d-acb7-b1ced3d5f4e9",
        "cursor": {
          "ref": "dfa39693-9770-48ba-8817-0b6acfebe0fa",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "44246e72-d775-4b71-80a7-9b35ec879bd2"
        },
        "item": {
          "id": "383cd5bd-c3a4-442d-acb7-b1ced3d5f4e9",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "72b9db3d-d9bd-4197-9063-8e6b380c5a91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2714c4c-a2ec-44f2-a895-34fdfcfd577a",
        "cursor": {
          "ref": "2bece1bd-5a6c-404c-99e2-467de8eac8e6",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "80b41743-e335-43ee-803e-b6398c854df7"
        },
        "item": {
          "id": "e2714c4c-a2ec-44f2-a895-34fdfcfd577a",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "e5610d6b-3aed-42fe-a3e4-1c99970786ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63131ed0-aa84-45c9-b541-68b3e3db5373",
        "cursor": {
          "ref": "53dad1ab-b175-4268-a99d-770ae063ae43",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "f8bbf1e7-9bc6-40aa-91f6-eee13571aaf9"
        },
        "item": {
          "id": "63131ed0-aa84-45c9-b541-68b3e3db5373",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "07db443d-21e6-407a-a61e-71d6ea0b7bf7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf0ab5fa-73b6-4e86-af81-3c6df38d6c5c",
        "cursor": {
          "ref": "e0cc18ee-434b-4499-bf6e-ed6dcc11c26b",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "4febbc59-9460-4141-a4d1-300d7df3ec20"
        },
        "item": {
          "id": "cf0ab5fa-73b6-4e86-af81-3c6df38d6c5c",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "53bb1582-c346-4b10-8a22-696410a0efef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac9488ed-afc0-4f52-83ce-9a3e87c99aac",
        "cursor": {
          "ref": "778e275c-c693-4cb1-b412-1bc8b941f296",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "377059ee-355d-48b0-bb3c-baf531acc36d"
        },
        "item": {
          "id": "ac9488ed-afc0-4f52-83ce-9a3e87c99aac",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "0cd6d910-590e-4c0b-8815-77054ca3ea15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ece4b38-d1dd-4930-8d12-c07dbe050a74",
        "cursor": {
          "ref": "dcd40376-cbb0-4d47-9758-51de4fdbbcb8",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "43735d09-ce4e-48ca-a051-63be1303c22f"
        },
        "item": {
          "id": "1ece4b38-d1dd-4930-8d12-c07dbe050a74",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "4296456e-f3d2-4a0f-8fdc-d5328109f41d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e2a734d-9541-4568-8b7e-7e20aa876f93",
        "cursor": {
          "ref": "2890fca9-fe73-41e9-a6b7-a5535be908a3",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "b5230ba5-fbfd-4278-9531-bb7afc8bd372"
        },
        "item": {
          "id": "0e2a734d-9541-4568-8b7e-7e20aa876f93",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "7f816f5b-df73-4e7f-9054-9e1b3b5a098b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbc01283-e74c-456a-b2f1-a9c8cd584fc1",
        "cursor": {
          "ref": "fa85b608-7608-4c07-95d8-8fa1ee312511",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "a74f305d-cedd-4347-9a22-e0aac6b75dd6"
        },
        "item": {
          "id": "cbc01283-e74c-456a-b2f1-a9c8cd584fc1",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "6ae38644-cba0-4427-a35e-10159f67d541",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77e633cf-13ec-4d0f-b693-6eef3833cf6c",
        "cursor": {
          "ref": "a554d33c-2c50-4fda-9031-c902f63a3735",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "742b323e-e3d5-4420-b795-43ab5ab45e05"
        },
        "item": {
          "id": "77e633cf-13ec-4d0f-b693-6eef3833cf6c",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "b70b6608-c10b-4bfe-bfd1-638ccc3b202a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1addda4d-c7b4-4cff-9f33-03e9de58ac01",
        "cursor": {
          "ref": "870417de-47bd-4481-86a4-892d2b41511a",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "f63d2848-c0f2-49d4-80c6-11fadcda21f8"
        },
        "item": {
          "id": "1addda4d-c7b4-4cff-9f33-03e9de58ac01",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "046ceb24-4571-4f1a-b44f-a408773a634f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddbaf0f4-e754-4253-9b53-90ce76ce9665",
        "cursor": {
          "ref": "d1652092-c1a3-4c8f-be9a-e2e9fa20f55f",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "2015ae7b-3aa9-433c-8afc-6e81d389ddca"
        },
        "item": {
          "id": "ddbaf0f4-e754-4253-9b53-90ce76ce9665",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "ea80eced-25f0-49b7-9254-34d3819c9699",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "597f4be6-8eb3-4d2a-ba4f-17e8d8b526df",
        "cursor": {
          "ref": "ba595e9d-d6dd-4569-bcba-90e631732607",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "2f15c5d3-be92-466a-9858-f5ca0f5e0c5c"
        },
        "item": {
          "id": "597f4be6-8eb3-4d2a-ba4f-17e8d8b526df",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "b9784bcb-1063-4b6e-9cbb-1d1ad020b087",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "868350dc-9d7f-433a-8352-2c942c4b520c",
        "cursor": {
          "ref": "53c55579-6d46-4b1d-85fd-4e87dae4f164",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "701b27ec-0b0f-442d-ac25-d72fa7921ce5"
        },
        "item": {
          "id": "868350dc-9d7f-433a-8352-2c942c4b520c",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "bbfbe41b-83b2-4ce7-a6e2-2e2bd1d3ff2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91b4ff29-32b4-4899-bad0-3824f243ff70",
        "cursor": {
          "ref": "1824d0e5-5817-42fa-b968-adab89b66f13",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "ed8b87a1-84d5-45d8-b669-d6f28cb5e6f9"
        },
        "item": {
          "id": "91b4ff29-32b4-4899-bad0-3824f243ff70",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "60fc5e07-0059-48b2-86ea-8a92434c9618",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f514840-3302-4152-8051-83d5a2f55918",
        "cursor": {
          "ref": "7ec4c02a-7429-4838-ae48-a392517d22b2",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "ff41a342-2cd1-4b3a-9dff-66aea6c172c6"
        },
        "item": {
          "id": "5f514840-3302-4152-8051-83d5a2f55918",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "ae6da9fd-cafa-4680-81c8-47fdf8d9acf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92a9ace9-a16e-4a55-9d99-e24292069fce",
        "cursor": {
          "ref": "9edc8b88-cbce-4bbc-babc-673f1bd4cdcd",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "847dd6f2-2b78-401d-8dd8-ef336c0790ca"
        },
        "item": {
          "id": "92a9ace9-a16e-4a55-9d99-e24292069fce",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "3162bc7d-6b68-4eee-b5a8-9ff6c5db60c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d5eef22-b809-4d1c-9b71-84af29f8bfaa",
        "cursor": {
          "ref": "98c192b2-34b1-4854-bad1-db4d8f0e7efd",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "93141d72-dc9a-4d14-934a-f54c8cbbc6ad"
        },
        "item": {
          "id": "4d5eef22-b809-4d1c-9b71-84af29f8bfaa",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "905a0980-d3f2-419f-ab54-c01fafca5321",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fe385ba-de1a-4c12-aa0a-4c09171f00b9",
        "cursor": {
          "ref": "2be8fd5f-0461-4000-9ab5-b1bb39c83932",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "48cb0c26-b221-45c8-a12b-67d49aac0baf"
        },
        "item": {
          "id": "1fe385ba-de1a-4c12-aa0a-4c09171f00b9",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "a72474f1-53b4-4dcf-8bd2-e3abf981d919",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e76a961c-6bb4-4df3-a4fb-e8142f10a3d1",
        "cursor": {
          "ref": "a6929f74-4f68-421e-88cd-2147b72cba76",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "0bc5dafd-42af-4156-b0b4-68d326af79af"
        },
        "item": {
          "id": "e76a961c-6bb4-4df3-a4fb-e8142f10a3d1",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "f8b10081-a220-4251-a718-9d8fb1023699",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9f20fb2-b606-4c88-9ca6-33778bf02140",
        "cursor": {
          "ref": "0f0feec1-c165-43df-840d-10cfe45b9ec4",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "31a4cf01-a5bc-4e56-9f39-00f18952957f"
        },
        "item": {
          "id": "d9f20fb2-b606-4c88-9ca6-33778bf02140",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "e6568011-161f-4c2e-9efc-6eedb8d7d15f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20a206bd-fc6c-4556-9f89-63d12f538168",
        "cursor": {
          "ref": "c2b1e1b6-7a28-4a95-a1fe-c2224aa0d5d9",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "c940efb4-7d9e-46d3-9b66-d4774bd19a49"
        },
        "item": {
          "id": "20a206bd-fc6c-4556-9f89-63d12f538168",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "2477b5a5-2dee-41fe-9fe8-995da5b8d2e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab11ebe0-ae74-40c2-a46f-bbfb0633e2a7",
        "cursor": {
          "ref": "22d1af43-42ac-4157-9af6-8d8c0e63e456",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "dadd0915-57b1-4055-bc34-517000762adf"
        },
        "item": {
          "id": "ab11ebe0-ae74-40c2-a46f-bbfb0633e2a7",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "8e1251f7-dd5b-4f4a-9505-5f074024002f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "853c61b1-5f09-42aa-9f5a-1d6420f7aef3",
        "cursor": {
          "ref": "71ffbf6d-45cc-4796-964a-bee46e23cf22",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "728b4493-f947-4deb-9bca-da4ebc4a3db5"
        },
        "item": {
          "id": "853c61b1-5f09-42aa-9f5a-1d6420f7aef3",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "82824a54-a7d8-4805-84e2-a22b3d334982",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 120,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da5dca05-19f7-4348-93ac-bac096177771",
        "cursor": {
          "ref": "02c51a4d-3765-4771-834a-2b8abafda130",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "7bb05f93-d881-4e6e-aa5a-433705af4250"
        },
        "item": {
          "id": "da5dca05-19f7-4348-93ac-bac096177771",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "31977a4e-465f-4c9b-b657-2a14883596f5",
          "status": "Created",
          "code": 201,
          "responseTime": 629,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "ff8418f5-e229-4756-aaff-4fd35f336974",
        "cursor": {
          "ref": "fdbcb06f-154c-45f3-8a15-dcb010a33e3e",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "5da55102-5aab-4834-ac3c-ccda22afdbf1"
        },
        "item": {
          "id": "ff8418f5-e229-4756-aaff-4fd35f336974",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "806d3b1f-7720-4799-867f-22f90cc00807",
          "status": "Created",
          "code": 201,
          "responseTime": 282,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "73425e00-b8da-4664-8c29-d3531cfd6007",
        "cursor": {
          "ref": "953d66d3-fc95-4405-b58e-48ecc2d738e3",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "135a4fec-dfb9-4007-a601-7cc29191672b"
        },
        "item": {
          "id": "73425e00-b8da-4664-8c29-d3531cfd6007",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "f116fb6c-b164-4d4c-aae2-048b6356ab02",
          "status": "Created",
          "code": 201,
          "responseTime": 294,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "3ff53add-4ef1-4fe0-a2fb-c3314668d357",
        "cursor": {
          "ref": "c7b65b45-421d-4557-9be1-d72d31f72ab2",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "1db60a94-e3eb-4019-8836-717ab00a75d6"
        },
        "item": {
          "id": "3ff53add-4ef1-4fe0-a2fb-c3314668d357",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "4c78c8a9-be37-4927-9c5e-811cc519ceb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3856fe43-b013-4698-934e-576e615cf16c",
        "cursor": {
          "ref": "503cec95-615a-4bcc-84d2-c77fcc7cefc0",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "5107ffd7-6853-40a7-bc5b-68347cad5ff2"
        },
        "item": {
          "id": "3856fe43-b013-4698-934e-576e615cf16c",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "e48d8902-a6b6-4373-a943-820a2c4a2d22",
          "status": "Created",
          "code": 201,
          "responseTime": 278,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "b5485345-4e6e-4d39-acea-337126b129cb",
        "cursor": {
          "ref": "45f897a9-4e74-499d-be29-11f1c375fb75",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "5b8fcd8a-6c06-47bb-b756-2ae4e188b298"
        },
        "item": {
          "id": "b5485345-4e6e-4d39-acea-337126b129cb",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "30c3d422-1947-4dd9-831e-b444e83f561f",
          "status": "Created",
          "code": 201,
          "responseTime": 340,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "30cefe90-7da5-4f1f-a99e-10f55814d7e6",
        "cursor": {
          "ref": "b3b358cc-f9f8-47d9-acb9-487e301db355",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "2c0d349f-cf29-470c-b69c-693791b7016c"
        },
        "item": {
          "id": "30cefe90-7da5-4f1f-a99e-10f55814d7e6",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "53bf8a66-6c19-4e2c-8415-27c5226317d0",
          "status": "Created",
          "code": 201,
          "responseTime": 306,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "8f1b48f3-4234-4b3f-b1ca-704fbbc7f76d",
        "cursor": {
          "ref": "12cc639f-8456-4be6-bc77-a12a309e881e",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "dee0b4c7-e7f2-4d58-bce0-92319c084795"
        },
        "item": {
          "id": "8f1b48f3-4234-4b3f-b1ca-704fbbc7f76d",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "b6533f0b-0c52-4815-a321-11e8fe84e77c",
          "status": "Created",
          "code": 201,
          "responseTime": 297,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "968b3a17-2a87-4958-9be3-319836f770e3",
        "cursor": {
          "ref": "1375c37c-f4a2-4f4e-8927-e0140996e992",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "3e61ebc9-7b12-48e6-a582-4e54ad425162"
        },
        "item": {
          "id": "968b3a17-2a87-4958-9be3-319836f770e3",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "f7678430-4e13-436c-bc88-b3969a303531",
          "status": "Created",
          "code": 201,
          "responseTime": 277,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "20ddb092-50ee-4cac-8447-22a0c45715c0",
        "cursor": {
          "ref": "baaa23b1-263f-4ac3-9e93-7724f3968e0f",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "d25c11b3-78e6-4bb8-8360-d7780351e671"
        },
        "item": {
          "id": "20ddb092-50ee-4cac-8447-22a0c45715c0",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "bc712b3e-c240-49e6-890c-c998ac0a00d2",
          "status": "Created",
          "code": 201,
          "responseTime": 291,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "f1bfc099-b200-4c92-bd64-d766490cbec8",
        "cursor": {
          "ref": "173bdcd7-791c-45c2-b6dd-d3bddddffb5c",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "74397563-187e-479a-9ba8-2721a5a2244d"
        },
        "item": {
          "id": "f1bfc099-b200-4c92-bd64-d766490cbec8",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "94af23ed-3dec-4d98-b747-571fd2653eed",
          "status": "Created",
          "code": 201,
          "responseTime": 280,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "7a69bda5-88b2-44ff-8313-72c6bbf904c3",
        "cursor": {
          "ref": "b4e8e6e2-14eb-4c52-b50d-e2889695f8ab",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "f9f0470b-4345-46fe-9a70-6375c291a6c4"
        },
        "item": {
          "id": "7a69bda5-88b2-44ff-8313-72c6bbf904c3",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "a520892e-25eb-4b19-af90-155536dfabbd",
          "status": "Created",
          "code": 201,
          "responseTime": 300,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "50847704-78cb-454a-814f-8f8ffc912bb4",
        "cursor": {
          "ref": "a57a3840-eb6c-4ab5-835f-f1db1e7ef5b2",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "5836d06a-4d80-4b9f-8204-4182f5912ef4"
        },
        "item": {
          "id": "50847704-78cb-454a-814f-8f8ffc912bb4",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "bf09af77-ae2f-4c1f-9914-7caf5bcc1800",
          "status": "Created",
          "code": 201,
          "responseTime": 308,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "84ee2a91-18c9-4a99-a75d-a958a5f65a3f",
        "cursor": {
          "ref": "1de08382-6a4f-4a42-9537-be6975d81cf9",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "7eae047e-5684-48db-b24f-61c3d193cf5a"
        },
        "item": {
          "id": "84ee2a91-18c9-4a99-a75d-a958a5f65a3f",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "d04140ab-c29d-4815-a30b-d709b42ceb62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "252f09db-dbc2-4ce0-a563-212c14a43076",
        "cursor": {
          "ref": "1756bc58-c1e8-414a-8eab-52671df333cb",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "2b8a2a57-4354-4cbd-89d7-9b4ea771d5fe"
        },
        "item": {
          "id": "252f09db-dbc2-4ce0-a563-212c14a43076",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "26ab11ad-b565-4925-941b-52bc622a1186",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf3eb8fe-d24c-425a-a1a5-8c78a9b9dc74",
        "cursor": {
          "ref": "be749481-568f-4c95-a23c-03f12f00691f",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "2ddac5bb-06b7-4da6-b226-b9171541164e"
        },
        "item": {
          "id": "bf3eb8fe-d24c-425a-a1a5-8c78a9b9dc74",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "3009c145-035a-40a1-acc5-adcf50608a21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d379983-3950-4573-ba93-9a90144c2635",
        "cursor": {
          "ref": "79b5e9b9-a061-448f-8ec6-4f5ae1f782c2",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "5750932e-8ddf-4343-a8ef-cd6ba579ee45"
        },
        "item": {
          "id": "7d379983-3950-4573-ba93-9a90144c2635",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "b446539e-d3ed-478a-aa62-d3076b730c71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4663ed0a-6119-4c98-8b7c-deeac63556ec",
        "cursor": {
          "ref": "e4741db8-ac90-4b59-9a17-e3a61308459f",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "35dfb83a-0560-4344-9db0-13d92bc6648e"
        },
        "item": {
          "id": "4663ed0a-6119-4c98-8b7c-deeac63556ec",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "5530960c-5b66-4db6-9716-2822f1acc366",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ce670bd-71db-4a45-9c57-e49e3256f4d3",
        "cursor": {
          "ref": "c4a695c9-9833-45b5-8008-bed93f69dcc4",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "1779d035-bdb3-4840-8141-22c337db6c0b"
        },
        "item": {
          "id": "7ce670bd-71db-4a45-9c57-e49e3256f4d3",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "b0af85c2-8cbc-48e4-9141-a92577958f73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c487704c-111b-4503-b3a8-eb0d4f14e6e6",
        "cursor": {
          "ref": "402a8178-6aae-4bea-8ff4-87012c9a080c",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "e5d6ec11-483a-40f7-9a1d-ff96e2ae5b3b"
        },
        "item": {
          "id": "c487704c-111b-4503-b3a8-eb0d4f14e6e6",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "7c3e031b-fc6f-45b7-8cbd-bfb692b3a680",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "799b19b7-8d0f-4b7f-8aae-9e57180276df",
        "cursor": {
          "ref": "84cda91a-d837-41d8-810f-9b9602027c1c",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "49105847-5053-4a7a-bae1-fb84fc1efbff"
        },
        "item": {
          "id": "799b19b7-8d0f-4b7f-8aae-9e57180276df",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "1e013d0c-680b-48e6-afc0-ad526f62bd76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa0b5871-805a-4191-9fcf-5a50e8b3dbf4",
        "cursor": {
          "ref": "3e241a3e-1577-4284-9e1f-7d165130b29e",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "02e997d6-f085-4e8b-a635-f4e628fb8c48"
        },
        "item": {
          "id": "fa0b5871-805a-4191-9fcf-5a50e8b3dbf4",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "df4e14ef-cbd0-497e-9ad9-3d4fffe17336",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "661c58cb-5cf0-47f4-a386-16c4bb64a113",
        "cursor": {
          "ref": "3815a54e-79cf-4830-b4fd-71ad8db83ffa",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "7ba38609-cb2f-4e09-9f25-39dd5f4f94b3"
        },
        "item": {
          "id": "661c58cb-5cf0-47f4-a386-16c4bb64a113",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "21c0a581-b3f3-464b-89b9-3998614986ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60018931-a607-4960-ba76-3610b041eb1c",
        "cursor": {
          "ref": "9ee7b91c-f18e-4a5d-80f8-223a01be50f9",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "a1b69366-4531-4fab-8d6a-0ebab326bf62"
        },
        "item": {
          "id": "60018931-a607-4960-ba76-3610b041eb1c",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "22dc5e4d-381c-4c3f-b750-350092410dc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92ac2be2-4fbc-4dbd-9f71-f9460d2b804f",
        "cursor": {
          "ref": "ee79f506-5c6c-4a05-8d0c-0bfd94378f5c",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "3a5ac2b1-b6ff-4757-af9a-5935afaa02ab"
        },
        "item": {
          "id": "92ac2be2-4fbc-4dbd-9f71-f9460d2b804f",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "33f9bd05-925d-48b6-9302-881eedb57606",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d5928db-ae70-4671-b92f-dca984454062",
        "cursor": {
          "ref": "5d636313-3d7e-4369-af49-42fbf6903fbb",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "faeee0af-2915-4b42-8b82-cc6165e840b7"
        },
        "item": {
          "id": "8d5928db-ae70-4671-b92f-dca984454062",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "c80f9d12-740e-44de-8a0d-90e5efa44610",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b385575-2fdd-4a42-8185-9c63f23ee40e",
        "cursor": {
          "ref": "f7e9ef99-2e11-4581-98d3-219fb016f341",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "b9cb3c09-a226-42e9-8da6-bea13fd37712"
        },
        "item": {
          "id": "3b385575-2fdd-4a42-8185-9c63f23ee40e",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "b9f89849-49f5-4c9a-8927-3e4db973b805",
          "status": "Created",
          "code": 201,
          "responseTime": 335,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "c893cafb-dff5-4674-8de7-ce5ba6ca8fdd",
        "cursor": {
          "ref": "b0aeaaae-f1b9-45c0-99ae-0c9f277a4b8d",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "83281a57-672c-419f-a01c-c96710533a5d"
        },
        "item": {
          "id": "c893cafb-dff5-4674-8de7-ce5ba6ca8fdd",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "976a37cb-21ff-4b32-9941-06e2b6bf2be5",
          "status": "Created",
          "code": 201,
          "responseTime": 297,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "4dbd4bd1-f302-4122-9e85-f4f8d2d582e5",
        "cursor": {
          "ref": "4c8872ba-235b-4eb3-a8d5-23d7c9da802c",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "69c01804-3c98-403f-8780-59312f5bc49e"
        },
        "item": {
          "id": "4dbd4bd1-f302-4122-9e85-f4f8d2d582e5",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "e05cb0cc-e017-4790-8db0-95f6a3c48bba",
          "status": "Created",
          "code": 201,
          "responseTime": 286,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "7a3a74e1-39a0-4915-838d-5e4d8c555ea2",
        "cursor": {
          "ref": "fe7271a0-b205-413f-a3c0-7d16faac10b6",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "b601a931-660e-4d84-a918-c4cc82c27f1e"
        },
        "item": {
          "id": "7a3a74e1-39a0-4915-838d-5e4d8c555ea2",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "a444199b-0115-454b-80c8-e2a2ed745e05",
          "status": "Created",
          "code": 201,
          "responseTime": 292,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "6782a105-0c7b-450f-b716-7f720437ae30",
        "cursor": {
          "ref": "26fc2cb0-27b8-45a8-a0d7-f332c3ed1f18",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "53a2b923-9ab1-4da3-9049-c4120d86b0f7"
        },
        "item": {
          "id": "6782a105-0c7b-450f-b716-7f720437ae30",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "9b1251e5-f74f-4507-b1f1-902627e11af8",
          "status": "Created",
          "code": 201,
          "responseTime": 313,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "1a85033b-d792-4549-9c59-6296eda8142b",
        "cursor": {
          "ref": "81881393-622e-496f-96b1-a2b0bd114c19",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "61cbc29e-303a-458b-9717-a55e90a095e7"
        },
        "item": {
          "id": "1a85033b-d792-4549-9c59-6296eda8142b",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "95a96ae2-2f86-499f-9f48-1683aa1d0f98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0742ce49-21b0-4af3-b251-40b9445cc991",
        "cursor": {
          "ref": "0facf1a6-50f8-4887-a509-e32c2c6f279c",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "e4dfd615-ec0d-4589-a16a-3155b97031c4"
        },
        "item": {
          "id": "0742ce49-21b0-4af3-b251-40b9445cc991",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "a9f264bd-f094-4dc8-bcf9-002554dd7212",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4fafb25-31df-4488-a4fc-a68423732860",
        "cursor": {
          "ref": "504f9cf0-c32f-4e44-b2b7-ec19f8f45d7d",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "e3dcc1fa-fcb8-4ed3-adda-75de9393c93f"
        },
        "item": {
          "id": "f4fafb25-31df-4488-a4fc-a68423732860",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "c7d46e2d-d5a1-40e7-b139-680249b2caae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f55f6594-e8e6-47a4-95a3-17da8d3aafba",
        "cursor": {
          "ref": "e4193f52-dd25-4230-a2f2-6bc70fbb30a4",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "66e17112-1b65-409c-98ed-b9b5a74e5992"
        },
        "item": {
          "id": "f55f6594-e8e6-47a4-95a3-17da8d3aafba",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "d7ef9880-50fc-447d-ab8e-0cf0b2bfae79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae217fe3-7bf5-4bfd-9f35-67ab09977dca",
        "cursor": {
          "ref": "c68de507-5316-45e1-bf6f-20c78dc53626",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "aed94c4f-635d-4a14-8e38-4764f15388f8"
        },
        "item": {
          "id": "ae217fe3-7bf5-4bfd-9f35-67ab09977dca",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "3af951ef-c33f-4fc7-a24c-f04603dc63d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc044330-0d9f-4fc9-84c5-b6fd9f8c12fd",
        "cursor": {
          "ref": "f66614aa-6f70-4de4-bd06-f2f60902baba",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "39902900-a0a0-4d5c-9b2c-fcc962572307"
        },
        "item": {
          "id": "fc044330-0d9f-4fc9-84c5-b6fd9f8c12fd",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "c100f1d3-4975-41a4-83dc-e5671e678aac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2104fb42-3be5-40ba-bec2-303ae2e4d073",
        "cursor": {
          "ref": "2d2bd0e6-9f4b-47b0-ba74-f631025a0dfc",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "414af866-82c8-4f66-8f64-a8f915fbcd2d"
        },
        "item": {
          "id": "2104fb42-3be5-40ba-bec2-303ae2e4d073",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "77a079d2-f650-4672-bef9-888433be9836",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fadf940e-7f86-4859-aabe-0b4165a399d6",
        "cursor": {
          "ref": "b588d458-2f6d-4e29-b3f4-833c55299a43",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "60781e4e-44f4-4f52-9b69-01d2317b1ed1"
        },
        "item": {
          "id": "fadf940e-7f86-4859-aabe-0b4165a399d6",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "fc96e791-f5aa-40de-9a46-8eb18342ce51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc6b3c90-8a1f-4e20-ae3c-952ee12ceb83",
        "cursor": {
          "ref": "bc5da776-a787-4142-812a-22e14ca79ff5",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "47cb1808-4090-4729-9c9a-c61ac71cc4bf"
        },
        "item": {
          "id": "cc6b3c90-8a1f-4e20-ae3c-952ee12ceb83",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "7f392a04-9dab-48eb-9b18-dd4492514389",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "988ad8e6-3c72-4781-9e7e-03174de529ae",
        "cursor": {
          "ref": "a60cea84-8cd5-43f3-ae3c-1d19f83187a1",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "7eaba4cc-d022-4635-8645-54670fdcd9a8"
        },
        "item": {
          "id": "988ad8e6-3c72-4781-9e7e-03174de529ae",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "322147d9-5318-4436-bbc7-171a973a9cad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb7ebc91-77c6-43df-93c3-61bdb0396830",
        "cursor": {
          "ref": "bcc2dc17-2c6f-4a3a-acf8-09caea13f6f7",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "a80c381c-fde4-4048-81d8-292d510c8e9a"
        },
        "item": {
          "id": "bb7ebc91-77c6-43df-93c3-61bdb0396830",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "bcb994e4-f871-483a-9451-8986f85ce590",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23193163-f99b-4669-9bd4-b41c8f1df194",
        "cursor": {
          "ref": "bcb34296-b738-453d-8440-60abcc2ecce0",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "dd1b8af9-21ba-4a09-95cb-c0bb261127cc"
        },
        "item": {
          "id": "23193163-f99b-4669-9bd4-b41c8f1df194",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "f665ed51-f396-4efe-aad7-b2c5c89a1a61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4044968-737f-4414-b2d1-47c8f49b66c8",
        "cursor": {
          "ref": "8d78b50d-13d2-43fe-9320-20566b853ba0",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "d78be486-8b06-4af0-8b0a-1675c790f3d0"
        },
        "item": {
          "id": "e4044968-737f-4414-b2d1-47c8f49b66c8",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "1afc5554-60da-41e1-8e6c-aaccd9a17ab4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bafb9cb-6ce4-4c2b-ac4b-97e53809128d",
        "cursor": {
          "ref": "edfc6f8a-b8f5-4aaa-81e6-c2a9a39da004",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "116836f2-8607-4817-9c24-48910ed437ad"
        },
        "item": {
          "id": "6bafb9cb-6ce4-4c2b-ac4b-97e53809128d",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "b29357b7-701f-47a5-8ec2-f5b581ddc5b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50731f36-44b6-45c2-b34f-affee35e4467",
        "cursor": {
          "ref": "af045b6a-527a-465e-a200-34721cc0b4f4",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "65c6c7de-ec46-4c7a-8392-27d35611cb6f"
        },
        "item": {
          "id": "50731f36-44b6-45c2-b34f-affee35e4467",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "058379f2-a282-4db7-8f3c-e84da8e4ce46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b41e929-fa28-4d47-919b-aa3e8833c1c2",
        "cursor": {
          "ref": "e90b534d-509a-4df6-b178-c15058bc4069",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "ad598a5c-10c6-49fa-b45f-cb5dcf3bd6cb"
        },
        "item": {
          "id": "9b41e929-fa28-4d47-919b-aa3e8833c1c2",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "cc878c8e-4f4f-4414-b2a7-127aac5fa80c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52e0ebac-43f8-4cfe-9be7-4013a908fcd6",
        "cursor": {
          "ref": "50c8764e-4064-4932-b00d-93e6326bfeb8",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "727b4ab1-7eac-4025-b576-a347e8dff363"
        },
        "item": {
          "id": "52e0ebac-43f8-4cfe-9be7-4013a908fcd6",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "40f44e24-5916-4e65-8ca5-7f797ca1b38d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "989afc63-9586-4991-8bad-7e2e279cb3fe",
        "cursor": {
          "ref": "e4e0dbd6-b658-4a2b-a8c5-331defc1ab42",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "ba04fff2-889c-40ab-a8d7-163dcc926198"
        },
        "item": {
          "id": "989afc63-9586-4991-8bad-7e2e279cb3fe",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "28e7598b-46ad-4ad0-ba39-2c10d9b58849",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea1f2626-db8c-4291-bc73-22ec21853e3e",
        "cursor": {
          "ref": "4b6f8ef4-6319-4f0e-a722-552de3927724",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "72506200-42c3-41e9-b801-e6a60f887f88"
        },
        "item": {
          "id": "ea1f2626-db8c-4291-bc73-22ec21853e3e",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "ec00bba6-ef25-4ec1-af46-6d47e2d4400e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67b451e3-4d81-40c6-b724-96156d15ba9a",
        "cursor": {
          "ref": "93960b7b-af02-47a7-a61b-68c5cec0fcb8",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "e56a8032-ab90-4ebf-9014-e1b1955e8467"
        },
        "item": {
          "id": "67b451e3-4d81-40c6-b724-96156d15ba9a",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "7976dcc2-6aae-42a1-90c8-9c3445181747",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89110bd1-71ad-4662-aa24-eaa48926ea8e",
        "cursor": {
          "ref": "db260885-cf78-4977-84dd-7d4924e44cc2",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "9a057e6f-b7cc-42d7-a0da-37b88d1d15fd"
        },
        "item": {
          "id": "89110bd1-71ad-4662-aa24-eaa48926ea8e",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "34591306-9ff6-4f02-bd75-1e3a16f1cce2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "109ecaa6-f4c1-4a80-9a3a-f67742f683bd",
        "cursor": {
          "ref": "ee5a1bd0-6a82-43f4-9d1b-9a5d86031d8e",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "5e45a742-627f-466d-a950-1a7b3f2976bc"
        },
        "item": {
          "id": "109ecaa6-f4c1-4a80-9a3a-f67742f683bd",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "ef09f29b-dcb1-4585-a2c1-6667b86ec2af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44a99984-3800-46c1-b2b6-f5fc316513d6",
        "cursor": {
          "ref": "2afac651-8475-4d59-a3c8-b2da56b877ff",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "e749da08-9d2e-47c8-8622-f3a37b269887"
        },
        "item": {
          "id": "44a99984-3800-46c1-b2b6-f5fc316513d6",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "09425a0e-9b31-4d6c-b008-fb39d6153802",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ffd4c25-0609-471b-9a63-5988c26cb9b5",
        "cursor": {
          "ref": "d4b1d9f6-bcab-4115-905a-3f03d481fad6",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "d2d8ebd3-f49c-4f95-b422-018133ef6ace"
        },
        "item": {
          "id": "4ffd4c25-0609-471b-9a63-5988c26cb9b5",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "b8d56d54-34ac-447d-829b-ea116bb73230",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da0abc73-625b-4e7b-ba4f-4de644941528",
        "cursor": {
          "ref": "0fbf7659-a2d7-4117-9747-f441991fb45e",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "267894b6-9277-4b1c-87de-2eb5ba2d1574"
        },
        "item": {
          "id": "da0abc73-625b-4e7b-ba4f-4de644941528",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "9c51d2b5-8bfb-4ccd-b875-3f33dcb05d91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "433dab32-86c7-4855-ba85-b6fb3c26a944",
        "cursor": {
          "ref": "b7762a59-88fa-460c-9377-7f5f20704c23",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "fb895805-c071-4b45-a25e-accde9780857"
        },
        "item": {
          "id": "433dab32-86c7-4855-ba85-b6fb3c26a944",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "c85f4a29-308b-470d-9c4e-84ce51426ab9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df085547-684a-43cc-a511-89e82b8e4316",
        "cursor": {
          "ref": "cf62b98e-a535-4338-ae0e-c2b4708c2ed2",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "0c8ef278-ee4e-4d81-8fd0-dc3bf26446ea"
        },
        "item": {
          "id": "df085547-684a-43cc-a511-89e82b8e4316",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "9272cc0b-cd18-42c4-bb6e-f98c01ad75ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "815677b3-b877-44c6-a9ef-467bfcca7437",
        "cursor": {
          "ref": "f90dd2d9-5cff-445f-9edc-434c36812428",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "5d75c952-57f5-4dc3-a229-27d77d08a9f6"
        },
        "item": {
          "id": "815677b3-b877-44c6-a9ef-467bfcca7437",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "42447d48-b295-47bc-9bb5-7ce48b476939",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c2191d6-c9c4-4a39-a361-8e22bae26a72",
        "cursor": {
          "ref": "1bf54858-0c44-4b3c-a14d-1070c0a2aaba",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "72e10045-496d-4546-9315-92b489d934d1"
        },
        "item": {
          "id": "0c2191d6-c9c4-4a39-a361-8e22bae26a72",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "3a5060a1-01c4-4d53-afef-6a7988c6a391",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e006a4f2-3759-44c4-bce9-1fee9e40d3f1",
        "cursor": {
          "ref": "3abde886-a36a-4819-997c-5d13d1e0363e",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "3ec3297c-3b7c-4734-a8e2-ad00b00c1d79"
        },
        "item": {
          "id": "e006a4f2-3759-44c4-bce9-1fee9e40d3f1",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "dffc74b8-9f1a-4a44-a355-60704d7b8e39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ffb1baa-ed35-4ba9-80c5-aebf716118b2",
        "cursor": {
          "ref": "a0224f81-6ddc-484a-95fc-33323242e815",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "1da4dcf3-0508-4620-b4b3-6a9587b40f23"
        },
        "item": {
          "id": "7ffb1baa-ed35-4ba9-80c5-aebf716118b2",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "0eed8cbf-d03c-48ef-8f70-f5c8cd7c14e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9757d954-2382-4e52-8c75-329e14d9142b",
        "cursor": {
          "ref": "3c6fad18-2dba-47c0-9510-c8d6f9c28dc7",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "6a6cf597-ce0a-4bdd-b59a-5f6f5ed8101d"
        },
        "item": {
          "id": "9757d954-2382-4e52-8c75-329e14d9142b",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "8ad089f8-86bd-4861-add2-85cc6e6bc873",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24f5a6ca-5767-491c-bf7c-3cd15a735f75",
        "cursor": {
          "ref": "63f226aa-197a-49f6-98ab-839c11e5da55",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "f1344960-ca3a-422e-b989-167f0dec0f0a"
        },
        "item": {
          "id": "24f5a6ca-5767-491c-bf7c-3cd15a735f75",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "b7ef2008-edfd-430b-8d67-9f5d5a2bef1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "20eda294-877c-4870-ae4f-4b5ac69922d0",
        "cursor": {
          "ref": "7d4914a1-16fa-42b2-8098-8db67974b4dc",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "f99e4f38-2c29-4664-8b45-ba3727fb671a"
        },
        "item": {
          "id": "20eda294-877c-4870-ae4f-4b5ac69922d0",
          "name": "credentials_issue"
        },
        "response": {
          "id": "d7405f89-2e1f-4e9b-ab43-95957879a473",
          "status": "Created",
          "code": 201,
          "responseTime": 292,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "97048d7f-a8b5-4355-a740-24097d63fde5",
        "cursor": {
          "ref": "4652958a-cc09-421b-a57b-67a4c675fbf5",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "e16c75a4-2c33-43b8-8918-cd2a7a34de7f"
        },
        "item": {
          "id": "97048d7f-a8b5-4355-a740-24097d63fde5",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "ecc927a1-c268-4b3a-afbe-ddc6cb1acfb0",
          "status": "Created",
          "code": 201,
          "responseTime": 281,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a126978-e37b-4274-911a-07a1585dcbea",
        "cursor": {
          "ref": "92c9573f-1cbb-4037-8892-58d8da61777e",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "4c331315-98e8-45c4-8439-9c7ecb5a88ca"
        },
        "item": {
          "id": "0a126978-e37b-4274-911a-07a1585dcbea",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "13dded5a-7062-4b70-97a6-37eb04c22189",
          "status": "Created",
          "code": 201,
          "responseTime": 279,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff3783f6-5500-4ee3-ba53-1b865e8a4383",
        "cursor": {
          "ref": "89f6e243-c9b2-460a-8a04-6f3accbc96e9",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "571a54fd-5ca9-4027-86df-61c488215301"
        },
        "item": {
          "id": "ff3783f6-5500-4ee3-ba53-1b865e8a4383",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "47c5c874-b930-45ff-8b30-72f47e37f843",
          "status": "Created",
          "code": 201,
          "responseTime": 414,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b4520c6-ddd8-4fb4-bd3d-336d28ecd26a",
        "cursor": {
          "ref": "3b72f0d8-c96c-406a-8ac5-256328201fea",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "88e673be-af8b-44c7-91a6-7a9f36697260"
        },
        "item": {
          "id": "6b4520c6-ddd8-4fb4-bd3d-336d28ecd26a",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "3081f74a-1cb5-41a7-92c2-b27255e4d6ea",
          "status": "Created",
          "code": 201,
          "responseTime": 297,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-10-24T00:34:12.372Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-10-24T00:34:12.372Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "68555ca9-a25f-4fd1-822a-d537f4487e46",
        "cursor": {
          "ref": "dd4f2c6d-459c-49d4-894d-77e874fd2580",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "015e70e8-e595-4de0-a7a0-92e6cc895f8b"
        },
        "item": {
          "id": "68555ca9-a25f-4fd1-822a-d537f4487e46",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "4692ef55-a842-457d-91ab-bd536fa67f53",
          "status": "Created",
          "code": 201,
          "responseTime": 289,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e83cd68-be53-4bd2-b877-d613ce3527a7",
        "cursor": {
          "ref": "57185a53-e3ca-4194-b31a-d27f58604cbe",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "5cfea54c-b82f-4c76-a915-5a06cd4e2ea1"
        },
        "item": {
          "id": "3e83cd68-be53-4bd2-b877-d613ce3527a7",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "c943f03c-2193-4049-b241-d2163aad2282",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "365a0ed4-1c94-45e5-a04e-4d86dcb5bf77",
        "cursor": {
          "ref": "8b029024-ee03-4d5e-a2b2-01ef6e4ae607",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "11338089-f5b5-4b08-b0f1-6fea057e1583"
        },
        "item": {
          "id": "365a0ed4-1c94-45e5-a04e-4d86dcb5bf77",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "ff080d09-cbac-44d9-8c45-ad011f175085",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3091801-0ee2-4242-9ca9-7e11c21b80f9",
        "cursor": {
          "ref": "a629e63a-6fad-4c01-a661-cd3c7c61de8d",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "fedc5866-1996-4927-8309-0694de3830be"
        },
        "item": {
          "id": "a3091801-0ee2-4242-9ca9-7e11c21b80f9",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "13e24e3a-ecf5-466f-aa91-97a63f4d8fc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c3961e9-ed4f-4c1f-a7e4-d20a6c64c035",
        "cursor": {
          "ref": "97ec06b4-b87c-4f82-9d09-ffbf383974f6",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "de2900e4-5b14-480c-b43e-165d5b154110"
        },
        "item": {
          "id": "1c3961e9-ed4f-4c1f-a7e4-d20a6c64c035",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "23f1c9ba-d5ee-4ecb-a8ce-b3f5dba5f2fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4808a577-9d79-436f-9dac-e6fdd4dca470",
        "cursor": {
          "ref": "dec92cfe-20c2-4910-8e2a-f0a105e12589",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "957f0ab3-11ad-46f1-9e06-530fe9f66bab"
        },
        "item": {
          "id": "4808a577-9d79-436f-9dac-e6fdd4dca470",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "f8bab0b1-86c5-4ed1-8462-f31f18a9c958",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e75b893-506c-467d-88d8-84cce5e90009",
        "cursor": {
          "ref": "fd838661-830b-426f-b1f6-480274ca0e53",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "8302b94b-dacd-4d08-bd42-5b7fdbf2a092"
        },
        "item": {
          "id": "7e75b893-506c-467d-88d8-84cce5e90009",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "cd8fa122-e513-4af2-b0bd-5b189773adf6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db52694b-609a-41a4-ac22-cfa83fd9900f",
        "cursor": {
          "ref": "f42b1588-ebe5-4e10-88d9-2f4abbefe939",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "6a4fa8ba-2025-4782-822a-28098802b8ac"
        },
        "item": {
          "id": "db52694b-609a-41a4-ac22-cfa83fd9900f",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "16c16fb5-b3cd-4940-8551-9dbf7134bfb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bda244a5-f19c-4795-8d43-2de359bcac68",
        "cursor": {
          "ref": "59e71cad-f73b-4492-aac5-cb33a0eec3fb",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "692ea913-1003-429c-ab3d-61bab04296ae"
        },
        "item": {
          "id": "bda244a5-f19c-4795-8d43-2de359bcac68",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "65762469-a883-47fd-92a8-f7eaf927913a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53e3b501-93e9-4614-8795-42a8e0f024c4",
        "cursor": {
          "ref": "8027b219-90e3-48be-bd91-9f915927f525",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "85234cc9-d049-460a-9813-b214d7a75c6e"
        },
        "item": {
          "id": "53e3b501-93e9-4614-8795-42a8e0f024c4",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "e84b2c39-bb3c-463d-9300-e4f598490210",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d1860a5-fb20-4986-833f-d66589a62844",
        "cursor": {
          "ref": "f799cafc-59f4-447d-aeff-20314c5df1de",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "6f699c9f-e293-40f4-ad3c-f8257be76bcd"
        },
        "item": {
          "id": "6d1860a5-fb20-4986-833f-d66589a62844",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "83d15011-e4aa-410e-8c4d-e873deef3859",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c782f7b-7731-4349-a81d-17f0e2a10920",
        "cursor": {
          "ref": "dc2343e7-70b0-49d2-b4bf-77a2958d78f6",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "4192c0eb-c9c8-484f-a50c-0e2ed4d99a84"
        },
        "item": {
          "id": "4c782f7b-7731-4349-a81d-17f0e2a10920",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "53e36acd-e201-4a79-9256-0f1e157cdd3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e64e9b33-8cbb-4674-bec7-0551eb922020",
        "cursor": {
          "ref": "6d9618a5-1b71-475f-a8a0-3d167dfb59a2",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "317d1714-4938-47c9-98ef-68d2cedd0d95"
        },
        "item": {
          "id": "e64e9b33-8cbb-4674-bec7-0551eb922020",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "427ebdf9-c0bf-4944-bf42-0d7dd28d4ef0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "633e49c4-97e8-415e-95d2-9d0d37d37187",
        "cursor": {
          "ref": "1e03b194-a5f5-4921-bd49-9361d7350e3c",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "01b3d81e-43b2-4c0a-a765-c1cabacf4d16"
        },
        "item": {
          "id": "633e49c4-97e8-415e-95d2-9d0d37d37187",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "ae34169c-3733-464c-a060-0ff33533c21b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5794824-97e0-4bda-85c1-b3228f3449c7",
        "cursor": {
          "ref": "df9f3b59-c422-478a-86e0-9886e0a1e3b2",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "4af8eb02-f6a8-47a4-afb2-f3d5b9253df5"
        },
        "item": {
          "id": "a5794824-97e0-4bda-85c1-b3228f3449c7",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "ce7fcf71-3d86-432b-8be0-0365ca0a34ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "addaf0a5-669a-49d5-977d-8a56a8a2ccfb",
        "cursor": {
          "ref": "3d80fea2-5a4a-4173-9c3a-5fe149aa0ee0",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "f281847b-bf20-4481-aa6c-da6f768f237d"
        },
        "item": {
          "id": "addaf0a5-669a-49d5-977d-8a56a8a2ccfb",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "ab73ccc1-0efd-477a-bbe7-58a567896902",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96fa45f7-4a75-4baa-803a-71641077694c",
        "cursor": {
          "ref": "06d1ac8f-eb72-487f-970f-b920fcbb05f8",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "2c4a2deb-edc7-469d-b5fd-5af227328e6b"
        },
        "item": {
          "id": "96fa45f7-4a75-4baa-803a-71641077694c",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "d566a4d1-23c9-4b96-bec7-eeb6c3d439e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7d3f3d5-d375-4718-8fc9-a4aca5f9ad5e",
        "cursor": {
          "ref": "ef38b262-4260-4669-b41e-1585cac23b46",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "69431b02-4c1e-4b55-9180-164039a56288"
        },
        "item": {
          "id": "a7d3f3d5-d375-4718-8fc9-a4aca5f9ad5e",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "aacb01af-0f36-44fa-ae89-26e9236987ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77fe7c63-1f56-4d1a-8422-0736883c0111",
        "cursor": {
          "ref": "5bb61fc7-94a2-42e2-bffe-84446f73070e",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "f7afcdd9-c08a-4eb1-a6dc-c24319dcf4e2"
        },
        "item": {
          "id": "77fe7c63-1f56-4d1a-8422-0736883c0111",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "191c4ab6-f5fd-45eb-add8-54f76d5a5431",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2cf6487-5246-4292-b317-690ecc11d2dd",
        "cursor": {
          "ref": "21eb7f29-54b7-4291-80e0-0958c2f58574",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "c60a5f80-5050-46dd-a2c9-e755ec0abe1a"
        },
        "item": {
          "id": "b2cf6487-5246-4292-b317-690ecc11d2dd",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "7f3a8641-add1-406c-8fe1-289d4fbd28d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1951519-c3e2-4841-817e-927f507793b0",
        "cursor": {
          "ref": "354b8bc1-6713-48c3-b7bf-2751cd1460d6",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "4e64a5f2-2dd1-40ce-8952-d94f952597c7"
        },
        "item": {
          "id": "e1951519-c3e2-4841-817e-927f507793b0",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "75e15982-edc3-4831-915c-580261228e80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3ddd8bd-af34-477a-be3d-d99b254313ba",
        "cursor": {
          "ref": "793379c4-a305-4cea-b656-f25d216a9bbf",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "7070ccf9-e846-4ff5-891b-a5cd00c7c960"
        },
        "item": {
          "id": "e3ddd8bd-af34-477a-be3d-d99b254313ba",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "9c43fb43-b553-4c22-a83d-d0c1b22e2766",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 117,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd944089-239c-4655-8f56-5d95b2bf7948",
        "cursor": {
          "ref": "07a329e5-c797-4c05-91d4-e815339ce3d2",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "1e1d0a13-cf4f-4a0f-98e5-c0da617d1cf2"
        },
        "item": {
          "id": "dd944089-239c-4655-8f56-5d95b2bf7948",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "695215b6-8d03-4bd3-8356-befabface763",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "deb7eb9f-02e6-41fd-bdf9-85c2ad7e19ad",
        "cursor": {
          "ref": "2b981d7d-a039-4ca7-81d1-ea1b65ea89a6",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "c0c96fdd-7c5c-45bc-9df3-09996e5ad4b9"
        },
        "item": {
          "id": "deb7eb9f-02e6-41fd-bdf9-85c2ad7e19ad",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "d4ecb9ac-9713-40eb-b8f1-8af33e9fc8f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90892e24-2b6b-4f59-b9e3-5ded941e4a57",
        "cursor": {
          "ref": "2911bd82-dd71-4f36-b41a-25b75c7f4e13",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "eb63c760-b19b-4b80-b7bc-da0073a2dbf7"
        },
        "item": {
          "id": "90892e24-2b6b-4f59-b9e3-5ded941e4a57",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "c37b7ccb-3b3f-40a1-bd4b-d25e82d095d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e5a57e9-0b28-49ad-9e91-e3ab395bcee0",
        "cursor": {
          "ref": "ac2e162d-b63f-4907-8096-f6d21fca4c37",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "d625450b-e06d-461f-841f-038ef1b0850b"
        },
        "item": {
          "id": "1e5a57e9-0b28-49ad-9e91-e3ab395bcee0",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "c903c381-d3b9-4504-bb1f-4cf00f2b569a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33a8bbbb-9c49-4353-a6e5-db4f0fc7006e",
        "cursor": {
          "ref": "d7297173-9d65-47d3-88fa-0f4f2b5db098",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "db99b7cd-2573-4799-bafb-8563f4c7259b"
        },
        "item": {
          "id": "33a8bbbb-9c49-4353-a6e5-db4f0fc7006e",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "7bff9014-d4b5-41b6-8999-54937ec7e4ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f6d1dc3-a16a-41a8-92f4-8f3cb70c673e",
        "cursor": {
          "ref": "c0f2e784-78ce-42f0-8137-ed3e4f20e777",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "ca21c346-ea64-4ae3-8d18-6dac2580d7f9"
        },
        "item": {
          "id": "8f6d1dc3-a16a-41a8-92f4-8f3cb70c673e",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "a22a66a7-9927-49cf-aadc-8fb3bc221409",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea9ec69a-f15b-4ea2-8f76-a1a45dce7418",
        "cursor": {
          "ref": "491b5102-c013-43ab-b154-0a752ef0973c",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "0a6da7c2-9e74-408c-8856-02c2d28294aa"
        },
        "item": {
          "id": "ea9ec69a-f15b-4ea2-8f76-a1a45dce7418",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "12c0cc89-f285-4c51-829f-d588d82c9568",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d39a06d1-f3c9-47fc-935b-08e304b420f5",
        "cursor": {
          "ref": "565b3e53-feb6-43e9-be07-10aa10a3acaf",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "86e227b2-a35c-4dc4-9783-3eb666fabaa7"
        },
        "item": {
          "id": "d39a06d1-f3c9-47fc-935b-08e304b420f5",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "c9d3762a-19ea-4c74-8d91-5066160c0af6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c1e51be-590d-4b9d-90a9-ad44dc74f792",
        "cursor": {
          "ref": "3d4545b0-d00d-47ae-8ff9-ceec6a01351c",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "fb6e9e5e-d84c-4d5a-bce5-a7f614969004"
        },
        "item": {
          "id": "6c1e51be-590d-4b9d-90a9-ad44dc74f792",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "042aa599-e934-4bc5-8982-e93fbc6f9a04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f62f4e5-07b4-4ba3-8d8c-0911a2fcad24",
        "cursor": {
          "ref": "8ed3a0ab-3728-4057-843e-7c5c8621d46e",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "b8accd83-5507-47c0-9224-f1dc6901724f"
        },
        "item": {
          "id": "7f62f4e5-07b4-4ba3-8d8c-0911a2fcad24",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "f39e55dc-f1a2-437d-8052-6e08027589e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9c84f57-2b29-41c0-9599-f8796955d47d",
        "cursor": {
          "ref": "ac1d0bfc-9eb0-4059-8c00-e68baa2b09fd",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "dff139cb-f51a-45e5-9b5b-e95773a40b69"
        },
        "item": {
          "id": "e9c84f57-2b29-41c0-9599-f8796955d47d",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "f764f1e4-2c26-4fe4-9940-e358e78c8f24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfa68806-e812-4a62-9cd0-86544ab636f3",
        "cursor": {
          "ref": "8ff0150d-c3f1-4c3d-ba01-0b757a0c5580",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "1015038f-6486-4cb2-a590-bde75b917e15"
        },
        "item": {
          "id": "cfa68806-e812-4a62-9cd0-86544ab636f3",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "14485346-8d08-4e4a-910b-c31d09ebfb0d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1cf4b30-a0f3-4591-929a-7aa09f9dacdd",
        "cursor": {
          "ref": "1f4acfb6-2c1e-4b30-aede-edc41cba2841",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "6ed689ff-d47a-40f8-be33-2247186c1fa5"
        },
        "item": {
          "id": "d1cf4b30-a0f3-4591-929a-7aa09f9dacdd",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "cf23fb69-eef4-4be0-b73f-a4ec9320d06c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3072532-1984-4434-a7c3-c176ced8d21b",
        "cursor": {
          "ref": "861c3306-1209-49db-86ab-cf0fb3dd311c",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "6dca9b88-3910-48e7-88ef-3a2eac8c396e"
        },
        "item": {
          "id": "f3072532-1984-4434-a7c3-c176ced8d21b",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "46280fd0-9a3e-45ab-90ca-3190763103f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1eac2d21-a2aa-4917-9342-e19aea3a3967",
        "cursor": {
          "ref": "4daf51e6-1ce4-46b8-bf51-85443305ee5d",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "d5d90bbc-102d-4c10-b268-14d99b47cdc5"
        },
        "item": {
          "id": "1eac2d21-a2aa-4917-9342-e19aea3a3967",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "8a719c15-087d-4001-bf05-34e6253b3711",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76f5e16a-b3e3-4812-86b7-e680077e2ba9",
        "cursor": {
          "ref": "695f0bef-f5f8-4ba7-8af1-04b1e42f4b1b",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "c078bb05-2a7c-40a3-bb1d-6b0cf08c4052"
        },
        "item": {
          "id": "76f5e16a-b3e3-4812-86b7-e680077e2ba9",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "b83cc8e7-835c-4be0-9835-974a25f230f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12e1a065-facf-4203-8759-61b4bf361078",
        "cursor": {
          "ref": "31bed8a4-51d4-4e76-96b2-9c65dde9a940",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "c208429b-6829-4468-b499-6b4121b29e0c"
        },
        "item": {
          "id": "12e1a065-facf-4203-8759-61b4bf361078",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "fee1f88a-ffa6-43fe-a1a7-395da2fcc52c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49eb8810-9178-45f3-9b14-e0e6b174ca77",
        "cursor": {
          "ref": "d5140273-231b-46d3-bdff-4e6d0d2dd069",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "deefb966-c7a6-47e9-82ca-f6df42ae6783"
        },
        "item": {
          "id": "49eb8810-9178-45f3-9b14-e0e6b174ca77",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "8df7bb75-402f-43cd-a77a-79bf4b277e93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da0ec63e-1eaf-40e6-9262-b4ff795f12b3",
        "cursor": {
          "ref": "eb3b8151-523e-4a0b-81d3-e1f30df3c852",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "f5a62b45-7cda-42cf-a043-29368f81fac4"
        },
        "item": {
          "id": "da0ec63e-1eaf-40e6-9262-b4ff795f12b3",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "08cf98ad-f02a-4b17-ae50-f3e1c31a9f84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10c69385-1b9d-499a-ae43-dd7477833a52",
        "cursor": {
          "ref": "fa53ac45-0c5f-448e-89cf-e4b35528bf8f",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "68936d2b-747f-4c46-84be-1c57332695f1"
        },
        "item": {
          "id": "10c69385-1b9d-499a-ae43-dd7477833a52",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "eaa6f3f7-1bba-41f4-a201-b6a68988bace",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4af218b-4ec5-43ba-87de-a6eabf4e7e68",
        "cursor": {
          "ref": "db96a58e-2a3b-4c32-a23e-3a8207bc0b83",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "6c1d44cf-3e93-45e6-95fb-83055847b1e1"
        },
        "item": {
          "id": "e4af218b-4ec5-43ba-87de-a6eabf4e7e68",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "b933bb9f-fb17-436b-b0e5-3c3854bc3e93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65eb28b2-478a-428c-9b79-586de0a81eb7",
        "cursor": {
          "ref": "584f9d3a-b760-4600-9ee6-88fff56dfe5d",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "2449dea4-4740-4237-b65b-96b1941d5101"
        },
        "item": {
          "id": "65eb28b2-478a-428c-9b79-586de0a81eb7",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "9c2b3f68-8adc-42cf-80b6-740d3c4257ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e3e5820-6a92-4d7c-b256-b38eaf45ee8e",
        "cursor": {
          "ref": "159d6e41-6317-4ef1-bf65-cbfbce88ef75",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "7b59a01c-8e9f-43fd-a1ea-2b4d9f1db35b"
        },
        "item": {
          "id": "4e3e5820-6a92-4d7c-b256-b38eaf45ee8e",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "07810032-4fb5-4c2b-8b2d-6c8ad4e01502",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e53c428b-64c5-4234-8071-db599a06b5bb",
        "cursor": {
          "ref": "4d4f558b-b7ec-4e94-bd98-ecf0591811dd",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "1eec055e-e629-4f43-b1e7-6c807f00c01d"
        },
        "item": {
          "id": "e53c428b-64c5-4234-8071-db599a06b5bb",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "7f030f9c-4220-42f1-a609-a4e349970e01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5909f2cd-aa31-4396-92c0-68407922cbb1",
        "cursor": {
          "ref": "9ea315cf-099e-4a2a-85e6-32e94e6c4e81",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "4c889a7c-aaf8-4f5b-9f7a-aa340c7da4d1"
        },
        "item": {
          "id": "5909f2cd-aa31-4396-92c0-68407922cbb1",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "98da5a68-82bd-4514-864e-f5590a8585b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54503343-c4dd-4513-8e3f-97bab66a2c48",
        "cursor": {
          "ref": "84907e8f-d5fe-47b5-ab62-c28b1d993ee3",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "ca7a9f1d-b5f2-445e-9f77-a6a3617b6574"
        },
        "item": {
          "id": "54503343-c4dd-4513-8e3f-97bab66a2c48",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "05ede4e7-2b32-450a-bdca-0898213cbc04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f93d9f7-fba5-4764-87e3-2922dc174b25",
        "cursor": {
          "ref": "e58e282d-c8af-4c26-856a-090bd12f621b",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "4a1b5508-20b1-4d61-ab8c-1245f770c407"
        },
        "item": {
          "id": "7f93d9f7-fba5-4764-87e3-2922dc174b25",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "3de3d9fc-cd99-410a-b510-57cf8c99cedc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a86475c-3542-4d99-b62e-6b03d948a6f1",
        "cursor": {
          "ref": "6b7b5294-a5ae-4149-8779-57095e9e68dd",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "5f393dce-1ed0-43df-b3c9-8dbd913da073"
        },
        "item": {
          "id": "4a86475c-3542-4d99-b62e-6b03d948a6f1",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "989e574f-e84e-423a-9a47-c21f4178ab10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76f63984-91c8-4db7-8ac3-c91bc36815fe",
        "cursor": {
          "ref": "f7e1d92f-f599-4429-a60d-1cd67e820008",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "78114032-b13d-4750-8638-0f505551ca79"
        },
        "item": {
          "id": "76f63984-91c8-4db7-8ac3-c91bc36815fe",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "83b7c2e4-3f57-4ee3-8d66-90387a27727f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25d2c657-0ddb-4638-92ba-20f0fb96f4d5",
        "cursor": {
          "ref": "92e361ff-a34b-4233-a4f7-0686125c4eb1",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "3640e046-a138-4d8a-a446-2da959acc5f2"
        },
        "item": {
          "id": "25d2c657-0ddb-4638-92ba-20f0fb96f4d5",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "177248b3-dc82-40c0-ba8a-3f8db1d75817",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a24e7ff-d244-4b79-96c2-74ae7c2e0926",
        "cursor": {
          "ref": "1e9006aa-093c-400f-aaf3-22399b6a0e70",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "8e9f91aa-7e29-4bdb-93ca-2199d0825a82"
        },
        "item": {
          "id": "8a24e7ff-d244-4b79-96c2-74ae7c2e0926",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "061f9a39-e718-4f9d-80a3-a997db34a80f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a77af97-54e2-46bd-8991-da511b19509e",
        "cursor": {
          "ref": "c12fb16f-e88c-46f7-b0c5-54c0dbfba4e1",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "3498d2c3-e7fb-4e18-b666-d6719f215099"
        },
        "item": {
          "id": "8a77af97-54e2-46bd-8991-da511b19509e",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "5f165ae3-91b1-4d75-941d-c2734e4c96df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0890f5c9-740a-401d-8335-a0580fdb72ef",
        "cursor": {
          "ref": "afdc2824-da4d-4ee1-a0b4-606e1f0322f8",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "0d8728cd-ec83-47bc-817b-117d863da092"
        },
        "item": {
          "id": "0890f5c9-740a-401d-8335-a0580fdb72ef",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "c849125e-e0a1-47f6-9df6-16f233991f3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4059be30-8a35-4825-bee7-40d8854b9982",
        "cursor": {
          "ref": "4878fb29-ad09-4360-9b61-653c5a23c4cc",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "b836d451-674e-48ff-9dca-bad63cdb5fba"
        },
        "item": {
          "id": "4059be30-8a35-4825-bee7-40d8854b9982",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "f591982c-4084-4147-9597-ac89321e5f5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00926b59-c3c2-4987-aa1c-fd0b95d06df4",
        "cursor": {
          "ref": "4c8f0160-bac7-41c0-bd94-53424c6e480d",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "6c2608df-17d4-47cd-8cbe-7dfc056e6ca6"
        },
        "item": {
          "id": "00926b59-c3c2-4987-aa1c-fd0b95d06df4",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "26be5796-73c4-4060-a71e-ce688dce4a33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cc04ee3-7bfb-474e-b1c5-a7ed3476e794",
        "cursor": {
          "ref": "8077a4f2-fba0-40a2-bab2-369f1f55599d",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "d9505ebd-4430-4cc4-ab19-86f8b29deb36"
        },
        "item": {
          "id": "2cc04ee3-7bfb-474e-b1c5-a7ed3476e794",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "8303b767-8a68-4787-abd9-005414113f05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b1b6228-191e-4263-8dac-2ccb95bb0e2e",
        "cursor": {
          "ref": "20cf7936-ac2a-4eab-b557-e21169d69178",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "9c54a351-e8b7-40bd-b8a8-ecfeec61a2e0"
        },
        "item": {
          "id": "0b1b6228-191e-4263-8dac-2ccb95bb0e2e",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "6f1902c5-8038-46c1-bf45-573e1d1cf94e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbe68cda-ce43-425e-92f7-29e8f56dbdea",
        "cursor": {
          "ref": "6fd9ef55-ff70-4006-90f4-95a85ff852cc",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "8bf634bb-6d08-4a0d-b103-338a97f7e468"
        },
        "item": {
          "id": "dbe68cda-ce43-425e-92f7-29e8f56dbdea",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "1bc5a664-f00f-47af-8ba9-7b14d91c2143",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "defd5cb9-495b-4349-9e32-fd2353a4ee88",
        "cursor": {
          "ref": "0f8c40c7-53a3-4bc0-8cdf-9d222b6cce5e",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "824d8b97-99aa-4858-96cc-93512cdabef0"
        },
        "item": {
          "id": "defd5cb9-495b-4349-9e32-fd2353a4ee88",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "c563db8d-6df9-42ac-b3a1-5442686c9c5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67e375ee-7844-479e-8bff-ffbb63203f12",
        "cursor": {
          "ref": "f6d29d18-61b7-4069-8547-38f854d67373",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "f083c725-55ed-4c48-b33f-fcd2c5a44d20"
        },
        "item": {
          "id": "67e375ee-7844-479e-8bff-ffbb63203f12",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "c4bef7d2-b263-4f98-9a2e-4330053a8de1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c25e179e-5230-4a2a-bdc4-485913465255",
        "cursor": {
          "ref": "5c5b2f51-c89e-4dea-a2c6-f359c4760a4d",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "18e78052-c4df-4a3e-bf19-ed66df383516"
        },
        "item": {
          "id": "c25e179e-5230-4a2a-bdc4-485913465255",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "60689880-4eca-40b4-8ab8-ec045624b283",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6854fcbd-524c-45ea-ac1b-68eb69e4b02e",
        "cursor": {
          "ref": "ee9d535b-3043-459d-a5e3-44f76669c24b",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "ac094cce-d877-419d-a479-2846266b25c7"
        },
        "item": {
          "id": "6854fcbd-524c-45ea-ac1b-68eb69e4b02e",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "1d5d3e17-29b7-4c35-9d2d-81878f301fa4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d61da8f9-9a13-423d-9068-2b7b2a121931",
        "cursor": {
          "ref": "03692496-3b66-4872-b967-c2f295d73a74",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "f57bca99-2ac3-4966-adf3-d667541ca358"
        },
        "item": {
          "id": "d61da8f9-9a13-423d-9068-2b7b2a121931",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "9460b1ed-8a35-40a8-be98-51b2e2ad064b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6e91239-2fbc-480b-aa3d-7877a8e095ba",
        "cursor": {
          "ref": "96179f4a-09cb-4b62-b2b7-ceb9029ddb52",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "29a691b2-4582-4af4-b3d8-704dc67e26ed"
        },
        "item": {
          "id": "c6e91239-2fbc-480b-aa3d-7877a8e095ba",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "a93f6a14-4518-4851-a847-1ac40ecafbb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e6e6b00-6850-4884-a428-c53572c500e1",
        "cursor": {
          "ref": "25d97afd-0fa9-43f0-bcb0-ba0ae00a4855",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "f173cbe0-a077-45c2-8b09-6d93a2dc852c"
        },
        "item": {
          "id": "0e6e6b00-6850-4884-a428-c53572c500e1",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "70cd0c03-89d8-4579-a00b-8b685f7b04e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c3d149f-03b5-43c9-8122-a43eed891984",
        "cursor": {
          "ref": "198cb762-9fb6-4f32-b0fd-0ca31f46d469",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "0e564638-b1cf-4f4e-bfd7-bd6e7c82b290"
        },
        "item": {
          "id": "0c3d149f-03b5-43c9-8122-a43eed891984",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "57cdcb66-af5a-4037-bcba-a0ade0415d8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c58222f-1090-4c79-92e5-843852ca948e",
        "cursor": {
          "ref": "d19e86e3-7020-4a05-ab31-b6edfcbe414e",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "275ca545-7a86-443e-b815-ecd3d4633ca9"
        },
        "item": {
          "id": "7c58222f-1090-4c79-92e5-843852ca948e",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "4fa92d77-a7a2-453b-b620-587b5c27f223",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ddf4676-0ee8-446c-aa2d-a5948b420a6e",
        "cursor": {
          "ref": "59547076-08a2-41d6-b259-577e2cffd5fb",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "0cbf7b9e-f7ff-4ad7-9ef7-2511a211f42e"
        },
        "item": {
          "id": "5ddf4676-0ee8-446c-aa2d-a5948b420a6e",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "3e65b950-74f0-4a50-821f-faf714bca0cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de93bda9-ca58-4fdc-b8f8-5d423354a6a6",
        "cursor": {
          "ref": "d9a48268-ae5f-401d-a77a-b121f640af3e",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "f183ed35-f573-46ab-b9cb-4fe5b5d6f85c"
        },
        "item": {
          "id": "de93bda9-ca58-4fdc-b8f8-5d423354a6a6",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "bd02cdb1-8cd4-4d85-a738-378c99086782",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc3c6b55-3a49-4f71-8648-dabb7d8eb09f",
        "cursor": {
          "ref": "64cebbc9-9cc5-4b78-b493-bc86a2746e3d",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "0d9fc5d8-4771-4061-9a8c-5de044c05818"
        },
        "item": {
          "id": "bc3c6b55-3a49-4f71-8648-dabb7d8eb09f",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "cda2e95a-34e1-44f6-8691-eba729a449e2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8ecbbd8-3d73-4597-8cdf-465eda1dda3b",
        "cursor": {
          "ref": "c9e87b5e-6dde-46fb-a0bd-70ac6fec63c2",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "c137b8e1-18e5-4c10-ba19-7dcd9dcb60e0"
        },
        "item": {
          "id": "b8ecbbd8-3d73-4597-8cdf-465eda1dda3b",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "06e01ce9-5fd7-4ca9-9390-2bae7b7f72f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e51fd80-d154-4025-8988-b7b0756a4b4b",
        "cursor": {
          "ref": "fea248a4-de29-4742-8041-ea3170524e8e",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "0f969fd4-d389-4322-8420-8af0039263bc"
        },
        "item": {
          "id": "3e51fd80-d154-4025-8988-b7b0756a4b4b",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "2a65071f-e062-4338-b893-574335d05f62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a87b9288-6f9e-4442-a360-da5e3e8e95fc",
        "cursor": {
          "ref": "6b0cb26c-adbf-4142-90a4-25f75c5e29dc",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "78ff117c-f1c4-4651-bdd3-229968598439"
        },
        "item": {
          "id": "a87b9288-6f9e-4442-a360-da5e3e8e95fc",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "3a0acb8f-0d62-4468-9d27-6868bccdcf85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4131cf9a-ae8a-45de-8f97-93c7222eeccc",
        "cursor": {
          "ref": "14acd910-d8f1-4c69-a1c0-491cf21d3a62",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "b4b361d1-fe1f-4db3-acca-4a0a23223d64"
        },
        "item": {
          "id": "4131cf9a-ae8a-45de-8f97-93c7222eeccc",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "64a4ce69-b912-4788-bd28-4b1a1d7d8d06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e246e3a5-1b07-40ca-ad98-76551f0ffd3c",
        "cursor": {
          "ref": "59120aa0-7e64-4429-88fb-6f4855c7c7d2",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "fc1352b2-deea-47e2-9f45-3f55506ca642"
        },
        "item": {
          "id": "e246e3a5-1b07-40ca-ad98-76551f0ffd3c",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "e333f732-6d2c-42ed-94bc-329aa5924845",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f0dc737-2e22-433a-9163-3e403ae7062f",
        "cursor": {
          "ref": "9dd724c2-d2f0-4d98-b185-ca8ce0032177",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "aecdf90c-0eb0-4ea9-8f3e-ee0eb8e70b08"
        },
        "item": {
          "id": "9f0dc737-2e22-433a-9163-3e403ae7062f",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "c510cbd6-7053-46a5-a98f-33b75ba046c5",
          "status": "OK",
          "code": 200,
          "responseTime": 175,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "da57cef3-8ff6-4aef-a8d0-7b336f99826e",
        "cursor": {
          "ref": "d5b2953f-30f1-4d42-90cc-d1a374703b8a",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "ad4f24bd-3989-4d03-9a7c-696bfd2f0607"
        },
        "item": {
          "id": "da57cef3-8ff6-4aef-a8d0-7b336f99826e",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "cce0e2dd-425d-44c0-b4a6-85adc3b3561b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31fc32ac-3f98-40b2-a6cb-816935f3e494",
        "cursor": {
          "ref": "c53fb7ec-f43a-402a-8e42-2d8585bb9d4f",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "246fbad5-209e-404e-be89-ae9098b18255"
        },
        "item": {
          "id": "31fc32ac-3f98-40b2-a6cb-816935f3e494",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "bf4ab798-c302-41e7-81be-9cccb7d6a675",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2203b664-cd46-4f39-a391-b0c2c0d9d82c",
        "cursor": {
          "ref": "7283be06-a811-4d86-96b4-cef85569c756",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "85e6f870-bce2-421a-acd1-7687d40b0588"
        },
        "item": {
          "id": "2203b664-cd46-4f39-a391-b0c2c0d9d82c",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "b2fc074d-0c5c-4db8-b506-a95cb3ff2f31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7015232f-d5a0-4e5a-9109-700f8592409b",
        "cursor": {
          "ref": "f0dd50cf-9c8f-4571-9ad5-6128594dc6b7",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "19dc8d0c-99e5-4cf5-a935-dafd8f06b881"
        },
        "item": {
          "id": "7015232f-d5a0-4e5a-9109-700f8592409b",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "e384a86e-4615-4455-aa09-c0d1d4185c14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1b06936-5d68-4365-91de-575a20e39605",
        "cursor": {
          "ref": "0dc96eb6-8cf4-47a2-93d1-baa060a2c423",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "73b0b8a2-288b-4925-83bf-49c7f7a75772"
        },
        "item": {
          "id": "a1b06936-5d68-4365-91de-575a20e39605",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "40d33d17-6525-43e3-892b-a99a9bc79e43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81e38134-cf52-4594-a8d9-5580aa85565b",
        "cursor": {
          "ref": "c2c56029-9f61-465b-bbdc-06624f0be098",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "160abdba-7364-4a7e-8960-017f4806c71c"
        },
        "item": {
          "id": "81e38134-cf52-4594-a8d9-5580aa85565b",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "fb853d64-94e2-47a0-8265-ab9ec520b155",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a06b0030-facb-4826-9cc0-e6c2894d834a",
        "cursor": {
          "ref": "2eea7e4d-b5da-4f42-b27b-d299ee287ead",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "e3ea2931-2911-44d7-a893-97b4a236829e"
        },
        "item": {
          "id": "a06b0030-facb-4826-9cc0-e6c2894d834a",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "5da27ab6-698a-44da-bb8b-dbffa1f19506",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ace6b3a0-6248-407e-98f6-2fb10c0fe8a1",
        "cursor": {
          "ref": "c6dd656f-b909-4944-a26e-9dfd37ac4777",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "3550a7e5-a8d4-47b4-8ffd-eb805dfd728a"
        },
        "item": {
          "id": "ace6b3a0-6248-407e-98f6-2fb10c0fe8a1",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "5da63323-85d7-4bb2-970f-c34a01b72736",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a3f7fb0-4abc-4479-bba5-23e91ea31d40",
        "cursor": {
          "ref": "248f6706-383b-430a-a81b-68589dab130a",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "e6de3c65-b8e2-4e93-b296-871cbfae1a19"
        },
        "item": {
          "id": "4a3f7fb0-4abc-4479-bba5-23e91ea31d40",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "02334c61-2d18-4ef1-94c9-9f706960252c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "249ee472-5f54-427e-aab1-3325a99428da",
        "cursor": {
          "ref": "e525a948-0b5b-4f64-bc96-889eb822a52d",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "00b57fa4-9c2f-44b0-abc5-ffee842dcc9d"
        },
        "item": {
          "id": "249ee472-5f54-427e-aab1-3325a99428da",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "69ca999e-16b6-4ec9-98d2-922463b2dd36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7477fcb-7f3b-43bd-9c4a-b0ce8c85108b",
        "cursor": {
          "ref": "b043d24c-ef1b-44fd-ab4d-779885f62f94",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "a133f521-120e-4194-b911-09958aa466c6"
        },
        "item": {
          "id": "e7477fcb-7f3b-43bd-9c4a-b0ce8c85108b",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "662d400f-bf5c-44d1-8727-01f5cbaec31b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cb89b5f-c656-4d9a-9e01-1661205eb47b",
        "cursor": {
          "ref": "c44d2f72-fe3a-4555-abb8-7eee3bb3ed0a",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "a0418ca7-0ee0-4168-9d04-ab567901873e"
        },
        "item": {
          "id": "2cb89b5f-c656-4d9a-9e01-1661205eb47b",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "7d525498-d7e7-4420-a6bb-b006bb920e8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ea9b8d5-b057-4806-8bf2-164f9a65b87c",
        "cursor": {
          "ref": "c7cf81e0-9ccc-4316-a0ea-df1fa535bfe2",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "c4d3c992-0666-465a-958e-d7dc935a641e"
        },
        "item": {
          "id": "0ea9b8d5-b057-4806-8bf2-164f9a65b87c",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "9753f98c-08fa-45d3-b89a-8954853a70cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11f9728a-a312-4f5e-8d4f-dd663207e7c3",
        "cursor": {
          "ref": "6f23096c-5a94-4bd6-95b4-fe5d553dcb17",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "c35dfa64-9e4e-4683-8f5a-ae7fa53214ca"
        },
        "item": {
          "id": "11f9728a-a312-4f5e-8d4f-dd663207e7c3",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "45b6c96f-6ad4-41ae-a90f-410638f65462",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0cd0272-5a4d-4f6a-8d79-45e8ca42380a",
        "cursor": {
          "ref": "efce628d-2499-4229-983a-af1751e54bd9",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "b2cfb21a-8ebc-43de-bc02-c2fd9562f0a2"
        },
        "item": {
          "id": "a0cd0272-5a4d-4f6a-8d79-45e8ca42380a",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "1be78aee-75eb-49be-a26f-a4128c7e5ab0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51e2d389-d64f-45f1-a75b-553bed7803b7",
        "cursor": {
          "ref": "57e869b0-e5b5-4104-aa74-9025f62910ef",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "3a99c265-fc52-4b49-b993-e0558930b7c0"
        },
        "item": {
          "id": "51e2d389-d64f-45f1-a75b-553bed7803b7",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "8b8897fb-76b8-41f2-99aa-43ad60202bf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e08e352f-b643-4050-8765-a55811e87d4c",
        "cursor": {
          "ref": "cbbe3dec-a14a-4fa5-ba40-5bb0e05a77d6",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "554bb30c-a805-4f31-a8f5-18021c1034a4"
        },
        "item": {
          "id": "e08e352f-b643-4050-8765-a55811e87d4c",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "f7dda7e4-abf3-4337-92a5-e63ab1e8a733",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5523d28b-a346-4ab3-a659-aedbbf0dd6ed",
        "cursor": {
          "ref": "db929812-1905-4d4b-aa5d-e8c6a068efbb",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "2a1ad773-2e3e-413b-a966-edc55a182ed4"
        },
        "item": {
          "id": "5523d28b-a346-4ab3-a659-aedbbf0dd6ed",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "a011b5e2-5e49-46db-86e9-6315965c3120",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7eef191f-13dc-4bf7-8d6e-ba142c23f40f",
        "cursor": {
          "ref": "54fed89c-091f-4149-ba52-207452f081a1",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "97352195-1db0-4141-bce7-c7f8c1b67d5c"
        },
        "item": {
          "id": "7eef191f-13dc-4bf7-8d6e-ba142c23f40f",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "619e558f-fca5-4346-9ca9-0ddf38d2a0ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d03a8397-67c2-4260-9147-80cfd7ea6ee7",
        "cursor": {
          "ref": "3fbd59d8-f276-4245-bbc5-d07c74a399e4",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "753690fb-1309-4d9f-b005-a4fbe4179cff"
        },
        "item": {
          "id": "d03a8397-67c2-4260-9147-80cfd7ea6ee7",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "de5bdba3-cbdb-48d4-b7b7-caf70ec3fff0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca1e1802-b1e7-4f46-bd87-ddedc7d68ecc",
        "cursor": {
          "ref": "b0d74947-69f0-45ed-adcf-e1dcd922d8ff",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "eba3c4b4-ec80-4ff2-a5e2-b4b03eeca1f8"
        },
        "item": {
          "id": "ca1e1802-b1e7-4f46-bd87-ddedc7d68ecc",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "3df2e8f4-9437-4808-99a3-1667570bcc64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74de1cc2-5f7c-49d0-8b9a-b2f33bb59934",
        "cursor": {
          "ref": "2212e2ba-8937-4d1d-816b-822a664f9a20",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "0988a35d-d722-4655-b7fe-3b57138d6a67"
        },
        "item": {
          "id": "74de1cc2-5f7c-49d0-8b9a-b2f33bb59934",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "10364fe8-0090-4eb7-9338-fba79c413b55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23bb4289-3f6e-44db-888d-de04ed865be5",
        "cursor": {
          "ref": "26412b99-b104-41b5-bafa-86a1070187c9",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "bbc1a5ed-bc7c-496d-85e5-7fd08884d15f"
        },
        "item": {
          "id": "23bb4289-3f6e-44db-888d-de04ed865be5",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "1bc95b45-f231-41ac-bfb2-54262e809d1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a593fcb3-463e-410b-88c7-b09c1320d097",
        "cursor": {
          "ref": "ea5a321c-c673-422e-9eca-d9ac668095e6",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "d1282de7-5632-4998-954a-3155be09cbe7"
        },
        "item": {
          "id": "a593fcb3-463e-410b-88c7-b09c1320d097",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "50055022-ded1-44b4-9999-21b9f0bebc87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "565221b5-5152-43dd-9412-b36aa2b77663",
        "cursor": {
          "ref": "5f9c9187-f7ec-4c28-b56c-88226f7dafb3",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "977af1a2-d26b-4cee-bc47-4f25ad040a2e"
        },
        "item": {
          "id": "565221b5-5152-43dd-9412-b36aa2b77663",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "a28115b2-e266-4c17-b3d4-f00d9b8e5092",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b94e557-dc32-4af1-852a-241f220c4785",
        "cursor": {
          "ref": "78d063e1-1804-4045-87b3-42cf4060ff3e",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "4e126b10-2479-465d-8942-bd6bc54c21d7"
        },
        "item": {
          "id": "8b94e557-dc32-4af1-852a-241f220c4785",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "6186d9a6-a5cd-4617-a00d-4c24b089af99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb5e8770-c644-456d-9016-95aa7a2cf205",
        "cursor": {
          "ref": "b9434798-6c27-4080-8ca0-422b83d30fc5",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "7f51ebf2-e453-44dc-9480-d55c6eaf3c90"
        },
        "item": {
          "id": "eb5e8770-c644-456d-9016-95aa7a2cf205",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "82d49a2e-2d13-4d8e-b6f9-da22e573976c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e802398a-48e8-4a92-ac52-5d1e9a29692d",
        "cursor": {
          "ref": "8517cf31-3c7a-4ee5-80e8-0d36f7950adf",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "6e49b1a5-4a1f-422a-964c-0568451f0e7d"
        },
        "item": {
          "id": "e802398a-48e8-4a92-ac52-5d1e9a29692d",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "14061258-a8bd-4b97-bed8-8cac6fca9479",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4e18644-476f-495b-90b3-a8259c1893b4",
        "cursor": {
          "ref": "dd88e79a-5a54-481e-acba-456b4c14c6eb",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "4cb70b5e-6433-4e76-88fa-e89385740a37"
        },
        "item": {
          "id": "b4e18644-476f-495b-90b3-a8259c1893b4",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "e61ecf0a-cf4d-411b-8f9e-a63f1686a862",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "637e8c1d-ca7f-4fb6-bd0d-86b016a53666",
        "cursor": {
          "ref": "6a05a7e9-f851-4db8-96d4-d53d13c0d2e4",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "1e09147d-6157-4c48-bca7-8acdce5392c9"
        },
        "item": {
          "id": "637e8c1d-ca7f-4fb6-bd0d-86b016a53666",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "2ceed144-3f8a-4d1d-af1c-c46964368ae1",
          "status": "OK",
          "code": 200,
          "responseTime": 155,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "8f82db9f-47d1-4f1a-bf8c-1c654266cad1",
        "cursor": {
          "ref": "ccb901a0-df72-4e7e-b920-b4cedee58e2f",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "e1b1e6b2-297f-4412-9977-179135860a1c"
        },
        "item": {
          "id": "8f82db9f-47d1-4f1a-bf8c-1c654266cad1",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "87e48979-cd59-449a-bc7f-7f1f2144c46e",
          "status": "OK",
          "code": 200,
          "responseTime": 156,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "e30d5123-bc28-47a5-a256-cc9ded235f7e",
        "cursor": {
          "ref": "02245673-c1be-45dd-b462-41030a1b8b23",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "b8a5dad9-2317-4a32-a6f7-d1d6382feb54"
        },
        "item": {
          "id": "e30d5123-bc28-47a5-a256-cc9ded235f7e",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "d73c189e-1ccd-4d47-8894-5c72fe2aa28b",
          "status": "OK",
          "code": 200,
          "responseTime": 148,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "8c8265e6-3641-46ae-9e7b-d8e11121a7be",
        "cursor": {
          "ref": "5fbef95b-5f45-41eb-9f58-f999172fe9ab",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "ba243173-d848-4012-81c4-8fe4820d7ecf"
        },
        "item": {
          "id": "8c8265e6-3641-46ae-9e7b-d8e11121a7be",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "51a7355e-5e19-4a72-aadf-a4a460e382ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "240428bb-1317-4de8-9505-c17becade5c0",
        "cursor": {
          "ref": "d898d200-53f1-49b3-98e4-6d29169daf9e",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "8ec3917d-3de5-4035-8bb9-89cabc10e07f"
        },
        "item": {
          "id": "240428bb-1317-4de8-9505-c17becade5c0",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "a97b141e-648a-4c68-9ce8-2b2cadcd52e4",
          "status": "OK",
          "code": 200,
          "responseTime": 137,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "c11818b4-b4a0-4c38-bf30-75bf132abc71",
        "cursor": {
          "ref": "4dd2f645-2b58-46c2-83be-fbe9102ce3dd",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "d9cd4722-168c-4921-aaf1-a26adc6a5e1c"
        },
        "item": {
          "id": "c11818b4-b4a0-4c38-bf30-75bf132abc71",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "94ac3917-b436-4c26-b9c0-74fe409fb2a6",
          "status": "OK",
          "code": 200,
          "responseTime": 159,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "b0e54c61-56a7-4613-b1c0-340e9959e297",
        "cursor": {
          "ref": "34187ff0-4c6d-48f2-8f67-5663b6ced989",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "06414362-4155-4ba6-b832-34053fd22e25"
        },
        "item": {
          "id": "b0e54c61-56a7-4613-b1c0-340e9959e297",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "1aac0fa4-7f42-46e5-825d-988d767d4214",
          "status": "OK",
          "code": 200,
          "responseTime": 159,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "38f231a2-212e-4b74-8d30-ffe459c441f1",
        "cursor": {
          "ref": "0cd88acb-fa31-4c08-9854-f62de551e52f",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "3747e52a-a9d7-4608-afbc-9933cbf9c6a5"
        },
        "item": {
          "id": "38f231a2-212e-4b74-8d30-ffe459c441f1",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "0413404c-cdda-4d62-ba0d-4b39b0e26285",
          "status": "OK",
          "code": 200,
          "responseTime": 147,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "68b90699-eaad-4d7b-9ebc-7af88fb732bc",
        "cursor": {
          "ref": "2a9999ed-6380-4a0b-896b-d99bab637e4c",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "111bf579-aa8c-4511-ae5a-0f84151e920b"
        },
        "item": {
          "id": "68b90699-eaad-4d7b-9ebc-7af88fb732bc",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "3900f0ca-3d79-4b09-9623-252af03c1297",
          "status": "OK",
          "code": 200,
          "responseTime": 145,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "b02056fd-4a61-452f-bc36-55ffa008f70d",
        "cursor": {
          "ref": "33a7cadb-3dfd-4fa3-aa70-f506f3d1a3aa",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "289af0f2-3368-4944-b214-bb392245e41e"
        },
        "item": {
          "id": "b02056fd-4a61-452f-bc36-55ffa008f70d",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "48723151-0537-400d-84a8-e5574fdf63b7",
          "status": "OK",
          "code": 200,
          "responseTime": 151,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "c52b87f2-2de7-4966-a4ef-22d32aae0fa9",
        "cursor": {
          "ref": "3806b92b-906f-45e3-9cce-e1d511758766",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "b51e83c3-ded2-499c-925d-c41038d5cd44"
        },
        "item": {
          "id": "c52b87f2-2de7-4966-a4ef-22d32aae0fa9",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "697e437b-fc94-40ee-be6a-5b8bdf4d299a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16dcf895-1286-4dbe-a561-1e8a5c6f62db",
        "cursor": {
          "ref": "11566085-cf5b-4526-867d-516a9b214fc6",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "701f88c0-152c-40cf-a179-5da206046820"
        },
        "item": {
          "id": "16dcf895-1286-4dbe-a561-1e8a5c6f62db",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "0a735655-db20-41ca-be4a-2dc1ac184631",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5290baf1-ebc9-4fda-a0f8-072cc2cdf761",
        "cursor": {
          "ref": "d7d37988-e270-4423-ac9c-7da9b2c762cf",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "0aa18b2e-8305-4872-8d2f-e3ad04541089"
        },
        "item": {
          "id": "5290baf1-ebc9-4fda-a0f8-072cc2cdf761",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "85220f81-2dd0-41b2-9b59-360b9766776b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b09b2255-f0d1-4831-877a-15d231c9de21",
        "cursor": {
          "ref": "fb7a84d7-cc41-4e90-8448-72adde168d91",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "c63108ba-42e2-464a-b3dc-bad8fe24cf63"
        },
        "item": {
          "id": "b09b2255-f0d1-4831-877a-15d231c9de21",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "cd0c56f9-06bb-4775-b314-2a180ced1d74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bec79db-5554-419d-ba45-64348bf0aa30",
        "cursor": {
          "ref": "e3295599-ef82-4808-980c-e554881e09a2",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "ed4640b6-ca5d-4626-81c9-b4c65acbabc6"
        },
        "item": {
          "id": "3bec79db-5554-419d-ba45-64348bf0aa30",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "72d8e015-ec98-47cc-b8c2-391fb98e2a26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7adf788d-baa1-49ce-b51f-19863afe6caf",
        "cursor": {
          "ref": "fae267c4-f340-44ab-9418-fabb98509a46",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "ba03968f-e9b0-4cef-b0a8-fe0585c54195"
        },
        "item": {
          "id": "7adf788d-baa1-49ce-b51f-19863afe6caf",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "699ad39e-ff8c-4f40-94ad-750fd6ecbcf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04d1328a-e227-43eb-b83c-d4f6de863d10",
        "cursor": {
          "ref": "816885e2-a250-4ab1-9d21-fb076f726aa4",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "1a149ef4-eced-4899-816c-70204166c8aa"
        },
        "item": {
          "id": "04d1328a-e227-43eb-b83c-d4f6de863d10",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "6d446eaa-f283-4e1c-aa53-df96bbe1767f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7f20b45-66d2-471a-abcc-d0b16f1a9dd9",
        "cursor": {
          "ref": "83f5857f-f79c-41c9-a6cf-fad0a60bfb43",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "b372a0c0-2d06-40eb-bb93-6e16aace4bab"
        },
        "item": {
          "id": "c7f20b45-66d2-471a-abcc-d0b16f1a9dd9",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "163fd792-7c6d-4458-a4ef-c828f3148894",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41555f79-8c4c-462b-9aa1-a4a0b1f75531",
        "cursor": {
          "ref": "c6f2bb2f-0cd3-4a8a-a589-960e87103931",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "22ed2b96-4b2b-406d-b449-5ece5644af8f"
        },
        "item": {
          "id": "41555f79-8c4c-462b-9aa1-a4a0b1f75531",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "f3e1dd56-f521-4c59-b2b9-5225e52aaa1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39d3925c-cbdc-4991-ac44-9d658a475847",
        "cursor": {
          "ref": "f0e7a1ef-49d9-4b8f-8c3e-4e76e07ba2de",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "c48226dd-368f-4f5b-95b0-a04141351465"
        },
        "item": {
          "id": "39d3925c-cbdc-4991-ac44-9d658a475847",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "a6e661f1-0b62-4d34-84d1-361c1fb594cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81a0950b-292a-4e55-8add-8358d508c746",
        "cursor": {
          "ref": "ce84c078-eabf-4759-b630-ab1d64a36f52",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "fe28b262-9de7-4885-a4a8-b23fc555cb45"
        },
        "item": {
          "id": "81a0950b-292a-4e55-8add-8358d508c746",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "c825616b-79d8-4401-9399-b3ddccc1e58b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6493d74-e95f-402c-ac49-6b879cf6ce98",
        "cursor": {
          "ref": "21497452-1b77-4437-a4a3-373862f19f57",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "5db8ba63-f87f-4781-ad0e-94e24bcadc22"
        },
        "item": {
          "id": "a6493d74-e95f-402c-ac49-6b879cf6ce98",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "9d3de32f-9f54-4920-8d67-834cc393ca83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92e8e62e-e862-4c03-af39-930f7e64c32e",
        "cursor": {
          "ref": "a347a536-1e31-4e9f-938e-fa629d716e02",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "f9caace7-6fa7-4e53-99c6-6c7992c4f677"
        },
        "item": {
          "id": "92e8e62e-e862-4c03-af39-930f7e64c32e",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "3593cd19-70ef-4a7c-b355-e2c40e3a9063",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5a42f72-307f-4b80-a941-c467b04efcea",
        "cursor": {
          "ref": "69e789e6-0185-4001-9691-74e84c031c90",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "f2812aa6-7056-4b7b-8f7b-094188bfbab0"
        },
        "item": {
          "id": "a5a42f72-307f-4b80-a941-c467b04efcea",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "5b69984c-cf1f-48e6-b6de-cf9b25bc9384",
          "status": "OK",
          "code": 200,
          "responseTime": 185,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "2c67431b-d5fa-4c7f-bff0-9f7bc8fe266a",
        "cursor": {
          "ref": "81e1adf3-6b71-407f-9a65-65632b19f604",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "7a7195cc-70d6-49e3-a85d-12ae4adcab54"
        },
        "item": {
          "id": "2c67431b-d5fa-4c7f-bff0-9f7bc8fe266a",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "7ddec5df-925d-4f6c-b7e2-55d480d31bbf",
          "status": "OK",
          "code": 200,
          "responseTime": 137,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "8e3371d6-8286-4b5a-97f1-b32cd3c80e4b",
        "cursor": {
          "ref": "801c27d5-9228-430f-88a5-f9386e2a88cb",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "7be13d0c-e7b8-4b3f-bffe-f6cd1838c793"
        },
        "item": {
          "id": "8e3371d6-8286-4b5a-97f1-b32cd3c80e4b",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "847c9c70-ce29-469e-a433-22f0708cdf91",
          "status": "OK",
          "code": 200,
          "responseTime": 157,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "3faf97c5-2535-4832-8998-966f3090df01",
        "cursor": {
          "ref": "9e4c5dc7-ba0f-4072-a211-4d7ddc4399cc",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "2f2ea27c-1eb6-4016-a08e-12da2dfdec18"
        },
        "item": {
          "id": "3faf97c5-2535-4832-8998-966f3090df01",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "cd441e91-4144-4a26-9859-d5c1817ee37a",
          "status": "OK",
          "code": 200,
          "responseTime": 141,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "39a9bb99-c1cd-40e2-b575-b0a5699784f8",
        "cursor": {
          "ref": "b51dc392-5ca2-4d47-babe-1c454f158445",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "21a312f6-b2fd-481f-8eec-b4d3f88b3c2f"
        },
        "item": {
          "id": "39a9bb99-c1cd-40e2-b575-b0a5699784f8",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "e7cad7d3-c6df-4d00-9e8a-3a4b561d7b58",
          "status": "OK",
          "code": 200,
          "responseTime": 139,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "cd8af6f6-53e5-47e3-8772-88dd79d6c280",
        "cursor": {
          "ref": "c7d87d3d-b3e3-4ecd-ad05-dfe336339909",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "9071792f-c90c-462c-bd45-45fa33661cb3"
        },
        "item": {
          "id": "cd8af6f6-53e5-47e3-8772-88dd79d6c280",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "22ef3abd-6ae6-4e01-b2ce-efbe658539c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea9e9217-6cf5-4fff-b1d3-3eb83e70a814",
        "cursor": {
          "ref": "cbca30bf-5b22-48f0-b575-8d2c4d867756",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "8a197c1e-6445-427e-a5fe-176ea57a6a88"
        },
        "item": {
          "id": "ea9e9217-6cf5-4fff-b1d3-3eb83e70a814",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "20753b5e-cba3-4aa7-9ab9-79cd1f72090b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4bd82b4-8455-4fc1-b235-68650fa0bdac",
        "cursor": {
          "ref": "7b586b58-d305-4290-a7f5-0a8d18922b71",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "ca88904a-a201-4ac4-9e9c-af4c14dbb05d"
        },
        "item": {
          "id": "d4bd82b4-8455-4fc1-b235-68650fa0bdac",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "6f3e6b98-4470-4067-b5b3-9192b844edae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1ceddf8-7260-40e0-9faa-b34af553c9b1",
        "cursor": {
          "ref": "3000a4ea-a738-4886-92d6-d63983a21750",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "25f707ab-80ae-43fd-80b4-ed4d1299e3e9"
        },
        "item": {
          "id": "f1ceddf8-7260-40e0-9faa-b34af553c9b1",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "be7eadb6-4300-4f77-a8b8-b9b3349d1cda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e8dd470-8429-40e7-9b4c-b029432f0ec8",
        "cursor": {
          "ref": "635eca94-8766-40d8-b4cd-0b7ab83c9e86",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "2ff67e6c-d1d7-4e59-b6ba-18e2e26d49c3"
        },
        "item": {
          "id": "0e8dd470-8429-40e7-9b4c-b029432f0ec8",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "a45ef29f-f169-4553-bc8c-dd124605ea91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f94be96f-f367-47bc-a75f-2cf748a05676",
        "cursor": {
          "ref": "f66ee8ff-625e-46bd-a819-66fad714ef9b",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "07cead9a-303f-4d0b-8619-76bfd2fd33bd"
        },
        "item": {
          "id": "f94be96f-f367-47bc-a75f-2cf748a05676",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "146aff2f-38d2-4b5e-ae72-338494800532",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "344c2b21-a3c4-47f2-a04a-0e0e4ac71518",
        "cursor": {
          "ref": "9f55b784-c43b-4675-b52d-87b8e29e625f",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "6ad31e03-526a-4d7d-8e2f-8f7bac8aa024"
        },
        "item": {
          "id": "344c2b21-a3c4-47f2-a04a-0e0e4ac71518",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "082a486b-afd5-4d06-b9ee-12833e89f27c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72a483af-ba33-48d2-ab2c-57791f9f99d9",
        "cursor": {
          "ref": "85defbfc-e2f1-4fad-830e-82f8d33f23e8",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "faec2061-55a6-4e01-a385-c680a6098c51"
        },
        "item": {
          "id": "72a483af-ba33-48d2-ab2c-57791f9f99d9",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "286a969a-9ebf-425d-888b-0f9f1d0f326f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be13a784-7b59-4077-b502-2edcb39994d4",
        "cursor": {
          "ref": "32069c1b-881d-46a6-a2c3-3c62106f6997",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "e980e115-f44d-4f62-a16c-b0fa517c7b9d"
        },
        "item": {
          "id": "be13a784-7b59-4077-b502-2edcb39994d4",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "7fc59159-80e0-409c-9aa7-4a453c13dfa9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4363fbb9-b6f7-4a85-8edb-af3347e80be5",
        "cursor": {
          "ref": "8c9892be-eba5-4a9a-b1a9-90c7dac15185",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "c12eb8a4-df18-45cd-9fd1-78f4de07549a"
        },
        "item": {
          "id": "4363fbb9-b6f7-4a85-8edb-af3347e80be5",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "70a7deda-0ecb-477a-bb81-78b78dc2b237",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd23eaab-2bb5-475e-87e8-32764c4dcc3c",
        "cursor": {
          "ref": "5c0d4067-328e-42ff-ba51-542f5c0b9a76",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "9406f553-9717-4951-85d1-0a2c9d778e1a"
        },
        "item": {
          "id": "fd23eaab-2bb5-475e-87e8-32764c4dcc3c",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "b7f70581-94c1-475e-97dd-51264b3a6442",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a85fe33-2fe8-4709-a23a-0a69d8dc2765",
        "cursor": {
          "ref": "8b30f756-1f7e-4f6f-b0bc-1480013cb7a8",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "2944910c-5813-4d45-92af-f407d0cf6ce8"
        },
        "item": {
          "id": "8a85fe33-2fe8-4709-a23a-0a69d8dc2765",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "4f86ea19-26f2-471c-937b-d5d99060ddc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cb881a0-f90a-4a9c-b03a-7377390198c3",
        "cursor": {
          "ref": "0aeba52d-2c7c-4ac8-b57d-df8f57d9742d",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "784cf2ee-786f-40af-b24e-299c0989fbe3"
        },
        "item": {
          "id": "9cb881a0-f90a-4a9c-b03a-7377390198c3",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "fdb7415e-d618-4c24-a429-ee10839387e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ca71775-0806-4d14-aefb-19e81e8a24ed",
        "cursor": {
          "ref": "abd4b244-4e4b-47ca-a3ea-320bd1c7604d",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "89e41254-5943-47b1-9230-30efa432d842"
        },
        "item": {
          "id": "1ca71775-0806-4d14-aefb-19e81e8a24ed",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "5085ea0b-bbb7-4075-adcf-dca3d7a448dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "409aaaee-7dc6-4429-82c4-89c1b2d836e1",
        "cursor": {
          "ref": "568105eb-4647-4eb2-aa29-d24f5a89e25f",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "e61984df-ce80-484e-ab01-e5a76bf702ec"
        },
        "item": {
          "id": "409aaaee-7dc6-4429-82c4-89c1b2d836e1",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "ba224822-348b-4e2e-a85a-2275d7ad4b91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a283e4ef-52b5-4667-a648-2f9bb1047c56",
        "cursor": {
          "ref": "58a4b476-4e25-417c-b1af-bb278f5f9b07",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "28a420f2-05cf-4e49-bdf9-974b9afe2bcd"
        },
        "item": {
          "id": "a283e4ef-52b5-4667-a648-2f9bb1047c56",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "40bf4424-a5f9-4460-a6a5-70fde342b1f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37360087-6305-4b72-945d-c0dcbbad2249",
        "cursor": {
          "ref": "beec61d4-ec6a-4ea2-bd28-6f9e945b6037",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "cb415e15-c00b-479e-8d09-49c29b9a7302"
        },
        "item": {
          "id": "37360087-6305-4b72-945d-c0dcbbad2249",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "2dda0a5d-370d-4b5d-b564-51de4eae9222",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "202fbd4d-60f8-419f-b2e1-3c050b3a57ce",
        "cursor": {
          "ref": "66be0e8d-545f-401d-982f-b116cd1d1581",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "59b6c112-3379-44a5-8c4a-ad14a0b0f351"
        },
        "item": {
          "id": "202fbd4d-60f8-419f-b2e1-3c050b3a57ce",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "1b1da90c-6c78-4a73-8661-1d8c68480836",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32016bcd-b060-4d06-841d-1972fdb7fa9e",
        "cursor": {
          "ref": "5ecd5817-5ead-4d04-a719-d4a6266325f0",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "b7939dc2-104f-49e6-be53-281281c7281c"
        },
        "item": {
          "id": "32016bcd-b060-4d06-841d-1972fdb7fa9e",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "a67d6b97-407c-4319-a73d-585de7be34cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50078854-ead9-4cf6-bc4d-b4e528b85657",
        "cursor": {
          "ref": "580c6b88-9c89-493d-85c5-de1fb15805ff",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "ef54ec63-6d84-459e-86ca-57aeb0e9d79c"
        },
        "item": {
          "id": "50078854-ead9-4cf6-bc4d-b4e528b85657",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "ba6e42fb-7af5-49e3-a631-68fd30d0353a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2fcc9bc-8489-4855-9ee7-28f1bc3b5991",
        "cursor": {
          "ref": "cfc26d84-bbfb-4c6d-a694-bd5e35733263",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "6160810c-60e6-469c-b9cd-34addb490dc7"
        },
        "item": {
          "id": "a2fcc9bc-8489-4855-9ee7-28f1bc3b5991",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "e8a26ff5-882a-41be-b9e2-6ee65ef13554",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a278c60-0f62-4838-a827-f2634ab17612",
        "cursor": {
          "ref": "e2f56a97-ef9c-4889-8a04-a80b44bbe975",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "8d56d00e-a21c-42af-8644-7abdff826712"
        },
        "item": {
          "id": "9a278c60-0f62-4838-a827-f2634ab17612",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "34a545f6-6a12-4733-beb5-4c5788032ca5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "789583a2-952d-4204-b41d-03cfb9acb8bd",
        "cursor": {
          "ref": "a5d90ae2-b495-4fd1-9f2b-6c7876d9c85c",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "4a72afc9-fe3d-4c25-9d50-eb80f7ab19f2"
        },
        "item": {
          "id": "789583a2-952d-4204-b41d-03cfb9acb8bd",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "421224a4-7007-4b55-88c3-5fd75b126bf2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28bc7938-d5b2-46c6-b21f-95a8dbb4f13a",
        "cursor": {
          "ref": "c9b65001-575b-45c6-a21e-c661ddc1c328",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "5f3e8944-3017-4796-a9bc-e1209bb4a2a2"
        },
        "item": {
          "id": "28bc7938-d5b2-46c6-b21f-95a8dbb4f13a",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "80734f15-2a5f-4cb2-a42c-06b058d8c60f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f6bfd55-85e0-4e82-8531-0890ec15b13a",
        "cursor": {
          "ref": "ec18c7f0-bdd1-4828-a0f3-668b550e6047",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "d4be0c0d-1d5b-4688-86b9-815471094b83"
        },
        "item": {
          "id": "4f6bfd55-85e0-4e82-8531-0890ec15b13a",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "53efe857-0e81-41f4-94d9-9818ba832340",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e3a6bd8-f2d2-4bbf-a535-132c19d5c1aa",
        "cursor": {
          "ref": "6481baa0-ff06-4d95-a3fa-614627ecee5b",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "3b26da9a-faca-4854-9715-b7855669e7c6"
        },
        "item": {
          "id": "6e3a6bd8-f2d2-4bbf-a535-132c19d5c1aa",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "7b38b34d-8d7b-4f0a-b2c3-f0d80bb770df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d50d1040-fb1b-47ee-baf5-f2be80b772ef",
        "cursor": {
          "ref": "2c27860b-d5e8-4b3e-aa70-2e0b1e300dd3",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "253015f9-fdc7-4fcd-bef1-35767410acf1"
        },
        "item": {
          "id": "d50d1040-fb1b-47ee-baf5-f2be80b772ef",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "bc0edb09-c1ee-4951-9f21-276bfa531b7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5d20b59-cbfe-441d-911d-ab30e7bfc1e3",
        "cursor": {
          "ref": "5647c567-b26e-454e-b52c-cd72146a3a41",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "ab1a47b7-e46d-49cd-8e40-c64f8820b53b"
        },
        "item": {
          "id": "e5d20b59-cbfe-441d-911d-ab30e7bfc1e3",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "632198f0-bfe4-4a5e-8af7-30f5983b97fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d272ee3c-f20b-46cf-8801-60fc05042c0e",
        "cursor": {
          "ref": "2e0826c0-9d0a-4adb-97c0-1bf9bfb96fac",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "5b0abe92-8c33-4a24-abfc-c77bb4735c7d"
        },
        "item": {
          "id": "d272ee3c-f20b-46cf-8801-60fc05042c0e",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "14e6178a-f56b-4abf-9d41-4ee28c26aafe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0f5914a-71b8-48b0-9b3c-06603cdb6724",
        "cursor": {
          "ref": "372e1cbc-3575-406b-a388-f6aefd43e402",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "4784ae9a-0819-4e65-a242-3753b2d704bb"
        },
        "item": {
          "id": "a0f5914a-71b8-48b0-9b3c-06603cdb6724",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "afd6ae9c-fcbc-4a9b-98f8-6de626c4be56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2650f546-6151-4f75-80a3-b0abba88c6e8",
        "cursor": {
          "ref": "93b78c41-9873-45f8-978d-d61e57b24f19",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "a37e83a9-ab9b-4034-8240-86a19fb56bb8"
        },
        "item": {
          "id": "2650f546-6151-4f75-80a3-b0abba88c6e8",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "541f34f1-9f29-4485-845c-bfac0b700822",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f04a8775-25b3-4180-b15f-886ab03c4681",
        "cursor": {
          "ref": "9208a1a8-23ff-4437-b925-e9768cc71d29",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "c302640b-4cc2-4439-88cc-cd563f173b75"
        },
        "item": {
          "id": "f04a8775-25b3-4180-b15f-886ab03c4681",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "245f209e-764a-4046-9b3a-e732a8bcdccd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6646eb32-bea5-4ec5-ba0f-d1a85ac66b15",
        "cursor": {
          "ref": "9a192f71-317c-4131-80d7-807b33428855",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "d0772902-aceb-4acc-bb49-16548a17ff82"
        },
        "item": {
          "id": "6646eb32-bea5-4ec5-ba0f-d1a85ac66b15",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "452789b8-86e3-4b48-b1a1-f438929b435d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "110f86a2-3ea2-4124-b4d9-4cc3a131d685",
        "cursor": {
          "ref": "4349c03b-0eb2-4c42-ad97-5c9ebf113542",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "05fc7a86-b043-4bff-9c94-465788f2b131"
        },
        "item": {
          "id": "110f86a2-3ea2-4124-b4d9-4cc3a131d685",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "726936d6-c1e0-4b92-aa73-98e70e80fed6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7729561-493d-4846-a237-03b4aafde0a0",
        "cursor": {
          "ref": "71cb6ade-9fd6-4d63-aae4-c425b1b1868d",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "b55e9861-0a54-43ee-8200-23db4643d8a3"
        },
        "item": {
          "id": "f7729561-493d-4846-a237-03b4aafde0a0",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "89dc26ca-714d-46cf-b7ed-c029d00a8705",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfc7a577-edb3-42a0-9954-94648dd21cc6",
        "cursor": {
          "ref": "db385884-f125-40b7-9c66-062d8eff12d6",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "e0487cfb-c90d-4c53-a989-04546492adb9"
        },
        "item": {
          "id": "dfc7a577-edb3-42a0-9954-94648dd21cc6",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "8f21cc1e-a4c9-4623-b945-7554cec11f97",
          "status": "OK",
          "code": 200,
          "responseTime": 156,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "c7facbf1-7d24-47f0-8b67-92c68c28a70a",
        "cursor": {
          "ref": "939487d3-32a1-4a41-a6fe-dc284e3c0eba",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "d7de3367-4bf3-40cf-9aaa-75d892b1a55c"
        },
        "item": {
          "id": "c7facbf1-7d24-47f0-8b67-92c68c28a70a",
          "name": "credentials_verify"
        },
        "response": {
          "id": "9c44e70e-9826-469a-8530-e1b88bba2123",
          "status": "OK",
          "code": 200,
          "responseTime": 146,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "03b808d9-2c55-4472-9bf0-6b81c6f14c02",
        "cursor": {
          "ref": "cf690c85-0245-4fe8-a6d4-edebb6c3290f",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "4d28edd8-21a1-4206-8077-f7d11a68c2cf"
        },
        "item": {
          "id": "03b808d9-2c55-4472-9bf0-6b81c6f14c02",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "304ad16c-ac91-46cb-83fe-aa84655b8204",
          "status": "OK",
          "code": 200,
          "responseTime": 142,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2af77b3-a8ad-4a39-97b6-7ed1368e65be",
        "cursor": {
          "ref": "a14a1c71-8fc2-4ee5-af72-cf17e43de960",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "f4ff5d11-32e2-4bf5-9669-ecec47ce2b53"
        },
        "item": {
          "id": "f2af77b3-a8ad-4a39-97b6-7ed1368e65be",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "d2e32820-9b1d-4302-a898-9a61fa1bda61",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2af77b3-a8ad-4a39-97b6-7ed1368e65be",
        "cursor": {
          "ref": "a14a1c71-8fc2-4ee5-af72-cf17e43de960",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "f4ff5d11-32e2-4bf5-9669-ecec47ce2b53"
        },
        "item": {
          "id": "f2af77b3-a8ad-4a39-97b6-7ed1368e65be",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "d2e32820-9b1d-4302-a898-9a61fa1bda61",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5c55506-093e-4fee-a287-19fb5f6d4b87",
        "cursor": {
          "ref": "b1c4b4ec-52e3-4bd3-b43f-4bd163c1729f",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "5c010c96-e628-40a0-97b5-94e26b7a34d6"
        },
        "item": {
          "id": "e5c55506-093e-4fee-a287-19fb5f6d4b87",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "59ac6d61-1bba-4ac0-8cae-94b6de133be0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a5b757b-447d-4b66-b35d-39d65ea13974",
        "cursor": {
          "ref": "ebc5dcf8-99dd-435b-8454-801d25b25017",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "144477b1-66d3-495f-847d-ee1f7694e9c2"
        },
        "item": {
          "id": "0a5b757b-447d-4b66-b35d-39d65ea13974",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "a0587de0-7c2c-4351-b083-23b8eefee841",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}