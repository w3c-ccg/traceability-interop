{
  "collection": {
    "info": {
      "_postman_id": "4bd78d4a-8f35-432a-a4e9-9e5a47c7c93c",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "396ca37b-451e-4367-9339-81c6f2be3030",
        "name": "Clear Cache",
        "item": [
          {
            "id": "765b8bbe-9368-450c-8c06-68439fb65c1c",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "14eb2bbf-fd90-44e0-a011-18d7b9fa80cd",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "c62d630b-cb29-4aa5-af94-15e7ffe11c2d"
                }
              }
            ]
          },
          {
            "id": "f1e93ac1-a09c-4a51-a709-51aff88ca141",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b84f0ed0-45a0-4350-ba5d-18711ca622b2",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "4f635d70-b0db-42f5-bb58-2a79ac65212d"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "9073d6b7-b298-49c8-9eb8-7b8ac439b46a",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "f6464f3e-7266-4264-ba3e-1ba168808c13",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0bf55cd3-e7b5-41c1-b583-1faf3f30c22b",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a7698f9a-bf83-4ffa-b2dc-f0069969047f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6b480a90-e119-4cea-b90e-bdf70d1efd49"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7dd1dc48-1472-464d-9828-8d241de4e692",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "66d14050-20c9-433b-8455-a07cee17b8e4"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b3ff00a7-bc0c-4092-8228-a0c73a2c783c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b351fdfe-5cdf-47ad-bfb0-18b21ecb3b1d"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3e1482ab-e194-4288-b6c5-d6d0a31891c5",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "f5216f02-7d5f-43ef-ad25-4ce783e9a41a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a5a8c4db-75a3-435b-bb0e-49e29256bb12",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f282aac8-32a7-440e-b072-0c32ca6d852a"
            }
          }
        ]
      },
      {
        "id": "b200f5a7-3d40-4b86-8f90-27ba795333fa",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "715261cb-8453-47db-9a70-b397f0f39a13",
            "name": "Negative Testing",
            "item": [
              {
                "id": "057482ba-4219-4286-92a1-53e189469743",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "5582b9e5-1f6e-41bd-8062-92fc8d0a8049",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17b77a34-c5ab-4174-9ab2-efa495afa425",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a54e3985-87f6-4e00-a7e6-9071d3d31dc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39490001-f058-4a8e-a8fc-e60c938343c2",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43d01eef-d35d-4cf5-968d-948ba3316d5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "14d79e69-3dcd-4b59-9f49-84ef35533d7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "296b2f56-e8a0-40e3-a322-f698a8a7e443",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2056b64-f35d-4086-a1bd-98abcb8feffc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ab0f20f8-fdac-42d6-a94e-7171edd68f62"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f9423844-a87b-4260-b322-667f15809cc1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f1ce1158-0a3e-481f-a57d-3520e2a041ce",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1eb64169-54c0-4431-a83a-1e4de073cde5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e471390a-b27b-4b6e-ba70-dd83d8d6e695"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49ec1683-d7d1-4f12-9c2f-524ea24887ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae4dc0bc-b152-4bd6-83e4-8621bf0758ed"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "9cc000f6-294b-4bb4-b937-7887da3f73a7",
            "name": "Positive Testing",
            "item": [
              {
                "id": "85063a46-fb50-4640-ae46-aa11f5595460",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6774e3ee-d235-49f4-9370-78e05ed41ff1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "c06e6dc7-1057-4893-9fad-868e7913d2ba"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "affd4a36-2186-4257-a1c1-39c1eb0fe424",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "5fcd14f5-5cc1-445a-ae59-3c755a2a5bcd"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bf94d9f2-3cff-4348-a782-759e7c1ebd0e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ad94b733-5c3d-4d7f-b6d5-52697f00ffe1"
            }
          }
        ]
      },
      {
        "id": "c624634d-ed44-4279-bbec-06a95e9dca2b",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "2a9badf4-315f-4a85-8ae1-ed108443ee51",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2bac1582-6a39-4a7f-8b3d-978acd53a15e",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "f62092f2-986e-4f8d-9a1b-c9a306e06086",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38055183-6976-4d32-824c-1d4e1511ef62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "321e86e8-9c51-4f8d-9adc-84889cdcb391"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "812c887e-3e3d-43c2-8e0e-024515f1fa6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b54c9682-fd4e-4002-87a7-c456f7757a0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "492150e7-1abc-4221-8398-1263e31bce7f",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93395792-20f6-4628-82ba-4138be11e7a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93a3cb71-99b9-4c2f-a6d3-508ba2db8f16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df181bd7-4506-4c51-94d9-50639c475cdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e2bc5ac8-10ec-4812-ac44-e2915e8449ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d950f5f9-050f-4c6c-9275-d750ecadc139",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ac432ba-019a-4cfc-950e-891fccbef791",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30d0fed0-0f2a-4af3-9531-4af7b1ba167b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b609792-80d2-4f43-8861-c92f8e100d1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "57e003ea-85b5-40b3-8f61-41e886ea21d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81f0a1ee-41a3-47b0-87b4-5c8debe5eb02",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c91b3353-df1e-448b-b848-3a9987279466",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76d4c2ba-0df6-4501-a886-d6b40aca56de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d3f7dd6-73ba-40b2-8258-72feb365446a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0141f40d-3ef3-4b0c-bfd2-19adc0ee0d05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbd652a8-2e4c-496c-b874-6b14da42498c",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6c51560-4522-432d-86f4-001cc7b9478d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "519ea933-8ae5-4a30-9e66-99401bc66fba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5990f428-60f2-425e-925a-20f7f9bc446d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "df6e7be8-1504-4110-ae8c-ecbcba9befe3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6667b018-af99-4147-8f51-351a52bb12e2",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f42a3c27-6e47-429a-babb-2f4cc58b95ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e003f0c-51dc-4b9c-9b87-6b1719e35e5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "750e3649-9501-4d7a-9e19-7ea4924cb836",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "430b1b4c-d205-467d-902b-80e7645eb73c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96f308ae-e260-49c1-bc58-3d208a8d6359",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18375008-b449-4474-8b7c-7a91f5c15f3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b50ae95-a25b-434c-b067-bd0244a9e7e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd32b7fc-79cb-4ac3-8778-deb6e0a82036",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4a074a06-c0c8-46e9-8be3-c58420356598"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3e4b69f-8203-44a7-9cae-27367db4e17b",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd836afa-3ffc-431c-b5ba-d980f12e4f83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "128cb9fb-ee93-4155-b09b-dd9116b4df53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "250370a9-d642-44e9-90c2-8e617584ec47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e846f27d-9066-421b-89c3-514d68a61975"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bce40c76-9e6d-4f74-b673-5f5d55c86e5f",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b6b10e5-9e3a-4ce3-ba87-feaccdfa2295",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f3e7c9b-0d3f-40c7-a007-ef1b85af8f93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd832bb9-a5d0-4c81-90ff-81eff60be719",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "696048e4-9d93-4e79-a47e-6404e46a729f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e16322fa-06d9-49e3-b7b7-11e724be950c",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79678fc0-4379-4b38-aebe-69ab6b5bb78c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea49378a-f46e-4e3c-b68b-ad1f87584ce6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "137416cc-b1e9-4c17-9bac-5ea3bd2f644b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a1bb94af-6d56-4a60-a246-ca996a5be1cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7fd5413-89d1-4a1e-8f7f-78f879a26e07",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11ed8466-3afe-4031-9288-6192e436741f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4580510-0426-4251-b3d6-08155d8b2feb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0a7ef0e-7f03-4181-8ea7-5b726df8bce0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a6f26c8f-9052-4b21-923d-3a6bcc3cf770"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a13788dc-0840-4ce6-9c3d-fbcbac47b2c4",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d27c6935-c7b6-4ebc-bbcb-7fb274f09525",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ab1aee1-9eeb-463a-bca7-903221802b0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "461e7304-1a0f-4361-995d-2a4a268c107d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d6e05c36-15f1-47e5-add0-9c6e76d798b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce461882-e926-4022-be88-2bb9262e96da",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04e69ff9-00cc-414c-a2c4-cbb1da69854e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14affd06-e3f6-4dec-bc42-d9a895d2e68e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5840598-98a6-46d2-894b-e2100c403d3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5f63ee82-dcc4-41dc-8b4f-2e138acf7880"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d748e569-534a-4835-8d32-ea2e19055a27",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8097775c-98b9-4141-9248-71b5248423b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "433f4fa9-6036-4711-8ce1-4e1d8ba777a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8665d40a-0602-4763-8e33-67066d7b3f62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5eb07289-4c30-4d56-b919-a2f820b0a0be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8832f96-87b0-49fc-acc5-293bd250631c",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "399f4243-2d8f-48b4-b7d5-0a6035c86c6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f425319-83a9-4c66-90a3-c64ba6b392db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b0a9cff-595c-48a4-946f-16e578cec5f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f65e463a-ff19-4c4a-9370-e13fee29cdb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "caefd490-2548-4660-b520-f69f4fbef5b6",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "867f33ee-0304-4196-a9cc-bc191620fd01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99120444-5276-43d9-92c5-32b67d7f6daf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9047bc44-78db-45ce-9b77-cd27dd898623",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2bcc674c-4168-44ac-91b6-7d6e8cdc4de8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bd5d082-2899-439b-bd64-3689ce014a0b",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9a57bdf-2fc5-4a74-add4-f12ad72fc15d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d5b1ddf-4b04-4bb9-80b7-bb23dc6306c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70f28667-61db-4fe2-8950-1228f62258e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ffb3de24-145a-43a0-bfed-7055adf5bed1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68dd03ee-d2ee-4527-9734-a4efc880661d",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1dc6a34-c5d7-44f3-8ddd-467ac9ee16dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "512780cf-111b-4cee-a711-8f226f361e38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d857a1d2-ed1f-4390-b84a-8278105041da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "dfe22af1-7c0a-42da-bc33-78917ecfec3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da41e4c9-4982-4e11-bcf4-9aae7335967d",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95b6cd39-4c5b-4128-ac04-a94b20787ddb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e94c2b66-1b34-4363-828b-38bf8663672a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85e6e38b-e07f-43df-a36b-f9122394d372",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f6076874-9c7b-4c0b-bcd1-339ac6533e0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "377b95f4-771b-4ba4-bb39-d09cc86852a5",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f19c8813-8d48-4573-98a0-7d74072fe723",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "341f1629-0144-4292-9574-5d53b09f7e11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4703a00e-37ee-4ba6-8147-35a431b978f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0ea6cec1-8793-4377-aad5-a5ebc0af3d50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f020f2dc-01e9-4ded-b554-c2788f0e33b2",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2807afc4-dd23-49be-bc0a-b2afd84eb90f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bfb7652-9355-4f1b-8ecf-bf14497bfb0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80d8a8ba-32e4-4c8a-9470-9db00736ce3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0678a49b-53c3-4b7a-a237-bc17b4fc7f08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c44439fd-02ee-45b3-8036-d279ddf48012",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94ca7b49-f129-4e57-bca6-94f318265e6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fa82b5c-3bed-4331-bd54-9941585ee1a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3be26ffa-c1c6-4da5-b7e1-b5073bc6eb5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "79eaaab2-989d-4748-8256-7ea84e76f0d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fbb1f18-324e-4251-a728-fcc04b8ccfa8",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dbff387-697f-4a97-a0ea-9aa1bda113e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcf4b92f-2e62-4756-83ae-b42d17d3fda6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcde9a8a-acf2-469f-be5a-406ef9c6c42f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fe3f36a8-458c-47e8-af5a-3777c7aceddd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ac9bbb4-a203-4725-a47d-a745e8b862c0",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3eaed49-f317-4d6a-8de1-4047f43b8f8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59ddf6cf-3222-4638-8a6c-a9e91c983483"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba3a9ceb-66af-449c-8ee7-38f66ffb7435",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "05ba2f49-6677-4394-8031-ac9293a9d451"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11dea299-991e-4636-a814-62c0cb87bddb",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51126fcf-1161-4489-8a86-e557ad06cec6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9baa9759-90f1-4b7f-a50c-97336de59e25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b71dd2fa-88ae-4558-9b76-cdf2a904213b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7b385351-3d52-4cb7-9357-05f012346826"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70125b47-1505-4549-badb-4c1289d2b6e8",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "939c6b34-8d0c-40d1-9a3e-b40742637639",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16f4675c-f13c-4673-a178-fa24ec5da002"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "276c8915-b582-4ae4-a110-8377a39348a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1bd528a2-4f77-4f05-9e27-4d4597f3bc4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "237198e2-cccd-4142-8730-84b897a96b0d",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e75068a-05b3-4324-b06c-bf6ae1b734f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfdf4e6e-94fb-46ca-9289-cbc5fd9fbeac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e05c9439-7192-4fa8-b3fd-90b02d75dc98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "dfaba7cf-75da-475b-95c9-b901e428278e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a797b28-d622-4ae7-98e1-e72a5c04ef93",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd10e42e-88ea-4baf-9ca8-fff030d2a918",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c75d80c-9582-43cd-8f5e-a867e4701a6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14c8a2e9-c0f3-46c3-8720-287d8ee9d5f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "965500b1-3344-4a37-9218-984a372c2415"
                        }
                      }
                    ]
                  },
                  {
                    "id": "966b1ed6-07bf-4dca-b911-211f19048cf1",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bbf1e8a-4f7c-4b2f-9a57-3ad940117fc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b72d4c7-a46f-4fd4-837c-507c744036a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c1e9984-7783-4e1a-b7cb-43a75432c382",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7b032698-7914-489e-8911-82930e6ea8de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a293a818-466a-4da7-a767-e386deddf497",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd89c017-3d1a-493c-8293-99f4e8c9d9e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd697178-0e4d-4c2c-9cdc-80ef9d965d9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "417b0006-2a56-4d89-8649-53930adb4260",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "7491a48d-c682-4a7d-81fa-3eecc77baf33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f424d067-d6ce-4384-84d0-46739b2d40df",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da759c7f-021a-4ff1-87df-93895f428fa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61d3d1af-0509-4360-a071-3aa250e60dd8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e4939bf-c19a-48c2-8bd8-9111b846246f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "86849571-4594-4051-a854-1adcc3716e63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b040d7c-bd84-4f7d-bf93-49e2ce058d55",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ace5a3d-0100-4dd8-8a7d-eaf2ab0bdf76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b4d96e1-5b21-4620-946c-b53aaa86219a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d585321c-1d57-473c-9a16-ec990e996837",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b0efec42-6f66-4b91-a271-16f370174910"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9882651a-d4a5-48dd-abae-bcb8c2e87b35",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ad5eb01-03af-471a-9479-43cdf7aa49f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a78f5f04-b488-4f1e-b54c-07f6f9a0d1e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fbdcbcb-81ea-4284-8119-87e6290b163f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1e65b4d2-7e16-47e6-986d-acd98906ddb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f6583dd-a1db-4828-a3df-0a1155440e12",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c2e8818-27e9-4978-99b1-c74d913405ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad81a5a6-99ce-41bb-8764-4310c0cdab9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "237dd479-93c2-4c1c-9137-b81f16ba8bae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "271be881-7252-468c-b822-699f841f53e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24d08ece-4bd1-4890-85fa-6fb547300ac1",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df295f61-f4de-470d-b718-cd4bebb313d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b3d359c-fa42-44ed-ad52-a5c165cd3eb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92b7e187-5530-475c-8a23-ff3c82112723",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "aeac83d2-08fc-4aff-8627-d1ccb1ac9cb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "443f69de-9856-4350-951d-88d434b298cc",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66be03a9-0350-420a-ac02-d4539c5d0e63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8517b2e4-9f9f-43e3-97c6-2998d7b1a133"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66f4d512-4609-4434-bae2-700fd55e98d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b4e0ef1a-4fc7-48a1-bffd-8d0867bda207"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8347b9c-4ae5-4a35-b7b9-7a9e067d59ca",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "464b75db-b4ba-4377-9237-57e5c3f63db8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "879e9e4a-496d-4996-ad83-045e9438b18e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1166d3ad-e108-4c9f-ad11-30ad26c18f67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8bb1a5b9-afa3-4af2-b4b6-808e0d3faea3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9e7b62a-9b8f-4ee2-94c1-ddd1774ab9b1",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "922bd032-4e8b-4df8-9e77-41e0719a96e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30669c2f-6270-4029-abb0-550f76bdf482"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d43a1ad3-4f52-4e4a-95bb-63511ed2119f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "1d3d5ad0-4407-49a4-945a-ddb9d317f863"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99dcc359-c01f-4b8d-a5c2-96d8730f0c3b",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bbe2fdc-c450-49ca-8ba3-c71693bc4677",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bb8f0a6-91b8-449e-9885-bb33e2165871"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "145e4643-040e-4a97-a8a1-f9797427c4db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "590e9934-08e2-442f-aaee-03a3ecf5e667"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df08f4cb-5814-4ee8-8b2c-e6ed5d5b7842",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf565ecb-9f40-4207-b75d-fe5cf742b59c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08289ff3-b90e-4094-b700-d4486b042937"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f105e48b-cc94-4eb7-9119-0499ab532388",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "01419558-57ec-4167-b2c2-c1e4ff47c9ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7859d0aa-42c3-474c-99ce-dbbaa9694dc7",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98e98f17-29a3-4362-a641-d55c5766a795",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7270e56e-906c-4243-b1b1-2bf054a1238e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "254c5e8b-9b04-441a-bea2-19007dae0c1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "cc658acf-8b9a-4809-90ac-d95d5f6158fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd1cedc5-853c-4f45-9a63-f60b0c6d7e17",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c7b685f-cbc0-4358-abfe-c46febbfe235",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a858eb53-0ddb-484c-85df-30c55e31e744"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd9113ca-d6c1-4af5-81de-b739c8bc5bac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "343c2d42-5879-4798-910f-e527c10616c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8a9b095-7292-4062-8dce-123d23b376de",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e49294e9-eb14-4a75-9611-0c02cd7a413c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5d66471-d6ed-48a6-8e0b-6211a468006f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b6a36ce-0afb-4434-9f53-09ba464e8be2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "cf20b7e1-93cc-4d9c-8eca-851229eab09f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25c942bb-48e0-419a-860e-1a67faeee92e",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48b66280-00d9-4384-85d1-e46fd2edb6b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6c8c425-b537-4291-802b-500ce59a64f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87f797c4-8ab0-4e23-b3ed-aab19a32ac7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "af5e12db-2902-42c0-b704-3b1786f9a652"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b3dd8c2-37db-405a-9aca-4c545aba581b",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55f24dd0-7ad4-4a81-b3ff-d91bd0414af6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0703af16-8f18-43e7-b614-1b889e59d933"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a20151eb-6e79-4298-996b-47c69405392c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0689bee4-1403-4f2e-bc82-0da9546f2696"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12402158-06c6-479e-9d51-df5cb6b91efe",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "153f28a6-f466-4c01-80df-3e2b01f67f89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "283b2ab5-b189-448a-a036-407cab8fdb59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a1daac2-541c-4d4b-8963-083ae8b26a2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "91923a26-34d9-4163-89ee-1fa5821303df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "471d9b13-4c7f-406c-9fed-9ca97153afd1",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0936ce6b-19e0-4198-892c-ba28fcac985c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4e188c5-3191-46c8-9ca4-1f4865095d7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "613a5bf4-79b7-4b60-90d9-e2068a12aef7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a9fcad7b-8acb-4b86-98df-d565051937f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad06f829-ba9d-414e-b25a-e23109d59f08",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74fed258-db8b-4751-9cd9-87d6a806c76d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2660d6cd-39cc-40eb-a3a9-c4b12e5c1445"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00b964fd-92ce-4e97-b40f-d44dc4d591dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "feabf090-5e5a-45d2-af6b-72aec11f06a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc6a89a3-81e4-4506-a6d7-2a423b725a10",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cf9e1ed-1107-42ee-b300-20d229bab88e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d74181a-406a-4c51-b71a-0dbec3944a3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99c66ff5-655f-45ef-b406-37c6f07cbeb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "44165a0f-bb45-4d5d-875d-4130b7948ba0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e044e59-d021-47b5-9760-ca8a9bf93945",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2374434-dcc9-4edf-8e0f-455aa0b335d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16595618-385d-4e78-8850-f8feedff24a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6503255a-c53c-4100-8140-a9883ae87842",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d46b70c9-84e1-4e82-83ec-346edf4ae482"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5b485bc-9a80-4e4c-86a6-c00d96f18ba7",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bcedc74-efaa-4c9e-be56-ff6cad426c43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06d54e9b-cdb1-406a-96fc-a137ad00568d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e816d35-4550-4af8-9ee7-982116bb128a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "1469ecde-f62c-4771-a119-bf437d9cbf7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5b2e3ef-73e5-4e0c-8c31-15e848fd1d1e",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa85a74f-1492-4b33-a196-e6d2548cf8ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00106a3d-6d63-43c5-a0d3-f6aad8a7718e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c2f6881-d460-4286-9e4a-e29a380a4e51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "cb413f0b-4df7-4dc3-ab07-fa45de2afa72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6011a9a-b7cb-48e3-b26f-6c02e2067d21",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "766870fe-7c4a-4a52-bf2e-b8dec8c63872",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c9ef252-130d-4252-a63f-ec7e89454122"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c4f88b1-3035-4ef5-9596-0b856f75275d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ed40b1a1-c180-4382-8458-963a123e80f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb286dd1-fcdc-4831-8975-75bc82203da1",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ab835eb-c612-4605-bdb8-b725e137a385",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb571f4b-c771-4e60-82d1-f94a00f01d52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8c6b7a6-2fbf-4501-8fa2-a3d9fb970bee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b7be0793-2a9b-4fc6-90cd-ca5b78b7c224"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f62d06a-2544-4e8a-81a1-e7510766fc84",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "978af509-3aed-45af-8364-30a621a77474",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d30247c-71c3-4178-81c6-5bb42836db71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ee28d76-7d9c-4b5b-979c-15bd7b3bd081",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ceea842c-176f-4240-a30b-ed7b4977f7ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21e3e445-b51b-45b0-853b-35fbbc59782a",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07fd6631-a481-4c0c-ac03-8bf951480887",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b5d7681-4e2f-407e-9e66-c3d579f5a768"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbb4ca28-8821-448b-b580-74469fe7d4ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "13342a4a-8241-4f61-8293-e64e7cce83c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe93dee5-1af9-4594-938f-045ef0207481",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87540cc7-21fd-4fe9-942f-be5f98cd3593",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11f96ba4-3027-4ed6-87d0-73a33046d7f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "076fb98a-5381-4c01-a0ec-ff881ed25d55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "922ffa64-7fae-458c-885a-f2078802f0cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e4ef07a-54da-4f74-b56c-f064e6b94ed5",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "176dc2f8-dee5-4745-bf58-ebc18730e850",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e202d047-2b0f-41c0-b1bc-0e7f051c9fad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b65968c-b335-4c2a-aa9e-11d0c34f24d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "b5c13047-18bc-4c97-b968-3cd081b8c4d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca5c120f-4861-45b8-b142-5956f5df31b9",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "490aba46-d66c-4657-ad72-985712705d87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "651a8c24-cec8-47b7-8656-918194151be4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec1fbf34-1b5a-4bfb-ab77-c07747a193d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "aa3f10df-5c41-431b-9cc4-40d2409ffb74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f0c95d2-6e44-434c-8c2d-64ab9a14355b",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1decf5f1-54c1-406c-841d-436515d26709",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68cde891-f4d2-4478-803b-33598de81e09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "655d2e45-f88b-4bdf-9f38-3d37d114b056",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "078d9478-2392-4e4a-a72d-19be51ed925b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adef1e4e-0500-416c-aae2-30c3d4f68a56",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63e6faed-14ba-43c6-bbdd-c24ebd954d80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a6569a9-b0bc-42a7-a96e-41b0e21a2ec1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fb08683-018a-4a9e-8ddb-8664fdcf67d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "ee256fad-885f-4583-9210-f358b8b1c515"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b0d0dd9-c190-4d80-93c9-57bfd07de74e",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c15a643-fd40-4d64-8b36-e42813055ef4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea548d23-55c5-4ced-aff5-d51235f23c93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e681fd1-1067-487d-b26e-304ae9a26abe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "3a2331e6-3abe-4636-acfa-4902f3321716"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f495f13d-8e50-4b61-bd98-60a368f6d6ec",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8425c2f1-e4cf-48cc-855a-ee99b41f7c74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be22c662-0cf2-4c43-bc38-6c60078a4c5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9eeb420e-0598-4d8e-800a-0a58083c7b74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "d5f932d2-e53c-4b45-b58c-03366a04d55a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ef45061-a9fe-49d0-8f9b-bc08832aabdd",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f0f9228-d94a-4e46-93be-0d1ab99cc97d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "440aad10-ba9c-47c2-bdf5-75728a4ec677"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9896797c-3434-4129-aeee-f7e941e254f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "78e80341-734c-45d5-beb8-d5217c6c604a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f28af1e-a8ef-4ef7-94c8-d89cc663e31e",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bba4b6a8-dac0-4cd0-b1ee-b63d2c360a53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "319f6bd5-fb01-41c8-ab1d-914ad5aad399"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f6787ff-571a-415a-ad25-34994ebcb3b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e53bd05a-0790-45c3-8bab-a6ec6a336a22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c031dcc-0f47-42a9-8a74-7589f2c6903c",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7bd2c65-57c6-40f1-8885-c7c335f648c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05ba92cb-d8f8-498d-9b5f-dadac4446929"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4909290f-f84c-46c8-8ad7-2aeb1f03af38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "730b31d8-3112-4487-a01d-65d568cb6d23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c2aea44-8dfd-45b4-b3a5-400217ce4f03",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67fe83a5-ea18-48a9-8355-4a02efc3ed15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8cd6b92-3622-459c-b2e6-e5487a9d8741"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "310a2c85-0aeb-4142-8990-aa97005066c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e54b76fb-d1d8-405e-983e-96d35ce6cba3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11cb5952-4255-49bd-a8d7-b4c41b2051e1",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e973cba-9973-489e-a9cd-4026ecf59634",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66e0f735-d998-41eb-ace7-1761ac2f5905"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4162e11-4c62-4593-a5a0-debc61e83cd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "2e0a530b-ca09-4c3c-802e-23cabb896992"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8ed1454-8ad0-4ac2-ba48-979051328835",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2533d91c-4647-4f3c-a775-2221de700a67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ec0d0f8-ee58-47cc-8e4b-8c875e048165"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b60243a-7309-48b5-8da7-6a891ea476a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "4952b532-c78e-404d-97ff-23106ba1a50f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ec23c8e-530b-4fd0-a44f-93fd52737532",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c25d3a66-290e-4f2f-9f8c-fadfa824a3ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d007cda6-a5cc-4616-a9f8-60f1f470bce9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72c51f30-6f13-4200-b1f4-376000ffc398",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0d920bb1-572a-4d45-9ab6-ca565ff8f37f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74481f22-a976-4200-be3e-5d745d350053",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb594979-6795-4da1-ad89-6d07e8042a77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac017635-1a6b-4043-a622-af2817e9be20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7241e2f-b9eb-4ea4-bb28-d9712e9d5f9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "22035018-8074-48b4-9cbf-3d420a02ad67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92e5ea5d-59aa-4b16-9ced-0d668c8851d4",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b54b1f03-cd24-4170-9ccf-c5924e7464da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b719ee8-8233-4bce-80e6-c643bd760048"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80f215e8-17ba-45a9-ba0a-905626fe564f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "08b89b45-9838-4475-91ad-713bd1662319"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bfe9aab-8666-4852-a444-92c328f33279",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71dcda97-6c79-4b30-9f91-52eb608dbf70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f0cb32f-bc14-471d-9ca6-cd9f2ae3b9a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e7c38b1-ff17-48b2-8333-93438e970bde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8b3783a8-83bd-44be-8504-78acbcdcb9b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee5e141c-710e-4b4d-b1df-a430e7906c5a",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c890ef9e-0f5f-4d29-82c0-f2c6657fee99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1def6dd0-08de-4f0f-b964-5420bcf67a81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51745a90-5b1e-4466-be99-2bdf7defc9f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a61baa46-2761-47db-a657-46b421dbdc40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6486add0-acaf-4137-89fc-e5480710fbfe",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c88f23a-6252-4f76-93e4-1b17859520c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff03d3c8-b501-491d-87f1-50e298752464"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fdf9644-3f6d-4f41-8b27-96134f7eae71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6d34cc6c-020c-4d71-ab3a-09c3e3a475c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1a6e729-bbc2-447f-acd7-4d445902b645",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78e8f1ac-a34c-42d1-af4c-528507cdb02c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60281bbf-7bba-40ff-b58d-3907e049bc73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "940e17af-fba2-46f8-9781-93ff52e54ed5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "500ec854-a9d5-44cf-a59f-4880839df856"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e369854c-1c8a-4f1f-8616-2cd84aa9885b",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e417e10-180c-4c9a-a0be-931f78383d87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d69b979-b5ad-479e-bdf0-951860e6a979"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e1e04ae-800c-4a77-8a55-e2fcdb672b80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "25885c94-819c-4346-80f0-6c9fb3dbfc1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32896770-096d-486e-9232-cd54cc38ba3a",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24f11dd4-8933-479f-8b9d-5d804e5b027a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f84a94ab-5ea1-4d28-aad1-6ae549d4787b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c28d3ce8-ae97-47ad-b590-b246a3889f2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b657ad8b-92ab-43f0-80c5-40f46d455722"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dde39c7b-41f3-4382-aa05-5c94aa54e820",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9df63c1-960b-450a-8892-a0dda1781221",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4c57f57-c4d7-477c-9331-36c8b053555d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfd87b3f-d620-4692-8acd-ae6a6ce1ac6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "950a6576-793e-4893-ae80-dda9acc9bafa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30b4682b-3dc5-4427-b4e0-761329f52dc7",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6226bcc8-35a3-4f28-92b2-2683aee00503",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25a05a02-29f5-4263-9cb1-041cf4b19c04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ef49ab3-69f6-467a-84aa-e6bf3f939e60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "221a5644-4e76-4238-92f8-8d3e285597db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2857da6-7263-40b8-a97c-5d73671a7bac",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e08a7ef3-e44f-41e4-8989-b421e35386f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9c66005-cd2d-4ec1-ab6e-905c2ac58f4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a99ccca-4280-4a0f-8862-133ff79d5a06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "ef785cad-6ffa-47d8-ab9b-08b8833fa159"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc1760d4-bd77-472e-b22a-d5f8fb9fb5e5",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d51183dc-faf5-4e6d-9379-f19e610d12b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b845353-69f6-42be-b882-3711a45936da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4c4d258-ce82-491c-af53-f742528e9812",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b21196c6-4420-4f79-813e-447932c33c78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3dd8f8c-f6e3-42e8-b8bf-1cf2f8f1618c",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59d54216-8cd4-43e6-ab5d-88bf32dc0fa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a232acfb-1f58-4865-bb13-babfb4d71a3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff38348b-0be9-44e2-a86e-0e4fea5daf10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5938b565-d0aa-4bee-91fe-df9ddd6f20e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcf86d43-2cf4-4d7a-b59f-67e0bde6816a",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "548004c9-33bb-4dd8-bef4-a56761b61c03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fe70016-5182-40ba-8607-d5dde141bced"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6f1ce48-d26d-4b95-9da3-e0dde842c669",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c8566bb3-a255-47bc-8b40-9689f42b8a65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d05c2c69-20ae-44a4-be29-5174268aa3c5",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae829c9d-6b89-4827-8760-c0c0840be0bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e90d114-9779-4d49-b7a3-0f860bef21df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1a559cb-a183-4ac5-83ba-96e8b48fe583",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "aab460d2-77ef-4440-b57a-632ac740f583"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74cadf5d-ea74-4b58-8039-33195c165d93",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9201017-5bcb-49f5-a754-bf39aeace6d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab6bd0e9-1ca1-4d0a-899e-d13c7d433625"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c69b3c6b-ba0d-482e-816d-281801b2420a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6d737aef-9c01-4808-9cb2-208e2d4ac032"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d9a130f-a355-489e-801d-6e4df71d5f26",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c27df9fc-3d68-4792-8489-9b84f01a41ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f68b85bb-267f-47ab-b0bb-571e8ef0d905"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d894402-a669-4816-9537-953c932f4f6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "7d4e9237-38ad-47f5-944a-eb8465a14c9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed2232a8-7b03-42fd-bdfa-fc89845fa56d",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d16dfcef-fc18-4195-aad1-b47e929668c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "223c70ff-9f9c-4b4d-8ebe-bb391d8648bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fa03450-6379-43c3-8c48-321e0af03923",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "2c36e1dc-46b0-4b17-b8b7-e56ebae1c72e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51e8b546-a858-4cf9-8604-654412c2df76",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4632b345-4c91-4bff-80dd-6a22e263ddf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5467614b-855a-4a70-a0d6-b9c614e76273"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b931ff9-1701-44bc-81f6-e4f8830ec525",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "a57d9d68-d786-4525-a439-7ff059e85a8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7b84afe-f198-4937-8620-8bb779938d40",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58930d1b-e31b-4287-8285-0f25de51a452",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbf65355-f475-4748-a853-c7b0e0ac779a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed0ca95c-3468-4b93-9876-a3ed8eb0e659",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "22c9b91f-2e4b-46dc-88d3-28e4c5a3c415"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbb19889-19d5-415c-8a0c-b21923806fa8",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89979714-4c00-41c8-89f6-cd42cfba55e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46e1b38e-7b4f-4973-bf15-0aa6a815958f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce2d699d-4368-4987-9092-9d0c96190f03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "7746c732-9258-4cf3-835d-8bbd94559571"
                        }
                      }
                    ]
                  },
                  {
                    "id": "260490a9-fcaf-45ca-8c9b-ebaf798b8ca3",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89f2cdea-080c-4008-a5fb-496a208a3b25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "57c4c2d0-8896-40c2-8b00-d0fe2f75ad84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20b6135e-95cd-4780-b3ea-5feac6d4665e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "1e7646de-6fc6-4a5f-b1cb-703fcb3d5cde"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ee5c253b-953c-4a49-a433-0e93a2c7bf08",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3d5f2d10-e7ec-46ce-8195-1f14977b0674",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27852aac-1e3e-4abc-92db-0e22843163c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "65b6b9a2-723c-493e-b456-e6beed092af5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29618ebb-68f6-4f47-91af-5cf14d5dbc9a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a0df285b-a985-4946-863a-9a611d5a1b10"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b1a24690-f717-4b32-a899-e9deb6132887",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "10e63f27-3f28-4fa6-93e4-6d18bed555d7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "dc532c66-50b5-42d7-884d-e124151800ca",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "03252378-d2f1-44d9-bcc9-bcf57227b328"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d9dd4b53-75e7-4fc9-89a4-a6208279e40a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "91fa8994-6c87-4367-bf2c-bf9a76bf0f38"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a2289e38-ab99-42b2-876c-720c0624ba54",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "64010137-8f85-462f-8393-e4008a03033f"
                }
              }
            ]
          },
          {
            "id": "afa61670-e4a6-4e44-a3d7-61f0e728bf4f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "9bad9af2-bf54-4ccc-b94b-b2c9728d0896",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "35ab952d-1bbd-4b2e-bbe0-c0307fb7cc36",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ce8ba9f8-cb9c-4b4d-9365-d072292ff7f1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2030145b-0068-4940-a35b-149b189b801c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "33e371ae-e76c-42e0-ac12-51fa8346da35"
                    }
                  }
                ]
              },
              {
                "id": "d1a977b9-3f96-42f5-b57f-f17c93fb9523",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "92544b86-976e-48a2-892a-efdc8691af7b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1e1ed2d6-4290-4988-8099-6cf422264dab"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b6a82234-30f6-4a5e-b2cc-2f4aa58f9506",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "af76ecd3-3abb-447e-9dfe-9177979f9840"
                    }
                  }
                ]
              },
              {
                "id": "a4619ba9-8438-4b87-9d05-d2dca3da6de2",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "13fead32-200f-44da-be67-9065fd689faf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "687c3e03-9669-427c-a18b-9dac2d448454"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "655dc2f6-03e7-4576-a9be-16e37c3f38c8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "0c201efe-659b-49ba-88a6-4a4985223277"
                    }
                  }
                ]
              },
              {
                "id": "393327f1-0423-4028-b517-b9972610c395",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "432c82d5-d982-480e-ad97-1c3fa7da2dd0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "dc53090a-f9ea-481d-af10-5b758ad44e2b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4f3a9a99-01df-4d28-8698-306629934ee8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "a68158ac-4100-4cdc-b08a-8ee9bfa5d29f"
                    }
                  }
                ]
              },
              {
                "id": "66367bad-df50-4e96-912d-d7c09ece9a8a",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fdc58cca-9cba-49ac-87ce-9868514f6044",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "42d5e262-0a57-4fe1-91ec-5f9cce7eab98"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "942bff9c-4055-43e9-8e7d-0a76315104ca",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "4daa6cfa-54b4-4d6e-92ef-a7b2c6e1dbbf"
                    }
                  }
                ]
              },
              {
                "id": "7fcdc19a-2225-472e-b905-17659bd0269c",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e7ff761c-bd9b-4728-bcfa-2b1d48139692",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fb194624-a4b5-4dfc-bed1-6b1749b8625d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5076e473-57f2-4e74-827b-7807319e9be7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c24e631c-585b-42c1-800c-47982086f46c"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8005b74a-39d3-44b1-8eae-f6e56932a2b2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e15ea0a0-5aad-4b3c-99d0-aeab8a64f0b9"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c5bd72e3-8684-4ab7-a1dd-9b25d11b3aa2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c4afd0b8-b4ab-4bc6-85b2-c5818b819255"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e359d03d-4bb0-46e8-8dfa-c25b37a1e2e4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "b7107afa-f77f-46cd-a751-f9fac08968c0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "58aa8987-f7b5-454e-9245-210a2f504752",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6538e8f6-052f-4052-bd36-427260139d62"
            }
          }
        ]
      },
      {
        "id": "5f16aa77-93e8-401b-8c87-955a7da0df68",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "7e8463c3-263a-4846-9bcb-1ca8db8aba75",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f60f45d2-9557-4f47-bb4f-b04524526f42",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c4161644-38ba-4c2d-b549-2371eaf22be5",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83a0d6bd-860f-49db-83e5-a58431e3d787",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "341c8beb-f0ef-4bfa-95df-96c01de910e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55c2ba7f-09b0-4e90-b683-131b1e7fd82a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "6b61ab95-51a3-41d5-a5ec-c78990d26ba1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7604153-6d6f-4acc-81e5-b3ba9cf2e706",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9933324e-46fa-44d8-8545-b3a0b5b1c73d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "900af449-ae00-4ec5-9e86-ca23232460d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "515bef28-a2b4-4b11-9a18-3c854d98f92c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d5c691f6-8cff-4b09-add2-2c9565d87616"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fa499dd-c7e2-4812-910f-6f4ec08d2cc4",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2dc40f0-e92e-4f88-9c6a-5ac00f7cfbad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dccc1698-ef1a-4d50-a105-39f1403945e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "088bea11-3f02-4bad-bf8a-85adf1d1e230",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "afeb50b9-5c27-46f5-871f-2544d52163c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00fe3aa5-6b29-4671-9a9d-ec91593d7d3e",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c786c6b-cfac-43c2-a208-61dcabec3755",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6ba0284-af87-4691-9c91-47d359949338"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e544f627-a365-4230-9beb-41dc589e6c57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0e3c0234-3f0b-48a1-b3e0-d6a86ca6849c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "433ea89f-c97e-4e71-b54a-dd51bed02167",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56fe2301-74e7-42dc-8a56-63c07d37fd0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbf9e9f0-3737-4d11-8ee6-3165c917338b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1d90f29-cfaa-4f6f-a47b-87a220cfadd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2995d97f-e609-42fe-a157-9fc80bfcd2d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7b7776c-384f-4ca0-a597-17b4435d813b",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9f68c57-2267-4fc6-9e84-080784d5267a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "236f4783-d2a5-4134-aa88-4e63c3a47578"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "918d4f27-8b60-4e61-b8a7-089bd0132bf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c68daf1e-4730-46cc-8de6-fe17ef2f6f74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f1467b6-8a71-4a35-a0c8-da4dfa91f8fe",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ba043c6-4d82-4410-8e13-ab8a6c9f9bf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4743a5e-00c0-499f-92ef-81be780ad4b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fbe0d5b-4dfc-44eb-979a-e00e0257af31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "e5c94554-43e5-4e6e-8431-639ff6144018"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4cdd665-aa04-4ab8-b58d-79686441f753",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8edecd70-dbc3-434e-b260-20bb54abca5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93f6c60a-aa03-41da-8744-0461df5373a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91034b00-5129-4637-ac89-7849fa3cccee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "df3b112f-7431-4313-ac5a-c78440df26c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f7dde9a-8a16-415b-8dcd-c921724c8921",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "514e634d-2e4d-4be7-b9e3-04e6dab69215",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d10ed96-34d9-41f5-991d-0ac9d0cd0329"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "787bd226-df15-4f03-888b-832245cdbd98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0eba638e-2184-4140-886e-8abad850e14b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f939e16-6edd-4b9a-81a6-95e03427da5f",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b390665-cc8f-4803-9614-27f0b1364882",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3f5ac7b-d157-4bde-9e45-13c088d5fe9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b55c5e27-765a-4119-8f27-be67776fd5cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "210a831f-5ebd-4eae-a445-9658f4165f0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88c886d4-4e63-44c1-aef2-edf3741db291",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fb69180-3ada-487e-9ed9-ca341bcfcd4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76b12c75-3878-4bd3-839d-25084de925c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d06a762b-fd30-4ad5-a990-8684d243f23e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "66a76fed-559e-4911-9969-cfb3bff16766"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e39721c6-0b4c-4a35-921c-ff0a98e5bea6",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2efe2a9d-207a-4c85-8b03-7604e8e35917",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "455831bb-6fd1-405c-bfc5-059a45407bab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb3c2ffa-17dd-4c8f-bd8d-ff17c71073b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "717a95d1-4162-4661-90f3-4b3641bc3de3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a759b39d-30fe-4f4a-9f13-f5e48872b332",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fa008aa-5f4f-4b5d-a423-2f2350f0d78d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e827c52d-24c7-44df-8009-b84f58f67567"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d24598aa-5b50-451d-b59e-12eafd85e2f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d84c8ca7-72d6-44e7-9958-aa3e182c58c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f15f4e7d-6455-447e-9e86-619145ddfbad",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0410baf9-38d6-42b6-bb4e-053e1aebf836",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f3db09c-3162-4e4a-b990-9221c56adae7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67d7f1d6-397b-4acc-bfe2-23732e32d620",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "4994bc40-5368-4f74-8260-9e97bb084e96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06284484-5d0e-4554-9902-d19610f4b4c2",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03836490-3596-4130-9580-e48dc17c8058",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e265f50c-a330-4f14-993d-a30e72f33250"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "615b2cfa-954b-4595-82ac-1bafb377205d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "f7c441e9-5e63-402d-afd0-21a114e54c14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8df140a-4a9e-42df-aa4d-75e618dd414e",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9436380-35bc-43dc-b821-e3197c352909",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cc9124c-6b56-4791-81bf-d56c8c9ebd47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e170722e-8505-4b8e-b171-0f77b2ede759",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "f8cbd897-c4d5-41e3-a48a-c024d24a2fa3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9dca7ee-c408-4801-bf00-70231b7afd23",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06728330-d59f-4eb8-8a9e-54f8ed6696f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "957f300f-3c3c-4ed9-8399-d040964b0415"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45bfa917-13c4-4545-94c5-83a381ef16f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "acaf0ba2-3553-4841-8ea6-9caa7ad5f3e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ab9bccd-b231-407f-ad2e-60f629a839b0",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "978d322f-9838-40be-a825-c7ca742ac30e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e370e9f-aee6-4349-972b-85f165a2fbdb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7b2ea55-41fb-45d0-ac5e-bf811c577083",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "fdb4e411-bafc-478e-b9eb-d46140d4f302"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85a0099f-289a-42ac-9aa6-a783ad35effe",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0c5b056-742a-4e8e-98be-a0b7326b1338",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81efa397-c5d5-4ff1-916f-00772ba6d7fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c5a9c20-f0be-4509-b753-cd766ec9b494",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e21b3376-d345-419d-b513-fe8c4b5ea4ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3e7db81-5a1e-4384-ad8e-ceb002049857",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94fcd9a8-e38e-47e0-8b4e-ac900c3a2c75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58085125-dd4e-4598-bcd2-758d0834c75f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42a617de-0551-4307-886e-3eff5d4cbacf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "19d3682d-306f-4977-aba0-2edb7d7b96b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7fb167e-2937-46e8-a3ce-7ae9c21b6594",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a55844f-d798-476c-8d5e-4f69b336e075",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97ef43cc-72a8-4fe3-a528-8b34799e27d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b4aeb74-f39f-45e4-9f8c-5efdff7935f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9f259905-94b6-4414-b7b3-cd1e95d5c696"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e925ab0a-6bfb-4112-963a-8015077d8688",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bed3d82-5b7d-4749-ad7e-5ebbd0a9c4aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af9b4786-3308-4798-ace9-cfbfb822b35f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f88fc9eb-64f9-41ea-8383-72be95ce74e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "73836e0b-9bc8-458d-a522-a56bcd5cbe0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2b4c750-79cf-4b75-a015-22ba4e395a13",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cba32141-a218-4042-88ef-9e4358fedb7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52cdb1a7-d27a-4830-9429-3452d16afe2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59df240a-7745-4f8c-adab-d224fe21125e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7aa7219e-ed30-4b30-b980-32b4d42246cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "985954de-5c5e-45c0-8a59-c9fc086e6612",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ba31581-f7e0-4187-b2b9-9f2d5807313d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f77d493a-4120-4fa0-b0ec-3914f45233a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaf270f1-95b6-49d3-bb82-f3ef84416ca3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "860fff3d-a587-4be2-a5cf-0244dc0ea824"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d48ddc66-a1f6-4323-abaa-f5847e5a9e19",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cd08da8-b047-4e98-9c1f-e6fd56cf21c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e34e559-892c-4bc3-b0f8-fa8fde178aac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e455682e-26dc-4c5e-859e-3f0a2c6aa539",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a22bb1bc-9342-4542-abdf-65dc389e4c8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39dc7a45-d73e-4958-b475-87df426271cc",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d5d084a-e487-4554-bf4a-e0b39c530dc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6783da5c-5356-4c68-bd76-7f3f74410bbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26e3a1ea-9fe6-4bd8-8e3b-95fea3b3ea57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f4191d2c-a5da-4e06-869f-f2a9ea6a256c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "090a0b3d-14a2-40e0-890b-d75c3d6c7606",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a83515c-0369-4eb3-b848-8b7143c61b35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3a99e30-2acd-4418-a0a0-f3ac9921bcc0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39a9cf75-c816-4217-8108-2c29d23181ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "53b97795-4de0-4cb0-8ccc-af171bd893f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47ab6798-bafe-4ffa-a9d9-eac1d85edbc5",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "241f26b9-8dcc-427b-bf77-f67fef60c99d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "045a6bbd-e70c-4aba-9870-7b270ca41215"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a707f556-926b-4ad0-a0da-f80ea7a27760",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2549df74-595b-48b8-a0c3-428feeeea932"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56d3a58e-c0fd-4d29-b884-dc4a7c5bc7f9",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a401dbc0-0d9b-4da9-86c9-70be3e73f7d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1d7630c-3e00-4540-b824-caa2df8a5c30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88b7271a-ef35-4476-a4f8-e3fb5757e171",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fc4dc10a-a5c7-4c25-b0ff-3ba5813e47c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1900445e-c15c-4c74-b847-d42e031a17be",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29cacb26-dce6-4120-8806-53761dcf2b3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e0f4395-fdbb-4557-a4d1-5e72f1297b30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f98faf7-a27e-4521-bc97-c9033c621d34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d3b1d93c-e914-4ea1-a292-8add488b97d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "556b5199-40b8-47cc-ba6c-5f76fb271bed",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2dc3c77-5f74-49fc-b8cb-8342f03f1bbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e560946e-9f1e-443b-860c-cbddd92750aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16c0bc44-ad1e-49ce-82a7-141a93062a82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "eefbac4e-0060-4bf5-a80e-7f9bae539109"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fa4234b-0eef-40ee-9603-06e7fd93f564",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e0078e5-d42e-44e5-802f-803c9e861481",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bcda8f5-e614-4cff-b042-4f34731758e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc7a00e7-28e9-4e33-9a6a-8a99e98be5fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "816f661f-6af5-455b-842e-397185d3549f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "55f938ea-83b8-4707-97bd-c48917f1d7a7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2156eb12-7966-4467-8163-bce58eb886b1",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e9f5dad-6296-461b-a70c-2d49a6d4bc11",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "197e616c-3d00-40b4-bdc6-d65f94423f23"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb702d5f-14a9-4061-9849-c999cd946ecb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f0141a3a-49d6-4639-bee2-12e8a7c11d9b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3b9d2413-37d5-4f81-9a6d-1167861ee992",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e65012ae-702f-4a62-9735-e3a310383f72"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "248a4cd9-f064-4e2a-9350-1fd015690338",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7504548d-8b2a-4fc9-8805-5281b0fbb7b5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "56f82583-db7d-43e8-ada4-058b861e1f1c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "67988b18-b1f8-47d5-af7c-cf7fd9a71d1b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "42845ae2-4889-4bc1-a1c8-a7fc95457db5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "457b25fd-bfba-496e-bdac-1f7bb6d14879"
            }
          }
        ]
      },
      {
        "id": "d0f5453f-2ed2-4d49-a984-fddeb01b8041",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "07a268f6-1e5b-471d-8dc9-fee1ba1a60e0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6569114c-6539-4f87-864b-f27c462c62d3",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "db28aad6-863a-43d6-8b43-5e88b4abe421",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6283603a-4ce3-49fd-bbaa-1e0c53ee4138",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09072ad1-0902-441e-ad8c-1ea8960b908f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c060dcf5-9a68-4c2b-bedb-30cb9b70cc5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "006eb714-3504-4cf2-ac38-0bfc6ba4fb48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13c70ee7-6771-4521-a64e-40ddf75d202b",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d4e0b30-770f-4bc4-a11a-d96c8c16a616",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e0b18d6-3911-40a3-ad44-510433866c59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2b2bb97-49a0-4e97-8f4e-b250183354af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1797eae6-2456-446c-9659-5b24bb9d1164"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03c549b7-b282-4b77-a2a5-f65e9e21866c",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4873841-03ba-42e5-919f-34341f2f831b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53209bd4-374e-4ac6-9da3-25b1b622535d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b5318f7-3c05-4c51-ab70-a55da9b2b747",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "02e618f7-b52a-4023-94d4-02b997a6bc01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30d9db35-bd3b-47d2-a860-b25601bc6a76",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08dce45a-8e84-44c0-8948-55842ac5a207",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a97b4636-7eef-46ce-820f-c46f9d0437a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c81005ad-8f92-4f1b-9136-e5cdfa5f7cd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "39796372-529f-4929-aa91-eae643266793"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f019bf92-1565-4b3b-87ed-be981b1f6da6",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "371f016a-1cc5-4fd1-bc38-50b1b1cba12b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecc8b022-636b-4741-8785-dad4e7844c75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d4384c4-549b-4dfd-a0b5-e002b3799090",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bcaf3f3b-8d2e-440e-bab9-cf23fc129c95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "216b9648-bc28-4845-923d-cbbb46e02090",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88aed7c1-cdcd-498f-9c4b-59e934b8e1c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61b3b843-35ce-4054-9dbf-ac510df09d19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed98bac8-370e-4cca-8840-7305a7ba204a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "765dfba7-59cd-4d7a-ad77-ca636792b51e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2de5a8cd-db8d-4a52-86d4-6c448aca3f67",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "871b9836-6c30-4a3b-b320-6e98852d0066",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0e04efb-557c-400e-a970-3b1a818e4965"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5568d83-ac07-48d6-bc25-29ff2a5a0266",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "7ef56b27-1e31-4e79-a31e-c560e39d6b09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "686b7fba-0498-4ef9-963a-3a89456e4941",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc0ec32c-a69c-4d50-9d36-2c2a3e288bc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eba23186-39a0-491d-9ac6-3a99f910af09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4eec76bc-c1bc-4c16-b4f3-b01321e1e5ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "53046811-8989-4d52-8a32-bd15b1851811"
                        }
                      }
                    ]
                  },
                  {
                    "id": "542a9fe3-e87b-40a9-9b6d-a78e6edbb376",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3536244-4d25-4629-b054-f8814f3b8505",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f28f4d7f-579d-4643-8c13-2ea55adc52de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4851a50-f6db-46e9-aa7a-1b8adec7e2f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "42828387-df45-4158-9bc4-b6f12accec5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fe6778b-9617-40f0-8972-552070509357",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f662c613-608d-489a-8842-26d8dfb2919d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "178e3ed0-8fe3-4c30-909b-e0e8900e7b72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c53976e-d27a-4ee9-a60d-98c3d90e5a2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "81e0c991-3705-476e-81a9-3d2cf324bc7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a651164-f3af-4985-8772-5d80e1c66d4b",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95dc8680-ae2d-47e5-8fa9-8d8deeaa6df8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20c94d18-3796-4422-99ec-36bee0860c32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "954647ae-8bb6-4d02-b48e-062e84d152bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "06e19aa9-3c5f-403e-abc5-27da94f24c39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7987253-f0c5-449c-b496-896583259a00",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "615b52ca-7764-4f1c-ba47-cf9cd1860ab2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "198532ae-09f8-489f-a579-808cbad80124"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52b337f3-c884-4f17-810e-9578897a6844",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "611c4c31-1f74-4b40-a803-fe8565d1caaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cef42629-a524-4cbf-8594-4071b00c85c9",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cc01e6c-a3e9-4ec9-bd44-60f1cbec193f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a7c2347-6e29-4d54-b4e9-5fffe840415d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d4889d2-edcf-4c7d-b707-44ada1263be9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "00d6ffb0-3daa-4c36-b25c-b75e973fbc56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f6f4189-ef1a-4c7e-a4d0-81f7d4ef0bda",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3805a524-8add-4b95-87c5-04f133610df4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56245829-6691-40bd-a51d-c87820a764d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41c9cf06-e844-443a-943c-f74dc49e087c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "da83b0d1-d3b5-4eca-91c0-c59917403f4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "becdeba4-db5c-4e16-b933-f5c8fee7499a",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b10be8c-dd15-41ad-85f9-2c581ec9dfe4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9879a65-436a-41a5-b75e-1db676658c47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b780882-64db-4d05-95d8-50bf38eb8ac7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "2c4df45d-2304-493a-9f05-f8bc21055ce5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6b379bd-6765-4b42-ab9b-4ec3bceeda07",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21c0b562-5ea0-4923-999a-05045aca2088",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1dbede37-e4df-455d-9c9e-34f31f2ebdee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c677c107-e51a-4760-b367-f02f07432e0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "2e96751c-58b7-4cf3-8685-fd780d404af6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c21ec315-754a-4811-8026-f6250b8a95a7",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0744414-1f10-4830-bd0c-c01621633bbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3830421-a0d2-47cf-9015-4305ded707be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4e1463e-529d-40d9-9ac5-c17b39dfde17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "a5414925-9190-4a5a-8fb3-a3853d4fb866"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf9006e4-6e99-4dc2-bc33-7b0c0c446525",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e3e3998-5ac6-4756-97d8-12586d02dd81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8da60d6-9ca9-4a42-a425-34e7cf983e12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dda7cab-0592-45ae-94f6-2d75845493a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "f164998a-8053-4123-8046-4f1097496fe7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61c92bbe-48f8-4d4b-ae02-e539f6c41ea7",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1082156-02ce-4be7-89f4-ad4544b5f447",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a4e5f39-4fd6-4850-ae35-43a0b8a3c07e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0917322-4192-4d5d-a1fe-2aaa2843acbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "37c436f2-cf4f-4620-bbbb-2e08582b8485"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f511916a-2423-4dcf-a20a-1939caa3d312",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c919343e-5cc1-461e-8eeb-669df9902dd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1be6663-c460-4f82-9f96-0dcb898bc028"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90cd53a7-250b-4a38-9d6b-e8fa721c68ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f9aba196-f92f-4b50-8067-29d2454457de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "932479e6-2ce6-44ad-a322-683b76e396e9",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3215c4fa-3bb8-4df6-a859-85f4c8a4e650",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d72d7518-7e8a-4fee-a5eb-dc38a2c02229"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8a8169c-4768-496b-8e0e-1b46d796bc1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "13bb6d6e-7dbc-48c8-a713-9d62bb7dd78c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3ab1c8f-6782-477a-b9e0-1f9e05abe29f",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edbb3f0b-9390-40a6-92f0-9d643aab7213",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c82b84b6-767f-4321-bf18-a19557804714"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "551812ea-4c72-41f5-9e71-c56966681eff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e5c66b9f-9732-4445-a2da-4aca2f3cb71f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cee90e0-afbb-49ba-ad49-9e9c464b2872",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "613c5c2d-950d-4472-839e-ad8d1130f7a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ea6fcaa-7a51-4c27-825d-7e314ef5bf0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16cebf61-41a4-446f-963a-9a1bfba48788",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "55d0477e-bd01-43e6-9875-1a50c5bcdd6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d73ff9b-9350-4760-9abe-efced210a1dd",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "583887bb-1a94-45c4-a20d-0a48dbae48c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8172a1f6-f8b4-4933-950f-03dca329fb7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b974016-69ef-4fc6-a2a1-e2cf31ebc3c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "afcafbd6-0fd5-42eb-9d59-ed8e785ab6b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c477446-e64b-433d-84b2-b5db17d6aa84",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94d48aeb-1441-4659-8eb5-7a8f91236b74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9aa11299-7f53-4c61-b4b7-a1dfca49d4cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9eca66e1-8824-47a1-893a-c09d853b30c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "07b6bb43-fc92-40aa-85a8-6a0ea405483c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a727b2d9-e9dc-4b49-9f1e-2fd5dd5907b7",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df197689-e204-45db-a923-43999fd94d61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8e52d42-fd13-4d87-923b-790b3e80853a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21f9aa1a-6ab4-4d37-8ddc-d576a53e0dce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3e742ed3-b8bf-456a-8eb6-fff33405b98a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77159d86-f379-4059-baec-f7b781704637",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9fdd708-6be4-4c8e-afc0-ab9cdc7b86e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cf61b56-be75-47ec-87ea-7de3e68bc9e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "934f62bb-d1f5-499a-b46b-a17886d1ab5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ad3f938f-4a4a-4aed-8913-112dab690581"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cddc5e29-a8b0-4554-9a20-216af429c7dc",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56f28512-5e87-43e2-bb19-79d7894d30f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d9f01e0-d83d-403f-a438-b9b625b040e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2934315c-3565-46da-878f-063de350ccb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6e1f6ae0-ffad-453d-81a3-cb89b9a3de5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b655600c-c016-471f-9d8d-7f8182cb672b",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5115221b-1be9-4df0-af21-4f9baebdbfbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b1419d4-f224-4df7-8c31-8f5b36662ad7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e2621e8-ded6-4cb6-86c8-826049ff7295",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4c1a482d-63fa-4465-9e24-15b738e51f2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1ff1f43-13c8-4fe9-824b-fbac411ebc2a",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84e2cd08-e5f8-4aa7-bc9f-96f20d2fe341",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad3dfca2-01cb-43a3-b885-5968ad4e27c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c939d9bf-9c9f-4614-813d-75253090713c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d9b24670-6302-4fd6-b788-6c291ab448ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7265000-86f3-47f9-8797-5b9f56c98eaa",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c154af27-6e66-4794-ac70-ba490f58dcc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1df26b0-0881-4198-9aee-f7754aa37ea6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22d6d84c-b891-4a6a-a897-d74a2369fde6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fde4018a-87ed-4d23-8321-e183b9636def"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e0aa6e7-4a5f-4da2-af62-4a7e08c6e8d0",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30a1c27e-23b9-4f0c-aa9d-25116f17639a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd86df52-40ac-4c10-9b73-af0fac7589bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1d0f827-a389-4ca5-a5ef-618e3de9289b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ca851f3c-9eb2-419a-aa89-04f1a6717985"
                        }
                      }
                    ]
                  },
                  {
                    "id": "025abb4a-998d-4c4a-8e6e-e23c07eba30e",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7fb55ab-c4c3-4b4a-a9cc-46a9e11c7eac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "826dfc32-f444-4b45-a798-0df5d29d2a57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e6c9457-21d9-466f-a356-1e5f1120af54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "90c616e7-7254-4be7-a893-ee0345428b3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f69475f3-f582-44d9-a03d-9f3b408d5cd5",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8919b34b-c627-4aaa-b33b-b79c3f950ae7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42302ffb-b95c-40fe-8617-1f066080fb60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1d649c8-7e40-4f0d-ae51-008896bc2d6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e16d0e72-55ee-45d5-8ef9-aacb639741df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cc1a9bb-8f60-4868-ae33-385d02d90e7c",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a965667-be28-4c93-b1ba-8758e96396ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24e86caa-6900-44fa-8091-83bd9304f731"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51edbcf2-971c-4adc-bbd4-8a2a595793bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ac8b1751-aae5-4385-8b8c-46eb48b48d43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1012dcac-b1ce-4f7a-94e8-864d4a3e5132",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12737e98-7b94-4045-a12e-803746c82a09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b6f17d8-2a25-40a6-8546-242a115268d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "492345b9-9bce-4623-b0d6-5d970a2050b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4eca6622-2f8b-4031-9cb0-2754954565c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8373cfc-4c78-4a79-8081-839ea51b14b8",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4e3300b-6591-4f78-8693-251b21defb2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3669602b-b5fb-4106-b026-aab56306fdcb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dcb98c0-ad1f-470a-a04f-e89d2596c092",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5f25f428-a75a-46b9-9aa6-3a992218e099"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c47c2690-9764-476b-a53e-e082625fbc6c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "dadba95d-6973-4e4e-aecf-1cadbf0781c1",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c1bcb18-9ea6-4c02-accc-9aa2dc5f9c9f",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "40ed66fc-85b2-49ee-b974-996400cb6962"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3440c97a-c0d2-42ff-b29d-490a4c4c9841",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8f60d8c6-d09b-4748-b1c7-145e26cee68e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a6398e85-05d3-45ac-9fc8-03a64644218c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "018c5371-2468-4450-b3ad-2cb9b636e487"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c23a9efe-df50-4bc2-acdb-099d209f6bde",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "df294523-d974-4e6d-92e9-b54423327312"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c5ad6574-2a7e-4b38-9801-3d24b654b1c3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "63659446-0daa-4f5a-9d36-30977a53c994"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c5c3a1a8-f4ed-44fb-853d-c6461f6e7b17",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e271a76c-a471-4e18-b142-db376fec4978"
            }
          }
        ]
      },
      {
        "id": "f6f6da2d-6a3b-4c4a-8c64-03732ec54e3e",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "b77acec8-2a36-49b4-9c00-c210603fb446",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0146b17b-7b60-4f46-b607-64b65266f23a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "68583637-df39-47fe-b5fd-b4f1d436c8d4",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "228bbd83-e7f2-4b39-b18a-3fce516b4833",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9730905-5c56-4e3f-a7d6-14cae1d5873b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8b3396c-9d9f-487e-9366-0c9c748f76b5",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58f6e0f8-836d-4714-9c4a-131e4fcb85e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f191e3c-16eb-47f3-9ec1-5d98e43e2b74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9128832d-2b99-4f5f-b1f7-0b211f557aef",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cff4a7d-5fc6-4c5d-8606-107a7a2a0003",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94633c6a-d95c-4f71-8b91-c1aff8fd31a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5a032d6-ae18-42b0-9823-f39ed76d6f07",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a8da56f-5386-48b5-a3e5-4f41d72e4460",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "892f0533-9c92-4cee-9a9f-892e050b63b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52625392-0ec0-40f3-a5e0-ba0ba2073a63",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5093777a-9682-48dd-a158-b78c4a1cf053",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44dd213d-54c7-461d-a416-33e909778279"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdcfba42-7365-457a-b7e5-7059fd08893e",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a171dac-96bb-4d7d-88c9-5c55c1bb92e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7898ec20-533f-4d81-89b8-e8e751603eb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7681647e-ef34-4faf-9bdf-6002c3f8f270",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27a8f47f-f065-4a6d-a984-f3d64c6245c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10419ca5-3760-4ba9-9fd7-545a8221d668"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62a132eb-4f2c-466c-af9b-733bddccebe2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1bb05b1-7a43-4f93-a4e7-7561c6b37c4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "661f0fcd-55db-4bcc-8c70-8325739ea84b",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5f84d6a-2957-4da2-a46a-25b546294554",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7c678aee-13c9-45ed-91e7-c271c2de8f26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "191735b0-b600-49e9-92a1-70b242efbe13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2078d1fa-88f3-41e7-af51-8d584e030300"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4c4d1d7-5a5a-4957-b104-f3f5843ceafd",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51a25e40-a636-4ca5-a49f-8f9afea9e56a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ac47ee32-90d3-4281-b49f-08dc0a7d7f7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d7242f8-5611-4728-a07f-ed983e1e53b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6c6a9d6-333d-4c97-831f-be5241b50658"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83adadd1-2e6b-4f83-a847-24bd4a1820f9",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bdf8df1-4407-4194-8bff-750b4ec00c22",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e40a8ef5-ec78-4203-8915-eff16487264a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c649cbf-1c59-426a-b4bc-0782ab7bc0f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41603080-524a-461f-8627-aeb128fded66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ab07d0e-7fe3-475b-9ead-d4045e2ddc78",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfcc7191-eadb-4c87-8db4-6416357077c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3e83b7a-cd31-4c5b-9cb1-45c217fffa63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2473f90e-3253-4558-8da9-27b3b0cb1d65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "236e8d0e-0163-4503-be46-92e865d6aff2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61e93042-1178-42b4-a942-f4b1b2a0dcce",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23c08536-68fd-49df-9069-a9403f7a56db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95be4bd8-070f-4b40-9ed5-02cca679cea7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bae955e-901d-43c2-ba96-875ad943092c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bd35d52-2010-4923-8fe1-2feb2874e82f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75be02f5-8280-4e29-9f02-403c57e7999c",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d957e04-cc65-412c-9810-0b76c85c03f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2db06b48-0802-45ac-8214-c42698570d12"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3087277-0f80-46af-a2ce-bdfe8ea1a468",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "606ca3a1-cea9-4eb0-9aff-10ba1b03ac1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b671a82-a6ee-466b-9efe-f9cc38726bf8",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "374622f3-e563-4947-9001-120915007d5d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b998e953-f8a0-409f-b455-f9193809ce86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a0213c6-f49a-4255-a680-5821fec8cde5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c528766-fda9-4165-a853-bd95bc297ff4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a4b1e71-9a78-4236-8866-a93bf7f4af3c",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8508481-f164-42c1-9cb0-95662eb47f35",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "48d2d656-83dd-4dc1-b8f0-112c479025eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a50d1331-2d69-463f-a8b7-2c6b12497611",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba503c15-6adc-4298-ad0b-1071ad02b099"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d518786-061d-4760-b3e3-11d5029bb61d",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cdc4fac-ef25-419a-aa74-8c5755b01874",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e6ddf2f-70ad-49d0-a5a5-28b44d3e26f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "033b05e2-76d3-433b-811f-a1fcc10dc61a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40202dd2-0f07-44e2-a8f3-9329104f558c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e94f860f-c368-44a2-9218-a8049b106c27",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "691fe0c6-5a0e-43df-82fc-73c0f58f7610",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c847860-fc92-4772-bf6a-2a871d0e09ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fb2b4a6-fe97-48e3-a415-ac61bc92e473",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5537f26a-df1c-4ffd-bd09-a370ba3bfd04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13e9fbaf-4141-4853-8165-d03de7f9590c",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "391f41dc-2cbf-458e-9f88-f4cb3d4b97e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "feb95eac-0199-44d6-8221-691604b6285e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "496b7ca8-86bb-4b86-9a29-66b32ca2a1d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80422b5a-eac2-4423-81be-09c1fe812798"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92c30d4c-df20-495c-a32d-891fc826338c",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81916660-9803-4cf6-9ff1-a6a18bc7443d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f441d0c-d05b-4bd1-8700-a60651ee038a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59424bcf-3add-4558-82ef-2500a2661eb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "302fea7d-9112-48c4-a45b-02e60527e19d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef0e9778-47e5-4642-b5f2-00d34161d464",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef0d3c79-3da8-4a9d-8ae4-7cbd9efd13eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76b72a5a-216f-481a-a67a-3af44175fb78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f58667c-77b5-41ad-af2e-f16f6171a869",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "195c5a33-1e55-4637-aa20-4d953cf9ff81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc3233cf-e992-45d7-8794-cb2b4e569f40",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a0d1e0e-4454-4822-88c0-47140a9ea8d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "404aff29-b0e3-4802-b5fd-ea56688bdf2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4f122f4-5b52-44b8-81b6-6b35268a8696",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58eaf72b-4ddf-4bd1-aeef-ab29b975d1e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f015d40-d942-4084-97c2-1005ebb3652a",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65fd2d7c-fdbf-4c87-a420-0b9e684b3ca8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65241525-5b1e-4bda-b851-eefadb53cbf5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3070d77a-3b95-4535-b7a0-2e480d1c69c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2149e09b-1c06-4417-a657-2e317903a864"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc0d3a2f-9761-4f25-a71f-015ffd2f0114",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f22af08-ea61-4be3-9d70-87aab05e349d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24114d55-8079-48c1-a465-ba68ee3a55f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9640c865-c94b-4706-9cd1-acb6ad4c2cf9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba710292-487f-4eea-a55e-47547a821914"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e987cca8-4b37-4f5a-8239-5c397781668d",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c2cc2cd-506b-4ca3-bbb0-ad4601cbb22b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1a48dd3a-5420-4aa8-a1af-ead2ac58454e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b855a421-a556-4561-bddf-78e760c54b8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c6e8a90-93ee-4a2b-b5e3-5c01acba9417"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce1978a3-53f4-436b-9730-862374748a60",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1841ca94-d4c6-4d80-b920-61d267ecf603",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ce512463-5de7-41bb-b1dc-32c999c09ca2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b4d3a48-d2f6-4818-9541-6f6c2e9332b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4dd1e5de-d187-43e3-8a8c-7525828c5e29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "537e98d2-7d83-47bf-b77e-906d05adda5f",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30489eb4-cbed-434e-93fd-634368a934ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e1c70711-5afe-4795-bd53-2e401c6d541d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e5e6633-20fd-47a8-b9ec-a3e3ea0903ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57b43738-2ea2-4dd5-95d2-c6755c2976f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fb23b13-47c6-41c5-a67b-6622be7cf2fd",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a5d15d7-d7ce-4147-8a73-2f0e116f3404",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bc5d0990-c596-4b74-ae1e-659c7826f11a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b3bed27-6001-4725-a69e-622b645e9cc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f360d171-62c6-484c-9e13-a73a77cfd4f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0e5a9be-f36f-4833-89bb-542476c1f965",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "420282df-232f-4eda-b234-70107bca5463",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20f73691-11e6-41cb-9b60-a71f31ebd56f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5be16b19-7c37-4f1c-96cc-b3c961e2026c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fb42216-24c0-48c8-babe-6f7daeafe7df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ed6b56b-0367-484a-9d56-842e62d96c95",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9612fb8a-f6f3-43e3-a51f-1f8b261f7ec2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c4ac5b34-b6e4-465d-8652-c7631d1a2184"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f1e7070-c6d3-4571-a057-61840690d55a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4791f75a-81e3-404d-919c-2a42a000bfac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a34aac20-a044-4316-ac72-07fe1407bfaa",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f977edfd-569e-4fec-be6c-929010cc4b87",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c34fa116-1421-44cc-81b9-85f7c50a5623"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a11f2be7-5c3b-4fe0-9870-185b527f93b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a313a65-b544-48eb-a5f0-8d6445b319dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dfc3ab9-c5f1-49e5-b98b-6b2f245498a1",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56955214-17f2-4252-a7ae-369e7d460361",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8b3b4f1b-4cdb-4973-a631-074aa984aa68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ff9505a-965f-48a4-92da-b6c6df536e42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6f19dee-c2f0-42a1-9444-64851f16e300"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2796711-2a7b-47ee-9157-65b01fcd46e4",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d956dfe-3049-494c-bf16-34239f2d236f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9d773ed4-a827-4dda-bd82-68267db29efe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20dd69a0-b706-40fc-95e4-0b372c066ede",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24d03393-1e9a-408e-b17a-2d8f46998734"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d7c1819-83cf-40c4-913a-8ff82e7b7db5",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2951cc9d-c288-44a8-a038-d5d6ecee5acd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d2e12ce6-70b6-4186-a8a5-1b5651e9ba04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af09de9e-a1ea-43aa-9a0a-866320730134",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "493ce153-655c-45f2-8edc-6336bc21a3de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8431fe20-1468-47e4-84bd-3abbf6c7c321",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd72d000-f618-4bdd-861e-60952ab83d29",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9071f81f-64b0-4d62-a4e4-4ab9b1201c35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15329711-15c0-4b5d-8684-09de0162123f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87bc971e-8e53-4a80-a456-57b30d444e15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c375c4f3-33fb-4ece-b22d-78f81daa16c2",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51b1c9ae-6fdc-4738-a54d-0ebcba14fc14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ece0111c-5764-4af3-b16c-f0889e2eb1cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aef40fd5-245d-4595-a72b-168188cd6597",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69fe2894-eadf-4594-91f4-ba8997c3708b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa9903e5-5010-4c0e-af88-c9768917190e",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27327549-a304-4481-9902-55ac9dd4790e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1f0c78c-5379-4c36-b7a4-8a93c2164ed0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "227288fe-8c0c-4926-a92f-e4b7b93007f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1252970-f45c-46d1-bef6-c6fbfb2ae718"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d031e5c0-a16d-438f-a64d-ea59ae61dc2f",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abcbdc49-31bd-45ee-b673-1d6a2ba17ad4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c862647c-1045-42c3-936a-51165cee5cd1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a56dbdd9-9237-4cc1-b00b-6156213abead",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bec4c34-a7ee-40f8-a06c-c6e3ed0b6f85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b80e02b-4185-4788-ac91-b3f8d75966b5",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03c06e5a-b921-464f-a0a6-938b5450b548",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0dc0e377-73c0-4611-8d75-62f78b6f8d99"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c9e2161-6b81-4879-afa5-115d1d19dc4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d415fb5f-60cf-4c9a-8fb0-106f603ebe6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e46f8be2-cd2f-40c0-b224-f20e848ee187",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35fcf6bc-1665-49f3-b6a8-4b948a7562c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c101f6b6-9a77-4319-8ea6-3740a66fcb05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6437c7b6-8a3a-4926-b094-e5b22a247d35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba4160ba-9cb4-4943-aba4-be71f4cdb41f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "835d9941-a0ad-43fd-884e-9622a9b99530",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f163745f-b262-411a-aea1-a6c5554c1509",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc4d3ff2-b02a-4035-88c2-e19a396c8a0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddd3bb26-9b7a-448b-9fbe-da05f28e978a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccdcd7d6-4552-436e-b24a-900cda4f99a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28514fb1-e9f0-41f4-8806-97d9cc261e21",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0657399-ad9a-4b51-b7bf-14a4b24716db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "521bdec5-13ce-4bba-b6e4-548e22e92e1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da9e65d6-6d1e-4b03-9f1b-dc2d7ea2b78c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b47f0007-3a9b-4230-a08c-edc5f9b7926e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ede95a4e-08ca-49e4-9d0c-b631cc9c142a",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5bb2ce2-aaba-41e0-ac3f-7a1b27b364be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a23c203-5c8c-4d21-8ba2-0bbc8af1e7e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "183e0ac4-5863-403b-baf2-f5fe299e80df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c387c555-1101-440b-af40-c31c12791734"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51ba755f-5b81-4767-bc4f-5e0b3a01c8e8",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a73769a-970c-4ac4-97e0-c41a0b43fc43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9907e6a9-bfb3-41ec-bd64-5f51188d0317"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32934c70-b674-4409-abd4-0dec011c9abe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "960deb1d-2182-46df-82bd-cdc62e54c20d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ebd7a1a-4c7f-46e0-a624-f07bbe8fb8f6",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a628cc7-89af-4573-ae25-94f271b54b93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b232376-b7b3-46a3-8ede-e476dccd194d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "457a678c-fb6c-47d0-b7d6-c630ef8d166a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6dbaf30d-14fb-49c7-b0a9-83bee8465da9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48110cc2-d887-419c-9182-904f2ed926d2",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3554eef-c04b-4cb9-bf7e-30bebd2c30df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63a7c14a-099d-4957-9611-197dfce7617c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2207082-7162-440b-8462-4f6dc8ea5b9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2234ba16-2998-4f0c-aefc-782a6bacccbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6d5a37d-2e4b-4964-8f26-13caafcbf9fc",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d08fbbf5-a5e9-401a-87f5-24eeac496f95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5326c394-f5be-4678-ba78-4592cbd8c22a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "512bd7e1-6579-4229-bd1a-0787b4b16c6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b099fbeb-eda5-4793-baf9-1624a0651267"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35355803-8c72-4b08-aa55-d1cc0b8011b9",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92c31884-e7d0-4e75-b3ff-dbcfdf0f54c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9c8bf7c-8703-4837-bc90-d65abd79267b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5b8a79e-79e7-4c08-a61f-759d3732d12b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bf106a6-7d37-4c9e-9115-c2df2e5ac022"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a49aa6f-bbd5-4062-9d11-a659f166ff8f",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f633da02-74b4-4f47-8cc4-968972aa7b2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e33dcdcc-6ccf-404f-b52d-347b8ddefd8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ded9e3a-4bb4-47ac-8509-b899b2b36787",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1e7d5d6-3589-4f8e-b652-68ae71b8774b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bd6d157-e87b-4c4f-887f-11d41ca4c3fd",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6438ae84-3590-4b1b-9e3e-102e953c59a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14c5f33d-1f47-42ce-a914-39d3fea4461e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f2782ee-f99b-4c25-945f-2f5166ecffbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "053d2f83-432b-4f76-97da-103874b78bb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b40629b8-c65a-4148-94bb-ef4e92e6f510",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7961f7a-1f95-4246-bd2c-50d59623b23c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae8148dd-e9ac-4bba-9ec0-443f1a4f2c4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ffc79d8-1122-44f9-aff8-ac979755bda0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f95e8e9b-b870-468c-943c-5932051ef8b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43534945-a94e-4288-a091-9ada349be40d",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03654304-dde0-46f8-a055-fe34b489eda9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22707fb7-02ad-4915-aec2-ba09f7f29064"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cea2926b-bfc8-4b8a-83aa-6da4656d76ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3daffced-6757-4d42-b68d-d5dd823641ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13921457-5990-4cf4-a824-40dd825858d0",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "644964ae-abd7-4b5e-a1a5-51e68a70a24c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33f3d57d-440f-4c13-b4d8-db53d8f8d032"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd5588f5-ea10-431d-ae59-27f09b43aa61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8385ed39-3750-4bf4-9e10-0d3376cb3efd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "049d5e6a-f75d-4647-97a7-52902cf98b56",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b2bacaa-3120-4cb2-9121-810064d39c12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d3e6114-5c80-4e8e-8b04-fea7135ef624"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "088143e0-f7c4-442f-96d3-e5f421610c82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55f4ecc5-8019-477a-9c4c-b1e789331dd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "034fd63e-e057-4543-8942-a77f8b8e8858",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf8fc036-34bf-4e73-9f9a-3f06095d2e81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bcd7fbd-d963-4f44-b4fb-1f7f56b0fcd8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d5eaa38-8d2e-44d3-8b21-17b84fd8afb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3057167a-f0b9-46e9-8420-2f0aae164051"
                        }
                      }
                    ]
                  },
                  {
                    "id": "381a4750-17a2-4f82-8b30-dc8bdc194999",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6f6abc7-11a2-44ed-98c7-1e060d3d8ea8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3191598-70ec-41e8-889e-76220a84c701"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3699c267-d7ec-4477-a47e-f8b49da552e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a0ec8af-439f-40ff-9f15-c51648b17733"
                        }
                      }
                    ]
                  },
                  {
                    "id": "815026de-449c-48b8-9a95-07c6e130a0a2",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "048d7908-a14f-4c2e-b457-b8cd46cc70a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5f6b6fe-191e-42ca-b300-89e845402013"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e9cf809-342e-49cd-9e98-88d5b265132a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "845b6cec-f6b1-4042-a3a7-942b36a17fde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "228d0097-ea66-4032-b694-f4a4ece1905a",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7705ff2b-9b15-470f-a424-13fa39cc0355",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7903904-9cba-4d04-bf1d-8a1dbeb2a5f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16b87024-6671-4497-81aa-ca1eb30efcbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c776aa74-2352-4025-9d42-94cc8c8b4b3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2ba923b-8124-42f8-857f-aca673ee85d2",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "270a5979-6c3e-475d-acb5-57adb0b6d242",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b813be9e-df20-492b-9784-88c90547781f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65bceb34-126b-482d-b820-5e322874366a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1427487-c59e-484a-a8e8-60244d1b0f82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bd75f7e-4d17-466a-81d1-6a229464f7f9",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f0b2d97-9fa5-43c6-b688-1092787bf162",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3ef7c06-7d12-4c82-9296-e43f4d9efc3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8513ac56-c174-434a-acc4-2a4124f52c72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4810a1d1-318b-4c09-a07c-1beddd221a49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d82a040c-5745-4dbd-898f-3a7cedacb0f8",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe1a645c-3d04-49a4-88ce-71e73857f6f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df5d1985-1637-47c7-922f-654b7806ba09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd97d620-159e-4a6e-a3b2-581dbd81f744",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01226700-93d8-4c9d-a1aa-24797016581f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64d17c79-c1e3-45a8-b29f-b35c11f98cc3",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2623bb28-2cef-4ec7-b0f9-116ec21370fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a42eda7-1b53-4e38-aa90-468dc96f8a8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f231aae7-1466-487f-8ad0-e2bb4fa5928c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a663e35-5d97-4cf8-8a17-e2fb419c3c38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90ca3c79-f5b4-4272-835f-d0ad004830f1",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0f8436c-e53a-41b1-b476-e9714ac2c20c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f847454-9b18-43bf-931e-6659f92f8337"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "033df2e7-80fb-46ee-9ae4-1fef40dcce41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebbf7ed7-6d05-46be-b564-97d89130de52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97be7530-7bae-4276-9f89-5261938fc504",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e748b34f-1a7c-4591-822d-bcb94a2003df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fa95fcf-6030-4197-83ac-2246c82d56d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "021a35c9-89f1-4094-8de1-45e693ae071c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "673b020b-7d13-4092-b1ed-d75327ff9436"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b6628b1-0901-42e5-bbf4-906a0bcea427",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abae97b8-d000-4b42-b592-b358595dd70a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "34c7fec2-927f-4ab0-838b-a664b272c93b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be81d3c2-ecb6-4125-9971-db86f80af0a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ad9d34c-6d17-4e5e-a4b7-0832c08b7a5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30f20552-197a-43d4-b3f5-7546cd0557d5",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47a7c4e9-eba0-42fe-9eca-6fd810b7b1a9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3065ff39-6ab6-4e01-8bcb-2c01d2e7458b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e0a91af-504f-4fcc-8300-d82dbf628aa2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20cf7be8-25cd-4845-a03e-c6abe4d586db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cde90c43-6e1b-400f-88fd-b0762e04eb38",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c15e940b-de5c-4dfb-8f14-64ad26f975f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fc108cf9-3181-47ef-906f-09c1562b9056"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a44c796a-a061-4de8-ad5e-8316cea1b0f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a3dc8ab-a194-4fc3-9140-2ed41590d0b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06ba0f65-726b-428d-93bf-d00d906c23a0",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ebcaf54-831f-40f9-8d94-ae5d24184f68",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bdc862e8-36fe-4c5a-b431-bf836ec1355f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a19fbb16-0727-4107-af3d-194960f691e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebf21c6c-005c-45d8-aeb0-6ea649b3b9c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c40733d0-4d5f-4973-bd22-d9a8bd8945a3",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b8f2d39-d10c-4ace-b895-e451a5fcb42b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7612f17-ea85-4e6a-8ffd-32eec39c2414"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26287a40-a4ed-453a-b4c8-b471e3bf68ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69dfa9e7-f5c4-40fd-b612-3c2dbde939fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c78f3a6-0a82-468d-bf7c-1b0ea8f50a60",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14d0fdf2-faef-4486-8991-2b6239740767",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ec7255b3-0b7d-4913-97a0-fa834bbccded"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7da329c2-8191-4d8a-93b4-d5bb0bd570cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbd30585-9e33-43d4-9fb7-c603e8bb9386"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05f4dc92-7d3a-45c9-82cb-aed4a209980a",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28aaaa97-e555-4fd9-8902-fdc6ec310f22",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e73aa732-6b8e-4514-b0c9-139ebbb6fd0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63f296ab-43db-4674-ba9f-093b8d98b1ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "394315ec-bf9a-46fd-9c0a-2c5ee7065de0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adfcd673-40a4-4074-8947-9edb18068cd7",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c58d2615-2ae2-4eeb-9c34-bc726970eaba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d58d6286-d981-43c7-ab15-594d140f0a57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7abf9839-2303-4579-be67-f3e7f0969c23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec8c0370-bdd5-414e-9f08-59d8460cea29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f920cdcf-2d8e-4bc0-8bf2-9a41f086bd74",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f2c7a98-8d60-41ca-ac2e-a67b1b9fc8b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fa5a7b14-8bf6-4768-b88a-318d73d99287"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "368d1c59-2418-4897-b4a5-a17ea310d972",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da10ab3c-da4f-4024-9b7c-cd8ee9c1c582"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cd8c06b-dbd5-4a09-bc3d-5a6b1f575582",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b5ff85e-a0cd-4257-9843-a5482a9f1dcd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef3c8c61-7743-41f4-ab2e-886eb500d809"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed089220-cbe4-4a5c-aec8-bddf912b26b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f43055e3-d0c1-49b2-89ef-8dab6bad1497"
                        }
                      }
                    ]
                  },
                  {
                    "id": "398b2c6f-c475-4e6f-b0bc-ff55e322670f",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25308cb1-4960-4fe5-a6a7-a0baae57586a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5eafe59a-3fd0-4ce3-b7bb-710ef9e0941c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49eb904e-3ffa-4bff-b86c-6bb5d45c74fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5ef4c32-db90-4201-8fb6-3afd782d84a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "288c78e5-c779-4763-b059-6bfb55259207",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06e4d0f7-7afb-40b6-8210-f34e33b5e46e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e8ab5ba1-95db-40ff-80d9-96be3edb0074"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b32791e6-0f56-41bd-8ff4-e19af101fc10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0627795-48d2-4e81-ba54-574f46052f9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dae08af-4ae5-4c15-9cb5-ede32627e11a",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d1be639-b58d-47c1-b6f1-01c582b520cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9c18a53e-219a-4a0e-92b1-6b0379aa7e90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f865c82-034c-472c-aaf6-bb37dc361291",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d73aaa5b-0df0-41e0-9cea-f65ede639b22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d45b1c15-2035-4669-af94-74f6b8463189",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84a1a0d3-6c81-458e-b1f0-99ee05d9cbce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "122b102e-45e2-430c-9aae-f7f2d30e1a32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5e0b203-9b0c-492b-8c8f-fcc39349744d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94cacc4d-d8b6-4146-9a84-65601dc606d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e066a2aa-bc93-4cf5-af61-401a27ea3fc3",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a3ccf8e-47d1-41a2-8e9e-22663e5898c8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a924941a-6525-4aec-8286-3ae2df1f6433"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a2890c9-9bbf-438e-afe7-df982c6fab35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1893b8f2-7000-41b1-aeea-7af1921e891f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3a77d5a-f232-46b4-9389-72e1ceb65814",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b1c13f4-4e26-4c95-934a-58397825b72f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d70ec2d-c21e-4592-b5e8-0d1a7708c0b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb8ed6a3-5fdb-4482-88ac-ee9f4d091f25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d79bae16-6acc-40bc-b24c-ab421a666026"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba5a0848-6baa-436d-9bdf-7d93ce696eb9",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e142fa89-aed9-4955-a6e9-f553b068e00c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a19b3916-0436-428f-9e15-65ab5419666f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43abbd49-74f3-4a06-979c-d2d442cd64e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e90c9ca4-e90f-42a0-9c82-a3529953cc6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bad58619-658a-4dc9-b788-08d207382693",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd98a882-6874-4ec8-976d-1c6f910b826d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3e365355-cc46-46ef-bb48-43a654ea2ab6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "692ade8c-772b-4433-9a57-bef60dabf209",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "571a63f8-72f0-4252-9078-85b0318d47dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb51d625-fec9-4eea-8a6b-beb9be965e83",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f219ac69-bfe9-4d9b-871c-1c0e7d983464",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9a0e9dd8-e93b-4267-b1a8-7b8f29f6c95d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d9fac09-3a19-4438-94f6-a2ac718c9667",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "403d35b3-9c48-4ae1-a090-5dc0ac97b540"
                        }
                      }
                    ]
                  },
                  {
                    "id": "999216f7-6d29-4826-8734-05842b7dbe87",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d80ec42e-4c0a-4e63-b1b1-acbd613e1073",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "06d05db5-31d1-43f0-bac6-1ac3d29c3f37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01a2fcce-aa37-4353-8636-70d1edc6e26b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef194195-7af9-4641-b6d0-af134d1274ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0f2b2d1-8ed6-4a25-b554-2712084352f8",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c63efbc9-3021-4ee5-af66-cdf831b04729",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1f3b0f05-7962-4a2c-80d8-9048502b67ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b00565d-6990-477d-af11-74300c6fa196",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "005a9304-708e-4800-8d30-0af3731c83ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21ab4e8e-07e0-48de-a3d2-9f56a9820850",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebb711cc-a0e9-44be-a3a3-15ca47cb7d82",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "587b9403-f6aa-4ba6-a88c-3517361a0d7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49d96093-a94c-4f1b-92af-aaa7e09df8ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fb94f36-e797-4e0b-bf5e-bc0833a73c84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fe91d73-5b56-4897-9916-e123ecd262f9",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57d822b5-e9f6-4c62-b118-f91f974a9be6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0afcdb09-624e-40b5-bc6c-e53102d28665"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "906b1bd0-3012-48ca-944a-a3554bb2fe36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86fc76ba-a73f-4bc2-a19c-0d1ea297cad2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1fa68c8-8217-4fbd-a375-e3335775e4ea",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0b74fc5-a612-4300-8cfb-a813ba0ce9e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2821d5a4-da9c-41d5-a007-b4371d9425de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5961f40-0884-41b5-bbf1-b530cfb7ed4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5b50f56-bd85-40d8-be48-f87e96ad1879"
                        }
                      }
                    ]
                  },
                  {
                    "id": "963c1bf6-7d45-4e0e-87a4-cb05b755bdd4",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fd1af32-2ee5-4a38-9e7c-da2928860973",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f437636a-fd6e-43cf-af93-799332af55f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c612b76d-5416-4b7d-a60e-f3295775ecb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fee704af-524a-4d85-8d0e-81a248966161"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e31e3ca9-62f4-43c3-abe1-14a04a76f604",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19cd6688-ebf1-4c14-ae5c-eb0c407330a3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6e040a1f-e586-4049-b85f-e27f6ce65549"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2239818a-2150-4c5c-8fb0-acb8565d2015",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "174e9401-f6c6-4c88-979b-2976ba90827f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "808175cd-3910-45a4-b99f-b36fc76d63be",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78a75214-1abf-4923-ba83-61e46f747462",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7da0d36a-d11e-49e4-8ab3-a48f93c5c78c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2978f35-7440-48e5-b831-e90722de4466",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9bd052e-04db-41df-a4a1-0224239a14b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c54b8a61-6ccb-4286-86b1-4cf65e133dbe",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3461c35d-9d2a-4cdb-949c-b22531f9fa2a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b620d07b-4c1d-46e2-8681-b608228888f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a34a8a3b-f335-4f5f-89cb-b33cb66b127b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb83088e-3841-4556-88fd-c8c3babf5bbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "688490c8-17a5-488a-8dd6-ddf223b9f5e3",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c989e5b-c663-4e57-b144-0552491411d1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f3c1fbc3-d233-40f5-9c7b-f6d485625e0c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78063e21-71b3-47e3-b369-5bae6fbb874e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "747603bf-396d-4282-a667-4c6fbf9f03c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc422630-b1fd-41f2-8acc-7b460efb3e71",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3ae8416-2048-4ecd-baca-a7abb5202037",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c37aefc3-192e-4c93-9cb8-4a903aaa7083"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01e694d4-f1fc-4846-8ba1-3b7b787184ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7955c582-e0f5-4dfd-9a33-9cd864682b86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a9a3f12-af32-44ef-97c0-0d22d15f776c",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41a560a4-05eb-4e10-a444-85f357f1d32e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "66c46ce4-1fb0-46e1-b0d4-2f0ef1894a06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ad2b178-79e6-4a4b-a9f4-2cf884f56e8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c3a87eb-3815-4ab9-8f9c-5e0069bb34f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2447e4f-8e96-4d7f-af20-ab107c84ff1f",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6d4aab2-614a-4fc0-910a-3c50b0ab5af9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "52f43bc7-27f3-458f-8eac-d214733c393c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b00ff3d9-1290-43c4-a075-d791a2787090",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38c4866e-dc1d-4431-815b-7cf10ef4812a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba371789-f182-4b74-ba52-bc8c0130887f",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc4e9e07-3714-4b5f-b5f2-676aac3c026a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bc03c644-05f0-490b-a640-5efabd0cc5fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8298a727-56ac-40a0-9e56-c89f1074e6d3",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1914d468-ffff-44c7-836f-4b9926cf7810"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7eb5d36-71a5-4f87-bbf5-0edc473d7bb0",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb632f16-fd2f-4444-90c8-b1d6435fe849",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1193ca62-751e-479a-831b-5ac85477eec6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c48a9558-3237-4489-a4d8-2b1b13607c4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dacea5b2-523d-47ee-8629-db41b2184514"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "34cf0c2e-d805-4a4c-b9e9-fdedc427612f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "827f1d20-d896-4685-a569-2c8ae4ee94b1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "91068066-9fc0-4858-9651-6f07d0fedc8b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f730c227-d698-4721-88ad-306d576f904e"
                    }
                  }
                ]
              },
              {
                "id": "3b8e33a8-1586-4c15-abdc-4f4152c4427c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "bc609add-3111-4531-b378-5f6b5a9c312b",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "478bcf17-99c3-434a-b3e8-93cafb1207c0",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "e1bf0a9c-e85d-4dbc-8214-5912784b4313"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d716b65-cb18-4399-81b6-edc66c9e9f6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4c72012d-811b-4610-a631-4af331cbef4a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "008f80c1-e99d-49ac-bb21-b5e4c01be7e5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0ac74511-b423-4e27-a06f-bc84d25f8ea7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0ba089ce-56ac-48aa-b930-bbc1afe6c52c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "de3a640d-7a1d-45ae-947f-4017ebf48750"
                    }
                  }
                ]
              },
              {
                "id": "f767e63c-21fe-4e35-83bf-52cb327a73ac",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "700d9094-042f-4da1-ac99-6a0d2e67df81",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db41ec06-3dbf-401f-9109-bff4abe08bbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "9c9304c5-7431-42cb-bfe5-843fb3cf6db6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f5a5788-8e5c-4e3f-925b-06cb81090060",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e00fa880-30c3-448f-8b11-dbeb08d64ed2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "2f22d8b8-8df6-46c3-8141-7fd34c0fd02d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "9a39bdb7-c2d0-45cb-ba7a-1ba21bd2ede4",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9377ad1c-2f20-42c6-b384-be0a031296e4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "29252a91-9184-43a1-9367-3478ecf4ae7e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "067df079-f18b-4ea8-8c0d-9cafce1407ed",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c6b0be09-64b2-4553-ad46-602d1bca0bcf"
                    }
                  }
                ]
              },
              {
                "id": "d01785b7-0bcb-401e-b60b-5a902715d1ae",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "58f0b06c-db13-4c4a-ad42-0f754f65a343",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "466b51e5-3cde-40ed-b871-f48e28a77058"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "db66bb5e-adf1-4d92-a2a1-a2caf9c44498",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0fb88697-843c-4f88-b41a-302d03ddc3dc"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c635a280-36a3-4fbb-a2d3-43c9ea76d344",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "6632c897-a0cb-4e3c-9359-2910b115c8cc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2ec18842-7dae-4eec-aa72-518848021d09",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1db4a5c5-0735-45f6-a263-3b5a10a6568b"
            }
          }
        ]
      },
      {
        "id": "1507057b-7a5c-4b31-a788-5a0848cbf015",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "b87a13cf-3b50-4bc6-bfbb-64059efc1639",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4dbd4b40-2955-41f3-ac95-f63c3067bf43",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "435e0bc6-69c9-4eb8-936c-44996d2e8051",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea829957-2239-4c83-b624-e17e745f3c63",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "979437b1-96d6-4b32-83ec-83fe78121a20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46642075-a942-4784-bdea-af244f4badf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c6b30501-9726-4e16-8ad9-b34eacaa98c5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5f22d6ab-1bdb-4ffd-87a5-09b0ed73e7d9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d5e1c58a-1b5a-49f4-a535-6a9ae9cf8121"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "84b19d99-156b-44c4-b917-db61052c953e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "84b46d41-5d27-4e92-a1e2-241df8824253"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f072f029-27af-4d5c-b944-50b88554357e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "a410f5bb-8b0b-4790-a538-d46a4a98b3db"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7afbaeac-d33b-42a7-969b-fcd8a87bebab",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e6bfd9cb-5d6d-440c-b28e-71267a986f69"
            }
          }
        ]
      },
      {
        "id": "cbc2083f-5bc0-4a90-aa14-fd54f7fa406d",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "e2c53121-c508-4d70-9466-07e32ac0cf91",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3307257b-1c10-469c-b177-fe46a581452d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "67918629-c38b-4d1a-8245-e96f82064cf4",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eff1fdd3-d5a3-4add-afdf-023770e5e7f8",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "10345d4d-f679-482e-af60-a7aa1ddd0edd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c8ae099-f13b-416c-82a2-0f5956003f16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4caf5a10-c838-4f3e-9c7e-39c95e8c0a01"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0da83a3b-e092-4717-84b2-82bc11f06d53",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "045d28e0-fb23-4ec9-a4bb-be465dd89d09"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f9a05f43-caa7-408f-8f74-d5598f7dc5d5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b000873e-06ed-453c-acb3-a391ac863207"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4a65ce83-04a6-403d-a823-6df98db9c08b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "bfcf24bd-2bae-47ed-836b-79acdf77137b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "46b2bdf5-9000-419c-8c28-29aab2d94b53",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "52d5228c-0ed3-4551-bfc5-0f5ff1b8682d"
            }
          }
        ]
      },
      {
        "id": "5dad56cb-8455-4c91-b624-4a1e8381f60b",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "53b529db-8ec4-4c4e-842f-dc99cdfbed28",
            "name": "Negative Testing",
            "item": [
              {
                "id": "be7e92b1-786f-4f08-93c0-c727375102fc",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1129471d-d330-45f4-9ce4-fdf6e65faf6e",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fcf9d1a-d2da-4b76-b88f-f34d8075e495",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b5cee07f-7f71-4159-8da0-122ebef110fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf35e725-fa87-4a50-9b17-2dce497f62f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "abc61a37-4675-4856-9b5f-cb15af34ecd8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5a85932a-fecf-4738-864e-6e1ddedeebd4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7cbf89f4-f1e0-42d1-aab1-f3b1076cb156"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fc541542-bd74-47a5-bdb3-e476cdfac53f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "81151b2d-8543-472e-a484-5727c8614b06"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a36d84fb-5f5a-4c4f-8c90-98a4cf46b100",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "0c6044a6-e08b-4216-9316-1a3b1101af72"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1222f63a-c8d7-499b-8a43-997baf054e8d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9fdcdbfb-b2cd-4d2f-8a4d-b1956adbe83e"
            }
          }
        ]
      },
      {
        "id": "442872b0-dfbf-4258-853a-2e704dc0fc90",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a2f655cc-e800-4085-98fd-ba2ba6889fb3",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fbdea49b-2586-41b6-9a3e-69d7100ffc4d",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "9f77238f-75ec-4d72-9511-4c49fe32f268",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cbce12cb-bcc6-45e0-9725-227f63e12e50",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ca011572-cdc9-41cd-8114-366cab9baf72",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 571,
        "pending": 0,
        "failed": 87
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 143.36971830985925,
      "responseMin": 14,
      "responseMax": 1765,
      "responseSd": 272.15712489720914,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1690850732817,
      "completed": 1690850788381
    },
    "executions": [
      {
        "id": "765b8bbe-9368-450c-8c06-68439fb65c1c",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "16e22ebf-54c4-4171-bceb-397b8ba7bc71",
          "httpRequestId": "33623b61-2e7c-4ab7-9d17-d1dce356a834"
        },
        "item": {
          "id": "765b8bbe-9368-450c-8c06-68439fb65c1c",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "0d2dfcbd-d8fe-40d5-bee7-8a2aaaa88ed8",
          "status": "OK",
          "code": 200,
          "responseTime": 106,
          "responseSize": 0
        }
      },
      {
        "id": "f1e93ac1-a09c-4a51-a709-51aff88ca141",
        "cursor": {
          "ref": "8cdeddc8-a12d-4913-9b2f-569bb1d000fa",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "e2c79d7e-7085-437e-87b5-beba1f25f51b"
        },
        "item": {
          "id": "f1e93ac1-a09c-4a51-a709-51aff88ca141",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "24f6a19f-7aec-4416-a55c-09b4170f1eec",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 0
        }
      },
      {
        "id": "0bf55cd3-e7b5-41c1-b583-1faf3f30c22b",
        "cursor": {
          "ref": "52f6ea2f-ab58-4256-b244-58642b9cb9d6",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "bdeb475c-e7b1-4a28-a412-e54cf0724a51"
        },
        "item": {
          "id": "0bf55cd3-e7b5-41c1-b583-1faf3f30c22b",
          "name": "did_json"
        },
        "response": {
          "id": "ff01ed6e-5a1b-4880-91f0-1d8543ca0da8",
          "status": "OK",
          "code": 200,
          "responseTime": 197,
          "responseSize": 1102
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5582b9e5-1f6e-41bd-8062-92fc8d0a8049",
        "cursor": {
          "ref": "19135ba1-8086-4b22-b0eb-c575675e1cd8",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "06bc5cd2-5ab2-45d5-a252-d92cce5a23cf"
        },
        "item": {
          "id": "5582b9e5-1f6e-41bd-8062-92fc8d0a8049",
          "name": "did:invalid"
        },
        "response": {
          "id": "a0569ff6-9a62-4ac1-b1e0-e3b8a69ccf1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5582b9e5-1f6e-41bd-8062-92fc8d0a8049",
        "cursor": {
          "ref": "19135ba1-8086-4b22-b0eb-c575675e1cd8",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "06bc5cd2-5ab2-45d5-a252-d92cce5a23cf"
        },
        "item": {
          "id": "5582b9e5-1f6e-41bd-8062-92fc8d0a8049",
          "name": "did:invalid"
        },
        "response": {
          "id": "a0569ff6-9a62-4ac1-b1e0-e3b8a69ccf1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39490001-f058-4a8e-a8fc-e60c938343c2",
        "cursor": {
          "ref": "7483fdf0-2bd7-4e01-a66c-a9fc55cca264",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "da8e8f51-f407-4e30-a3c6-a5ef37714f46"
        },
        "item": {
          "id": "39490001-f058-4a8e-a8fc-e60c938343c2",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "2aaea8e6-18de-4591-8d04-b9129c6e9a18",
          "status": "Not Found",
          "code": 404,
          "responseTime": 114,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "296b2f56-e8a0-40e3-a322-f698a8a7e443",
        "cursor": {
          "ref": "e7351082-cd6a-4470-9abd-b1e0c638a134",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "8ccb4dbb-3cbc-4546-9ac6-f11372e81b99"
        },
        "item": {
          "id": "296b2f56-e8a0-40e3-a322-f698a8a7e443",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "ad9d5108-9e56-48de-9a6d-93db9c5140ce",
          "status": "Not Found",
          "code": 404,
          "responseTime": 61,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1ce1158-0a3e-481f-a57d-3520e2a041ce",
        "cursor": {
          "ref": "ac3c0ba2-4686-4ceb-9e68-0d40c5ad54a0",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "9535da78-883e-481d-bc66-6569207c6a0f"
        },
        "item": {
          "id": "f1ce1158-0a3e-481f-a57d-3520e2a041ce",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "13cae14c-7005-4383-b340-35503e254396",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85063a46-fb50-4640-ae46-aa11f5595460",
        "cursor": {
          "ref": "9276efbd-5725-491f-b0a0-064bf1a4b0aa",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a40bf544-d997-46e3-8d54-e76206047ed1"
        },
        "item": {
          "id": "85063a46-fb50-4640-ae46-aa11f5595460",
          "name": "identifiers"
        },
        "response": {
          "id": "88e1e8e1-dbc3-48ea-8116-1350c07353d5",
          "status": "OK",
          "code": 200,
          "responseTime": 121,
          "responseSize": 1118
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f62092f2-986e-4f8d-9a1b-c9a306e06086",
        "cursor": {
          "ref": "86a82831-5588-4032-a8a8-883cf26849d8",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "e2824371-d4f9-4ae3-b685-6f131d146494"
        },
        "item": {
          "id": "f62092f2-986e-4f8d-9a1b-c9a306e06086",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "97260ebc-6355-4441-97ad-c8870ecad5d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "492150e7-1abc-4221-8398-1263e31bce7f",
        "cursor": {
          "ref": "9b6c87ef-11c2-453e-b8af-201c0db04ebc",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "5ff5f01c-b790-409d-8418-b4232bf9c64e"
        },
        "item": {
          "id": "492150e7-1abc-4221-8398-1263e31bce7f",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "a6a9a754-9b6f-4693-9128-9b1605799c87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d950f5f9-050f-4c6c-9275-d750ecadc139",
        "cursor": {
          "ref": "533307ff-ca92-4fd3-836a-9b4164242e8e",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "6b1b2f79-1e36-4c75-a00d-10d491f71442"
        },
        "item": {
          "id": "d950f5f9-050f-4c6c-9275-d750ecadc139",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "b3f8d74f-cc28-4ba1-a48a-76aca68d0cd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81f0a1ee-41a3-47b0-87b4-5c8debe5eb02",
        "cursor": {
          "ref": "4fe43901-2fce-4236-b42d-9f0c821f6247",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "49eee362-ed6c-4647-ba63-0c093c2df9d8"
        },
        "item": {
          "id": "81f0a1ee-41a3-47b0-87b4-5c8debe5eb02",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "2483a55f-fedb-4161-bf96-18f01eb3a638",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbd652a8-2e4c-496c-b874-6b14da42498c",
        "cursor": {
          "ref": "b03df4fd-fdab-4a13-b291-d85fc7cf8707",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "6ae26236-84bc-430d-b596-020183f73290"
        },
        "item": {
          "id": "fbd652a8-2e4c-496c-b874-6b14da42498c",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "8d426c3f-7d0c-46a1-a658-d7a0881efb41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6667b018-af99-4147-8f51-351a52bb12e2",
        "cursor": {
          "ref": "8da7a1ef-8d2b-4c78-a1c6-6a5827e93864",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "899def14-bcbb-4511-9434-50c5dac0c540"
        },
        "item": {
          "id": "6667b018-af99-4147-8f51-351a52bb12e2",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "e83c4900-fb37-41d6-b2ba-2425978b925e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96f308ae-e260-49c1-bc58-3d208a8d6359",
        "cursor": {
          "ref": "0f65ddfc-6575-41ad-9808-bcddabc53a0a",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "4bd7eae2-65f6-4e70-aadd-cc3f80aef8f3"
        },
        "item": {
          "id": "96f308ae-e260-49c1-bc58-3d208a8d6359",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "51c1d306-3d11-4f3a-9f7d-5a88e415c39a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3e4b69f-8203-44a7-9cae-27367db4e17b",
        "cursor": {
          "ref": "5e571f45-f307-4097-8ae1-33fca5d26eca",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "80959670-672a-4b62-bb5a-36d616844789"
        },
        "item": {
          "id": "c3e4b69f-8203-44a7-9cae-27367db4e17b",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "94fa25ea-790a-42c7-baa6-e57475a0132a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bce40c76-9e6d-4f74-b673-5f5d55c86e5f",
        "cursor": {
          "ref": "d1a273cf-cd4e-4c9c-9233-04a3fc00dd6e",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "132f4ba8-aeb5-4b60-a71b-4384350f6b7c"
        },
        "item": {
          "id": "bce40c76-9e6d-4f74-b673-5f5d55c86e5f",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "4e96c6b2-6f87-4e54-9023-03f049de532c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e16322fa-06d9-49e3-b7b7-11e724be950c",
        "cursor": {
          "ref": "4accd9b9-8f64-4578-90ae-dec18f3e7c58",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "c0c8378c-3509-43c2-b3e0-2647a4fa49fa"
        },
        "item": {
          "id": "e16322fa-06d9-49e3-b7b7-11e724be950c",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "481057c0-4eae-468a-b9fe-e37caaf44861",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7fd5413-89d1-4a1e-8f7f-78f879a26e07",
        "cursor": {
          "ref": "94d64a86-ceb6-4fc4-89f7-f32e592516bc",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "2fd46cc7-b91d-40ee-87a3-c1bdfcabb7dd"
        },
        "item": {
          "id": "c7fd5413-89d1-4a1e-8f7f-78f879a26e07",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "961ffd94-9b68-439a-8387-ed901785579d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a13788dc-0840-4ce6-9c3d-fbcbac47b2c4",
        "cursor": {
          "ref": "30cb997f-19d8-4acb-9ca2-3f8c3a87d27b",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "64bda052-9a87-4d55-8a24-4db9b5556177"
        },
        "item": {
          "id": "a13788dc-0840-4ce6-9c3d-fbcbac47b2c4",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "8fcacbed-1094-4ad2-85d7-e48d9c4116b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce461882-e926-4022-be88-2bb9262e96da",
        "cursor": {
          "ref": "6a4ac9d8-d94b-4a80-9d1a-fec04d9c0a8a",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "2084de7f-83b3-40ca-930f-cdfcbc02bf8e"
        },
        "item": {
          "id": "ce461882-e926-4022-be88-2bb9262e96da",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "9fd1ec92-d8f5-43fa-bb2e-3f7b9402818d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d748e569-534a-4835-8d32-ea2e19055a27",
        "cursor": {
          "ref": "ee1b79cd-9727-4bca-9c4d-e4581b8a656c",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "a3b32a6b-3260-4d45-9de4-04e9600af01d"
        },
        "item": {
          "id": "d748e569-534a-4835-8d32-ea2e19055a27",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "99605b03-1f8a-4b95-a14e-1bc6725e77f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8832f96-87b0-49fc-acc5-293bd250631c",
        "cursor": {
          "ref": "e39ca24f-038c-4d52-b9df-e3af23038579",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "a6fe615f-ee49-4d92-b1e7-81b3ba0317a2"
        },
        "item": {
          "id": "d8832f96-87b0-49fc-acc5-293bd250631c",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "e9f60420-af5e-4017-91da-ca05afea8c06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "caefd490-2548-4660-b520-f69f4fbef5b6",
        "cursor": {
          "ref": "d930a8c4-79b9-45a3-865d-56a8714a6c50",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "a9126837-816b-4c06-9496-6779d0b63a20"
        },
        "item": {
          "id": "caefd490-2548-4660-b520-f69f4fbef5b6",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "4eca92be-0d1a-45f6-8f43-44ab01c68d72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bd5d082-2899-439b-bd64-3689ce014a0b",
        "cursor": {
          "ref": "1831df60-b31b-4913-a33e-53bcf593d8df",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "9c740063-9457-4333-a182-de0a1e3831b6"
        },
        "item": {
          "id": "9bd5d082-2899-439b-bd64-3689ce014a0b",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "a2d5d582-e7e9-424a-9153-4db0b565a1ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68dd03ee-d2ee-4527-9734-a4efc880661d",
        "cursor": {
          "ref": "35268559-57fc-4c82-9f13-bff27c2fa735",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "8267828e-a692-435c-85ed-be1365559f04"
        },
        "item": {
          "id": "68dd03ee-d2ee-4527-9734-a4efc880661d",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "e9a281a6-402a-4916-902a-c7e9fb5c5000",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da41e4c9-4982-4e11-bcf4-9aae7335967d",
        "cursor": {
          "ref": "20d455b5-c17f-4d1e-9cbc-158d68b42652",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "143e7f38-974a-4e4a-b227-ec8ed930db18"
        },
        "item": {
          "id": "da41e4c9-4982-4e11-bcf4-9aae7335967d",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "269e1af6-d2e4-4758-ae43-f87b2d29c127",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "377b95f4-771b-4ba4-bb39-d09cc86852a5",
        "cursor": {
          "ref": "456fa072-91a4-4276-a456-02ddf18dc9b3",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "a6a307a1-0457-45de-8915-81d262a24f89"
        },
        "item": {
          "id": "377b95f4-771b-4ba4-bb39-d09cc86852a5",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "b7a0856d-aa86-4a34-9aeb-1935415841a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f020f2dc-01e9-4ded-b554-c2788f0e33b2",
        "cursor": {
          "ref": "eb08ad31-48cb-4a29-8e98-48cea92a8819",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "d781c631-ccdd-4cec-a379-3e16d6404ebb"
        },
        "item": {
          "id": "f020f2dc-01e9-4ded-b554-c2788f0e33b2",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "6affabcd-dda3-4666-9377-a3702942d4e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c44439fd-02ee-45b3-8036-d279ddf48012",
        "cursor": {
          "ref": "1039b6f8-680f-482f-8a26-97493ee3da93",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "aa11b481-c980-4de3-b75d-4c66ae580593"
        },
        "item": {
          "id": "c44439fd-02ee-45b3-8036-d279ddf48012",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "f979af4b-a7a4-4c1e-b07c-2c7bdcbbb3ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fbb1f18-324e-4251-a728-fcc04b8ccfa8",
        "cursor": {
          "ref": "bd75391e-4526-47d0-8d67-203f264a7e4f",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "4c9b4294-81df-4dc1-973f-62a9517142b1"
        },
        "item": {
          "id": "5fbb1f18-324e-4251-a728-fcc04b8ccfa8",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "7e354aee-c2a4-43c3-9081-8845033578c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ac9bbb4-a203-4725-a47d-a745e8b862c0",
        "cursor": {
          "ref": "8c73fe66-bcf6-4d60-b065-d68fb2597064",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "7691e16a-9587-4e87-85c3-d5b28ee0d5ce"
        },
        "item": {
          "id": "5ac9bbb4-a203-4725-a47d-a745e8b862c0",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "5509d6dd-8150-4def-b527-25d06f073329",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11dea299-991e-4636-a814-62c0cb87bddb",
        "cursor": {
          "ref": "473f4608-0729-472e-8d40-77f7e740f4b4",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "d581da02-aa10-4c51-b619-4eea3a062398"
        },
        "item": {
          "id": "11dea299-991e-4636-a814-62c0cb87bddb",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "1f275227-4c24-40cd-898a-313e12df2113",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70125b47-1505-4549-badb-4c1289d2b6e8",
        "cursor": {
          "ref": "135eaf4d-83f2-404c-8df5-d4cfb74d5d4b",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "4a4d5950-1b68-4e07-8c3f-7ec928893e5b"
        },
        "item": {
          "id": "70125b47-1505-4549-badb-4c1289d2b6e8",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "73e4054c-ce4c-4881-89bf-cc850d5e911f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "237198e2-cccd-4142-8730-84b897a96b0d",
        "cursor": {
          "ref": "84007a2e-70a3-4138-98b6-c01c17dd2de5",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "4a225e04-87cb-4164-8448-b07c9b0cd1ed"
        },
        "item": {
          "id": "237198e2-cccd-4142-8730-84b897a96b0d",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "6ccb9adb-2244-49af-9f4c-7b52b16e8fe3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a797b28-d622-4ae7-98e1-e72a5c04ef93",
        "cursor": {
          "ref": "2973f9f6-6ab5-43dd-9e04-2a3804bb763c",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "4c2fce70-99f8-45c2-8fa6-81675a68fdab"
        },
        "item": {
          "id": "8a797b28-d622-4ae7-98e1-e72a5c04ef93",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "daaf5f9b-69aa-4bc8-871d-581fe6239ef5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "966b1ed6-07bf-4dca-b911-211f19048cf1",
        "cursor": {
          "ref": "bdee22be-2a07-4c3c-9827-f5c62bbb646f",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "5369fd51-48cd-487d-8e87-9d2e6b6f8b8c"
        },
        "item": {
          "id": "966b1ed6-07bf-4dca-b911-211f19048cf1",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "7726a3f8-0aa2-4b5b-a28a-d9a9827cc57d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a293a818-466a-4da7-a767-e386deddf497",
        "cursor": {
          "ref": "5dd108e1-025c-492f-9c05-58f5744af935",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "9c5e1e68-6244-45be-a1fa-10b699a975c9"
        },
        "item": {
          "id": "a293a818-466a-4da7-a767-e386deddf497",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "50f859b1-1a97-4b7e-8497-0dd5e041b5fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f424d067-d6ce-4384-84d0-46739b2d40df",
        "cursor": {
          "ref": "13464a68-295f-4105-9b8b-a2b4dd039a29",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "3e074ada-b6f0-42c6-8ed2-610257293e8a"
        },
        "item": {
          "id": "f424d067-d6ce-4384-84d0-46739b2d40df",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "b07b5334-4c7d-4ae3-9de0-7335fe44d7f4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 68,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "2b040d7c-bd84-4f7d-bf93-49e2ce058d55",
        "cursor": {
          "ref": "ee653a1c-4839-46b6-82b5-70f8caae016a",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "bf128f94-2eb1-49a1-a89c-2ebda584a9f3"
        },
        "item": {
          "id": "2b040d7c-bd84-4f7d-bf93-49e2ce058d55",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "4de634a8-7376-4ae0-8dae-fd9df874cf62",
          "status": "Created",
          "code": 201,
          "responseTime": 1765,
          "responseSize": 763
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "9882651a-d4a5-48dd-abae-bcb8c2e87b35",
        "cursor": {
          "ref": "b1fa9dd1-e49f-41a5-81a3-6c51e14d2f0e",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "68f3b766-4c0c-4d3b-bbdf-93ad293d11d3"
        },
        "item": {
          "id": "9882651a-d4a5-48dd-abae-bcb8c2e87b35",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "e6510a68-4a02-4a77-9d9d-5ea68d96702c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "4f6583dd-a1db-4828-a3df-0a1155440e12",
        "cursor": {
          "ref": "d838f55f-e358-42c4-8721-ba505d63765a",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "0239a0db-7912-4e7b-af6e-63b3e6a837bd"
        },
        "item": {
          "id": "4f6583dd-a1db-4828-a3df-0a1155440e12",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "b6acf724-948e-4c51-8b63-67a2582725ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24d08ece-4bd1-4890-85fa-6fb547300ac1",
        "cursor": {
          "ref": "51c8f9f4-1fcd-46e6-9c68-9632ec65bb7f",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "0714e330-c960-471e-b01b-b3f538b7b84f"
        },
        "item": {
          "id": "24d08ece-4bd1-4890-85fa-6fb547300ac1",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "f77495b9-9377-4df8-abfa-ba886eb63045",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 68,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "443f69de-9856-4350-951d-88d434b298cc",
        "cursor": {
          "ref": "12229680-caf7-442b-8c12-f240bcd26979",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "49055a85-db4d-44a6-9cc7-9604f3bf686a"
        },
        "item": {
          "id": "443f69de-9856-4350-951d-88d434b298cc",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "f4a60aed-d86e-4b85-b2cc-29d8985d42ac",
          "status": "Created",
          "code": 201,
          "responseTime": 1357,
          "responseSize": 752
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "b8347b9c-4ae5-4a35-b7b9-7a9e067d59ca",
        "cursor": {
          "ref": "7ae7dba1-55d3-4108-ae34-bff790de2c8d",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "9396398a-94b0-483c-b96b-4f72c83ddc9a"
        },
        "item": {
          "id": "b8347b9c-4ae5-4a35-b7b9-7a9e067d59ca",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "3241cf15-8bca-453a-9622-665f45028c1c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 117,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "d9e7b62a-9b8f-4ee2-94c1-ddd1774ab9b1",
        "cursor": {
          "ref": "236eabee-b804-4c77-b62e-4acd66fb74fc",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "133dd31c-053d-47d0-9474-85942817b03e"
        },
        "item": {
          "id": "d9e7b62a-9b8f-4ee2-94c1-ddd1774ab9b1",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "5305bd72-3d56-4007-836b-156fee6d23f8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 1166,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "99dcc359-c01f-4b8d-a5c2-96d8730f0c3b",
        "cursor": {
          "ref": "049c43fc-a8d6-43fd-9761-52a55585d2f4",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "5b3c5eb6-cbc4-492c-aa0b-2e5e514d5efa"
        },
        "item": {
          "id": "99dcc359-c01f-4b8d-a5c2-96d8730f0c3b",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "12959ca1-70b0-4353-ac48-1976477b059b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "df08f4cb-5814-4ee8-8b2c-e6ed5d5b7842",
        "cursor": {
          "ref": "6591715c-ef00-4e5d-b47a-cc1e9a49c4f0",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "d5290909-b544-4cec-981b-65f2b6fcc996"
        },
        "item": {
          "id": "df08f4cb-5814-4ee8-8b2c-e6ed5d5b7842",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "6f2e4afc-7575-4bcc-ba8b-1f3f664a56d6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 60,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "7859d0aa-42c3-474c-99ce-dbbaa9694dc7",
        "cursor": {
          "ref": "b94b08b6-539b-446b-998a-b99f4b040c6c",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "3d9fb509-bca5-42d7-8af4-0cbaedcd8450"
        },
        "item": {
          "id": "7859d0aa-42c3-474c-99ce-dbbaa9694dc7",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "a1861c8f-3dd0-408d-82d6-9deea30893ba",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 72,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "bd1cedc5-853c-4f45-9a63-f60b0c6d7e17",
        "cursor": {
          "ref": "5b8594a0-9c66-4eb6-8cbe-d2e2984594b7",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "69ac877b-dfc3-41bf-90f0-bb5cd97af6b4"
        },
        "item": {
          "id": "bd1cedc5-853c-4f45-9a63-f60b0c6d7e17",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "314d5564-d7f6-4c6b-b150-67cb73ed4a08",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "d8a9b095-7292-4062-8dce-123d23b376de",
        "cursor": {
          "ref": "91764a59-edd1-4efa-95bb-044456ad97b7",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "78e5fdcd-7077-48a3-accb-1959f605cf77"
        },
        "item": {
          "id": "d8a9b095-7292-4062-8dce-123d23b376de",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "9b036181-b9f7-4688-a8d5-e041f038cf45",
          "status": "Created",
          "code": 201,
          "responseTime": 1436,
          "responseSize": 759
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "25c942bb-48e0-419a-860e-1a67faeee92e",
        "cursor": {
          "ref": "95d72ca7-0d51-4187-adc1-ea0e6b69b844",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "a239d8c8-1091-4b76-8dae-f981c64526e7"
        },
        "item": {
          "id": "25c942bb-48e0-419a-860e-1a67faeee92e",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "1f283b33-8b2b-4d6e-a68e-80c367383449",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b3dd8c2-37db-405a-9aca-4c545aba581b",
        "cursor": {
          "ref": "0a1b47fc-6b14-4808-bcda-e865bba18c7c",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "db29206f-4f2f-4e55-a2a1-492d8ca2badc"
        },
        "item": {
          "id": "2b3dd8c2-37db-405a-9aca-4c545aba581b",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "a81288ea-0f4c-4cf5-90e5-c6d4065163e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12402158-06c6-479e-9d51-df5cb6b91efe",
        "cursor": {
          "ref": "5eba176f-ab20-42bd-9f64-ca903543b5bb",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "d8a3cec1-ef8c-4918-a222-f1611d5a2d71"
        },
        "item": {
          "id": "12402158-06c6-479e-9d51-df5cb6b91efe",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "a7000af3-3e66-431d-b68a-00e3b0b46b64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "471d9b13-4c7f-406c-9fed-9ca97153afd1",
        "cursor": {
          "ref": "eb911659-fb18-4633-beb2-a074d2cb72b4",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "45cf9ba8-a212-4301-b51c-719555de51cd"
        },
        "item": {
          "id": "471d9b13-4c7f-406c-9fed-9ca97153afd1",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "1ec6f34b-a085-4574-87c0-dd7a917a6d4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad06f829-ba9d-414e-b25a-e23109d59f08",
        "cursor": {
          "ref": "a3da2a16-2c08-4107-aa1e-3f65fd4eebfb",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "42edcdc3-c3be-4a07-91b5-f9610b027351"
        },
        "item": {
          "id": "ad06f829-ba9d-414e-b25a-e23109d59f08",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "0349739c-ac06-49c8-ba3b-dc9f48ff2ac4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc6a89a3-81e4-4506-a6d7-2a423b725a10",
        "cursor": {
          "ref": "16a47933-5bed-4aa7-8434-f2fb80e7f48c",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "88b6683f-5776-4bf6-bb71-f6039a243877"
        },
        "item": {
          "id": "dc6a89a3-81e4-4506-a6d7-2a423b725a10",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "9f70b9cd-887c-4616-a422-7a545e55d294",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e044e59-d021-47b5-9760-ca8a9bf93945",
        "cursor": {
          "ref": "0af77e43-f936-47cb-945f-34e31bb97887",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "6ae1fb1c-c282-469e-bde4-db038a623f10"
        },
        "item": {
          "id": "9e044e59-d021-47b5-9760-ca8a9bf93945",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "8df2cf71-fcdd-42d2-bf41-c840e6b43e24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5b485bc-9a80-4e4c-86a6-c00d96f18ba7",
        "cursor": {
          "ref": "d98f793e-e5bd-4f0f-89e2-018bf74ea872",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "b2e0ae64-6810-448a-b927-309c5e9d0967"
        },
        "item": {
          "id": "a5b485bc-9a80-4e4c-86a6-c00d96f18ba7",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "f8d9623f-7525-4fb5-a90c-37bf530af107",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5b2e3ef-73e5-4e0c-8c31-15e848fd1d1e",
        "cursor": {
          "ref": "921983bb-8f0f-432b-b089-a4bb16abbdf6",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "cef39cba-1e1a-40d8-a6ce-1625d19f7ce2"
        },
        "item": {
          "id": "e5b2e3ef-73e5-4e0c-8c31-15e848fd1d1e",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "7963cf94-d4ec-4aaf-8213-694874943132",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6011a9a-b7cb-48e3-b26f-6c02e2067d21",
        "cursor": {
          "ref": "04ac5e7e-8d3e-4629-b390-7cf665057aca",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "bd9bc885-8d3e-415d-91b3-2cfb23a96d8d"
        },
        "item": {
          "id": "e6011a9a-b7cb-48e3-b26f-6c02e2067d21",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "b6d3fe78-66a5-4f09-801b-7a29347bd2a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb286dd1-fcdc-4831-8975-75bc82203da1",
        "cursor": {
          "ref": "62d6d7b0-200d-4f63-8159-b0ab8b6d9d3d",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "8a627846-dae1-4d10-8fe8-b0c08e161a69"
        },
        "item": {
          "id": "bb286dd1-fcdc-4831-8975-75bc82203da1",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "10c92b13-258f-4b82-8676-4899fbcbe714",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f62d06a-2544-4e8a-81a1-e7510766fc84",
        "cursor": {
          "ref": "cc27770a-cd5f-430d-88da-ceb2e5ef8fc7",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "5010487a-2dcb-42e1-926b-567aa58ec594"
        },
        "item": {
          "id": "2f62d06a-2544-4e8a-81a1-e7510766fc84",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "3dfae331-779f-4898-b7f8-105540f9fca6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21e3e445-b51b-45b0-853b-35fbbc59782a",
        "cursor": {
          "ref": "0fcf9b10-ba37-4d8c-8505-5b03ef7060c1",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "ee7a9f14-f286-45f6-8288-bb564bc97a2d"
        },
        "item": {
          "id": "21e3e445-b51b-45b0-853b-35fbbc59782a",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "049d63ea-a782-4998-a883-cab7f0e736d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe93dee5-1af9-4594-938f-045ef0207481",
        "cursor": {
          "ref": "b94a56a1-01f1-46b6-b6e1-4847d0bc18d3",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "2e2bee68-80be-47e9-9c59-f8a4d4538947"
        },
        "item": {
          "id": "fe93dee5-1af9-4594-938f-045ef0207481",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "f61ad438-6b7f-4dba-9c9f-022cdde48ea1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 744,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "0e4ef07a-54da-4f74-b56c-f064e6b94ed5",
        "cursor": {
          "ref": "6aa65396-7b99-4953-84d5-0b270feee2bd",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "5ebb5971-3aac-432c-b91c-a9ff9eda39a2"
        },
        "item": {
          "id": "0e4ef07a-54da-4f74-b56c-f064e6b94ed5",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "5ade439e-c1c7-4649-9124-08e8fd5d3baa",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 792,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "ca5c120f-4861-45b8-b142-5956f5df31b9",
        "cursor": {
          "ref": "0cb8868d-3cab-4eda-97df-fc2abf2909ca",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "5b34cabf-9a47-4880-a3d8-cdb18567bff8"
        },
        "item": {
          "id": "ca5c120f-4861-45b8-b142-5956f5df31b9",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "620b4694-5ab1-4c1d-a424-83aac34af83e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "9f0c95d2-6e44-434c-8c2d-64ab9a14355b",
        "cursor": {
          "ref": "d774abe7-54ab-4be4-b560-8ceafb9a7ef5",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "5241bbaa-9252-422f-a1e6-a2c48c0dec04"
        },
        "item": {
          "id": "9f0c95d2-6e44-434c-8c2d-64ab9a14355b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "e90e6d8d-0592-480f-8c88-6f25bbd69ea8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 748,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "adef1e4e-0500-416c-aae2-30c3d4f68a56",
        "cursor": {
          "ref": "b10bbcc2-36af-497f-ada9-76e0a3000b3b",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "ba48aa9e-f27b-4bee-a9a8-02a1c3b112d8"
        },
        "item": {
          "id": "adef1e4e-0500-416c-aae2-30c3d4f68a56",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "59f3f3e6-aafa-4cf5-af31-ce354c424ec5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "1b0d0dd9-c190-4d80-93c9-57bfd07de74e",
        "cursor": {
          "ref": "8f80491d-e477-4156-ad5d-9f2bd0d7e359",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "75683e63-b4a0-4018-a8e7-ddba7a9b402d"
        },
        "item": {
          "id": "1b0d0dd9-c190-4d80-93c9-57bfd07de74e",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "53066bd7-f9d8-4b9c-b4f9-5cb08c9ed68a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f495f13d-8e50-4b61-bd98-60a368f6d6ec",
        "cursor": {
          "ref": "afcff751-4e21-42a4-839d-ca5ee07c54e9",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "3f4b5edd-a202-464b-99ab-c577be03c12c"
        },
        "item": {
          "id": "f495f13d-8e50-4b61-bd98-60a368f6d6ec",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "fc16fba0-739d-45d7-ab48-a4f0cb5be4dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ef45061-a9fe-49d0-8f9b-bc08832aabdd",
        "cursor": {
          "ref": "67283761-8763-4e09-83e5-912bf246ad3c",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "36c20919-0299-47b7-82e2-56d3b14ef288"
        },
        "item": {
          "id": "0ef45061-a9fe-49d0-8f9b-bc08832aabdd",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "07ed5f57-c9cf-450a-9375-0fb30b166af6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f28af1e-a8ef-4ef7-94c8-d89cc663e31e",
        "cursor": {
          "ref": "0220a2ce-1373-404f-aa38-9cc1bd926dea",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "3d803138-6c34-4707-94b0-015250d573da"
        },
        "item": {
          "id": "1f28af1e-a8ef-4ef7-94c8-d89cc663e31e",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "7c0e1905-64fd-4500-8e88-5edc733c5e29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c031dcc-0f47-42a9-8a74-7589f2c6903c",
        "cursor": {
          "ref": "f91962bb-4ab6-43b9-bc39-27e22009320c",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "9cb13238-8d98-461b-bde9-d34e805f9caf"
        },
        "item": {
          "id": "3c031dcc-0f47-42a9-8a74-7589f2c6903c",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "5bb45b08-35bb-4345-a859-1f69e7e8ca92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c2aea44-8dfd-45b4-b3a5-400217ce4f03",
        "cursor": {
          "ref": "1ebb64ed-db28-43e9-a39c-16ac3a3cb4c3",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "8c7bc90d-eb51-472f-bd19-aec2f37455a3"
        },
        "item": {
          "id": "3c2aea44-8dfd-45b4-b3a5-400217ce4f03",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "19907793-2bac-4ea2-8a95-fd5a4349494b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11cb5952-4255-49bd-a8d7-b4c41b2051e1",
        "cursor": {
          "ref": "d389eb5b-9496-4744-97a1-2e4dde668dd7",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "f07e0bc1-3319-414e-acff-2b1f7a43d234"
        },
        "item": {
          "id": "11cb5952-4255-49bd-a8d7-b4c41b2051e1",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "90cc0689-98d0-4ffe-a4a6-455f3a284394",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8ed1454-8ad0-4ac2-ba48-979051328835",
        "cursor": {
          "ref": "36e700ec-a360-46ad-85d3-908655ad010d",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "f3b1913c-9b67-4269-80d4-86a84c390fcd"
        },
        "item": {
          "id": "c8ed1454-8ad0-4ac2-ba48-979051328835",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "59c2948e-657b-43b0-9161-1861eff4e260",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ec23c8e-530b-4fd0-a44f-93fd52737532",
        "cursor": {
          "ref": "db342814-87d7-4156-be7e-b645f88a5e98",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "d2f37a55-0966-4f44-8f2f-54a55b9df624"
        },
        "item": {
          "id": "7ec23c8e-530b-4fd0-a44f-93fd52737532",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "3ea054ae-8c47-4e78-a094-53b418e40caf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74481f22-a976-4200-be3e-5d745d350053",
        "cursor": {
          "ref": "6f3714b1-ba2f-48e1-b368-6d1cb8646965",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "d07c0433-500d-4b8c-920b-8ea4000f2195"
        },
        "item": {
          "id": "74481f22-a976-4200-be3e-5d745d350053",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "0018fd88-b7c7-42d8-accf-0771867906c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92e5ea5d-59aa-4b16-9ced-0d668c8851d4",
        "cursor": {
          "ref": "a769d70c-98df-4b61-83e3-af68d7ac3afd",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "a42a4079-9ce2-42d3-b672-ffbb075bc60f"
        },
        "item": {
          "id": "92e5ea5d-59aa-4b16-9ced-0d668c8851d4",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "b019fe47-b4f0-4514-a19b-bbdbfe44ab99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bfe9aab-8666-4852-a444-92c328f33279",
        "cursor": {
          "ref": "ea4e3d55-8191-410d-8565-90c082791c80",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "c7fef23c-2845-4d65-ad22-28ead66be8e4"
        },
        "item": {
          "id": "8bfe9aab-8666-4852-a444-92c328f33279",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "8b9739c0-d0f9-47af-bc5c-9a4cc7cd28ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee5e141c-710e-4b4d-b1df-a430e7906c5a",
        "cursor": {
          "ref": "2ea01874-43a6-432a-bf86-271ca60941f7",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "0b237db9-2db5-4195-9a00-ac66b708dbf9"
        },
        "item": {
          "id": "ee5e141c-710e-4b4d-b1df-a430e7906c5a",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "7fb15a2c-092f-4140-8ff6-88908946841f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6486add0-acaf-4137-89fc-e5480710fbfe",
        "cursor": {
          "ref": "11404528-6e15-40c2-a34e-b16f41b51dd1",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "e74611cb-e5d3-43b3-b283-ecabc7be3106"
        },
        "item": {
          "id": "6486add0-acaf-4137-89fc-e5480710fbfe",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "9b9d1f42-e736-4276-9a65-74f139d70188",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1a6e729-bbc2-447f-acd7-4d445902b645",
        "cursor": {
          "ref": "e81dea80-b0f8-4887-a6bd-90c92a66c6c2",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "576fb884-ba4c-4fb7-b50b-227b18cf16a2"
        },
        "item": {
          "id": "d1a6e729-bbc2-447f-acd7-4d445902b645",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "f7bb875f-9a2b-452d-8cbd-c574fe83d993",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e369854c-1c8a-4f1f-8616-2cd84aa9885b",
        "cursor": {
          "ref": "58db696c-c9c3-44db-8ec5-5d086d7a5dcb",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "0aaa4bf8-4ef9-4a31-85c0-4aa1040e074c"
        },
        "item": {
          "id": "e369854c-1c8a-4f1f-8616-2cd84aa9885b",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "715633f8-aacc-4283-bb5d-95ec33f95bab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32896770-096d-486e-9232-cd54cc38ba3a",
        "cursor": {
          "ref": "8a43781a-0138-4920-b8a0-057e707ea013",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "2d650b74-3820-40a8-8330-6e4686c19504"
        },
        "item": {
          "id": "32896770-096d-486e-9232-cd54cc38ba3a",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "f6a632fd-3c46-4e10-b936-c579a591742c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dde39c7b-41f3-4382-aa05-5c94aa54e820",
        "cursor": {
          "ref": "7eb6dbd0-dbae-47b5-a650-0e8ab34b9c12",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "deeb68da-a1b2-47c2-a7b5-1b4a3b2f2442"
        },
        "item": {
          "id": "dde39c7b-41f3-4382-aa05-5c94aa54e820",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "ca102aec-89e3-483b-8eab-88b24c8aefc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30b4682b-3dc5-4427-b4e0-761329f52dc7",
        "cursor": {
          "ref": "defc8ab7-cc77-49fd-8301-c2da177572d5",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "8bac3a1c-bfc0-4199-bb06-7c672acc1d61"
        },
        "item": {
          "id": "30b4682b-3dc5-4427-b4e0-761329f52dc7",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "21217b0c-f170-42ad-bf77-7a546293ff07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2857da6-7263-40b8-a97c-5d73671a7bac",
        "cursor": {
          "ref": "7294b05f-76cc-4347-aa06-77f11323aa9a",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "6a11cb64-0cdb-4b77-add0-f9a2e62fa014"
        },
        "item": {
          "id": "f2857da6-7263-40b8-a97c-5d73671a7bac",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "7cd48983-485e-4766-9a4d-33029a0d6eb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc1760d4-bd77-472e-b22a-d5f8fb9fb5e5",
        "cursor": {
          "ref": "aebae4c7-3b15-4dc4-b364-fe18defabb61",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "e225d3a7-b03e-49bb-a60f-d75d7f1f23a8"
        },
        "item": {
          "id": "fc1760d4-bd77-472e-b22a-d5f8fb9fb5e5",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "60355e38-7070-4287-b6a0-794582a68e77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3dd8f8c-f6e3-42e8-b8bf-1cf2f8f1618c",
        "cursor": {
          "ref": "9a4c1253-a6ba-44b6-a7cb-b172fb3e6231",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "5e88cce6-d5e2-4028-8e37-418586b47188"
        },
        "item": {
          "id": "b3dd8f8c-f6e3-42e8-b8bf-1cf2f8f1618c",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "ffc1d367-e71f-411c-b173-0d64ce1edf28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcf86d43-2cf4-4d7a-b59f-67e0bde6816a",
        "cursor": {
          "ref": "8aa66e69-1ccb-4b0b-bebc-773d3752b74e",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "017fb185-3692-4792-8804-44940ed8e49c"
        },
        "item": {
          "id": "fcf86d43-2cf4-4d7a-b59f-67e0bde6816a",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "a16c2a06-1361-40ae-8ae8-d5731d22bbe9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d05c2c69-20ae-44a4-be29-5174268aa3c5",
        "cursor": {
          "ref": "d0f2cef7-4667-4006-b221-8fb2ba488d94",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "21820bc0-8e9d-4b92-8481-8c51cf2e0629"
        },
        "item": {
          "id": "d05c2c69-20ae-44a4-be29-5174268aa3c5",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "b82ca265-002b-4b15-a1f2-d52dc14eafa6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74cadf5d-ea74-4b58-8039-33195c165d93",
        "cursor": {
          "ref": "ee877d28-eae0-437c-9759-0758dc9cc66f",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "4d5f9d31-37c1-4f81-9642-cdf8a46412f1"
        },
        "item": {
          "id": "74cadf5d-ea74-4b58-8039-33195c165d93",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "3e0a7d78-4736-404d-9ae2-cb0885f51eab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 521
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d9a130f-a355-489e-801d-6e4df71d5f26",
        "cursor": {
          "ref": "afced14a-6b92-476d-b83c-9cd61cd2e48a",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "fee065cf-6f61-4eed-8349-01d2548a0fa7"
        },
        "item": {
          "id": "0d9a130f-a355-489e-801d-6e4df71d5f26",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "0b896f2a-90cb-4ae4-99bf-3e55e6754e4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 521
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed2232a8-7b03-42fd-bdfa-fc89845fa56d",
        "cursor": {
          "ref": "b79f8e4a-e0f2-4cd5-8fb5-e97b28cc8829",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "cbb8acff-e2ad-4d51-84bb-c8ac7b26effe"
        },
        "item": {
          "id": "ed2232a8-7b03-42fd-bdfa-fc89845fa56d",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "e306193b-c788-4750-a511-e3110cc77c71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 521
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51e8b546-a858-4cf9-8604-654412c2df76",
        "cursor": {
          "ref": "b633bcad-0100-4489-af51-d2a68bd8a967",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "a6392f9d-ab3f-4ed7-b4aa-80183062077a"
        },
        "item": {
          "id": "51e8b546-a858-4cf9-8604-654412c2df76",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "96b06b07-9b70-4eb4-99c7-a617fed2bf04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 521
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7b84afe-f198-4937-8620-8bb779938d40",
        "cursor": {
          "ref": "e2b371d1-f3bf-4acc-a843-cea3fda8ab0b",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "a8c35bdc-c1cd-465c-91d1-659f263450ae"
        },
        "item": {
          "id": "d7b84afe-f198-4937-8620-8bb779938d40",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "63a7b9d9-7d15-45e2-ab6d-97d5b0a37c3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 521
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbb19889-19d5-415c-8a0c-b21923806fa8",
        "cursor": {
          "ref": "40baae82-74ea-42b6-8756-81dff21aac85",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "a35832bb-46b5-41b4-9fbe-ee4a0080938a"
        },
        "item": {
          "id": "cbb19889-19d5-415c-8a0c-b21923806fa8",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "6f3204e8-3dc2-4773-9c84-28fafaccd625",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 521
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "260490a9-fcaf-45ca-8c9b-ebaf798b8ca3",
        "cursor": {
          "ref": "b539c44d-8b8e-4b35-9d71-56db11d5913c",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "7fd91148-a947-4422-8b8e-14964943387b"
        },
        "item": {
          "id": "260490a9-fcaf-45ca-8c9b-ebaf798b8ca3",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "0dfb4090-72c4-4086-bdc3-e69b6312be31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 521
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d5f2d10-e7ec-46ce-8195-1f14977b0674",
        "cursor": {
          "ref": "91787c49-8eac-45aa-b521-b54ea77c0fde",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "99f301e2-c179-473e-b516-e25c32b6b3bc"
        },
        "item": {
          "id": "3d5f2d10-e7ec-46ce-8195-1f14977b0674",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "db0c0697-f9fd-474d-ab43-89dae16968d9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bad9af2-bf54-4ccc-b94b-b2c9728d0896",
        "cursor": {
          "ref": "7d5c2445-3648-4816-a2b6-0d1c97407a1d",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "4562f6e3-ae6a-4e03-9400-2246590bfaa5"
        },
        "item": {
          "id": "9bad9af2-bf54-4ccc-b94b-b2c9728d0896",
          "name": "credentials_issue"
        },
        "response": {
          "id": "7776c034-b9dc-449a-ae38-5d9c4766f273",
          "status": "Created",
          "code": 201,
          "responseTime": 1070,
          "responseSize": 749
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1a977b9-3f96-42f5-b57f-f17c93fb9523",
        "cursor": {
          "ref": "ed6f49ba-f8f0-451d-8886-f27cc6ea8334",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "2d672e7e-b138-4b73-990f-864c3276627f"
        },
        "item": {
          "id": "d1a977b9-3f96-42f5-b57f-f17c93fb9523",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "71be5f36-1054-4dec-bfe2-f763ae3d497d",
          "status": "Created",
          "code": 201,
          "responseTime": 936,
          "responseSize": 703
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4619ba9-8438-4b87-9d05-d2dca3da6de2",
        "cursor": {
          "ref": "1bb004df-5956-4bcd-89ec-cf65ca938cad",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "7b94147c-0f68-486f-bedd-4f22eb68eb87"
        },
        "item": {
          "id": "a4619ba9-8438-4b87-9d05-d2dca3da6de2",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "62c319aa-8564-48c0-b834-4c2df09363fc",
          "status": "Created",
          "code": 201,
          "responseTime": 950,
          "responseSize": 756
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "393327f1-0423-4028-b517-b9972610c395",
        "cursor": {
          "ref": "7be705fb-0e06-49ee-b339-b059f067f940",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "ca69f543-3bcd-4612-a644-e63d779c2f94"
        },
        "item": {
          "id": "393327f1-0423-4028-b517-b9972610c395",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "a2dd4ceb-b122-4c1d-a863-0d76c1f473e5",
          "status": "Created",
          "code": 201,
          "responseTime": 1355,
          "responseSize": 771
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "66367bad-df50-4e96-912d-d7c09ece9a8a",
        "cursor": {
          "ref": "e681bff7-7186-4475-bab1-f0288750d446",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "0db8b525-6d14-4272-8229-b1872545ceec"
        },
        "item": {
          "id": "66367bad-df50-4e96-912d-d7c09ece9a8a",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "97af13d6-5968-4428-b7aa-695ed149d790",
          "status": "Created",
          "code": 201,
          "responseTime": 943,
          "responseSize": 749
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fcdc19a-2225-472e-b905-17659bd0269c",
        "cursor": {
          "ref": "3eba5371-296b-45fa-aa3f-744f9718f274",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "c2b4f31c-8dad-4155-af24-3652823345a9"
        },
        "item": {
          "id": "7fcdc19a-2225-472e-b905-17659bd0269c",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "8b4a0e40-2b0c-4678-bab5-0ff83d1313c6",
          "status": "Created",
          "code": 201,
          "responseTime": 1100,
          "responseSize": 1082
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4161644-38ba-4c2d-b549-2371eaf22be5",
        "cursor": {
          "ref": "8dd08aeb-bc29-414f-8969-08d053e0008d",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "b2a4acf6-9bca-47f0-b343-f20c9245d344"
        },
        "item": {
          "id": "c4161644-38ba-4c2d-b549-2371eaf22be5",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "4c21b19f-63ab-41c2-81d4-0d7fb9bbcaad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7604153-6d6f-4acc-81e5-b3ba9cf2e706",
        "cursor": {
          "ref": "24c5493e-a10f-4743-b97a-943eb5a58dc4",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "5ecb10f8-0646-4c49-970e-e58d2c4c0953"
        },
        "item": {
          "id": "f7604153-6d6f-4acc-81e5-b3ba9cf2e706",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "f8f5ee4f-b712-49c5-86b1-d24b3a3631f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fa499dd-c7e2-4812-910f-6f4ec08d2cc4",
        "cursor": {
          "ref": "d224688e-2d8f-4677-994e-6a26c7bf5b1b",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "1f56e142-261e-465b-ab3a-065abab56d6f"
        },
        "item": {
          "id": "7fa499dd-c7e2-4812-910f-6f4ec08d2cc4",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "21b5a6c9-76e2-47f8-b3e5-ba9d412a8b81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00fe3aa5-6b29-4671-9a9d-ec91593d7d3e",
        "cursor": {
          "ref": "00e3a31b-e701-43dd-9d9b-5d4c93dfc90f",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "b99a01a8-cce2-4384-8ab2-80020d50b3f1"
        },
        "item": {
          "id": "00fe3aa5-6b29-4671-9a9d-ec91593d7d3e",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "916c2f02-ee1c-4ec5-a9f1-9781785360ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "433ea89f-c97e-4e71-b54a-dd51bed02167",
        "cursor": {
          "ref": "5aebc49f-c030-4e44-be76-f355c9e917db",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "435d162f-2dcd-4df1-ab93-22a33d082481"
        },
        "item": {
          "id": "433ea89f-c97e-4e71-b54a-dd51bed02167",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "985eb52e-20b9-4e7a-b143-f7a9e44fad3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7b7776c-384f-4ca0-a597-17b4435d813b",
        "cursor": {
          "ref": "818d3208-ace6-4090-9ae2-8d330ff642a2",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "bca8e855-5d35-4075-981f-576801070e75"
        },
        "item": {
          "id": "f7b7776c-384f-4ca0-a597-17b4435d813b",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "0409401d-7e57-48a7-9258-cb5eacca018f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f1467b6-8a71-4a35-a0c8-da4dfa91f8fe",
        "cursor": {
          "ref": "827b29ba-9647-4c34-8ece-d76c8f407a3f",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "9e928195-7b39-48a6-b491-3cbd4d19bd5d"
        },
        "item": {
          "id": "2f1467b6-8a71-4a35-a0c8-da4dfa91f8fe",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "576682e5-0496-4e8d-b12f-2f832128d7ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4cdd665-aa04-4ab8-b58d-79686441f753",
        "cursor": {
          "ref": "1c2cbc7c-107f-48f4-820c-1d09e838a4f5",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "e73f0aa4-bab7-4dcb-92ca-02eacae80055"
        },
        "item": {
          "id": "b4cdd665-aa04-4ab8-b58d-79686441f753",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "75ab56fe-3402-4502-80c6-0ad694665c0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f7dde9a-8a16-415b-8dcd-c921724c8921",
        "cursor": {
          "ref": "6e5e173d-e4a6-4111-9004-b330079c9aba",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "e2c14860-4537-42db-9a1c-0bd15a21d7c8"
        },
        "item": {
          "id": "3f7dde9a-8a16-415b-8dcd-c921724c8921",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "1efbf23e-75f6-4300-8c85-714bd7cf6cf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f939e16-6edd-4b9a-81a6-95e03427da5f",
        "cursor": {
          "ref": "cd1d427a-5a0c-4062-b856-01b978a86bf9",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "328586e7-5e2a-4177-bb5e-205b4cc74acb"
        },
        "item": {
          "id": "9f939e16-6edd-4b9a-81a6-95e03427da5f",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "01c83846-71df-4cfc-b905-e9930a2463e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88c886d4-4e63-44c1-aef2-edf3741db291",
        "cursor": {
          "ref": "8a43abbe-7b38-418b-afdc-e8591a087ea3",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "30cd161b-8607-4e3d-be66-3a67294eee1b"
        },
        "item": {
          "id": "88c886d4-4e63-44c1-aef2-edf3741db291",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "34f1d7ad-7fa6-4a5e-be59-e1ed5a75ade9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e39721c6-0b4c-4a35-921c-ff0a98e5bea6",
        "cursor": {
          "ref": "f3e6a7e8-89e3-4e41-8b1d-909688299952",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "c4f1173e-1adc-4f0e-9301-049d3e7b1e11"
        },
        "item": {
          "id": "e39721c6-0b4c-4a35-921c-ff0a98e5bea6",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "41bcdb84-fff0-4f6f-b441-fbc0777a357f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a759b39d-30fe-4f4a-9f13-f5e48872b332",
        "cursor": {
          "ref": "96b5d24f-037f-45db-9068-e19802ca6570",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "584f27eb-ddd4-4531-8284-63ac8a668de9"
        },
        "item": {
          "id": "a759b39d-30fe-4f4a-9f13-f5e48872b332",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "c7604601-663b-4c56-9aca-69d1969211c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f15f4e7d-6455-447e-9e86-619145ddfbad",
        "cursor": {
          "ref": "ae8554f6-278c-432b-ac66-9e5e052deabd",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "c6c4b075-f730-460a-850a-1e2706e9aff1"
        },
        "item": {
          "id": "f15f4e7d-6455-447e-9e86-619145ddfbad",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "dd780c39-ae72-4bf2-b15b-d1fa7ebfe1d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06284484-5d0e-4554-9902-d19610f4b4c2",
        "cursor": {
          "ref": "f06b1090-3752-4ca9-b637-bbfca51b34af",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "ffb52962-036e-4e4a-b88f-146ec574eac2"
        },
        "item": {
          "id": "06284484-5d0e-4554-9902-d19610f4b4c2",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "40030e4b-9183-45c2-a98d-64239d88aba3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8df140a-4a9e-42df-aa4d-75e618dd414e",
        "cursor": {
          "ref": "02df6c78-8999-4ba2-9a9b-bee33db7a7c1",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "fe29ee5c-694a-40ae-82fc-9d827a46465e"
        },
        "item": {
          "id": "a8df140a-4a9e-42df-aa4d-75e618dd414e",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "7bed01fe-45cf-46d2-8f1d-f4db8f396661",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9dca7ee-c408-4801-bf00-70231b7afd23",
        "cursor": {
          "ref": "4385f2c8-e6e1-4540-a1f5-cfdbd6109d42",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "342e19bc-84f6-45dd-9948-f59f49eef02d"
        },
        "item": {
          "id": "f9dca7ee-c408-4801-bf00-70231b7afd23",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "a81352dc-60f8-4156-bdf8-88bf142121b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ab9bccd-b231-407f-ad2e-60f629a839b0",
        "cursor": {
          "ref": "3f1c085b-236e-4c34-a207-4e59a25e3615",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "abc64129-fe58-4edc-bc1b-618adc353382"
        },
        "item": {
          "id": "9ab9bccd-b231-407f-ad2e-60f629a839b0",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "61a74d5d-faca-42c3-8f5a-89e49e33c505",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85a0099f-289a-42ac-9aa6-a783ad35effe",
        "cursor": {
          "ref": "02ba1690-d392-4fc1-9aa7-acee39529c1c",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "c19b7293-f235-4980-9e09-111e0ff12d91"
        },
        "item": {
          "id": "85a0099f-289a-42ac-9aa6-a783ad35effe",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "16260ff9-3cda-43ad-891a-94be6657a7e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3e7db81-5a1e-4384-ad8e-ceb002049857",
        "cursor": {
          "ref": "119def63-473b-4622-9600-a9d1584b8a38",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "eb6b7b84-bf9b-4de1-99cc-4ac0dc6fec48"
        },
        "item": {
          "id": "d3e7db81-5a1e-4384-ad8e-ceb002049857",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "f35f68f9-4c47-4b0a-964c-1e6135245567",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7fb167e-2937-46e8-a3ce-7ae9c21b6594",
        "cursor": {
          "ref": "2fe71419-7101-48bc-afa4-04fcb62736bc",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "7ca48fd9-3725-4caf-9a1e-4665a4162b9b"
        },
        "item": {
          "id": "d7fb167e-2937-46e8-a3ce-7ae9c21b6594",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "7cf6259b-87ea-4bbb-93ac-f193e82e26d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e925ab0a-6bfb-4112-963a-8015077d8688",
        "cursor": {
          "ref": "5070be36-6e2c-4d67-91bf-332639765dcc",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "50049b9f-fc78-4379-be20-68dd51fa9d69"
        },
        "item": {
          "id": "e925ab0a-6bfb-4112-963a-8015077d8688",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "603b966e-83b6-4658-842f-918883bc35ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2b4c750-79cf-4b75-a015-22ba4e395a13",
        "cursor": {
          "ref": "f41bfc30-c73e-4cfd-9ad5-06d4f803bcbd",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "adb501ca-4248-499a-a34e-6db131928388"
        },
        "item": {
          "id": "a2b4c750-79cf-4b75-a015-22ba4e395a13",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "100190b7-45de-4911-a951-042226a1190a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "985954de-5c5e-45c0-8a59-c9fc086e6612",
        "cursor": {
          "ref": "c6f24fe7-fe0e-4d37-a43c-74ac37401900",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "c8cca820-70f3-4623-9f2d-b653a122426a"
        },
        "item": {
          "id": "985954de-5c5e-45c0-8a59-c9fc086e6612",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "b38295d5-5b0b-4b55-b7db-abdacc34ea16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d48ddc66-a1f6-4323-abaa-f5847e5a9e19",
        "cursor": {
          "ref": "c148957f-a86e-4c0b-80fb-1c854e22af4b",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "153b58aa-2fb4-4862-beaf-a2378aa109a7"
        },
        "item": {
          "id": "d48ddc66-a1f6-4323-abaa-f5847e5a9e19",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "d3d7ed0e-4813-4101-9f34-fd4a851805ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39dc7a45-d73e-4958-b475-87df426271cc",
        "cursor": {
          "ref": "8dd22f23-a824-47bf-b911-ee0efb6cc961",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "edd7b41f-e9d1-4863-92de-517a87985daf"
        },
        "item": {
          "id": "39dc7a45-d73e-4958-b475-87df426271cc",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "3532763a-11f1-4819-ab13-25e6a9c3bf54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "090a0b3d-14a2-40e0-890b-d75c3d6c7606",
        "cursor": {
          "ref": "767762f6-ce81-4d64-9163-d4925d254046",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "96f5d447-5783-4825-8967-88c164656669"
        },
        "item": {
          "id": "090a0b3d-14a2-40e0-890b-d75c3d6c7606",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "85b1f615-eaef-4977-8bf6-179af57d6ca2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47ab6798-bafe-4ffa-a9d9-eac1d85edbc5",
        "cursor": {
          "ref": "1e5b6090-ad24-47c4-bb29-a9f0fdad76b9",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "1d21c6f8-5779-44e4-ae65-3c3ce769ebc8"
        },
        "item": {
          "id": "47ab6798-bafe-4ffa-a9d9-eac1d85edbc5",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "a52631d7-6989-4d0a-97dd-44a9a40530c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56d3a58e-c0fd-4d29-b884-dc4a7c5bc7f9",
        "cursor": {
          "ref": "dedba134-dd78-4efb-92d7-4d491e452dc2",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "ea21c7c2-7d48-47ea-998b-58c359250ee6"
        },
        "item": {
          "id": "56d3a58e-c0fd-4d29-b884-dc4a7c5bc7f9",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "b39f04dd-9588-46a9-a70c-bf580f87b116",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1900445e-c15c-4c74-b847-d42e031a17be",
        "cursor": {
          "ref": "c3d79a50-36a0-404e-a8f5-65cf7e9dcb38",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "b3f26354-269d-413e-9490-0e033a9ac54e"
        },
        "item": {
          "id": "1900445e-c15c-4c74-b847-d42e031a17be",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "92c248e2-22bb-4272-887e-792142913041",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "556b5199-40b8-47cc-ba6c-5f76fb271bed",
        "cursor": {
          "ref": "01a3c35c-522e-40e8-9117-983add6689e2",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "4e0dd2e1-8c49-4055-8bf8-1408246c0986"
        },
        "item": {
          "id": "556b5199-40b8-47cc-ba6c-5f76fb271bed",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "14b6d02c-9753-438e-b9bf-527298753b29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fa4234b-0eef-40ee-9603-06e7fd93f564",
        "cursor": {
          "ref": "3f18e7e8-9237-4bdb-b1f0-4d89618cff4b",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "da9b2a42-a9be-4fd9-8677-f580c60bb73e"
        },
        "item": {
          "id": "3fa4234b-0eef-40ee-9603-06e7fd93f564",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "9af26903-1315-44c0-8527-bc548b657083",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2156eb12-7966-4467-8163-bce58eb886b1",
        "cursor": {
          "ref": "385c15b1-eecb-46cd-aef1-8f4bb2edd54b",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "c8af4a1a-0362-4ee4-b6c5-f56f2dfd2eb8"
        },
        "item": {
          "id": "2156eb12-7966-4467-8163-bce58eb886b1",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "d1cd7226-5b03-414a-98fa-3f910b6996ec",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db28aad6-863a-43d6-8b43-5e88b4abe421",
        "cursor": {
          "ref": "a672d95e-021c-4ae6-815a-819e2b5a2fbd",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "de859792-182a-484a-8aeb-3fd5d8e32098"
        },
        "item": {
          "id": "db28aad6-863a-43d6-8b43-5e88b4abe421",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "93f77bc5-ba0d-4d85-b3d7-ca3cf4251bdb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13c70ee7-6771-4521-a64e-40ddf75d202b",
        "cursor": {
          "ref": "956001b6-28ec-4ef4-a8f4-70f0c35b3427",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "ab7f8a3b-bc88-411e-ab98-a82128b71848"
        },
        "item": {
          "id": "13c70ee7-6771-4521-a64e-40ddf75d202b",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "7bf8fe63-8782-4dc1-ad48-10068a42c9a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03c549b7-b282-4b77-a2a5-f65e9e21866c",
        "cursor": {
          "ref": "8d9531bb-e2b5-417a-8fce-562ca3ce783b",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "4f12d135-375f-40ce-a68b-c2e1be065883"
        },
        "item": {
          "id": "03c549b7-b282-4b77-a2a5-f65e9e21866c",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "5b8665e1-c0ce-47cf-b122-7402f233cfce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30d9db35-bd3b-47d2-a860-b25601bc6a76",
        "cursor": {
          "ref": "dd73c81d-d87b-4042-bf86-1d7d053b50d7",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "fba9337a-0258-4fd4-839c-24dffa07e203"
        },
        "item": {
          "id": "30d9db35-bd3b-47d2-a860-b25601bc6a76",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "b9538e44-8d0a-4d3d-a82d-f10f069581c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f019bf92-1565-4b3b-87ed-be981b1f6da6",
        "cursor": {
          "ref": "9dd0b96b-0a41-46d6-b399-5859b4103224",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "e3e93884-996f-498f-adb9-8ec53f0150dd"
        },
        "item": {
          "id": "f019bf92-1565-4b3b-87ed-be981b1f6da6",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "124b7c45-6fc3-4bee-9fec-cc8ee752e2d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "216b9648-bc28-4845-923d-cbbb46e02090",
        "cursor": {
          "ref": "13f2c5c0-0396-4c72-88aa-d9b6e19a0861",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "9e9d7795-3845-49ca-88f4-b59bca9ec05e"
        },
        "item": {
          "id": "216b9648-bc28-4845-923d-cbbb46e02090",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "57dd61a8-f5c1-4a2a-b098-02aea945b1d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2de5a8cd-db8d-4a52-86d4-6c448aca3f67",
        "cursor": {
          "ref": "c0867021-bbf9-4745-bd0e-1f2ea3c78ead",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "aad76867-b4e5-42fc-9567-be4c1a119611"
        },
        "item": {
          "id": "2de5a8cd-db8d-4a52-86d4-6c448aca3f67",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "d688e2d1-d111-4669-a8ea-695f84a7fa1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "686b7fba-0498-4ef9-963a-3a89456e4941",
        "cursor": {
          "ref": "53f8f9e8-a809-464e-a8ca-67ea3a510d32",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "657150aa-5adf-4e4f-aedd-a70c900550d6"
        },
        "item": {
          "id": "686b7fba-0498-4ef9-963a-3a89456e4941",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "6f06ec15-009c-4938-9135-4005188cb1cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "542a9fe3-e87b-40a9-9b6d-a78e6edbb376",
        "cursor": {
          "ref": "1b3eee5a-b994-44e0-9c9b-0821c1d80973",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "8d3f8ce4-5676-4e68-bd3f-3a861c503990"
        },
        "item": {
          "id": "542a9fe3-e87b-40a9-9b6d-a78e6edbb376",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "68479c6d-b914-42d5-bff4-57abb08cae6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fe6778b-9617-40f0-8972-552070509357",
        "cursor": {
          "ref": "220d5b03-29dd-43df-932f-24ca00c8fcfb",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "5aed106e-42d7-481d-a91f-abaab77804f7"
        },
        "item": {
          "id": "9fe6778b-9617-40f0-8972-552070509357",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "0960b2a7-ec5f-4f27-ac56-da24fd7ce22f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a651164-f3af-4985-8772-5d80e1c66d4b",
        "cursor": {
          "ref": "279e660a-fe0f-41e1-bb59-b591eb3c2c6f",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "5fb973a7-a8df-42ab-b8e6-4760973d472d"
        },
        "item": {
          "id": "0a651164-f3af-4985-8772-5d80e1c66d4b",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "d180ad4e-f57c-482c-879f-6576b0dd0b94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7987253-f0c5-449c-b496-896583259a00",
        "cursor": {
          "ref": "12df7375-81ec-4bfa-90d6-ef1a0084503e",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "a302148f-d7ce-488f-be45-ba44e36ded9e"
        },
        "item": {
          "id": "d7987253-f0c5-449c-b496-896583259a00",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "0171d59d-6afd-481e-b758-f20f1aa0e1e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cef42629-a524-4cbf-8594-4071b00c85c9",
        "cursor": {
          "ref": "15d6ce57-b4ce-4983-899f-3b407f6d33ec",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "d5d6b183-6a3d-4bf7-bee6-17486ca86fcd"
        },
        "item": {
          "id": "cef42629-a524-4cbf-8594-4071b00c85c9",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "b99c8046-def7-43ca-bb5b-dc72472ba4ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f6f4189-ef1a-4c7e-a4d0-81f7d4ef0bda",
        "cursor": {
          "ref": "cfdb7c79-1a2c-4772-a15f-4d1d9eae8faa",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "e90eb61c-f68d-4f3d-9ed0-992f495552ac"
        },
        "item": {
          "id": "3f6f4189-ef1a-4c7e-a4d0-81f7d4ef0bda",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "08699d3c-7fa2-4df9-8d88-ecd3ee74f2f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "becdeba4-db5c-4e16-b933-f5c8fee7499a",
        "cursor": {
          "ref": "5c9b20e5-3d2b-4d79-8be1-984f0e41b823",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "d5ef6694-ddc7-488e-9d80-e69fbbb4ca9f"
        },
        "item": {
          "id": "becdeba4-db5c-4e16-b933-f5c8fee7499a",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "a508aa34-d7df-46ed-9a3c-97be235b887e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6b379bd-6765-4b42-ab9b-4ec3bceeda07",
        "cursor": {
          "ref": "9d7d02b6-33e2-46dd-a1ff-da7d896bb33f",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "3d458ada-d007-434c-bd3d-d6623d519e11"
        },
        "item": {
          "id": "f6b379bd-6765-4b42-ab9b-4ec3bceeda07",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "45a6ee5c-73dc-414d-9ba7-951a6f8c2df1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c21ec315-754a-4811-8026-f6250b8a95a7",
        "cursor": {
          "ref": "0bd357e1-5b9e-4a37-af93-423ce78057a7",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "171a9071-a966-4b27-8a1b-2629dd417eda"
        },
        "item": {
          "id": "c21ec315-754a-4811-8026-f6250b8a95a7",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "08439900-9298-4d12-8c95-41e26967eeb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf9006e4-6e99-4dc2-bc33-7b0c0c446525",
        "cursor": {
          "ref": "f2c40da9-0ed8-48e5-ba96-0ad410c46929",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "6d4becbb-67b4-4a4f-acdd-c0af4534f989"
        },
        "item": {
          "id": "cf9006e4-6e99-4dc2-bc33-7b0c0c446525",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "d0a94f0f-0c57-4279-ab78-ca0e725177e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61c92bbe-48f8-4d4b-ae02-e539f6c41ea7",
        "cursor": {
          "ref": "3d09acbc-4c90-4153-be0f-2bdfaeb85e76",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "19cf16df-1915-41e0-b963-248d5f6d30fc"
        },
        "item": {
          "id": "61c92bbe-48f8-4d4b-ae02-e539f6c41ea7",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "2a465ffe-e9d7-44d5-8a76-b3ba38c6f1f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f511916a-2423-4dcf-a20a-1939caa3d312",
        "cursor": {
          "ref": "30d5d048-7c50-4b6e-ba44-76b73026ac09",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "7d1b0046-f289-4e01-bf77-a790524b1770"
        },
        "item": {
          "id": "f511916a-2423-4dcf-a20a-1939caa3d312",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "0a7f2c84-1f34-4aa7-9a4a-f550fb4d5c8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "932479e6-2ce6-44ad-a322-683b76e396e9",
        "cursor": {
          "ref": "468ea0e7-c441-4aa6-86a6-292dcda7eb63",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "9db57940-78ef-4c0f-aa2a-41778ae19d4b"
        },
        "item": {
          "id": "932479e6-2ce6-44ad-a322-683b76e396e9",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "14951cf6-8d2a-46a2-b723-c75921efbb35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3ab1c8f-6782-477a-b9e0-1f9e05abe29f",
        "cursor": {
          "ref": "7ba7f322-b5be-4a58-a3d6-081593190807",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "4c801063-64a2-415f-8162-63505350c049"
        },
        "item": {
          "id": "e3ab1c8f-6782-477a-b9e0-1f9e05abe29f",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "45f820a6-7521-4b4b-9308-b7ad19d1ca1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cee90e0-afbb-49ba-ad49-9e9c464b2872",
        "cursor": {
          "ref": "ace9b29b-f65a-4d40-b6dd-f1f030798ecd",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "a9c91f74-5e67-4448-a364-b3073ac2e98c"
        },
        "item": {
          "id": "3cee90e0-afbb-49ba-ad49-9e9c464b2872",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "32797553-c051-4234-9646-9c199b65f481",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d73ff9b-9350-4760-9abe-efced210a1dd",
        "cursor": {
          "ref": "481e2250-9313-4c89-abf0-2fb11ea68788",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "b1bad016-50f3-4610-b843-7dba756a2fc1"
        },
        "item": {
          "id": "0d73ff9b-9350-4760-9abe-efced210a1dd",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "b4038639-c33b-4412-b125-8495f1259bf7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c477446-e64b-433d-84b2-b5db17d6aa84",
        "cursor": {
          "ref": "043e842f-0938-48b6-93f7-456c37973b9a",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "8924b44c-0785-4dc9-924f-d27ca9a1c33c"
        },
        "item": {
          "id": "2c477446-e64b-433d-84b2-b5db17d6aa84",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "8d7d3ab8-f669-4ebc-a98c-ae0f93212c49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a727b2d9-e9dc-4b49-9f1e-2fd5dd5907b7",
        "cursor": {
          "ref": "b6bcd1fc-e21f-4bee-8b05-92dafb144675",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "2cca2053-8410-4d8d-bfb5-c5ab13646026"
        },
        "item": {
          "id": "a727b2d9-e9dc-4b49-9f1e-2fd5dd5907b7",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "fd2269f4-773b-4ad2-b10a-d0a9042cf843",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77159d86-f379-4059-baec-f7b781704637",
        "cursor": {
          "ref": "4460a18f-739c-45f8-a02a-b34ba28c817a",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "1c05bb4c-dde7-4c03-b021-e0976828df76"
        },
        "item": {
          "id": "77159d86-f379-4059-baec-f7b781704637",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "9df19652-fcea-4bac-9d62-85f248ff2c39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cddc5e29-a8b0-4554-9a20-216af429c7dc",
        "cursor": {
          "ref": "8cb44cc4-9338-44ad-a5e8-d229dc3ce0e6",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "ad1da3a9-d394-4e32-ba94-7a5710d11608"
        },
        "item": {
          "id": "cddc5e29-a8b0-4554-9a20-216af429c7dc",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "24be2425-a548-44b2-864e-d660f193f30b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b655600c-c016-471f-9d8d-7f8182cb672b",
        "cursor": {
          "ref": "d983d25d-cfa5-450b-8b23-09b461aaa131",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "ddedcada-2c74-477d-8972-28832ca19edb"
        },
        "item": {
          "id": "b655600c-c016-471f-9d8d-7f8182cb672b",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "7b8eed09-b06c-4e93-9c8a-3505f6dc57e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1ff1f43-13c8-4fe9-824b-fbac411ebc2a",
        "cursor": {
          "ref": "ee839201-34c3-4e88-a1fd-b97a79707f86",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "6a540091-7587-4cf0-a238-f55af09c14b1"
        },
        "item": {
          "id": "e1ff1f43-13c8-4fe9-824b-fbac411ebc2a",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "da00a500-a0f8-47bf-9eb2-39b2c0dcd53a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7265000-86f3-47f9-8797-5b9f56c98eaa",
        "cursor": {
          "ref": "4b404fb8-73cb-43d2-b016-0309bed5db1d",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "493e3138-e0e0-4266-8480-433f26c6e850"
        },
        "item": {
          "id": "e7265000-86f3-47f9-8797-5b9f56c98eaa",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "30afc4a8-e713-4451-947e-08b8f1254999",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e0aa6e7-4a5f-4da2-af62-4a7e08c6e8d0",
        "cursor": {
          "ref": "257dbe27-a7cb-45e7-b186-2a3e84ab6727",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "7875fce0-62e2-4347-876b-8c9c41a9c7b0"
        },
        "item": {
          "id": "5e0aa6e7-4a5f-4da2-af62-4a7e08c6e8d0",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "a6761764-297d-4b4e-a3a2-440c9b11b899",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "025abb4a-998d-4c4a-8e6e-e23c07eba30e",
        "cursor": {
          "ref": "61e7aa58-bc76-444e-a4e6-d6579d3e68e9",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "17b09930-3cfd-43e2-8bb3-50e148733c52"
        },
        "item": {
          "id": "025abb4a-998d-4c4a-8e6e-e23c07eba30e",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "0c0b3712-5e88-4a5c-b8f4-621cbf6a3ab4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f69475f3-f582-44d9-a03d-9f3b408d5cd5",
        "cursor": {
          "ref": "694363b8-9afe-42aa-9647-bfc43876a81d",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "373323c7-1414-4de7-8da1-365f002c7777"
        },
        "item": {
          "id": "f69475f3-f582-44d9-a03d-9f3b408d5cd5",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "512ebb46-ca13-4cdc-8fde-edbdf522cf66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cc1a9bb-8f60-4868-ae33-385d02d90e7c",
        "cursor": {
          "ref": "d45756ee-a758-4dda-8954-9229e5c11a40",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "7d33a995-a9af-42a4-8b5a-9afa4d01d7d3"
        },
        "item": {
          "id": "4cc1a9bb-8f60-4868-ae33-385d02d90e7c",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "61e9ac98-7d52-47f0-977b-4fadf1475892",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1012dcac-b1ce-4f7a-94e8-864d4a3e5132",
        "cursor": {
          "ref": "f2aff242-4bc1-4891-af2f-ffbc8fb612a1",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "55f43c07-c598-4f3c-bcfd-117ad705d1f0"
        },
        "item": {
          "id": "1012dcac-b1ce-4f7a-94e8-864d4a3e5132",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "7376e928-0414-4e48-8745-4be1dc830394",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8373cfc-4c78-4a79-8081-839ea51b14b8",
        "cursor": {
          "ref": "49c32778-90a6-4992-a9ad-45b486ba1bc3",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "358bd1d7-24c3-4d78-9bf3-47dc71420879"
        },
        "item": {
          "id": "b8373cfc-4c78-4a79-8081-839ea51b14b8",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "1fd06633-22ec-41d1-aa44-b2405b0de911",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dadba95d-6973-4e4e-aecf-1cadbf0781c1",
        "cursor": {
          "ref": "f7f41604-3a95-4423-9e3f-5a9f6d986c44",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "c7dcc3d3-869c-428e-b8e1-b7c66954ffec"
        },
        "item": {
          "id": "dadba95d-6973-4e4e-aecf-1cadbf0781c1",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "5aaa776d-4c2c-40a2-87b4-2963d05ef376",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68583637-df39-47fe-b5fd-b4f1d436c8d4",
        "cursor": {
          "ref": "a1661d78-cfbd-49ed-a712-e8d46eb5ab62",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "d5fbbf1c-dbce-43bc-b1eb-23f4ca3f484a"
        },
        "item": {
          "id": "68583637-df39-47fe-b5fd-b4f1d436c8d4",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "7e0ccd2d-55a2-43e6-9072-a900c90271ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8b3396c-9d9f-487e-9366-0c9c748f76b5",
        "cursor": {
          "ref": "71a75976-61de-482e-a217-4af69f25b65c",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "21037d31-9900-481d-9a2a-03ae292d8970"
        },
        "item": {
          "id": "a8b3396c-9d9f-487e-9366-0c9c748f76b5",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "3fb9d592-26c3-47e3-9b4f-9a76f870c3e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9128832d-2b99-4f5f-b1f7-0b211f557aef",
        "cursor": {
          "ref": "cd097ade-5d88-4289-ac1c-ed821efb4000",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "44f64a64-ed10-4cdd-8591-dd2b590e1711"
        },
        "item": {
          "id": "9128832d-2b99-4f5f-b1f7-0b211f557aef",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "391359a5-7105-47e8-998a-03f58fd9a87f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5a032d6-ae18-42b0-9823-f39ed76d6f07",
        "cursor": {
          "ref": "e8a17228-1506-43ec-9929-824742f1752c",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "21ccdd11-f34d-46ae-ac8b-169a392bc365"
        },
        "item": {
          "id": "a5a032d6-ae18-42b0-9823-f39ed76d6f07",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "0f9129d4-273f-4f15-af00-06f38eb458cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52625392-0ec0-40f3-a5e0-ba0ba2073a63",
        "cursor": {
          "ref": "15ec69a4-8d7d-4969-9585-24dbc18129c9",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "9c9025b4-d4c0-4d32-8b29-7e26db460e21"
        },
        "item": {
          "id": "52625392-0ec0-40f3-a5e0-ba0ba2073a63",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "82043267-946c-46cb-b46d-5a864149f181",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdcfba42-7365-457a-b7e5-7059fd08893e",
        "cursor": {
          "ref": "99b03b69-320b-4e65-aafe-23a7e2b4690f",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "9c5c0402-ea32-44bc-8d32-65881f1f0a1c"
        },
        "item": {
          "id": "bdcfba42-7365-457a-b7e5-7059fd08893e",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "f70ae4f0-d0c1-4a47-9081-f2b6483fc35a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "7681647e-ef34-4faf-9bdf-6002c3f8f270",
        "cursor": {
          "ref": "b2a768ca-40bb-45f0-870a-df428af93796",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "fee1888d-050d-4783-92fc-ff168952baa0"
        },
        "item": {
          "id": "7681647e-ef34-4faf-9bdf-6002c3f8f270",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "97b4e56a-be49-438e-85b5-87cac0c7647c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "661f0fcd-55db-4bcc-8c70-8325739ea84b",
        "cursor": {
          "ref": "21ce82b7-b474-44d7-bff5-f7b5fd1a0589",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "b66ec9d6-d479-4b76-b25e-d176918f4d13"
        },
        "item": {
          "id": "661f0fcd-55db-4bcc-8c70-8325739ea84b",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "6944acb8-9b76-4733-8a26-15f2fa63495d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4c4d1d7-5a5a-4957-b104-f3f5843ceafd",
        "cursor": {
          "ref": "7b98a4d9-90ab-4e8c-b2a4-c389842b1513",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "f3456adc-2bc9-460d-b10e-17bc6db29b6e"
        },
        "item": {
          "id": "d4c4d1d7-5a5a-4957-b104-f3f5843ceafd",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "5bcca229-1b57-448a-b67b-6e125e37eeaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83adadd1-2e6b-4f83-a847-24bd4a1820f9",
        "cursor": {
          "ref": "31e91ff7-a23d-44f3-b4f7-ecfdc327f3f7",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "38b034ce-4aff-4942-83ab-8ac35f4b6764"
        },
        "item": {
          "id": "83adadd1-2e6b-4f83-a847-24bd4a1820f9",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "ec3e091a-b9af-4a3b-9c74-f0e6d6fad22c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ab07d0e-7fe3-475b-9ead-d4045e2ddc78",
        "cursor": {
          "ref": "c4f8704e-9412-4b08-ba09-b6b336f9127c",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "da7d408c-b48c-4dc2-bde7-6c5456850a6a"
        },
        "item": {
          "id": "2ab07d0e-7fe3-475b-9ead-d4045e2ddc78",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "377ea11c-a138-4dc5-8b9b-b69e3ed0f54e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61e93042-1178-42b4-a942-f4b1b2a0dcce",
        "cursor": {
          "ref": "65942a9d-66d5-43ab-b7d9-788995d53a84",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "2b7c73e8-8316-44e2-9bb6-8ccda54c6c9c"
        },
        "item": {
          "id": "61e93042-1178-42b4-a942-f4b1b2a0dcce",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "b105ab41-31e2-40ee-ae86-48cbe9563fc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75be02f5-8280-4e29-9f02-403c57e7999c",
        "cursor": {
          "ref": "55ed6692-5bf5-4ea9-b919-f2240713184e",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "1345da5e-0994-4a9c-aba5-b08949946ae7"
        },
        "item": {
          "id": "75be02f5-8280-4e29-9f02-403c57e7999c",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "fd1b0bff-5a5b-4d5c-a7db-31099b8d520b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b671a82-a6ee-466b-9efe-f9cc38726bf8",
        "cursor": {
          "ref": "8d768902-4f22-4abb-bee7-c12cc709e7d7",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "295a64f9-41bd-4908-abdb-0fd724b73fe1"
        },
        "item": {
          "id": "8b671a82-a6ee-466b-9efe-f9cc38726bf8",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "93987beb-7866-49b7-8c7c-34fe156ebdf9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a4b1e71-9a78-4236-8866-a93bf7f4af3c",
        "cursor": {
          "ref": "75b7f9e5-a57b-47cd-9177-1582257ea00c",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "3d0d259d-8584-4140-a6dc-f759e3dabfe5"
        },
        "item": {
          "id": "4a4b1e71-9a78-4236-8866-a93bf7f4af3c",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "e50863c9-ffab-40e4-9af6-d05d496b6c4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d518786-061d-4760-b3e3-11d5029bb61d",
        "cursor": {
          "ref": "3877a252-c96e-4f12-9be3-62b5790ba2eb",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "70e17623-d133-4237-8a37-8552552bf879"
        },
        "item": {
          "id": "4d518786-061d-4760-b3e3-11d5029bb61d",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "0f142f63-c026-4da4-8519-ab9cb8001410",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e94f860f-c368-44a2-9218-a8049b106c27",
        "cursor": {
          "ref": "7c9f0e74-b85c-4a2c-9bfc-c4b841d27c08",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "042a2d0f-d14c-4210-b296-6f81c4debb27"
        },
        "item": {
          "id": "e94f860f-c368-44a2-9218-a8049b106c27",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "8ffc4e77-e5d6-42e5-b0b0-b4aa6eda6a08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13e9fbaf-4141-4853-8165-d03de7f9590c",
        "cursor": {
          "ref": "d6b63cdf-9691-435d-9baf-d5302f5c654a",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "2d1a0c5b-0e4d-4ec8-a70a-4e1e3612c2e9"
        },
        "item": {
          "id": "13e9fbaf-4141-4853-8165-d03de7f9590c",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "5beacbfb-5a6d-472b-a88b-f480fc2d23f6",
          "status": "OK",
          "code": 200,
          "responseTime": 752,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "92c30d4c-df20-495c-a32d-891fc826338c",
        "cursor": {
          "ref": "c67609eb-0800-43f3-b67b-ce49b627fed7",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "8fe95469-4c24-4b71-aa6d-3eea95ec9ef4"
        },
        "item": {
          "id": "92c30d4c-df20-495c-a32d-891fc826338c",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "d86ecf2a-fccd-4b15-a785-e4612392e95a",
          "status": "OK",
          "code": 200,
          "responseTime": 790,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "ef0e9778-47e5-4642-b5f2-00d34161d464",
        "cursor": {
          "ref": "cf76a8f3-45e4-430b-8efa-bd0daacd00d8",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "e396a6ce-c1db-49c4-bca7-1fcee82996f3"
        },
        "item": {
          "id": "ef0e9778-47e5-4642-b5f2-00d34161d464",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "cab307bb-d0c0-4803-8d83-62f4893fd13f",
          "status": "OK",
          "code": 200,
          "responseTime": 770,
          "responseSize": 131
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "dc3233cf-e992-45d7-8794-cb2b4e569f40",
        "cursor": {
          "ref": "0af829a3-6242-40ce-bc28-ae17f4b02723",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "222de2ff-e2d0-42f1-9231-e17fabf94145"
        },
        "item": {
          "id": "dc3233cf-e992-45d7-8794-cb2b4e569f40",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "aeea6a79-9614-45cc-a1e6-202773b90058",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 102
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f015d40-d942-4084-97c2-1005ebb3652a",
        "cursor": {
          "ref": "fdb98ba0-a79d-4770-b424-edead4242769",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "a611633a-f555-4901-974c-c1d64f80a895"
        },
        "item": {
          "id": "6f015d40-d942-4084-97c2-1005ebb3652a",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "3fda13fc-d412-4da8-a049-e064fe0655de",
          "status": "OK",
          "code": 200,
          "responseTime": 1303,
          "responseSize": 183
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "cc0d3a2f-9761-4f25-a71f-015ffd2f0114",
        "cursor": {
          "ref": "f5752a5c-52a6-4f28-8517-343855c26321",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "d7fb19da-fc82-4ce7-aa17-498709b694b2"
        },
        "item": {
          "id": "cc0d3a2f-9761-4f25-a71f-015ffd2f0114",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "d2c9ac4b-d52f-4e1f-8215-09dfdd0c0778",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e987cca8-4b37-4f5a-8239-5c397781668d",
        "cursor": {
          "ref": "feef3be2-f1fb-45b6-9a59-f1e7c5d533a7",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "6d27f107-7312-4a0b-97ff-0933506fe24c"
        },
        "item": {
          "id": "e987cca8-4b37-4f5a-8239-5c397781668d",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "16fd71a1-29d9-4e90-8f9a-7bcd147409de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce1978a3-53f4-436b-9730-862374748a60",
        "cursor": {
          "ref": "c47fe795-ad2f-4a22-95f1-2a390db21d71",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "30c681a8-d985-4a15-9cfe-f8232752e73f"
        },
        "item": {
          "id": "ce1978a3-53f4-436b-9730-862374748a60",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "3bede149-4267-4316-a3b1-243082dc9bde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "537e98d2-7d83-47bf-b77e-906d05adda5f",
        "cursor": {
          "ref": "67bc47b7-a226-42c6-9e46-32db1e6b70f4",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "e118a1ef-e033-4ccb-98d0-c881d0925688"
        },
        "item": {
          "id": "537e98d2-7d83-47bf-b77e-906d05adda5f",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "fcb94b4d-ec50-4c90-98ef-c110d54c99e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fb23b13-47c6-41c5-a67b-6622be7cf2fd",
        "cursor": {
          "ref": "d9b3a6ce-a017-4378-ab62-92698a933fa0",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "f4fbfea8-aa37-4fac-8d16-241df7829155"
        },
        "item": {
          "id": "3fb23b13-47c6-41c5-a67b-6622be7cf2fd",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "e6e86d09-2d7a-4a3d-95ac-c044d6234ee9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0e5a9be-f36f-4833-89bb-542476c1f965",
        "cursor": {
          "ref": "1645f878-a450-4b2a-894d-e3a6c0c18bab",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "93938294-a942-4088-8aa1-c13fb6526fc0"
        },
        "item": {
          "id": "c0e5a9be-f36f-4833-89bb-542476c1f965",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "1a01c208-2eab-4365-8396-cd07c77b6ef6",
          "status": "OK",
          "code": 200,
          "responseTime": 740,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "4ed6b56b-0367-484a-9d56-842e62d96c95",
        "cursor": {
          "ref": "3b3a78ad-0f44-4786-b736-b0b9662cd17f",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "974cbaaa-0b5d-4dd8-964a-e018f1852352"
        },
        "item": {
          "id": "4ed6b56b-0367-484a-9d56-842e62d96c95",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "115d6bd1-d322-4eae-9457-bc405cb870a2",
          "status": "OK",
          "code": 200,
          "responseTime": 60,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "a34aac20-a044-4316-ac72-07fe1407bfaa",
        "cursor": {
          "ref": "ffb076c2-1f0c-4018-8663-b0f273e4bc1a",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "16f3e668-b4b0-483e-8488-fde16a7615a3"
        },
        "item": {
          "id": "a34aac20-a044-4316-ac72-07fe1407bfaa",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "003d2bf4-4636-4183-b044-df19bde7ab5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dfc3ab9-c5f1-49e5-b98b-6b2f245498a1",
        "cursor": {
          "ref": "5a601d50-d99b-4809-929c-8a938738eeb2",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "93a10fe8-9866-48ec-8045-05e5db5e04a1"
        },
        "item": {
          "id": "5dfc3ab9-c5f1-49e5-b98b-6b2f245498a1",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "2374712d-646b-4929-974d-172f58b0458e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2796711-2a7b-47ee-9157-65b01fcd46e4",
        "cursor": {
          "ref": "0cbf47ec-1920-45bc-8646-0c1fc1f63684",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "2b182d5e-3ccf-4042-ae06-e5c0f88fab64"
        },
        "item": {
          "id": "e2796711-2a7b-47ee-9157-65b01fcd46e4",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "28edc63d-b9ce-4da5-b107-4e26bcfe8130",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d7c1819-83cf-40c4-913a-8ff82e7b7db5",
        "cursor": {
          "ref": "cbbe4f75-54b6-4f2c-8f6e-260eb6a6d61b",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "e86ec0db-05a6-48f8-98bd-38cc09528e7b"
        },
        "item": {
          "id": "9d7c1819-83cf-40c4-913a-8ff82e7b7db5",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "077de596-6718-4084-a66d-2f4ea7c00b8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8431fe20-1468-47e4-84bd-3abbf6c7c321",
        "cursor": {
          "ref": "b0db5d10-1004-4aa2-af86-ed32841ac95b",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "abadc099-fbae-440e-ba6f-2cbc8219d59c"
        },
        "item": {
          "id": "8431fe20-1468-47e4-84bd-3abbf6c7c321",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "e2c1e6c6-0985-4fb9-aace-2ea61f54a01f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c375c4f3-33fb-4ece-b22d-78f81daa16c2",
        "cursor": {
          "ref": "4475c2ba-5892-43c0-98ab-e9c3545a323a",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "e8ca03f4-53ec-435e-8787-f8d899621bd5"
        },
        "item": {
          "id": "c375c4f3-33fb-4ece-b22d-78f81daa16c2",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "d26e06a9-2faa-4a6e-8de2-25eb0a75ca8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa9903e5-5010-4c0e-af88-c9768917190e",
        "cursor": {
          "ref": "7958f527-180b-4dc3-9f24-0d465356ce79",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "c0b3563c-c0f0-4bd4-8347-136ed34a8e8d"
        },
        "item": {
          "id": "fa9903e5-5010-4c0e-af88-c9768917190e",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "208d6e0f-d628-4582-ba90-a5d7685a37af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d031e5c0-a16d-438f-a64d-ea59ae61dc2f",
        "cursor": {
          "ref": "cddab865-bb2c-4ad8-a98b-7fa16c78fd0a",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "11461019-f98e-48bd-9530-09140ef60b52"
        },
        "item": {
          "id": "d031e5c0-a16d-438f-a64d-ea59ae61dc2f",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "85aa050c-a69c-41f2-a34d-d1c35afdbd0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b80e02b-4185-4788-ac91-b3f8d75966b5",
        "cursor": {
          "ref": "5e0f5cc4-7a5c-455b-8142-f13ddb030a08",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "e616f7c6-1699-42c4-9a63-3085ef73a8e8"
        },
        "item": {
          "id": "2b80e02b-4185-4788-ac91-b3f8d75966b5",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "6006e1fc-0392-47e0-b1aa-796b90b40a5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e46f8be2-cd2f-40c0-b224-f20e848ee187",
        "cursor": {
          "ref": "3d7f94a2-478e-4a51-862f-36b46e2349a2",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "1e0a354e-ef2f-4953-b746-76889c73dcd5"
        },
        "item": {
          "id": "e46f8be2-cd2f-40c0-b224-f20e848ee187",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "31ce447d-1d33-450a-8d95-a966eb1242cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "835d9941-a0ad-43fd-884e-9622a9b99530",
        "cursor": {
          "ref": "6a7d5c8b-6e69-4366-8e4e-ffdd2b3723c9",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "784b159c-7d54-4f8a-8313-dea3cde4ee3d"
        },
        "item": {
          "id": "835d9941-a0ad-43fd-884e-9622a9b99530",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "d8ed398c-3072-4ea8-abce-e4366dcaea73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28514fb1-e9f0-41f4-8806-97d9cc261e21",
        "cursor": {
          "ref": "3046f198-98c0-4071-a998-b18f044799d6",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "b486bbcf-4342-4b79-b4d9-09dc7e6c0166"
        },
        "item": {
          "id": "28514fb1-e9f0-41f4-8806-97d9cc261e21",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "4f6dc0aa-e3e3-46b3-a7a6-b0a900ebea4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ede95a4e-08ca-49e4-9d0c-b631cc9c142a",
        "cursor": {
          "ref": "27f6fa3a-6cad-4359-ae5c-2ee5e1b8ae5d",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "8f54f260-df98-477d-b36f-f85c77287bbd"
        },
        "item": {
          "id": "ede95a4e-08ca-49e4-9d0c-b631cc9c142a",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "abbd4317-708f-46fa-8363-a8b253b00089",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51ba755f-5b81-4767-bc4f-5e0b3a01c8e8",
        "cursor": {
          "ref": "d63aee96-f9ee-466f-9715-af9f1e174dc9",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "4bfa6a86-0023-449d-a898-7119f696444d"
        },
        "item": {
          "id": "51ba755f-5b81-4767-bc4f-5e0b3a01c8e8",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "780a7457-7485-4f4b-88b3-2b03a3ac017a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ebd7a1a-4c7f-46e0-a624-f07bbe8fb8f6",
        "cursor": {
          "ref": "07fe4b5b-cc2f-4a52-902e-5101befd6281",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "e4850934-2624-4495-a574-b07b218f6e95"
        },
        "item": {
          "id": "5ebd7a1a-4c7f-46e0-a624-f07bbe8fb8f6",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "70635daf-311d-439a-86d1-ec6e08d8cfeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48110cc2-d887-419c-9182-904f2ed926d2",
        "cursor": {
          "ref": "48586d4f-07d4-47f1-a8af-d39b9d739c05",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "82bc911f-8efd-45a9-a265-4af0e331f50e"
        },
        "item": {
          "id": "48110cc2-d887-419c-9182-904f2ed926d2",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "ad4e0bcc-a134-4d84-9ef8-17f81e38b1bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6d5a37d-2e4b-4964-8f26-13caafcbf9fc",
        "cursor": {
          "ref": "706b366f-11e9-4d08-8f7e-ec882893630e",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "dd614830-3105-4b38-ba14-fef33d9f484d"
        },
        "item": {
          "id": "f6d5a37d-2e4b-4964-8f26-13caafcbf9fc",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "aad15674-98fb-450f-84f6-36542eb98ba4",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "35355803-8c72-4b08-aa55-d1cc0b8011b9",
        "cursor": {
          "ref": "3c2afc04-2576-469e-9643-692eca538d43",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "70826b9b-335f-4f7d-a00c-fd372ef71896"
        },
        "item": {
          "id": "35355803-8c72-4b08-aa55-d1cc0b8011b9",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "cd988e02-5f40-4a60-841c-36de851bdc80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a49aa6f-bbd5-4062-9d11-a659f166ff8f",
        "cursor": {
          "ref": "6e995f6a-d35b-41f2-87cf-c4271ae601c4",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "ff48eccd-62b1-42b3-93d8-50d6c6804c7f"
        },
        "item": {
          "id": "5a49aa6f-bbd5-4062-9d11-a659f166ff8f",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "49ba2777-c97f-4788-b256-e6796ef5de97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bd6d157-e87b-4c4f-887f-11d41ca4c3fd",
        "cursor": {
          "ref": "ca695f15-33b2-4408-8863-15d32d9405de",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "215e63df-9c62-47cc-a737-f63bb4873ae5"
        },
        "item": {
          "id": "0bd6d157-e87b-4c4f-887f-11d41ca4c3fd",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "61f0bfbb-8663-45d1-a0ea-6a60571ee6a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b40629b8-c65a-4148-94bb-ef4e92e6f510",
        "cursor": {
          "ref": "d0402f63-ad58-4b93-9a26-094dd086a697",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "51dafe0a-2344-4351-ba9e-364068a6e264"
        },
        "item": {
          "id": "b40629b8-c65a-4148-94bb-ef4e92e6f510",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "d46a0da1-bb8c-4261-8176-27e8a1d3b420",
          "status": "OK",
          "code": 200,
          "responseTime": 58,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "43534945-a94e-4288-a091-9ada349be40d",
        "cursor": {
          "ref": "cde59c17-9df7-448f-9338-832eaa13e36b",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "b9f6107d-c2bd-4f8c-987a-4b8cd6b45c66"
        },
        "item": {
          "id": "43534945-a94e-4288-a091-9ada349be40d",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "62af4bcb-64ae-4466-8622-2926707a9b90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13921457-5990-4cf4-a824-40dd825858d0",
        "cursor": {
          "ref": "f3229a52-6093-4df9-9c41-03279bf7d1a9",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "c8224c7f-10dd-4a25-8fa7-df0bf1d41257"
        },
        "item": {
          "id": "13921457-5990-4cf4-a824-40dd825858d0",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "12e1b01f-cd15-4658-839a-e3e7a7f78676",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "049d5e6a-f75d-4647-97a7-52902cf98b56",
        "cursor": {
          "ref": "4b094666-9a3f-44aa-8ee1-4ea22ac05324",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "7e883479-03d4-477c-8315-3a55e6e89b61"
        },
        "item": {
          "id": "049d5e6a-f75d-4647-97a7-52902cf98b56",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "3ea74279-8f88-49d5-b0a8-3eab88defd8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "034fd63e-e057-4543-8942-a77f8b8e8858",
        "cursor": {
          "ref": "44e0b121-d51b-49c1-aa2f-741202317093",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "7d6bb546-9f0b-4766-993f-7d232a665ff6"
        },
        "item": {
          "id": "034fd63e-e057-4543-8942-a77f8b8e8858",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "34af64ea-d40f-4a2b-95a9-b6294e4c55f6",
          "status": "OK",
          "code": 200,
          "responseTime": 723,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "381a4750-17a2-4f82-8b30-dc8bdc194999",
        "cursor": {
          "ref": "e6c6e1b1-7ed9-40f7-a94a-9504c3293ffe",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "1e474373-cf59-49a2-aee3-39e675c8a445"
        },
        "item": {
          "id": "381a4750-17a2-4f82-8b30-dc8bdc194999",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "e40272db-2aad-4402-a0d0-5130c3fe8ed7",
          "status": "OK",
          "code": 200,
          "responseTime": 60,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "815026de-449c-48b8-9a95-07c6e130a0a2",
        "cursor": {
          "ref": "10a35654-0322-4272-8406-5021534001f9",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "3c0268c6-87d9-4039-9bb8-1392cbdff268"
        },
        "item": {
          "id": "815026de-449c-48b8-9a95-07c6e130a0a2",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "ef90ca1e-830a-47f7-bad5-4c00d8c44f05",
          "status": "OK",
          "code": 200,
          "responseTime": 716,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "228d0097-ea66-4032-b694-f4a4ece1905a",
        "cursor": {
          "ref": "cf2f05c5-8aee-4215-b23a-c82951bcf056",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "15f55770-af79-4ed4-b28f-490f34f585b8"
        },
        "item": {
          "id": "228d0097-ea66-4032-b694-f4a4ece1905a",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "735b4e2e-c73e-4592-8cd6-67ca1feb9186",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2ba923b-8124-42f8-857f-aca673ee85d2",
        "cursor": {
          "ref": "87d7f1a1-ecab-4835-9c58-425ad7aaa9c0",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "0251afe5-816d-495e-bcd9-370eb94981a1"
        },
        "item": {
          "id": "b2ba923b-8124-42f8-857f-aca673ee85d2",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "f2b41eef-c12d-4514-83f4-13dcf7e64bf1",
          "status": "OK",
          "code": 200,
          "responseTime": 777,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "4bd75f7e-4d17-466a-81d1-6a229464f7f9",
        "cursor": {
          "ref": "91c0c1f5-3cce-4691-8e09-c165a665e6db",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "e56a4a1b-b606-4f19-b701-a5abceab2ef1"
        },
        "item": {
          "id": "4bd75f7e-4d17-466a-81d1-6a229464f7f9",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "469a27f8-b5d0-4ce9-8d12-4d05ae78a68a",
          "status": "OK",
          "code": 200,
          "responseTime": 763,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "d82a040c-5745-4dbd-898f-3a7cedacb0f8",
        "cursor": {
          "ref": "ec770de0-e85d-4dee-86ad-98c4f641c7f6",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "dc9a6af7-8512-474c-a876-01564fbb4abb"
        },
        "item": {
          "id": "d82a040c-5745-4dbd-898f-3a7cedacb0f8",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "63cd1b53-f357-4a03-8cc8-393a9ee2876b",
          "status": "OK",
          "code": 200,
          "responseTime": 749,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "64d17c79-c1e3-45a8-b29f-b35c11f98cc3",
        "cursor": {
          "ref": "ce4b618a-6285-4e0c-8677-b2db8a037453",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "bf04365c-9264-48de-80d8-eb43dd41ed62"
        },
        "item": {
          "id": "64d17c79-c1e3-45a8-b29f-b35c11f98cc3",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "e6a78ced-dc68-4b92-9033-86148a44193e",
          "status": "OK",
          "code": 200,
          "responseTime": 57,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "90ca3c79-f5b4-4272-835f-d0ad004830f1",
        "cursor": {
          "ref": "d4a5662e-cc61-4b4a-a597-1a831f551134",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "61195b06-b904-4375-8166-2687681f93c8"
        },
        "item": {
          "id": "90ca3c79-f5b4-4272-835f-d0ad004830f1",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "8c8cf3d9-28c1-4b1b-a806-7125cf5d8eac",
          "status": "OK",
          "code": 200,
          "responseTime": 1146,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "97be7530-7bae-4276-9f89-5261938fc504",
        "cursor": {
          "ref": "2f2040ae-ff2c-44ae-9c99-688042a6e98d",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "d6fca2ee-0460-4f09-b9b4-bd87faf7b0ad"
        },
        "item": {
          "id": "97be7530-7bae-4276-9f89-5261938fc504",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "74caa966-4063-4570-8115-2fd45dd6e421",
          "status": "OK",
          "code": 200,
          "responseTime": 59,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "6b6628b1-0901-42e5-bbf4-906a0bcea427",
        "cursor": {
          "ref": "7e6e5fe1-5a30-4e6a-9c8c-352e18122e20",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "5d93b2b9-0305-4ff7-80a4-8ae4f9262fde"
        },
        "item": {
          "id": "6b6628b1-0901-42e5-bbf4-906a0bcea427",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "7883dc43-1bc0-4d13-8c68-44f4c7d7b3c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30f20552-197a-43d4-b3f5-7546cd0557d5",
        "cursor": {
          "ref": "52c442ee-3be3-40ab-930e-71385fb8cb24",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "05aa4316-c711-4dd2-9343-65ac3793480e"
        },
        "item": {
          "id": "30f20552-197a-43d4-b3f5-7546cd0557d5",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "0d80b5ef-d36b-484a-ac32-34e99239c578",
          "status": "OK",
          "code": 200,
          "responseTime": 58,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "cde90c43-6e1b-400f-88fd-b0762e04eb38",
        "cursor": {
          "ref": "2b3c7838-98ac-4518-b958-fe5fb6c48fa3",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "7fa91947-7475-4aa9-9e5d-631dfc3e9610"
        },
        "item": {
          "id": "cde90c43-6e1b-400f-88fd-b0762e04eb38",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "097b77db-1c15-4802-ab77-1d0358270dd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06ba0f65-726b-428d-93bf-d00d906c23a0",
        "cursor": {
          "ref": "c35d2e2d-c99d-4384-bf50-97dfb34af71d",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "e551c3b4-45eb-4b97-aa3e-34f641fc4685"
        },
        "item": {
          "id": "06ba0f65-726b-428d-93bf-d00d906c23a0",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "5470282f-a21f-482f-9ec8-c4b48aa69405",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c40733d0-4d5f-4973-bd22-d9a8bd8945a3",
        "cursor": {
          "ref": "09af58b5-b5f3-4a2c-9156-91280159fa16",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "bed4d45e-63a8-42ad-915b-5a4121604e17"
        },
        "item": {
          "id": "c40733d0-4d5f-4973-bd22-d9a8bd8945a3",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "66d38d24-4c25-488c-a92b-d122662de8f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 183
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c78f3a6-0a82-468d-bf7c-1b0ea8f50a60",
        "cursor": {
          "ref": "5973a23b-b6e7-4e80-97f9-e8b10d315900",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "a9b12255-610f-48c9-a275-57870d7896e9"
        },
        "item": {
          "id": "6c78f3a6-0a82-468d-bf7c-1b0ea8f50a60",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "84a9f9ef-3e44-4222-be97-b27a1e70029e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05f4dc92-7d3a-45c9-82cb-aed4a209980a",
        "cursor": {
          "ref": "0d18d969-beb3-4091-8378-c8fcc26d59dc",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "5f0975ee-5ea0-4072-a01b-02b0a168401f"
        },
        "item": {
          "id": "05f4dc92-7d3a-45c9-82cb-aed4a209980a",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "90fa2042-9d04-4bc5-b436-aabdb052c6cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 579
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adfcd673-40a4-4074-8947-9edb18068cd7",
        "cursor": {
          "ref": "72833a5e-c415-44e2-85a6-b3a70f0eef59",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "4a29e2f3-dbb3-4f99-a684-347308c3ac5d"
        },
        "item": {
          "id": "adfcd673-40a4-4074-8947-9edb18068cd7",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "76c17a7c-2aec-4513-b732-476a9b402f1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f920cdcf-2d8e-4bc0-8bf2-9a41f086bd74",
        "cursor": {
          "ref": "1a84f643-c676-4747-9e1c-34412b555669",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "fafd1fd9-9a5c-4913-9cd0-cbff9726dca1"
        },
        "item": {
          "id": "f920cdcf-2d8e-4bc0-8bf2-9a41f086bd74",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "8255d8b2-2b40-4787-9664-0af2a3be528f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cd8c06b-dbd5-4a09-bc3d-5a6b1f575582",
        "cursor": {
          "ref": "7f03e526-a03e-4406-9438-b9e3c33a5bd6",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "39bce8f9-952a-49c4-8d30-36f8af825cf6"
        },
        "item": {
          "id": "5cd8c06b-dbd5-4a09-bc3d-5a6b1f575582",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "38ccb534-06e3-4742-9ee8-62cca0812ff3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "398b2c6f-c475-4e6f-b0bc-ff55e322670f",
        "cursor": {
          "ref": "29906dd9-a609-4904-8d6d-3360e801027e",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "5623b9a9-fa8b-4a59-ae64-c18d6ed67b29"
        },
        "item": {
          "id": "398b2c6f-c475-4e6f-b0bc-ff55e322670f",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "f08e6414-ecc7-435f-bc2c-3d1d3b11e53f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 579
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "288c78e5-c779-4763-b059-6bfb55259207",
        "cursor": {
          "ref": "e4979c45-c526-4216-b927-6ff2a2453af7",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "fa8daf1c-73aa-4c76-865b-8c9fdc2b7f2e"
        },
        "item": {
          "id": "288c78e5-c779-4763-b059-6bfb55259207",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "4b03f0ab-f152-43a7-a084-4e497f415023",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dae08af-4ae5-4c15-9cb5-ede32627e11a",
        "cursor": {
          "ref": "ab42a6ea-749f-4e58-88ac-5ed606df6c2a",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "62968b4a-b3bb-4c73-8a22-ed4ba2057f51"
        },
        "item": {
          "id": "7dae08af-4ae5-4c15-9cb5-ede32627e11a",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "34812dec-a8ae-4d00-98e1-0d8a414dfd35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d45b1c15-2035-4669-af94-74f6b8463189",
        "cursor": {
          "ref": "3eb9a4ad-34fd-421c-97a7-7218cef42ef3",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "bd5c69d2-df01-4520-8b72-e325915c9e50"
        },
        "item": {
          "id": "d45b1c15-2035-4669-af94-74f6b8463189",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "5f0ab6a5-125f-4743-90d1-19aae00449c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e066a2aa-bc93-4cf5-af61-401a27ea3fc3",
        "cursor": {
          "ref": "4dc2e376-611f-4ae4-8a1d-da2905ad6369",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "f70ceb3e-4e72-4feb-88ab-6096d48b6205"
        },
        "item": {
          "id": "e066a2aa-bc93-4cf5-af61-401a27ea3fc3",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "7a19ce18-71eb-41df-85c8-b1ef75fac10f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3a77d5a-f232-46b4-9389-72e1ceb65814",
        "cursor": {
          "ref": "b548e4ca-3975-41a9-a722-2644ce87819a",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "643da641-1386-4859-a42b-c5f34f57e6ce"
        },
        "item": {
          "id": "e3a77d5a-f232-46b4-9389-72e1ceb65814",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "470d4f36-aad6-41b8-881a-0b334c151d09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba5a0848-6baa-436d-9bdf-7d93ce696eb9",
        "cursor": {
          "ref": "bd06aa44-94ec-463e-b6f0-fd155fae27e5",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "f648e341-c39f-434a-9efe-6f66c4a3d77a"
        },
        "item": {
          "id": "ba5a0848-6baa-436d-9bdf-7d93ce696eb9",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "11ebbc4a-65a8-4929-8676-b117605dd910",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bad58619-658a-4dc9-b788-08d207382693",
        "cursor": {
          "ref": "9c8bf04b-cbc0-451b-9cad-d5b7434a732a",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "d773b8a8-3ee9-4e68-9619-cb0e0024794c"
        },
        "item": {
          "id": "bad58619-658a-4dc9-b788-08d207382693",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "e6400cd9-3a1e-4071-9dad-4156f61bea29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb51d625-fec9-4eea-8a6b-beb9be965e83",
        "cursor": {
          "ref": "f8f4e3a9-6981-4306-8d4b-320491971c81",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "ceda219d-bef6-47a0-bf14-54f34c0c118c"
        },
        "item": {
          "id": "bb51d625-fec9-4eea-8a6b-beb9be965e83",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "303fffa2-d333-4841-b9f7-a44446038c36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "999216f7-6d29-4826-8734-05842b7dbe87",
        "cursor": {
          "ref": "45bf7ced-a71e-4efe-ac15-6206bee1f1a2",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "ec22b138-2d26-41ef-9343-6b77e400f5aa"
        },
        "item": {
          "id": "999216f7-6d29-4826-8734-05842b7dbe87",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "29c80132-94e1-4354-b7df-10fc781685d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0f2b2d1-8ed6-4a25-b554-2712084352f8",
        "cursor": {
          "ref": "0fd9d809-934e-4d4a-a0fc-95aaf8a15752",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "0eb21bc8-07d1-4069-b94b-78b48f5f049e"
        },
        "item": {
          "id": "f0f2b2d1-8ed6-4a25-b554-2712084352f8",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "df3a16ed-dafd-4c98-8579-8accc821763d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21ab4e8e-07e0-48de-a3d2-9f56a9820850",
        "cursor": {
          "ref": "501afe86-d84b-4e4e-9f0e-289ec52af6db",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "bd230e78-8b2a-4084-b900-0a4f70471e46"
        },
        "item": {
          "id": "21ab4e8e-07e0-48de-a3d2-9f56a9820850",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "58f7286c-ee56-4335-a737-cbcfbd3119c5",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:263)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:263)"
            }
          }
        ]
      },
      {
        "id": "6fe91d73-5b56-4897-9916-e123ecd262f9",
        "cursor": {
          "ref": "a39a7b09-4e5b-41e1-9f37-6f12cd23480d",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "8d93fcc5-ac0a-4063-8ad2-4fa07f10c2d3"
        },
        "item": {
          "id": "6fe91d73-5b56-4897-9916-e123ecd262f9",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "87b54fe8-fe8e-42cd-8c4b-b1e283cd316b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1fa68c8-8217-4fbd-a375-e3335775e4ea",
        "cursor": {
          "ref": "a2f6564f-5acf-4d2d-acbe-717f6e5cf4b1",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "57e4c293-9b36-4f52-9328-9291dd91b6cc"
        },
        "item": {
          "id": "d1fa68c8-8217-4fbd-a375-e3335775e4ea",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "36c1f0ce-260d-4fc8-9d58-307bb1553ed4",
          "status": "OK",
          "code": 200,
          "responseTime": 61,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:265)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:265)"
            }
          }
        ]
      },
      {
        "id": "963c1bf6-7d45-4e0e-87a4-cb05b755bdd4",
        "cursor": {
          "ref": "8bf61ae0-c0b8-48d1-b9a3-300e8f07db63",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "e01c0446-e99b-438c-9fff-73c1dd3fe620"
        },
        "item": {
          "id": "963c1bf6-7d45-4e0e-87a4-cb05b755bdd4",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "99e32616-0526-4fb3-a1fd-3e2048e202cb",
          "status": "OK",
          "code": 200,
          "responseTime": 60,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:266)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:266)"
            }
          }
        ]
      },
      {
        "id": "e31e3ca9-62f4-43c3-abe1-14a04a76f604",
        "cursor": {
          "ref": "03e97a88-3f71-405c-b693-86778e189580",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "43b8aeba-295f-4308-896b-de9388b3fe6f"
        },
        "item": {
          "id": "e31e3ca9-62f4-43c3-abe1-14a04a76f604",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "bf495177-2dc3-4ca8-b3e3-a00157f2bbc5",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:267)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:267)"
            }
          }
        ]
      },
      {
        "id": "808175cd-3910-45a4-b99f-b36fc76d63be",
        "cursor": {
          "ref": "58005d9c-f067-4055-8cc2-e6bcc278638d",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "a3827476-2216-46a8-a429-3ea5253b1d82"
        },
        "item": {
          "id": "808175cd-3910-45a4-b99f-b36fc76d63be",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "01eeea0e-9d0b-44cb-8aa4-f8ee71b287a7",
          "status": "OK",
          "code": 200,
          "responseTime": 61,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:268)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:268)"
            }
          }
        ]
      },
      {
        "id": "c54b8a61-6ccb-4286-86b1-4cf65e133dbe",
        "cursor": {
          "ref": "8921332b-588e-4ae2-9b39-4139a238e073",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "748dca0c-2eaa-4f17-9dbd-fc84fc57d98c"
        },
        "item": {
          "id": "c54b8a61-6ccb-4286-86b1-4cf65e133dbe",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "8cabba68-bfdf-4245-9fa8-dd3b7818b34f",
          "status": "OK",
          "code": 200,
          "responseTime": 59,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:269)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:269)"
            }
          }
        ]
      },
      {
        "id": "688490c8-17a5-488a-8dd6-ddf223b9f5e3",
        "cursor": {
          "ref": "a9a807f7-76a3-427d-b44c-f99f26cd215e",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "a5a8507e-00bf-4ce0-850a-e90e79a1cef7"
        },
        "item": {
          "id": "688490c8-17a5-488a-8dd6-ddf223b9f5e3",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "0a14eb0f-0b1a-4649-b6e3-cddf90b4150e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc422630-b1fd-41f2-8acc-7b460efb3e71",
        "cursor": {
          "ref": "442b8d38-2504-43de-87de-7e732ca90491",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "350ba2a0-d8ed-49ca-a8d9-1df906b6c509"
        },
        "item": {
          "id": "fc422630-b1fd-41f2-8acc-7b460efb3e71",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "8facca2c-acad-4fb3-91c1-f59208ca7347",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a9a3f12-af32-44ef-97c0-0d22d15f776c",
        "cursor": {
          "ref": "039efe95-d9fe-44ac-9fdc-3bbe6ace9572",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "6e3bf74f-4e1b-4558-a9f9-a23bf03a2aba"
        },
        "item": {
          "id": "3a9a3f12-af32-44ef-97c0-0d22d15f776c",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "808b4807-ebe2-4be4-8b10-23fba74c3d7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2447e4f-8e96-4d7f-af20-ab107c84ff1f",
        "cursor": {
          "ref": "2ef00f54-47dd-4417-9f4d-62fde6e8161c",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "74ad19ca-c92d-424d-b241-c4c80aae4425"
        },
        "item": {
          "id": "a2447e4f-8e96-4d7f-af20-ab107c84ff1f",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "6fa7a8e7-1200-47ac-91a7-8512ccbaca34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba371789-f182-4b74-ba52-bc8c0130887f",
        "cursor": {
          "ref": "920d20c6-184e-4dc3-93e5-3a29282c7388",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "d61ce2d9-e1d1-4a7d-965b-15a583986560"
        },
        "item": {
          "id": "ba371789-f182-4b74-ba52-bc8c0130887f",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "810e33dd-2ac7-45a2-948f-243c0228e064",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7eb5d36-71a5-4f87-bbf5-0edc473d7bb0",
        "cursor": {
          "ref": "6a50087d-75ba-480e-ac58-329a87d7dfdc",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "722a32c9-e332-4f19-826f-6d9ccc48891f"
        },
        "item": {
          "id": "c7eb5d36-71a5-4f87-bbf5-0edc473d7bb0",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "a87bb331-984d-4139-9ec9-d06b313fcf76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc609add-3111-4531-b378-5f6b5a9c312b",
        "cursor": {
          "ref": "0212bcc4-555c-4696-a802-e89d0f6af620",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "e7581b1d-22c1-4bb9-9dc5-9951b921044b"
        },
        "item": {
          "id": "bc609add-3111-4531-b378-5f6b5a9c312b",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "75a6e6b7-bb6d-462e-bae7-5b1f1718de85",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "700d9094-042f-4da1-ac99-6a0d2e67df81",
        "cursor": {
          "ref": "3170ce7e-9519-43f8-b263-426b3563292e",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "4100aed2-907b-4e47-87f3-98aaca71aaf2"
        },
        "item": {
          "id": "700d9094-042f-4da1-ac99-6a0d2e67df81",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "997a11d0-8d9e-49ea-b4df-f462ad38c19a",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a39bdb7-c2d0-45cb-ba7a-1ba21bd2ede4",
        "cursor": {
          "ref": "2f9f246b-6cbc-45fe-a13d-f15a81d0d588",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "a4392ced-689d-4164-bcea-3915588bc095"
        },
        "item": {
          "id": "9a39bdb7-c2d0-45cb-ba7a-1ba21bd2ede4",
          "name": "credentials_verify"
        },
        "response": {
          "id": "523a7134-bc62-4c54-9a2d-6ccfb7f7784a",
          "status": "OK",
          "code": 200,
          "responseTime": 827,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "d01785b7-0bcb-401e-b60b-5a902715d1ae",
        "cursor": {
          "ref": "1cb1f938-e2e7-4a9e-8661-5d260664b2e6",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "c4423be8-999a-4541-ac7f-1081ec6bcb69"
        },
        "item": {
          "id": "d01785b7-0bcb-401e-b60b-5a902715d1ae",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "3e5e4cd1-af48-4a63-b9c7-b8d627b730f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:279)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:279)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:279)"
            }
          }
        ]
      },
      {
        "id": "435e0bc6-69c9-4eb8-936c-44996d2e8051",
        "cursor": {
          "ref": "04ca95a8-967c-4e73-8f02-a1d2de8abf0b",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "a5dff282-ad5f-4dc1-93f5-9539f76df2a7"
        },
        "item": {
          "id": "435e0bc6-69c9-4eb8-936c-44996d2e8051",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "17e2381b-9fb2-45d2-a1dd-00bf7c16a584",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "435e0bc6-69c9-4eb8-936c-44996d2e8051",
        "cursor": {
          "ref": "04ca95a8-967c-4e73-8f02-a1d2de8abf0b",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "a5dff282-ad5f-4dc1-93f5-9539f76df2a7"
        },
        "item": {
          "id": "435e0bc6-69c9-4eb8-936c-44996d2e8051",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "17e2381b-9fb2-45d2-a1dd-00bf7c16a584",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67918629-c38b-4d1a-8245-e96f82064cf4",
        "cursor": {
          "ref": "99441497-0499-453a-8a3c-9d972b50f2d1",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "c9f676ac-2e80-41c5-96cf-f483c75ac51f"
        },
        "item": {
          "id": "67918629-c38b-4d1a-8245-e96f82064cf4",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "f9e17335-9713-4b3d-ad47-fedae8c94df5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1129471d-d330-45f4-9ce4-fdf6e65faf6e",
        "cursor": {
          "ref": "0345fceb-0342-49ba-9dbf-c2532b6042d4",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "8c13ecff-6829-4118-98e4-2fb20c69aae4"
        },
        "item": {
          "id": "1129471d-d330-45f4-9ce4-fdf6e65faf6e",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "9e4ee612-b30d-43b5-8514-448fa5c01261",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}