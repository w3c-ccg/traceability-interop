{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "ac8302c1-6465-43d4-8c1c-284c2577cbfd",
        "name": "Clear Cache",
        "item": [
          {
            "id": "bae3ef6f-576d-4023-8c33-0d6c5612a030",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f7af0d6e-b719-423f-90c0-a9651441ba2f",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "632550e3-5ae2-4b0d-a166-e437d5901497"
                }
              }
            ]
          },
          {
            "id": "9d0b31c5-c3b9-4757-9b78-f633552fe634",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e99deef3-80d1-42b9-a1f8-9d1fb9822dc9",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "60090db5-9a27-49ec-ac22-c96bd11a6a2d"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "1611a89b-56e2-4bdc-9df3-3d16a9b89512",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "51fac34c-c915-497a-b167-f82b8fd7024c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "eb1e76d6-0569-4478-bf01-e2ef2b3f0bba",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5be9d739-1052-45e7-8efe-1fbfa46288c1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ecdc1345-2b1c-486a-9d75-c0cc4304bccc"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "431db230-ddeb-4662-b4c9-d8ba41bf8b12",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "cf9dbc22-5876-459b-9dcc-02643d332c9c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "7b5645ae-455c-445c-802f-56abb05bb438",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "cc7ac835-7963-4df9-a915-bd84dee5f0cc"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fecf2e76-18ed-4d0e-90c1-f9d9b005a039",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "3276b7a2-0a8b-4f26-9cd8-c26874737268"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1e5d12f1-fe47-48f6-8d0b-dc964bf85c6a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2ee196ad-b858-4d08-a2e8-1c0ef789642a"
            }
          }
        ]
      },
      {
        "id": "9b8f8446-dd1b-4690-bc4b-3aac677a2707",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "aa0e6c33-9e27-4769-bcaf-efd2e7bd4e23",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8a9dbf7e-5509-40cb-9b0b-6f6e2d877385",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "d613991a-444e-42e9-9556-3bd30a44ae19",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef3c02d0-8ada-4836-833f-030b2ef0a836",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d54a3f93-d7f7-4f7f-ba7d-b16da27a4660"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a6275a7-2da3-4a03-b793-ab6cd67500c5",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18211956-fc24-4608-a522-2694dc2aa1ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d95c2cc1-4522-4f58-8f0d-2867b4e4e259"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2450efe0-2761-4381-90d7-25db257ee182",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "030988af-600b-4ef7-b9ee-ab0721e2c5b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "76621b48-bab9-4e9b-ab18-47067c596b27"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b2bf7095-a7e7-4aa1-986a-66c4c4a2204f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9b077d88-33c3-48af-8df5-56644ccb538e",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7774e91-639b-4dee-91ab-41d6335590c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "292665ba-68a6-4487-9a41-3ba19ce1dd19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d694f294-c684-4573-a873-dcee90531710",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "523344c2-5a5d-489d-b247-c3afc603fc07"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "60ab0c33-1d47-4a3d-b01a-de022a57b839",
            "name": "Positive Testing",
            "item": [
              {
                "id": "17a58b1c-c777-49c6-978d-845b9d57ea0a",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "18bc578a-917e-47ad-a446-d20d2367ef28",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "491c98eb-251e-45ba-bd93-d1e0739ea7b8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5bc86b1f-1a48-4ffa-a15d-3484918fbe8b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "54b394a7-0783-47ab-b964-06a7d51e1911"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "591105fd-6e3e-495e-8e31-d0af82cb649c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "134d3b55-c804-4f96-8209-d800937ed71a"
            }
          }
        ]
      },
      {
        "id": "670aebd8-a09e-4397-b2b8-dd685d3d3a7e",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "0ca05b8d-9d92-4b23-8ded-af2e22d9d766",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b61ecbbe-b5ba-4377-aebd-fa347f4b55f3",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "53f78bf2-554c-41d7-9bb1-d412db9a5806",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5130ce9-89ba-49ac-b3eb-4aca5e4bfc30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94a29109-b7d3-42a9-87a6-673b4cf253d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6acd0fa-7a92-4b79-9373-132d0fa46ba0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0f727123-6e5a-4190-a76a-2636c696eb55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e67198c2-cd24-43ca-96d5-fe878da960ea",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf6343cf-7cde-4f91-9b77-64de0c5832b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24928099-3b6f-4c3e-9f05-df07cf3b90fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4df16825-a026-4a0f-9cbd-468ad2185aa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "254f5316-7334-4729-af87-3e7451b75447"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a486f420-1773-429b-a342-5a354078a010",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edbd919e-7fbf-4063-8337-f85ea7ea5086",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "416d949b-d45c-4af7-9322-6abcc38550de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4f4c00d-c522-4c94-84a7-0676a36e142a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c4e0d608-a457-40be-8bc5-dfa8d1b007d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e28b7fc8-9b90-41b9-b271-3fbaf77537be",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fee76a5e-118d-4990-9a6a-ef20257f11ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "267168fc-8dd3-4a85-9923-63df8f41e617"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ec329bb-dac4-46ed-bf65-6cc156f01262",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1c21211f-53e5-4089-ba68-a83041d6cae7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebe9170c-c7ed-4540-8554-915e19494e47",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d65f9bf7-fa87-4fc9-a11d-6b05971cf2eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "380f10b6-e96f-4c9f-9940-4ccb3a1e1b84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2c37274-712c-421c-ba53-b88fbeac67ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "31477c97-9606-45ed-abe7-147e33dc5911"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1420c549-22a3-4f60-8339-f9d6c55baacb",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "455eff13-646e-4e2c-b424-aa7df7472eff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28f15e3e-08d5-4f1d-a83e-7e0bd1dd8e63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f66eada0-b04d-4c3e-993d-93dc94dad406",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "54dcf389-362c-48fb-a399-00a01e8d9545"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5a8c029-af42-4cbd-9dc8-b9d597d6c220",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2087c4ca-763e-4796-b58f-814d3e8e32d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1190743-39b0-40a7-afc0-6b8663503973"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb0e80e5-d4b0-4be5-8d5e-01977d5bc915",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4bda8461-e7bb-4406-a930-af9b686b0506"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5797f2f5-6454-4776-9c18-540dc9dc983d",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec97895e-2b86-41fe-b8da-4743d7ed3265",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1ff7bb9-fa0a-47c7-a26c-4f517150a93b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e813a6e-4388-49db-8e5d-ed9e5ab1994e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "598097a8-261d-4473-a5db-87d7bc8e477e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78169155-fb46-495e-88e9-5be61ae64169",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "227ad845-149c-4312-b06a-c332e394d2d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9375b83c-a521-4828-ad48-e89096acf529"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cdd755c-9fd7-4f6c-a688-5a7b63ecffdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "28aa87a6-a2df-4798-b807-9e91a54ffa45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aaf8caa8-2e78-4bfd-aaa2-3ee787e40626",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ea5545e-35e2-45c6-b526-5b772301ec49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "faa7f00c-38ff-4df1-8bec-8442029c4fcb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de7be19a-fd5e-493b-9c5f-0134d6bd4681",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c00c4903-ee0a-4311-80b0-0540969af2d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75fb6eed-37b2-4007-8c38-82b0e10bdbaf",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58793bd5-1c04-4ef3-a2c7-6c05c3315008",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c962db61-40bd-4250-948b-3230af177236"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69d3ceb3-a73e-48c0-989a-e4527f3dfe90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "39336506-1a00-4f4c-909c-27b4b2ae58dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f59c8912-b291-4730-811c-a591708c85a2",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4cec5f3-0e47-4e02-8822-2ce2e021de3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4bcbe5b-0333-498e-8e27-7547eacfb370"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bf0f9f7-c941-4618-8ad1-22dac5340658",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6f793fca-2e37-4848-a843-bd49512bebb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e63a6a3-86dc-491a-a9b2-b8e521abf710",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33cef627-47b2-408a-b37a-27178182f6e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3afadaa5-c798-4a86-8b8e-93f2428ab385"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9dc1566-d91b-4ec8-b88e-f4fde83eee09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e6ed0a50-180a-4f6b-baad-fbcc66a4744e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1128942c-6db7-46c5-acb1-aebe8fba9ad3",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36a1f83c-a523-4e66-9740-7430ef43a42a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87c6b8da-4d09-412e-a233-3668fb07e1bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c19404c6-1e59-40e6-8f8a-07ee3d612ff2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a37308aa-9adf-4a66-b605-c68d48637da1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc487c8a-f122-4082-9db6-fd8ad78e7d7b",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c46a92c-79e1-499d-be66-268dff3eb694",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fde3273-6686-431f-98b2-7614e43e8c8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9d73048-109c-4e32-8745-c8fb5d0e6e45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a343e6dd-0684-4eae-a4b3-67145619d705"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6576fb3-c26d-4f4a-99b0-dc69201c87c8",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0db056cd-c73b-4d12-827a-000e1127b16c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aae24dcf-89d0-462c-a3dd-c836de45512c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35a5691e-e582-46b1-8106-42eb44ced8d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7d1888ea-a930-4ef0-8692-a6b65a7ba27b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99db748d-b29c-44e0-a9e1-ac2aeec440b3",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a5ad588-6acf-4c14-bc6c-536a3205fbe0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2771f262-d162-460e-b663-a05d02e6db1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f9fd5d8-08cb-4c28-a547-31f6405cdafe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a45583ad-615a-4f0f-bc2f-a0216ab1c961"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6ca78ec-0e94-4584-a6c2-c902789dc088",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f83a7d21-a4ef-404b-972d-f97583a5ab64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1281b770-a98f-4a98-a3c1-b4da308b8cb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c55e8dc2-3733-44af-ac21-2285d606de78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "cdb61c16-f8b0-48a6-b7d1-9ab20d70521c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7569eaf0-eae8-47b0-8b14-d40fc886c379",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2f696ae-bb28-4e3a-8765-6828daa913a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e95a9e09-fc1e-4cf4-b7f8-35bec56d7cb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9470bbb4-cc0c-4ff5-a80d-b50a0a132536",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "005b851d-9266-4c85-a817-cd68c6f4274b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab5e2722-1ec6-4430-9022-b7bc008e5e2f",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5fdb80b-4b85-42ec-856e-9ca48f264262",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfa4043d-54cb-4962-9480-67086f7f0dc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7130c0f-5024-4065-aa57-54e2094184d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2a13668a-b5a3-419d-9062-e038d1e96f1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19f26374-7fda-4075-8737-b8e8a0da2908",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6d869d4-013f-4803-ac65-6fc95238d1c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fe102b9-33d4-4239-8547-5a4e8fecf116"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "955be130-71ab-4e6c-a7e8-d53458a633b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e6289ff7-9689-45c2-a00e-eae6761056fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe93bb3b-c26e-45e5-9464-bab1a4845bca",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2ce8fef-b43a-45d3-b908-1839d37c06e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f348341-3e22-4e7b-a604-cd579735cbed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ec64099-bbc9-414c-bf7d-fd3af833e87c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f2430ea4-8c7e-47c6-8f88-352272219c66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "936f2dc4-3640-4c09-8bfd-7bf07c5fc130",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76001ab4-c0a7-4696-b6ce-8eb59e4e2657",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a502b8e-a394-428b-b464-6e0cb13c1c61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df53adce-1734-4f48-bcd4-b0952dd4f29f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "286d2016-c72e-4864-975a-92e0513da3bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25c663f5-1924-4b06-98c6-cf0cb4d19154",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f9759b8-98b1-4b8a-a589-59ce010c5e1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02f7571c-25b4-4600-8757-e49325e7155d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c00acede-bcd6-4ac4-999b-3bdac07dbcce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "adaf6a1a-b03a-4e2c-93b7-4dd45976f53c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cef2dfa-605a-4728-8b72-5950be09c736",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53cfb7ec-7726-4c34-bb4e-a7e4b4a8956c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57d65182-750d-47e4-b4f8-626ee6c3deee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "120b3531-f258-4ef1-8ad9-102d1a3f35f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "fef32ece-3ef3-4c4a-a354-1f9999fec400"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12952573-38ef-45b5-99ab-4802b9ec2483",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13cf9181-ef9f-441b-a0fe-9414cd35730d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de3ce79c-f606-477a-b166-03e71fb7f460"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eedc80ae-0b5e-4ac1-8013-c4ac4add93c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "727f6157-4ce6-41d3-9fb4-c910934feda7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66cab741-b3ec-4b39-8521-69ff8715d0fd",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "257df1d0-c1ac-4dbb-806e-e0b4a2669d48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e71721e1-18a3-4b29-a561-7ed1377f3c59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6a78596-92af-44c1-b8aa-72d1b06d4765",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7c0c5db0-437c-4549-a28a-9b4b76842370"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0570af7-da8b-44f6-9a74-4fdeb054a3fb",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec5baa5e-4db0-4ce6-ad54-42a0445be4a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ca35c94-6e85-435e-8404-5d7a63d09b65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8448b071-2f46-47fd-8e90-c4718a407b1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0da668cd-c9a8-4d94-bac4-f2314a2838be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52b9c697-0f4a-4a9a-a629-08d5c05cfc19",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cafe5d1-b48c-4c01-aa0d-d66bb839e0ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5b7ec54-0ec3-4691-910b-f6deab073cb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c02e3468-e932-44fd-ae83-df40a56ac2dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7557d912-9bf7-401c-853e-84bbb4076be1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0903e0ca-7b2e-43b5-a4ee-2216ff3fcf72",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e21cdf6-f8fa-4230-b970-bc39bc356f22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22ce5bb7-2fb8-40ce-9f76-60e78bbc29f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "882fb867-a49d-402b-aa91-7af7d176b9a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "4143a287-8177-413d-b945-e1db4e3a0f09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "251ca648-3e13-4cee-87c1-03403233cd2b",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9488ecaa-84fa-43b1-a17d-8ffb3b4b1b29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3ae23df-47b5-4490-92d0-c73176848ce6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7068fb21-52c3-46c9-907a-d03877aec2cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b6d02397-0d5c-4669-b84d-5240c252dda2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8694d3f-a7c3-4d74-9fae-1d0ba5275e69",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d59cac6-e3c3-4812-b374-14fbe953ccd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "421567cc-e4a2-47a7-a109-1e47e58e0704"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77d48c2d-66d9-427b-8dfe-a82c4dc9622f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2382a45f-7ae6-488a-a5ae-d3f42d0725ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d72f3c19-f511-447c-96d8-1c2935e57370",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab90c95f-5d74-4b48-b714-1c59aa7332a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2e65e3f-71bd-463d-9209-b7352467ba4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd2b6cd4-b53a-4627-ac16-77163f2589f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8fcade26-77df-4811-85bd-79971f222fd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b047825-58f2-4302-8796-0d08f08da0d2",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54890696-8429-442f-9d41-98e299ff2e57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "470ce343-d707-4435-a0c8-e03d5a6a72b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8849ec58-366d-4047-8b31-4bd4bf3e5c56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6d05831a-3e46-4d40-a051-56c6fd440824"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06b6a1ae-fdc7-4d2f-86f9-5f4c8e93c30b",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f60eae9-8246-4a12-bc8e-63b340b95b0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91531614-118e-4e25-a45f-a336885fe7f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3316218d-594b-44ea-acb8-9092fe990e8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "aacc8f7a-8d2e-47db-9a14-068c0d560457"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2242176-8777-44b3-834f-998af9473558",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "335d5b36-49b8-4b1a-a3b2-1589e0323add",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7f85accf-80e2-4336-a5ff-13104761aa53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45d2bf8a-285c-4d72-8b9a-c91debfdbc46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bb8518da-48bb-40a1-950a-2d34d59b8380"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e752411f-d4f0-4020-baac-136d0da40494",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32d7e72d-fb9c-4340-a3ae-282331fa13a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dadeea67-b378-4ab9-a8a8-23483fc284d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee15a49d-65f7-4ab4-92fb-f5ff90db49c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a0fd04fe-3444-49c7-b9fa-ee1012a2e00e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21621167-83bc-4d59-8708-10e2e8ad7539",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b45b586-df70-4232-97e9-a88351abee5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1f7f9f8-6c0b-4813-bc94-44105012c141"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2df6e6d8-564c-4c5e-bb4b-97b619448e03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "df61c4e3-e689-4abe-bf91-1bbb541a2bc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9d340ab-30f8-463c-aad3-95bb9fa09f4c",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfab972c-11eb-4746-9113-8b5df6c5723b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9124dee1-6feb-4aab-abf7-f1bf9cd6f6ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da2d3cfa-c9ae-43fb-ac39-fa93dc771bd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "76d8eaba-e5b0-45a9-866b-0a012ce3e23a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7968671-5e02-4387-a855-e4717c272eee",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4098cdf-de83-40fb-b3c1-8e03e7eee9f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3513751-c612-48e0-bee2-6a6327e6305b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b09f7170-1569-452b-9e7b-a6f64172d31e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "8a37b13d-43ff-44bf-bc3a-ad0776a6e9a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f380791-2f1b-47a4-8ecb-9319708d15ef",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7a54ab1-fcf5-4b0c-af99-c4e1b94430db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "494ba4f5-4338-4003-b447-d443ad5fc4b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd13a70f-181a-4c8d-80f2-8044dd515586",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "5e51702d-7970-4dbe-bf76-e4a93d2f9934"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d10357d-b414-4aa8-80d5-b370ccbbc3b1",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61aea177-18de-4c7d-87ca-a84d8be94450",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2312c246-cb2e-4dd5-9f74-b7614436cb2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fac55b60-8a2c-413c-b988-97890192a481",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "13f420f1-63bd-4ee4-b643-8d8ab70c415f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9c4dba2-90a8-4d6c-82aa-1e5038766348",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0af9ee6c-cb7d-4fea-8f54-bb46b214f142",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22487c29-ba9b-4d98-8e37-2b4bd7fb6af4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f439a6b-9454-4c06-9226-e2ffa94094e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "014085e4-4b4e-4958-aabe-0e96f502eaf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4f80010-d8ab-49c1-99b3-0d6067293d25",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "141396e4-2e19-4706-a5b5-7af86a5d1ff4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f8c03a7-8711-4c7e-b749-dc3747597db0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32854135-d680-404a-ab3d-1a04063703dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "e8b592a5-b666-4312-8e33-cee75552f08a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0ee2c4e-7713-4e99-9a1f-e31d8c414f90",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d826087-e0cc-4720-b993-d7dd7c929c17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9814acf6-6673-48cb-88ee-0eae15812169"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fd2d6e1-43da-4e42-8737-4347ab032327",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7de75c37-6a42-49c2-a11f-cc3007044bfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dca3b87-8e63-49f4-afff-10ca56bfe72a",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3522c7ce-63ec-451c-a363-919079122123",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b2e18e1-09ed-4836-b1b7-529edfbc9927"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c4f5358-7196-4f66-ae1a-df4d631ba473",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6aa6f03b-7231-4541-8780-1009595f8e34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f434ae9-a32f-433c-b30b-217292c73db0",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99bc09c9-6cbb-4aa1-b9bb-63a218118d11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d363a8e6-cf0e-496c-a7f2-846129c0ef70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d431fce7-0064-479d-b7d3-5652f1b008b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "109e8117-bfe7-4741-ad73-534f3ad7b981"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02882c52-a7ff-4e49-98b8-d8705dfc2951",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f30553a-0361-48af-bb3c-d40c9cc09142",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8f4af64-8cb4-4902-9e15-f6365cfe0c82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "deb27d1b-e1af-4b4f-8b5c-4091737bcd63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1a4e47c3-956b-40da-a353-a5f5b2139654"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d22e4e58-30b0-4ddb-aa01-f0852bdb7ea8",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c27ebaad-7352-4240-8155-1d63907105ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f0822bf-6cb5-4462-904b-aae85689a8c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4dbc817-608c-4629-92d8-6909764d6066",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "50b88513-a5e7-43d9-b876-795333f1c9b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f280382d-f4b1-4c5f-8231-7f40784a4fa1",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac62b782-eb89-4a81-bbfe-034e54126b06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9b3f5e9-7ab3-4f80-bca2-bec1ff657275"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "932ec57d-8de9-43ec-a558-e08bc5c44364",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "193fbff9-aa07-44c0-9c5d-669c683583fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d12b463-cb1b-463e-a059-d1e22f7e149d",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbf66e67-e211-4603-bf94-2bcde351aad2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab00e740-c21f-4276-8baa-f6934d16944a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8345cd1-ab7d-4140-9566-cb0561fddddc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "b3d70aa1-a1cf-4215-91db-d73d7310e301"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19037829-549e-4121-9271-737fcf1f6823",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45d3205e-86b0-44f0-be06-412f27729f60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce7b8a08-ef6e-4684-acad-d10b5ea909d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36e10423-5553-4eac-9a9d-6fbe40d85784",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "aa3f82d0-c00f-49b2-bb50-b065bb16edf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9a96712-786b-4800-b797-34ec8537a726",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "825e850d-d769-4c4b-a9fc-6bc867aa69ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9af9029-413b-492d-8345-fa55c48795e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaf7c5af-62e9-4a47-8a6c-1b4f51ec7785",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "790d72cf-cae7-42c6-bf72-37765c3a48ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e81e1fa9-523e-44f2-8e45-c031f9b78364",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b9bc890-95ce-4d4d-bc8a-8a35ca4b0194",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d376ca65-5a76-4a33-8ebb-14fd197b7fe4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0bd9ed9-34e1-4383-a8d7-cdd993d6eb94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bf45f8f0-fe12-4345-89b2-f3335546b36d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c49253bf-ce1a-4742-afd3-0c0fe8565e26",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41b6934c-6802-4db1-9717-a3ee64667c8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b8cb086-fec9-4cd4-b603-dfe2c6aad467"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "476f77ce-9609-457e-af7e-d00162f25a94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "57e7a1dd-95b4-467d-82e7-7073a354e340"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4c4369f-5e98-48c9-ba8c-5e7eb34c459c",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3995a721-b76e-4024-9ff4-700cb7169bc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a38f95d-dd12-48e5-b3d0-7f2f12dffb9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46a6cbc4-8775-45e9-ac32-9c696ffbc516",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "1cb73a6f-c131-4d27-b2be-ef02d08b34ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d087b0f1-104f-4067-86da-a66df69d401d",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2036e65-657a-4fa5-b3e2-b7aa7b4f8a7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "336d73e0-9ddd-472e-bb37-9894809774b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5753547-28cd-472d-82c1-49f25ffb0ab3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c938373c-ad65-45d2-90b0-6310431d54f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d4bc228-9141-4a11-b5a7-e567cf8e3a9a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10ef242e-00df-486e-a3b1-08ca441a3305",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a7530e9-082d-4807-9213-6e022f3ffb8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1afb5a26-812e-4886-bd5b-5dc83fb9d6ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "cdd148d4-6568-4e0a-9e87-210374e2137a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33fbdfcd-63ce-4a1a-93de-ef5b7917392a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "316a383a-f2e1-46b9-a98f-333896a09b53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a014edf0-cb42-4cc6-aa5a-a08c8b9e0e24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97005bcc-3c82-419b-ba39-b94b45ebf2a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "4f375bce-fabb-480a-9154-ad87ab765dcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5a3c40b-f5da-4498-aa61-a46b43078303",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0b4995f-d755-4fd1-a7ad-b3a0cb3fd8ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9f63d6a-863f-4882-9f3c-224cd72e3a69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28834756-1808-48cb-8ed8-7bc3761cb818",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "445fc0b6-6ba0-4cd5-ab49-7062cb699180"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b6a7d62-394d-42ab-a24b-8dbbff1aacdb",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13811617-f38a-4272-9248-a8a088aa9497",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57d2d52c-7d5d-4a51-b344-99489d45cc46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "497da58f-e5a9-47d4-9995-7ad4456ddb4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "8288f1f4-47c7-4897-9d95-9bbb5e412c96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36c6c4e1-0031-4f02-827e-796a80f5b669",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cc74d7a-23d9-4cbe-9597-deecefe91b61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d9cb451-7404-4548-af9c-e242b3f3babd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2f7b47e-5a0b-455a-b402-6295973dc16e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "4a60a453-e12a-4017-8e31-4564ca760671"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fcc5a3e-1ca1-450f-9f25-a7ce30656996",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2593b238-f404-456c-94d8-51b68ed7a5fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52a6dbba-4679-4562-8ff9-d8bb223195ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f531ab7-6490-4c18-b80b-16b905a7e8a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "d99bce03-9cf7-4966-bc4f-c61377007e89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99f9949b-f545-4173-bce9-fad118f2cf74",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8251c4b-76e7-4136-92cb-555a60ea73f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51008135-90bd-4b86-88ca-d44bef743cc5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "604aeba7-63e7-4d09-bab0-e3d0b0c834b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c7cc73e3-bb27-4fe7-9176-c60675a8fac8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24336326-4904-4b4d-971d-e8492efd4f7b",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0758a7b7-0bdb-4e98-9fb1-1f40a6d92910",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f0cb6a8-febc-43cc-831e-953b4745f799"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "303ed645-04e0-41ce-af64-9da0d8f9832f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9ac8dc95-7441-425e-ad91-df832a5969e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "206b7bc7-1f63-4f8b-9e90-b16122c8fdae",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08358c4e-43f8-4dfb-88be-0cac87408c09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43561bc0-cb6f-401f-ad5e-d425a42e0c67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc63fe42-1ec9-412b-90ff-51e6e99adc1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c6ef8f32-bc8f-4d37-a768-a01f5b4af2b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "780229e6-94cf-45e1-9271-d3503e7426b8",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3107bbd5-f1a3-42fe-a7a7-5e1f99b89168",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7598d29a-f2bf-4f86-8828-4f5ba230952a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37a1cc80-6ba7-4048-a953-7a6f27eab8b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0c0a548d-94bf-407a-a4b0-7d1540f35508"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe32825f-413e-41b6-b8c0-ac7526af7390",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "560e4bca-7193-4e00-8b3c-bef1726e81f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "005cdf48-7642-4cbd-bc31-18ff54623e09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0149a84b-f637-4537-a1a2-d636923f908b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "9c01fe38-df65-42b6-bedd-d046c3d99fed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb0466a3-24bb-4504-a8c9-7fd78f3deda8",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49510cd1-8208-49f3-9639-2cdd9fb14806",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4603c735-ee51-40e3-abe5-bcbd06a28c37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c743d394-c16c-47c0-8609-2ef53f0d8da9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "d10ef8ef-05b3-45bf-80fa-a95d52706aa8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92fec88f-2967-4d64-b54d-4503e8803fef",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14a65bfe-43e2-4e29-9e83-2cfd7e242ca7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc541f57-8b5d-4db9-bac3-35e7c4ddcd27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80beceae-4cbb-48b8-9b07-b8be6a564191",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7c492b82-d7af-419e-a962-bf8903ccacdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19a40fda-4d4c-4be4-989f-a202d68d931a",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c8f23a6-6110-46c4-b9b6-dcf987a4db29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c78b3c3a-d4b5-4fdd-81c7-37afa0945987"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28df4811-de41-4554-994c-c51ff6f6c3e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9f10e2ec-e9c9-4408-8d6f-fde1b337d3ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e71c942-c79a-4dff-9c6a-3eb4f5ba5706",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e95d8a08-61ba-49b7-acf6-79ea0e724a24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "281d23b9-5432-488d-b1df-443764cc78e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb217d0c-5b1f-42bd-b0a1-5010b4b66f15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e9134efd-d2f7-4a81-9b1c-71c88329d383"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b1c297e-98a9-41a3-a137-d5d0bd93a363",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3eb9d9a-f9ec-4804-a7f2-fe9b541073bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58ac9fa7-3c45-4556-a2ee-0eef673cbd73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d351624-58a8-4898-9766-7e7a02b8117d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "eef824e4-fa71-4d84-962f-6794d6bea0f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ae6667d-19c1-43ca-9bea-bffe73ff9820",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c525c2e8-7795-45b3-aede-01d7234fb48d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "605f295b-b482-49e4-a208-1c5c7bec17f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25d89816-d1c7-4d01-958d-f0c392008348",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0eeaa548-2438-41b2-a52c-cdf8a4129adb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbac8696-1200-4eaf-9d35-63d8daa28f5d",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "807c28a1-6506-4fb8-86f0-bd2fcd4b901d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d989aff-edfd-4f76-b36e-17c141e67fca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0407aad6-d622-4f1f-a4ce-c32f970f1eea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f2496b11-592f-408a-a6c4-41a27dfccf08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "253c3d4b-f6eb-4bc1-a581-ce2d78694f05",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4ca6ff3-1034-438f-8679-09786a38997a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc362103-8d93-4c97-b626-a23d3cd99889"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7df368e7-f058-4bd6-9c36-1f9561f37b08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "70d745ec-2673-4684-9d37-e52daa2340eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4a17b68-2079-4789-be37-e2645a3f53ba",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6182236-8210-444d-83d3-b52f19e94fff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a5fb554-e253-4483-96db-fcda3256090a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3445613c-a2af-46f3-b683-82f1b7830016",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0f0f89ff-9aa3-4bb4-af1f-6ff1e654baa4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07294de6-53c9-4194-bfc0-19d68ed996fc",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e82c437-6569-4901-a06b-7dc441cfecc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72bb5dcf-fa57-47e1-a2bc-88d0a46a54ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1370e7f-19d1-4e46-a907-c8a94100d3b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7171d26c-445c-4b92-9489-6cf737310c9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc461871-2e88-48e6-a9cc-2666f2907204",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec620e5f-fb8c-4dc6-add0-ad50cf0e1eaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9ec47c1-6cd3-4504-ae0e-df8ce94c268d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7198fd9d-bc77-420c-bdb9-74da9b03ebb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "148cbf6d-ba77-4072-ac1d-3a841f7de393"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0196cb8a-d09c-4925-9932-b74263e0caa2",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28b389f3-9dc7-4715-828d-ebb5edd0db08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac5993ed-7e51-4ee8-9980-e04fb871587e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e54672f1-353a-4a15-baca-dec63cc46fe2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "12c51456-c99f-4a7d-95ab-45643b39538a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "587b7da2-f831-4bb6-9f4b-19670558cd5f",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ff2d105-55c7-4ff8-8032-42191c64b5fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09d77f32-2637-4b6d-8be6-9213eb161851"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8973435-d5a9-4c5b-984a-60399d8e49be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "680102f8-e8cf-4fcc-8f21-f7fdfb8a10df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90d8b943-1c34-4f11-aa94-94bc881215ba",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e11ccb53-aa8d-4a2f-8c3f-2b6014bedd8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e76816b-20f3-4d4c-b37d-d63cf8997c7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "831ff0ba-3d0b-4400-8618-c574c3557aaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9eaffcc7-ec9c-44e4-88df-fc82cf80357a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16d5c795-e6c2-4020-b4b4-112d454fc0ca",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8d3cdac-b836-48c8-858b-2c5e7fad26ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fec7c5a7-f4da-4e50-801b-ee9d9410a0f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21dc147e-6ce1-4583-9e59-6b70d2213967",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3df429fe-037b-4e6c-9163-4f2791b55c2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4ab6eda-31b7-413a-9889-c14316ae429c",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "293f6ad7-1d1c-4a03-a99c-7ef3173567c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08e1c462-5507-4ca7-a851-9f09b2819e42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce387b19-6327-4583-858a-931216110a47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9741b4c2-739b-4b90-bc3c-2ab06dd9e600"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37a602c9-a8f7-421d-8e5a-870b6b7ecb6f",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0beb7197-65bd-4ecf-8710-035dc21c4196",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b46ac62-8b1d-4bfe-8ce6-7c796eff3918"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adae5f6f-01e3-4f5f-8d39-37b769250f3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "df44d75d-ee4c-4886-a981-4c82b6fab473"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dad13ce5-0f2b-4e86-92dd-546d878a5ef2",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f50ffc34-1d25-40a8-8428-bdd00eefc7ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "496e2153-aaf9-4b9d-b216-3149baccea2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f07cad81-4438-44ea-b8ea-3aa12ad08b99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ac44d413-8b6e-41f6-9ff1-66dbc4a97c9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8bd2256-f973-4114-ade2-5d0a7d12350f",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "915a956a-5dc1-4d26-9f95-eeac3640def3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd5e70a0-df42-4888-aeac-fa056aa203aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe17c0ef-d0a6-4046-b839-aed86208ea09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "751f26ab-5bc5-4636-905e-aee144d018da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50cb7dec-f6cd-42f0-9950-62e3233d8f21",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d9def54-8c8d-494f-979c-bec1ef1db634",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65d1f8ba-70cd-49f3-8323-ed46d9c9faba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1b5155f-4163-45a7-9075-abb447425f8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "95a95208-b531-47e7-8fc5-fe1a07f7e0b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed4199ea-0932-46a7-a1fc-c197a978e493",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "047581da-64b9-4579-bab4-494d52f330c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "302611a9-e728-4ba3-8108-29bb2472d794"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6862694c-e6af-43ea-ad2c-637fa26c75a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "b1311df1-9300-4b82-b559-2769f1f029e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "041c3d6c-7489-41ee-8bd6-f8926cf0968d",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3200ab9e-44b6-4367-a0d8-274833fa390c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23d1187f-f363-4d33-9dd3-d89934d522b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf11cc3b-f37d-4ecb-8559-3c9bfba091af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "da7ed645-1509-43de-83b9-8474e0131be4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eba4e9c7-ab4d-46e5-872d-01e549c17487",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a8a2a1e-cd1f-4fbd-8d32-4ad508622a8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9fb7a36-af99-44f1-ace0-66313e8add2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2267c82-d59b-47dc-b912-5a27cae35dad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "8dba10c3-6b45-4a65-91e2-4fe643ade096"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6629f61-8448-4c63-85dc-f96b27a7d138",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46b1c569-e5e4-4d5d-b284-6b534d40550b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "f45af261-5576-4697-b26f-2cacc67288b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38893039-dafb-4152-8e69-91f526b0b6eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "732ce341-00fd-468d-abac-685545592ed0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "95fbc162-9932-4ac7-84ca-b557bf496654",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "493bcc89-9251-4d46-a5dd-21fa2b9da67b",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91c6e667-514b-4a36-91d5-fcc68cc7eac0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "38d6c1b0-8155-42fd-a17b-050eb8e59fbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7c6bd93-c74a-4610-b41e-037bb185b28f",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fb0d4a20-f5e5-404c-9ed7-6c0d5ceac2fc"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "afc3e908-b119-4d6d-8080-e3237858d955",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "31a582c3-e289-402e-9f83-a390178b8bbc"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b01c4b53-e1fe-4f1a-ad1d-89240a37b65f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b9c17014-47a1-427d-98b2-f1f58b6bf990"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2609c732-aa36-4b16-8ae0-e75ab52b280a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6758d231-ab23-4e77-b2eb-cf42b27fdb5b"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "0875dd4a-9095-4f59-bf93-3b6efad94aa5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "820f2fe3-2a58-41aa-a7a9-bf99cfc29fde"
                }
              }
            ]
          },
          {
            "id": "2104898d-c3db-4709-94f0-e4a436d7efd3",
            "name": "Positive Testing",
            "item": [
              {
                "id": "72b74d15-e8be-4e13-bbab-a6bc4e2b2282",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "29b332fe-42d0-452d-a2c6-00a726668f04",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8147a59c-16ea-4054-9a39-6a118d456a1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "be5cab8c-7123-4d4e-8efd-5a4450db8876"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc6a582e-e4fd-4ea9-95f1-56ba819fb597",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "621232df-a12c-4a8c-8232-cb1f96ffa3fe"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "cd42c107-502c-4ad2-89f6-e731d56cdf8d",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a5d83e06-9b1d-40d4-93d3-d76d5483fbdf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "66346df9-5fde-4ba2-9b0d-0198fd305f17"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7b232639-3ebf-4416-bef8-6a5aad931ef9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "78070529-e290-4287-92c6-7e5237b632e5"
                    }
                  }
                ]
              },
              {
                "id": "77ac47e6-704e-446c-af31-b490755e3b86",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5db18bc1-0d2e-4c2a-8e9d-808ddbc3da38",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0705fddf-9ab8-44fd-ae56-8c32ec7e1c30"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9e2dc26f-385e-452d-ae2a-6175f5b542c5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d9efee05-5a51-40aa-a1a3-28d16656151e"
                    }
                  }
                ]
              },
              {
                "id": "43286558-f1aa-4854-b683-0f6f81e12b45",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5fb67a34-391c-4fab-97a3-0e5a97911807",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6043a6ac-baab-413e-9b64-4d75942fd9b0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cab2d2a8-3c3e-4e8b-ab51-45440875b739",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "78176c8d-f4d2-415a-976f-01bcdc413848"
                    }
                  }
                ]
              },
              {
                "id": "bc7c25a3-bc08-4661-8bbc-bce26e1f79c9",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d9337884-67fa-4f59-bf98-324fc8a92bc1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "79903fcc-3811-4859-8b52-83b62f2e2393"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5ecc492c-7e4c-4247-a0df-6756c265ae4b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "f18549d4-742b-4ec8-b47b-e589ef1a10b4"
                    }
                  }
                ]
              },
              {
                "id": "dbb0003c-a594-44b0-8b59-230e93997444",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f0856752-68ec-4f41-a44b-dfb7cd0bfb49",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d5ad0079-60f2-4c22-863f-6c198d0a0e26"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "46f44948-85b6-49d1-b29c-dfa111b8b7c1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "a7293f65-f461-4582-82bf-b9fbebf7bbde"
                    }
                  }
                ]
              },
              {
                "id": "d174d923-89f1-4771-a91c-1d48b95a64e0",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d77e566b-ac1e-4fb6-aab0-216c4e8bfff2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6cdfe4d0-20c5-4a3f-8f1e-baed1b8ff83b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0a6de551-0a8a-4486-a533-103d029fc579",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "7eadc1c4-328c-46b8-a120-7461ac3990de"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a5d19392-bfe6-4b1a-be42-69843acc58c4",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ec90f0b7-2d0a-473f-bb7f-40680c0f914a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b1e9e1d7-34df-40c9-ad0a-8a6a3854b120",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d44a75d6-a8ed-4089-b538-69d3a14146fc"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f5a0b4dc-2c2d-44b8-8287-ca959b06e19e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "3581845f-8a99-4098-ab9f-165cca699429"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "43051dd2-ab66-498c-8d2a-1d6a5cc4c639",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ddb2980f-c008-4d57-a901-eb28629e9ade"
            }
          }
        ]
      },
      {
        "id": "3b97c4fa-7a7f-4ff1-ac66-25b8266bd7cd",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "802ac936-d818-4752-9e48-bb25bb7623dd",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b732c867-b34c-4102-95cc-f6cf82d40602",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "5966d9ad-92f6-470a-9069-1e5723e904fd",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "257c72c3-21d7-4589-aad7-9256a27234b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b0dca89-6e2d-4b47-a378-7887953aaa33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e07574d0-0c88-45ef-928c-4a1eb4619d24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "61a772fa-7eee-4d87-9b2f-a4f8781931b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a82c10ec-642e-45d9-a9c2-6acb53405f04",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee417085-7035-4f43-9920-49eb0478c4b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57f16d2c-8b12-49f9-83e3-3c719eb551cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a9163da-5feb-425f-9123-ad5e284e5276",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "48298723-2047-43f5-905c-0677a37eb079"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97566d9d-c622-43d2-b4a4-4bf3cb972da3",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e59f179c-4ea1-4eef-ac0a-98b557cd7abe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "412695e5-b12a-484c-903e-23531759e1f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e484340e-6ca7-4973-823b-0293d2440d95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b3982894-50be-463b-9953-fdca56512b82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08dcee45-26ce-4aaa-a97f-0e49da30646a",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e7e443a-6824-4ae8-a73c-6053b344e1b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5598955-23d2-4ce2-8810-05199b8be795"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3450eeef-618d-4ab3-a561-cc4f24d07cb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9113ac7c-9bc3-4db4-aa4a-38d718069872"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4205fc7a-f179-4240-87bf-9d760c3883d6",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb1b553b-3951-4bd4-83b9-53523c4718fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b5f030c-22e5-4501-ad29-aa34fe304010"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7349b5e-3545-4910-bdf9-6eb494776259",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "715b1975-e97f-4dd0-927b-2ab5efe5eb98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebee6d59-9ddb-4686-a26c-2ab78ae267e1",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "548b8de0-d702-49ae-a908-9386bc6f8781",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "661530c7-003d-4df6-b323-f7b34a45b292"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f15abd60-9523-489c-8b0e-02523b8c9f92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a28cc1a8-1ab5-450e-b33d-75111747f003"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4f70ec8-c2f0-4226-b532-3cc5c5274519",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d4e7150-ad62-4ea8-acc3-d492d5628818",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a0cbccc-b594-4670-b333-259bab9e23ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2e44f76-b27c-4b9f-9504-252df328a120",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "e21e9548-f603-442b-915b-d91feabd18b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b1a5ef7-0a82-4f09-bb70-d2be3d0f0f5d",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd2b6720-1ad1-4fa0-8b9d-4b72026e3a41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a7dc158-1a59-4045-9ea1-23d75a58a0d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1093c55-57a2-40f9-b0d6-9daa49b45b6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c3fdfeef-be48-4598-b86f-82e940b9af60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b34721f6-7c5a-4be0-81e8-83eb767128b1",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ac30206-9b01-4e7a-81b8-3f1458020d46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c1d74e4-aac7-48eb-80e1-b7d1b975a094"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53b9e6f4-9cd6-4821-aaee-531778e624e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "daaf206c-360e-4007-a8a6-62b040197c4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11df165b-fa4b-4f9e-a046-2147c5ecbf12",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb68f9fc-7a4f-42a1-a239-f19762f4acc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a63a982a-d6d0-4956-8563-7ba545ad0a23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad81f8e4-1c4a-40c1-a22d-089f15c4496c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6bbef13c-da20-44e2-a619-5088b7cf0683"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abf7355d-620a-4baf-b55e-ba808a4bcd19",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd30832e-db40-47ef-95c2-aef94d70d4df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00f96d96-1777-4d38-9703-942734a1aea4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "652b54df-20dc-47fc-b07a-454d80917122",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "07afe215-918c-4bd1-bb03-f12394542d1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9b51ed8-e734-4c27-ade8-95514a505246",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0659bad5-1822-48de-a754-47653d860d4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97b0e36e-0c8b-482d-b44d-46744330c64c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64db3cea-6a0b-4e1a-853b-d3880c13d7fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0b0d4f9b-6a4f-4998-9c6a-b6cc488d89d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "480f9978-c8ee-4e68-94bb-83c0a452cfc7",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4e15ae3-0e0c-49b6-be56-61166feb83a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f37cd6f1-c32e-4478-9bd6-c0027b358a90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e723476-a8b0-4c61-b99a-3cfb0662a8c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "089d03b8-6470-42e1-9f99-964881ab987c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "261f49ab-04ad-4d39-bf1f-506db5ae929f",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e92a91d-b13a-42df-bdbe-d5121457b15f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2035ed9c-314c-425d-96d9-4b3cb5adb2f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9610aaf5-e0bf-4d98-8069-4a44055a9051",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "a735b50f-d996-463d-997c-7044b7d369c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b85a6d99-abe2-4f50-995b-091c41ab7c63",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5d26a8f-eb9d-4af5-9464-cd82a8a5bde6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4594d784-be0d-4041-a8ae-07d7efc608eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d764f4a1-24e3-492a-a573-8715f960c62f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "51845e4c-60de-4dc1-b9d8-0aa704248e0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88bfd51b-2131-4e54-876d-a72f405f350e",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67617786-cbf9-4295-a840-fa10d41d234e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17e10598-d43e-49e2-8f88-42f62facab08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2efadbbb-3c0e-4a3c-81d1-f1a4b0bdb3bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "7fbc8ec4-95f5-4ee6-854f-0e2ff6e74eba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b6bbe7e-35b5-4e95-970a-2bb086bb071e",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "045c0ced-e0c2-4122-8561-a9479156120f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c866eeb8-cdbc-4f95-beac-178e36c4683a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adaaa8a5-7aa2-462c-997c-6700f8b95283",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "176f410a-c0ca-42f4-8449-b37b7b5601db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd528eef-0992-475d-8a8a-4b81ea9f7db6",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "657862e6-17bf-4591-b862-b1d4a5342869",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfc9c3fe-886a-4b88-a5f7-31b861d5a1df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "046566ea-956e-433a-a990-4d4516ce6f71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "9b425d41-eca4-4ba6-bdd7-b26badc87fe2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44ae805c-864e-4366-a840-dde807d17a7f",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1590651-58ad-419a-8a9f-beb2673619f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "522ad64d-3d91-401d-91ed-4d0046f92759"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37a734d9-87d6-45b2-8903-ae174b62df9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8e464da4-846b-4dcc-9033-da499fe0d488"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95c1fe22-dc99-464f-b01a-65ec70831202",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ba6aba2-d7d9-4856-9f59-8b4d48964ae5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d704ae7-6aa0-4e46-b845-cf29aff30204"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "524b815f-58fa-4fbf-b22f-c42c5035030a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cc05a6ec-82e4-4d93-93aa-086af20dff6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e0e6dfd-14c6-4bba-a6a2-338618894ef1",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f416b729-dc79-413e-bd92-56f3f06df2b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74312983-12d4-41a8-9fb6-98924e9e014f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5c2aa70-0eda-4a3d-b98c-1ba6201183e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c10cde23-0157-4727-a0e7-d225009f4c17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6696b4b-748b-4ac6-832b-136381f9b506",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d94645ba-f6a2-4e34-9f66-daa03c919049",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db096934-fffe-4aea-b076-bed23299067f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59bcf03c-9096-4e02-959b-72190ffe0812",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4e99cfa4-fbfb-4480-8830-dfc5fa4b2716"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af9be6ec-1423-4667-9f3b-ee0d0caefd4d",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14d94395-803d-4785-ba15-280644074ab1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6edcd09-b63a-4bd6-9f48-7e824a5086ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82f1797d-c76c-44ca-91ca-258d3ccd2655",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ce782395-43ee-4825-b7dc-9532d05ff8fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f73779f0-d1f5-4eb6-8f8d-603d72c367e3",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3759f3d0-8810-44c2-ac42-003db4d306ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4ee596b-5390-4456-8f45-176778fbe64b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d7e6ab3-b45a-4cd0-91d7-8fd261151d0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a2b839cb-c9c2-43fd-9b14-54cc04037585"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51d429a9-9099-4551-a8d7-63396e0a86d7",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aceaac0f-7c9a-4ff0-b0be-9b2626bada8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61f4ef76-21b5-450c-abd6-de798526113a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bac5921-f532-4892-a4b9-9930510a9fc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ed766e97-0b5f-4c6c-9d59-7cf0a7f36bed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18c711f8-3ddb-4b3c-a44b-de662fa22777",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "164bf670-649e-4ce3-ad62-c9867ceedb09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2d49532-c068-4c77-bac8-3abb324452de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4a5bf19-9ddd-441c-ad4f-0abc8004a1f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5f0154ca-092f-44c6-a29c-ed3a01c6bb0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d75efcb6-201b-4989-8abb-cb247d09949f",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee828b95-dec9-420e-8884-9cf839014009",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee49ac21-a39f-4762-9576-beed4e0336a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26e7e44c-196c-4a02-b463-f67d6cecc8a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3e5e9397-b9da-45a1-a1ea-dc7bc90f13f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f3b6560-65cc-4744-a009-38e6f332315e",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87eb1a33-41b3-46cc-8023-0a71672f1a8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f918cee-3453-4285-bc00-99c3ae456f2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b21ea56c-40b0-4c4c-9533-845779645fb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d2bdfbc0-9754-4779-abca-03aced20058f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2db4e7c-e2cc-43b9-b4d2-730a1a774471",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d1df4da-7811-4f62-9e60-753de052d348",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82aaec57-0840-4a52-b8c5-c09bbeb596f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8925a276-1a45-40f3-aa88-ebef54a5cce7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "daa70865-9566-411b-b2e8-c3f763752e16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36914150-4dd2-40cf-bcfa-300342e38ea5",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9797aa5b-9281-4185-b748-cb1ddd75e2ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e734ad4a-8629-4730-a626-d319d9f99cc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a5a631c-72c1-44c9-84ff-2cf475508866",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1d17abda-587c-4ce5-88cf-3b7962c2d128"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8365ea6-c459-4788-a80d-d01bc0ba14c4",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a63edf9-407c-4ae3-b146-7b4c786b6c37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8ad4b1c-c34e-4428-882b-852ae2c7e6e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8183316-9fa5-414e-86b1-56f5ee2a3868",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2dbb5216-83ed-4996-b30a-bd22090a0ecb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ecd545e-891a-45d8-9dd8-d15f03ca88fe",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71381039-b4ea-45c1-9113-6a27f7f998ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7eaae10-2044-424c-ad85-e7ef92c95377"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6f596e2-60bb-4d30-9c24-8269468b863f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "026725b8-bc67-4576-bf0e-a31a96d744b7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "60109a09-7d89-4e29-8f5c-d97fa19740b5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2f95ffe6-d521-468d-8574-ac7cd6c2e952",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f05e56b-ea92-4fe0-b3db-6b76521ce4ac",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "604ebc17-25db-494d-a045-8f716b983ed4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb1facd2-433f-4362-9044-c0baa35a6d0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6a49822c-c7cb-4bf2-98c9-a4e8bbf2c928"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8d52b79e-4d51-46e3-ae06-355d8332d840",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "02d43333-9db6-46b2-90aa-6b88ffc5b63e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "532ce725-f5c4-4784-8c6f-f5ab68e54c87",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1392b378-df29-4b98-b426-d6291436ad4d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "46f2531c-eff2-46ff-b9d2-2e17aef1e984",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "acb8c448-0265-4fcc-973c-562bd75c5033"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "58cff3ed-4f15-4f18-a805-6a62a0d72ace",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c19e87ea-0442-41e8-8879-4d6ecac41459"
            }
          }
        ]
      },
      {
        "id": "fbdf8040-80a1-45a9-9262-d0da30b749c4",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "705da4dd-f705-47f2-bb64-6216e8f69976",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c1ffe597-a345-4b8f-a029-ee36dd4339f5",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "83e34b8a-95a3-4ada-8757-3a6ca2cfadf1",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eafd7208-6333-4851-8436-38a764aa535a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cae0a31d-0b06-447d-8a42-82979701f787"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d86ae467-20f6-46cf-9062-052f739ebf3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "8381a070-3b33-4b8e-91cc-27daa63e57ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a73e935-7132-47a5-8ea5-c04b7e241f5e",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8b52c6e-d63b-4856-aa5d-fb4a552b7f6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e8066a0-9495-47c8-8280-fbd3739ece4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1380c3e3-bcc4-4ed0-92ee-6b49be355b7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d65e62fb-7603-4efd-9b9a-15c52feaef01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62268807-802a-4eb8-8e45-b26151c0120e",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffb7cd57-8866-48b4-af3e-ae88ed0e5bc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22649ff0-80d0-41b6-b01b-7ad9c7f57429"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae9e9fd7-61c8-4200-90cb-817a4a6f38f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c92e754f-99f3-4f49-a682-8f8acac780aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f6c9a4b-ef8d-4850-a952-c7b29c4f1539",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da90a5d8-05b7-4935-8e69-136442ea0392",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "451f4bb7-b011-4c9f-8a1d-b2e90ca4cdff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d82c4027-97c9-458b-90e5-e61e9f743841",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7ec361d8-cef5-4422-9087-c2b0c6b6bd5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db9e1f55-daa8-4b14-b8f7-5d1a97e22863",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5e33d72-5854-4115-94af-4b6b5d5bcc66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9feb240-54eb-41f0-80a6-da269e04eaf3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b68ee95b-3503-4754-9b99-35bf8d8d10d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0e9894e1-ccdd-4e32-9022-8765986583ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76b65ba4-0cd4-4ca0-a361-94bb70dd1332",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f522488e-6715-4f61-b48f-30e69defa078",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c3419d4-44ff-447f-8456-cde2b461813f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41c208ee-2087-4aa4-a53b-fb63d800b7e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1d29e06f-794a-4714-a1ce-79803eaba97b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3db20d5-3198-41cf-9a4e-0d274e0d5c73",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d48ac71d-1938-4fff-ad23-fc14b0fb4845",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a996d19-82a0-4201-9b9a-e3a8ca8cba55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab9bb87c-afd9-41c6-9a1c-b66a14a2baaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "e41ab85b-653c-4414-b06c-6337cdf9da1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa78591f-0d82-45fd-becf-e2c1a4af3de1",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18dcae3b-e099-437c-b173-3e2fa1fc70d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10f175c1-a84f-488a-8914-fde640f96601"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "627951b2-c234-43c9-bc12-033261ab7522",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c3736339-b049-4725-be54-1333dca82c30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4304813-705d-49f8-a01c-33cf723f1b80",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "266f6159-8287-4850-aac1-5d37f015dbe1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31aacbf5-6a2c-4654-ae71-0828436749ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c5e05fb-7011-4742-8f26-1171764361de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1b1e0992-8a7e-4f88-a79c-529d756a2fa1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd6e2fbd-68ef-4be2-ac88-61d42221cc8c",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21e6a0be-4720-4585-813f-ce0968adbb33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53b85eb0-dec8-42bf-97c5-69ce1a192be9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "984564ab-5b41-45b5-9d7b-7a667c22618f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e58c9855-9cf7-40c5-a2b1-53024fddaad6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14326218-2890-495d-b3c2-1e0ba85ba024",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c7ab58d-8f80-4b4c-a068-a791787c7f8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa475a6d-fa10-4666-8ff2-313af69ca685"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67d17c81-79d4-4ca9-8ef8-e928f09126cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "e6d20db2-3603-4b56-b27d-431dbd32bb40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7111425-fc13-4221-bdd1-5b7cfae318ed",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5a68e7d-e8d9-4096-9402-9a457274068e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10059c15-5a0c-44d7-91e6-0b95f36d74dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88f4357f-2191-4f9f-8d88-8d2ecabb02c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d294c15b-1c75-4b2f-b962-7022d2f86137"
                        }
                      }
                    ]
                  },
                  {
                    "id": "897632f9-f98f-4c79-825f-2fa5f64147ef",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3c74b81-7b0f-4550-8684-cacdf7ca7a63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "514c76d3-abe3-4444-a548-c7c9dc8dc140"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbdf89c3-b628-465f-b84a-b056998dc46b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4315377f-443e-421e-96a9-0e18b657db91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6beda817-8a08-4aaf-83d3-3a89f294795c",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef0ee387-38b2-4bcd-88a6-641720921b34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88f09e88-87d7-4375-bb88-52ce384f8166"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09571142-1e70-4d31-ac39-4fceecc4d3c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "a607d00a-154d-4393-8fdf-9f1a06664cb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ae3950b-5eb7-4b73-96bb-f198c6970f13",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fca928e-63ae-4187-aa35-ea9a6475236e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bc63c6e-8e59-4bfe-a228-a35cb9011b6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f23a01a-eacd-4315-a549-f5669d1455bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "59a884b2-5036-4e4d-89c0-602a9d6b90f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "321f5b1d-8a33-4a2d-9bb5-84790fd815b4",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4b1a8e8-3449-447c-8b2b-bff248ae675f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e05bff9b-b124-4802-b291-14701bacdd95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30854003-a0fb-48c1-aea8-986bd4ee47c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "8ec1ae23-4e61-4ec4-9dd7-417dc2aaf800"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54c6e6d0-b3e2-4f44-bf93-a96c363ecca3",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccbb0846-cc2d-44f2-8484-b1b31f058bb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9740f0a5-3802-4b35-977c-6407dcdbde66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab5e09e5-acaf-44c2-adba-b78a0f16f361",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "9bd93ee6-9913-4f8a-931a-47adc10c4a6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e38c944-c488-4251-8b09-aea85c23b5f6",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1be89bd6-337b-4799-87e3-be35884b1361",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cda61c6-3583-408a-9e5f-8507171d1583"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c9dc4d1-9dd0-44f0-a7ad-38cc0c4eeab2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "09ae9546-a840-426e-bc63-6ce37d3a8f0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dfede0a-80fa-40ce-8353-2a7f9101b68d",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a0489ef-e0b1-4b94-b38a-b3d5ebdef870",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "249edce6-0c8f-467a-ac5d-9f4ee0185f43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30bfdae9-d93d-4fcc-b77a-f823af0cdfa3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ad3a675a-36b5-43c4-aa66-bd0c6dd1f29f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "479fc4aa-cef6-453a-987c-41afa3876369",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "735337b0-67ee-473d-b376-d41096705751",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13c0b51c-bd03-4e3f-9edc-5db55a4dd40f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aff7d4a5-a5aa-4bb7-99a7-eaa4a432344a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c550ca91-2204-4a06-8d82-bd159cf835df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "155486b5-de2e-41b2-8440-e7effbe21409",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7810851a-7dd2-49e7-8bb8-a24eeb1c3efc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f1d1990-9238-47ec-8aab-29d2bd1681ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24792c64-10a7-42e8-8c09-65a140a67233",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1945f9a4-e603-4f71-8288-7196f005141e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0481f111-c889-47d6-80f8-d40a2183e856",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e955cc6-2cfa-48e8-927e-503ea9d8c73b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cdd0c0e-c051-4e2b-af62-6edafa7b1d9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0ba6d91-605c-47ec-9df1-126900749d09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "141c9699-5943-4d0d-a42a-30c886f39159"
                        }
                      }
                    ]
                  },
                  {
                    "id": "139e89c4-ac14-4069-bd9b-2bae4ae0a7da",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db2dccdf-dc01-4113-afc4-9cc5b0a3c7c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88c32e3f-cb02-451a-a39f-4691bc51bb69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6756ecd-a765-418f-8e42-4661f4918add",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8a9bca4a-b21f-40ca-b194-d1db3ca82478"
                        }
                      }
                    ]
                  },
                  {
                    "id": "883ff9f0-297f-404c-95b8-8e190b5f4425",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "531e53f8-39e7-4e4f-b06c-fc4ff3fa1bd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d816e48-f326-4404-9b3f-9f75358351f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57c42412-dc7c-41ef-8db6-aa31adf25bfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7462f0a7-f66c-4d50-9223-63c7488f2df4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04039fa5-05f5-41bf-b729-47865c05307c",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "464e7daf-9206-43d9-bbb3-58f5ac4e2063",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e7ddfd3-805c-49cd-bc3f-0e84dc27c41c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "679f6d24-44fa-469d-b2a1-0b8df2d67d8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ba4b4540-ed74-4baf-b0a1-e2377ce0b212"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78f98e46-cb53-493a-9922-7b7319950bdb",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d25f6c3a-3622-4a0a-8132-bcf5b62e95f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1bcc050-8f65-4928-b709-85c78f03ed38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b849ab10-cb32-4b82-a429-fbf9adce13c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e517a082-7882-4472-bb36-268c67f90e89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "889ad413-57d2-426e-9baf-910e50b84d31",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3367e74-1a4d-47d5-8f93-37380bbc0548",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67c8633d-9145-4ade-b66b-0bdbab9eeff3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f106a23c-5962-4db3-93b0-d27aa8ae097f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a569fc3e-57cb-4df9-8f9e-a703cd55025e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "011d56b3-3f43-4f64-b526-6aa49a5d951e",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c8586b3-1a6d-4221-a9bd-affb02f76f77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec041d37-ed33-4981-b613-e1294dc45f7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bd512c1-5f89-4f84-80c6-5e1fe385c368",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ef2998a0-fdc9-45b4-b30c-e0a2001ef0a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28c07010-92f7-4009-9727-033d48a2156b",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c90adbe-0012-4b29-af73-0f9e62151c37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85ebdc9a-f5ff-4d46-800a-822d206eafb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b6e0fc4-3252-4c40-8a65-4c57df5fd92c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "00c4e549-2674-4d7d-90ca-624918047f3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5916703c-da09-44dd-a594-23057d6457f0",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "873aebfd-2edb-40ee-8d72-4835090dd530",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8efcf242-c7f1-459c-a017-c24fa551468e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31b93bba-8afa-44dd-92e6-24ea7b7bc964",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "118ba91b-f9ee-4a1c-930b-204890e046e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ece8a63-a492-435e-b0f1-669d8dbd4499",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59fd827b-579e-4442-ad05-ebfc444aa9d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55d86fd2-d497-42f0-a409-d5f57172af26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fa84c31-1b77-439a-b01a-34b28f614661",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "388fae0a-082f-4ad8-a8e9-d5e23d5ac351"
                        }
                      }
                    ]
                  },
                  {
                    "id": "168f891c-3b62-40a8-b221-e5879a86a54a",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea3fa3f6-951e-401c-bfb6-b89b1b348b36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e428f76-ec50-4f66-a286-fd5a5582b0f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cead5d40-1734-4bef-9837-bd6c60d3ee48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3c0a2def-d0a5-4bb4-9486-88b43a69be84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c0ad31f-062c-40e4-b475-2d7cce111c79",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d957b688-0e41-47a6-b8cd-606f68db2d8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13852887-adcb-42af-a070-790df8fe5fac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11785e00-6a77-4f8f-b736-2e1bb5651f15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d0b98c7b-8114-4579-9923-ebc964f8e894"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cb0c14d-9222-4e4d-8f66-c1143dd85a07",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e04b8e2-1906-420b-af85-1cc3580b6776",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42720ab6-32dc-4e64-93ab-ff22ed7fa78c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9830593-c651-4589-8254-8de86173af03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "745a6c75-3b91-4fe7-aced-4647ea166cdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "681ed575-e0f6-4df3-a44c-0c666a9feec5",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29b8d114-daaf-40d1-9667-21d2c1308a5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89111b95-fb89-4508-91bc-57d3a7af9874"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca8521de-6e4a-47d9-b086-f0f50dea6339",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "48b438b9-2cc5-4821-9320-9957450b7846"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5a4d4e8-ff17-437b-9554-e9319c7a4c73",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28f529f1-5b70-47c3-bfa4-f385c4082b44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c735760-3854-4251-b1c3-b9331862a767"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30433f52-76bb-4c63-a640-4c939fe843fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "744ef0cd-00ed-4032-ab29-6b4a8b82063f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b91f10d-ae42-4d0e-bc61-918feb93e6be",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cefd9cc-d591-4267-922f-94d9c453b26b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "914431f4-223a-4753-ad92-657c15b9f23b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3adb1a29-df94-47d2-9df2-0f6cab2651eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "34f8752f-de13-4404-98d4-09970f2d9f07"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "50cfb000-b4b8-444b-96ab-ad57acceb975",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5a600fa7-e5b6-47d0-bd18-cfb299c7dcb3",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6ac0015-3ff0-4070-99ab-44c65d371adb",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "83d9b4eb-6663-4bbe-970f-2ef69484f725"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b154f09-6fd5-483d-832c-828e45ee8620",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3912e676-02d1-40b0-81c6-7e289aac8c09"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "41945daa-dfd1-42b5-86f2-94abf8cc493c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "959324db-93f8-46b3-b16e-f7567ea17c72"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "19115309-542f-459c-b583-6c5780d089f4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ebcda090-6ae3-4375-b89f-78934e74e838"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "decea377-832b-4db0-9405-1530ff6791f2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "32d85a5d-b16e-40b3-91e0-bda9e0f6ad47"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e005218f-c7f0-49f7-9f4a-f242eea76bd5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d09a0364-7fbe-4a8d-91a2-27828fcca819"
            }
          }
        ]
      },
      {
        "id": "f4f110be-e35b-4f74-8e24-499c851738b1",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "6acd89ef-c4cf-433a-a414-2bf531ee0e2d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c2370cd7-5596-43db-b3b9-fb2d0a43dc1b",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "9573454d-51fe-4652-ad2f-afb204d7f443",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67ef2bd1-9454-4d65-8078-5558f3b4fc01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9ff6f86-9e6b-43a4-b03d-3f2eb7c05c9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "552b52f7-6bf0-4ad1-bc16-3105341143bb",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1984d993-467c-4187-9824-d7d941dc9b3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ede91e16-d65d-4fef-9cf7-5f6022386762"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cfd9bd7-fdb5-41e8-b067-f0d8b31462c2",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bb827cd-c3bc-43e5-b6ee-d09797182d1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef05a464-a67c-46fb-976b-f9a167f926da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e98ffd65-c1af-4dae-a817-5f9f9dee010b",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33c496eb-70b4-4848-9ef1-7f54d33a6d43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76c647da-489f-476f-bfee-3a3b846c27fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21fec020-2655-4e80-8a68-a00c9ad71c4e",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db8f3fdc-16de-4277-9349-c0960c002094",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f06e80d2-1ac0-4ed8-b773-4d3687489e2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e45d7701-4df7-47fb-b43a-0a6e260fe42e",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ca5ce48-1272-4277-98ac-11903b914bb4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29cf109a-8f17-437a-8932-86c819f84600"
                        }
                      }
                    ]
                  },
                  {
                    "id": "594aadf0-7fe4-45de-b208-daec29e35090",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4ae862d-0f52-4d58-949d-06c5d212b3a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff459584-192d-40ea-8800-a5c8b59509c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ea11e38-1ad9-43b4-8422-7c1a9c3929e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53df833b-d8bf-4f8e-bb14-8612d4ffcbff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d311425-563e-4602-991a-add3e8db37e2",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "426d432c-713f-4820-b1b5-6ce530c8af17",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c6e6c32e-8695-4a31-a4c2-d5a28254d010"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49020a20-b575-409d-bc17-40ecce21d9a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e1c60b2-f8d9-46fc-b51e-732f27959928"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b89728e-232d-48e4-9e4d-8d584771fe33",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7daa6a1-732e-49d7-aa1f-39e6f22fc488",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "153cd779-d41e-4787-8b90-2227695cc3b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7409b32a-7e23-4e74-acc9-8982c61965f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "296833c0-660a-4113-b372-103ef6e26d04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3e4289e-c9ff-4da3-838d-99a492837e6c",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87ce829d-850e-400a-9c13-cae513d08330",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b6fbbf3f-4249-4a85-8e9c-fd0ab8992dee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78dd4db3-c04f-4c75-92c0-9d222d59e42d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a594dd4e-65c7-4b69-8a97-5a8c1c8c9c77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e400a1a9-4e59-4bf7-a36d-d70db1f0e529",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b907874a-df63-4f5d-8a73-4920701913db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccd90a4a-33b9-4f13-848e-b7face58bc2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea936cd1-e8b5-4526-8b46-5af22f2439a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b058aa26-5252-424b-a673-d71920347fdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e4cfb07-0151-41d3-8dea-52c4102b7d91",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1d943b1-63bd-4bed-b393-dae4c82bbba5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8eb12129-d6f7-44e4-8407-6dc6898c951e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e574b925-35bc-40bf-8b58-906a3b910b90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "550d7410-c8be-4773-8e2d-12359ffb8f88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2fcc90e-655b-464e-b9e7-f53c0dac308f",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a5095fb-11d2-49a2-9d94-1016ea8ad3ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f5a55d02-5684-4a36-ba07-407ac3a07bf4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb1e9817-6c36-48f4-879b-769d2088a35c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5240d533-6f80-4bc3-a392-8e8e221cc8ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e29811ab-c087-4873-856f-646ebe1690bb",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acd71431-2b9c-4950-8585-98c819f99c4b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6cce7623-3f5b-4bff-94af-c828e72ef997"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b46c9688-22ab-4017-91d7-b22b0cf4902c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be6bc29e-4bca-4f32-b8e8-1ed9694dd247"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27e3a44b-168f-43b2-83a7-244c70e4c4fe",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37ad9422-282d-4879-84af-0b74328a4364",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c3c276ce-f73c-42f0-bae5-48f0035418e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c3e4494-be6c-4779-be24-957108e36156",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e8947c7-c4c2-4187-9e2f-e3023f215fe1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35809340-0360-4ec0-95fb-04f452c3409b",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5c1e440-bc9e-4d71-a2c2-188e020718ee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8d394f97-685e-4291-91d3-bd524345c50e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2f557b7-4c72-4fef-a896-f9c911f36c8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a1ddf17-b12b-4c9f-9083-9fdca4cab640"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a74ea68f-4d18-4cd8-8439-577816a4953f",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57f6c697-f286-4512-9618-159497cc9941",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0a63b48-c233-435a-85a6-61a9b96a2918"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0b12f1d-dbf3-4800-9929-6e18a13efd5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5674483-88fe-4333-83f0-0f885ac0c5b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30588e24-276a-40ea-a15a-654e027bcd82",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fee5253-dfe1-453b-9eff-f9ab4a7d8e6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3726fd65-7368-467b-a4f2-7723685b1334"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a77bda9a-3fda-4633-b3e3-2e4a8e5da485",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fc0cb1f-6ae8-4277-aa8c-d8f2aa92dccd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0165cb6-683c-4ea8-98c7-1cd085d296b2",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b18936c5-419d-4ff0-a40f-a205f84c7d0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b8f50fe-2e1a-4e19-9bc1-624560d2e06b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff4e882f-57a0-4196-aa44-b0198b0b4d87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91b91f00-cae2-4223-971b-8059d938ef7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "136b072e-2a0c-401e-9a10-1fb0565124d2",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84c776db-dad5-4f1d-bd0b-bae9c5926f53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5831a78e-1b06-4683-bc0c-28c895318e6f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "def50abb-3604-400e-aba2-0dde83d866cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5daea277-c3ff-4bd2-a788-14e48cccc5e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c885491-ef7e-4725-ad61-7ed43d180c6e",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e94b9ea-23fb-4608-a5e8-e8aebaac5915",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70b0bd24-6e5d-43f5-83e3-3f1f6113f9cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d2c541e-426b-42f7-b6dd-0633ea34f411",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "662681b0-be44-4500-831d-777497942fff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f33d869-fdc6-4cdd-b79d-2e143c7bc0bd",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fd5e964-eb3c-400f-a4e0-aad34e991675",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "354c888e-771d-4d85-be32-6458622e5858"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36341d89-9aef-43fa-9fc1-e0ffa2a69ec2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "698e2442-d7b9-46ca-8c31-d76af1ce61ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b5bb81f-e6c9-4f4f-b9ec-428107e0997c",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c121cff8-b5d5-4e87-964e-2488676c0c50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8367bfa9-da8e-4ca9-862a-57c920c15ef8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d7fb979-0924-4804-b122-7562c58bdb6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aabbf0fa-3ca6-4fe9-956d-820c1586aa30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dcde272-87b6-45e5-bba4-548a620d6707",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af05aaba-c377-4333-8e34-b2106dd6be73",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "903afd34-1b1d-4771-b41a-5514f0b50967"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab874bea-2af7-4deb-968d-f4a8c42bfc4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58304737-dfa9-409c-b6cf-858f63e17443"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3723ddff-6913-4c9a-a081-ac86c11a9022",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfac99cf-eba7-436a-9721-c5ef379042f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "99602a3d-4364-43ce-838a-7035cb542dd0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd3288f2-1afa-4b4f-a8b8-1bbafa4a29df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5baaf6a-cd23-4e96-aef7-3f775c39863f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "253ad756-2236-4e3d-94ef-ffb8e2ecfcbb",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8876287-3740-42bc-b64d-a8d9435da25c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "566e0650-eee7-41f1-9d41-5f26fc7dad0d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99353a3c-837a-47b4-ae42-66d230ab7a34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6b687ad-13bb-470c-8306-5d6c8aff60d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4c80864-b4c4-4744-b93a-69a20e138258",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47ef5ee0-596d-4d9d-9593-89ff2f9e8eb5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a5655d1-1fb7-48f6-b3c0-1ed5170da069"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22aabd26-afd8-4049-b045-485132838ef1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2848ba70-0965-4b3a-9cb9-10beeea82e61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cad630e6-9509-41cd-bf56-67bcfc87259e",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7072c265-62f2-406a-af9b-3b5dcefb96d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "374dfc0e-c0a5-48ce-b925-c0ce08a1a5a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93d38d50-ca17-4e2c-8665-e6e569fd2971",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b27e906b-f387-46b0-b4c0-36a113a24ed8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92d45350-584a-49bc-9236-0e3002039b60",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f11a2dc1-40b1-4369-990d-9fc754a277fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c43f2d3f-6c60-4c35-93f6-5db0cb87cd78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3166b54c-f984-44c0-9cb2-c4294d8152c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5af223cc-96ae-4256-9db3-a5f0d8c1174f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfdc25ec-a38d-4113-ab31-056770c564f2",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6a52a21-9d40-406a-a57f-ab1888686a1e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1198806c-06df-4b0c-a4e5-03fdddee9e4d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f64ebe41-fac4-4458-9179-5716f34d6f41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bcb0aa9-7122-45de-87a4-54eef4e451b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98b5311c-b1c7-4548-85e4-d7c8f5449913",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33e9bfd0-781b-4d15-b62e-125c42d2440c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ce98f34f-1618-454a-ac62-216c6b420292"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3274d35-7abd-4978-81ab-c1132a5edcf2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff5b924c-1b45-4ee3-97b9-1b47d362f9e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2696091-3143-4639-a17f-c9d50cfafd85",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fb80835-46e0-4099-aae0-ffe84062c246",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ab44624f-4a62-4ff2-80d5-27a73099a659"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f0c84cb-f728-44aa-bc06-cde577556c82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2be70bdb-d966-406b-a46b-0c41824cd04e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7fb5af4-3a0e-4593-9354-bd9a194e8f20",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d124c27-f737-40cb-acd6-b23cec02f8aa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2c008f23-90fc-4673-bb3c-894364c1133d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c44ef918-917a-469b-8093-98325aefa6ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "293cc51e-febb-411c-8a86-0d197af4e463"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8832184c-fe8f-481b-8233-6b3c28afefe7",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "112dbc65-f77a-453c-af33-a193ed619abf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e8d753f9-7c7f-4d6a-9bef-64a27c328944"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "458f52d4-f256-452d-ae19-0619e905a3a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1de08e0-8407-46d1-b33f-e38aae78f2b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08a865c0-e270-4faa-94af-33b5b0cee7d9",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77c9341b-8184-49e5-bb0e-c04908cf0905",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d018043e-419c-4f2c-9fe3-1d3ef77c45a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0723ecb6-bdf4-4600-a1fd-22996d8f1ea7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea9b5cbd-77bf-406d-b697-a62d99c9fe55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31153a18-3f0d-4921-b325-5eb398845f3f",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a229074-be84-4163-a739-7da039adb3ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d6df17d-112c-4c92-b34b-abb98669ea77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89339ec5-1729-4711-8fba-8e5151ecd3d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56b543e0-2d1f-4f2c-8543-6467a54fc269"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b4718f9-9d6e-4f13-a9a7-edd2fd57896f",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5f282f7-e65a-4965-9ffa-af951b837db4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4c0ba77-4808-4d10-977a-9dbb6d50908a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "085bc760-ff47-4093-8067-b0be31bb3dd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79e16ae8-13de-4052-a79a-d9236a9dc035"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f93410a-63bd-4a85-bbbe-e109210d0aa2",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2d92432-c298-40e0-ab3f-3ea4ba6065cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab2b00b0-3728-440f-8f41-b4e90457ecdf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40b3f4fd-c937-4201-8753-17a46a08d622",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33c39d76-d29b-4f15-985c-5989d8db432c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ad4ad4f-2aa3-430f-a4df-89a17af36314",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17b02309-eb32-44a7-87d9-04c458e0a6a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5298827-b36d-4dc0-bb2d-9ce042c07b00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1522b22-63f1-48f2-a7a5-3fa2c716dbd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a893b801-8620-4b22-87f4-832b2399485e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c56abe1a-f6f1-46eb-a35c-510d8258ccb2",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1147b62-545f-4666-92b0-3af8b6c89df8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4a25fbd-d0cf-4b77-a305-8d9a55062f50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3645de8-8f5f-4a0e-8b1d-39bc34b038e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bba02d08-e5a5-4d6c-99df-7e82901cfac3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb695f79-8e6a-4872-b97a-23de6103fd6f",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "089f0f5b-689f-436f-995b-dbd525fc5330",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "427cc226-6b25-4553-8bda-6992fb061dcc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76eaaa7a-aea4-4dcf-bd10-c88f8ce500b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d5df994-18d9-4add-bd21-a9a5fed4d644"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a97e781b-a6fb-4e8c-8f55-92139242b259",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21887091-e2dd-4cb4-906f-e56ffa3d0e17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2a06b07-65c1-43d3-b6ec-7ffdf931bfb8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36de802a-abbc-4829-b30d-2b9e2f40caa5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b466a23-a90f-4ed6-96f1-df40efc43a8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e7446a6-bc76-4ced-b4ba-99dce87cc71a",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5df6211c-9349-4543-bb67-fe145ece62dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d030939-4a5a-46f4-98df-866f847c76fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9a5e956-05fe-4959-a978-f66f5e1d29bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be02ea0d-5711-4d31-ba60-3aec32320d25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46f46fb5-7f2f-401a-aa6f-1a9572add187",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c83746c7-3252-4948-943d-8826108d67af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49cc9f96-ecec-40f5-9ad1-5423766ff12b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7f553d7-93ed-40d0-839a-c4d41f0071bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52aeb7b3-57a1-4c18-ae36-0943bde5e7b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0c9acd9-fcad-4acf-8925-6a9a46f6da3d",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3705dfd-e2df-467c-b39e-0a69f402a6c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ac30003-2612-4f7e-8e31-6eba84d5c086"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74eed307-2238-43eb-a0d8-0cedbe02ab3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aaf12a50-eadc-459d-86af-127d0c4b8785"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05ccceeb-72a3-4f09-9ee9-5a7ed36e2f09",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2f01054-f5c1-4621-8e88-e6732bb4f347",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3fc354a-12ff-4349-b88d-0426d9bad0a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "554e3a29-3b51-4b94-a1b2-8d25fb39fde8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab414d2a-5ef6-4a99-b0a5-31c21472425b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b919d885-55e9-49d1-9ac7-755ce0e84a63",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eabac6b4-42db-40cc-b266-966b67d89315",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5f6837f-7313-47a5-aa09-0de88093dd0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd5e2037-5836-438c-bba8-40822e3abefe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43267170-93b7-4a52-872c-dd68d8a2a311"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e5dd5ac-6dcc-492e-a958-b71e89f1b935",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95f53bad-cbed-4556-ad86-fa98aaf30a06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f691ad77-79bd-4c9d-b7d8-9ebc2d463b33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "369c59cb-edfb-4046-bb27-6ff4ef9567dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca6ba4b5-55ea-483a-bd93-793d6f088803"
                        }
                      }
                    ]
                  },
                  {
                    "id": "672db020-ed8f-44ed-878b-ec4993b6c47d",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1fbfeeb-2c47-482c-b9a3-c704cceea1bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58a61ca9-589e-4bf6-8058-ad6d855072d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e62e3f06-6491-431b-9512-a9d2e236fbce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de633ebd-aca7-4542-b994-f876403304ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b146029-aa4b-43e0-bf66-f41f8427857a",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c238c259-4b1d-43b5-9292-188d97ff240e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e2372a9-d04d-442d-a000-3b6f17d4d13c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc6b7f62-b404-492a-bbb6-7ffdf9c1bcdd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d6e0fce-3657-4f56-a6ab-dfdf89ab8379"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99a90005-79b5-49e6-81ee-0f22f6bf5694",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dc0c5d4-8a19-42a0-a46f-40d83f9279c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e1d792f-0e61-457b-9e9b-37936d5975a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58a137da-1c69-4baf-90e6-1d2859c28997",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "528d5fe9-ab54-444b-8d87-fefeed5150f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b71eec96-7b26-4ed0-803f-072bfe9afd40",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "101b2af1-7708-41de-806c-474a1d64a35a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07709ebc-a5cc-4396-bf6a-0cad8f6ba4de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f28db302-1193-4bf5-abe7-788421b62f6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bac82901-593a-451c-8e7a-af10ebed2909"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54c6fb68-d73c-4afc-84ab-af3ea7dbc2aa",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "724b506a-e16c-459b-ad1a-1d0eeabfdf21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f96a35ee-f16b-4818-9d43-a4be20a9c505"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34192d5e-6c6f-4204-8960-fd370062945b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6f64752-ec7e-4f3c-a845-f29bbfe3a396"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5bd8579-cc8c-467f-bc46-5f0f29654184",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e480cb5c-1f38-40c0-9141-d26c524b99a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d06940fa-9f03-4e14-841e-f03005c3b395"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2869d0f8-cd29-4625-844c-cf35519730af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68d1134e-45cf-40d5-b872-3fd55388aa75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dabaf67-ad8d-4b01-b073-a9c679c9e5c6",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c135ca76-f6b4-432f-a4dc-2816c13e1259",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08525401-1af8-4f67-86db-21b8233159e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a69f13d-b1ae-49dc-a751-c6234cc99bf5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29dde973-4352-4499-b973-41bfadf2b877"
                        }
                      }
                    ]
                  },
                  {
                    "id": "999cb6dd-b27e-488b-a840-9da2826f185a",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b59d0d8a-4040-4103-8645-238b6de334ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73cc8276-bd46-457e-9e2d-13d01264dbd7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "181e2fdb-1585-4e44-bd31-a438431f74cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c1e17d1-e342-406e-9c0f-91989275e05a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bae736e-db38-4c21-ac04-24ece4971afc",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b19ec680-4b29-419e-bc75-f9406693506b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75dfffd9-6880-48cd-9f26-feb60eb53599"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0e797d1-87a2-4d75-9c0a-bbc31f42b3db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7676980-52cd-42b8-90a9-353f19479680"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b22565cd-daf9-442a-a045-cdcaab9646c6",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "debba21b-a2c5-482f-9767-7f9492a4246a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6efc50f8-2f5b-4558-925d-bb8e652c0ac4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a202c01-13f2-4824-8b41-2f5406623d81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df0249bd-b457-4c44-80f9-acca97c277dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a3224f8-60fa-4da7-bd33-2b7be73a7f4f",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30516439-aac4-4a1f-bb22-acb1c612e5ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1d9bca2-d974-4398-8342-a72513176a3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46fd4cc8-3f23-4e4d-9f5a-01596a326315",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc0549c9-340c-4649-afdd-8e4acf4dadea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5150317-08f5-4376-ab0d-43e44118b76b",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5966bae4-17e4-4efd-8c9b-a892def39f37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "263eaa6c-30d2-4144-80c2-efe1664ad05d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e932bb1-5273-43e5-84ee-f76af65ccc88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f902ed6b-738e-47f5-8032-551afc5793b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f31e2d53-bd00-4e03-b579-f3f0ffe1b6af",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d14741f8-c255-411f-893c-4669855544ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8f6c67c-fae4-40d1-a33a-69e694bc4814"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62b4167f-f128-44e0-8d65-4e262c6da9aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50fbeaf2-f787-4ccc-888f-1fd3076b187b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53432e51-185c-40a3-9116-bbf6bc4d28ec",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92e93d12-5c2c-4e55-a55c-9bcee69a1827",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a34cbd19-4532-4771-8cf4-97521e3a20ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53e08b7c-b82a-43ed-879f-5e2190258896",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd52c30c-defe-4290-9cf8-0b17f6537cf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "948dcfc1-89eb-43fd-802f-f0f13495744f",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f8f7167-0e93-4822-9c7a-0324a3fc2cb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13ff5b1a-70ea-4cf4-a98c-b112e073bc2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab1cfac7-85d4-41ef-b7c8-b3caa497b86d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fee4dd4-59b4-455c-88b5-8a8dd84fbdef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ade8e3be-550d-4eb8-a0d7-6c5112e6655c",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81a467a9-b055-4e76-8080-cfdbc55035b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "05aab7e0-c793-45c1-8041-5eae837d515e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f20cc460-75a8-41e5-9afb-f3f66a32dc96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "176ec528-7cd8-4d39-9cc2-8fa25e230cfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffecd7ab-e103-4f47-ba86-0964d61f6335",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f32168a4-9773-426a-a652-ae763bf8d3af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bb137500-c31e-406a-bcd5-d2eea34a448a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66281fc7-2929-46bd-af03-c74cad5b60b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ff61294-2687-4d1b-bbb6-400de2b190dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e834f072-13a8-4cf3-9445-4cde3032f102",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e472e844-0818-44ab-ab71-29925aaa48dc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ac7fdc9e-b6f9-443e-9818-9df8ea7d98b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1886c3af-0f3d-48a6-9ba8-f14abe4822d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3016e70d-7e94-4e64-8651-1bf323af2067"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79fe8195-0c34-4685-84fa-7d8c402c040b",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62bcc849-ec13-4431-ab52-e37cfd4b99b5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "72bc8ad2-66c1-408b-b4b0-4d3fd7dec29a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87a4841d-c2f6-4d1d-adac-ad85c3d2ab32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6cd32002-0693-45e7-8fe0-e6a2155404ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38f82b8b-fb3f-47e3-88d2-de2b94cf31f2",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48b588ac-c7ce-4e14-87cb-5143bedd959d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "64b78c02-67c0-40c2-b857-cedf0d642b76"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d87d949-674d-4f94-b98c-77ac06eff606",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cff161ea-88f3-4a17-aec3-2d37b991d9ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c76e377c-e221-415e-a1ad-b2aa46e153cd",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b8def95-f6ef-41fe-b75b-d25544d8bf80",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5cd2d333-5265-44e1-80ec-63cc88cd3671"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "983b012f-d034-4b31-9a8e-0dc602fec2dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "350d0bd0-def0-4cf9-8b15-58f2414e3d28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17c17ecc-d0e7-4e7d-ae87-52fbd94cbfc2",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "373fd19c-dd90-4a6b-894d-b1a9dfc8c8a3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "73996fb4-abb4-4353-b84f-5243d50b55d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4736a96-5eeb-4870-a6bc-186548cc532d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06aa19aa-6efe-494a-b481-327b5b973404"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a40a9376-b3c0-4a44-a97a-d7c0d3b77724",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a57047a-4d6e-470c-baf2-2064fc45e3d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "749962a5-62b6-447c-9ac6-4add21e3a625"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37eb3a9a-7d47-4214-bcfc-407ca8c96d9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3d598ea-9d35-40e0-aa3a-a5c56835b461"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f327ea25-8c23-4836-8aad-b785be554636",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cbc1f00-6892-47f9-99ae-deeda241f90e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a981ba43-497c-41e5-8299-d517c01c70da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81e967e1-433e-432d-a427-4d61c36d7fa9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26e9ccf2-7068-4fad-bb46-4f039265f332"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ef077ff-8b68-4f09-b553-b01759fe433a",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9fc7e22-71de-4af2-beab-1c508b75058d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "20448aa8-746e-4a56-98c7-0feadc9f4e8a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cf91683-2071-400c-aeee-3cc2c4647b33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e9a06cb-8313-4c5d-8ec3-f7f560721d00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7107f95-b06e-4e23-895a-9eb9ae976476",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a786b63d-b0c4-4db5-8002-51f809187e93",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "07a59c11-eb13-458b-b213-a608bd6b094e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a814bb68-3e61-434d-b7ac-5f9f799c2ef2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2b44ff6-2853-49ea-a4b9-b5929adff514"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bae8e99-533f-4448-90c6-ac79208a772a",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3bb143d-cb68-41d6-a78a-776e7c7201a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed13a699-406c-4ee2-8a1e-189105fd932d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb983fdd-ff0f-4849-a7dc-46f984f3ec01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cd23a1a-1614-42d2-afba-fd2b99179934"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04b1aaab-41e7-4b63-96fc-f2cabaa0110c",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "badaf924-833c-4ec0-ae9e-af721d727916",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "84c6035e-98d3-494c-b67f-619ec971da23"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d37fd999-1a26-415e-a379-278adff91455",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00257601-1eb3-45a8-974f-f4784c97b4b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "312bb118-284c-49e4-acf4-dec49fa83a4f",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f92c281b-d737-4ecc-9ce9-897a0759fe75",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8bbf1c39-adec-405b-a508-0a3341e626ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccfcef13-ae3e-48df-a4c2-36e0731a9979",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53d242e4-d254-4ea4-adce-b52f564b50dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5183175c-3cde-453a-a81f-e9066576eb7e",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cefa04ac-0e6d-4b13-9ef1-e52cd6ec73b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7da42bff-dec2-4113-bafa-c3078be9657e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "116ea108-2bce-405f-ba39-3e2780af11be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a36aac3-ff3e-4e27-a532-fbc3b95eecd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10d2d5c0-335f-4ccc-a1de-69163217e682",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57f06a48-15ac-4ab8-81cb-789fc8df380e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b5f3474b-77b9-40d7-a6a8-ae0d6f3f0ee7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76029276-dfa1-43bd-9ffa-aee1a77647d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e17039b2-9b42-4f73-910d-6b33c1080c4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a1d4c74-de8a-410d-b843-e6c84e9f5a3b",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bf638ec-0c4b-49cd-965e-9bcceadc1106",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d3b0f6ad-16e9-4ff5-a8a4-e270412d4f2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0a0558e-3bca-4b83-9c3b-86a97905f13c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4edd915-1b91-4062-89f3-b4fabe1ff3d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cf96bc1-07dc-428f-ae09-b2a92b76dfbe",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "470de7a4-4237-4a39-8176-9a957d30020e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1fd54a3e-f38b-436b-a296-efa15ae62459"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6880d796-465b-4fc4-a142-006f861cad95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e69c1469-3872-4e0e-84eb-bbf38991b43e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83075493-20a2-45cc-aec3-605d9214fb81",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c3d3524-571d-4ea7-97fa-05ab5ed4bd4a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c6012c2e-740f-4e0c-9655-bd18edf2fcfe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e628bb0-c496-46b8-9ba7-b47d14e8bdce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75637f37-d2bd-47bc-a8a3-491930a42651"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff7cd0c0-b37f-4249-9b0f-5f1f0908cdff",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ff72986-a6a1-4cde-a377-a75f8e87eec9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "36b6e3b7-83ae-4485-add4-9d746384f591"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "651924c3-dd09-4f6d-a002-684ae63e0d87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "daa4ce61-723c-49f1-98fb-0899b6316701"
                        }
                      }
                    ]
                  },
                  {
                    "id": "259d7566-06c0-4fbb-89b8-78c18bbf4367",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89e70796-e6af-4f0e-9fea-db4e5cd5b151",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0107bafc-196c-4e72-9ecd-67bd066fe375"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90dcbd42-f316-417d-a777-edefc2b568b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fd90f10-a6ad-4a1f-b090-ee46ef4fe0d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db8d6117-c039-4293-b157-7492160d75a9",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eababb02-0570-4bb6-86eb-f3e948b4f86d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3021ab1d-b34c-4f1b-b78e-74cc2e1af40f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd314671-0a64-4e7e-b275-d7379dd0f8fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38a30b12-4db4-48d7-b92f-cc6af496d880"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e440b367-af95-4fc6-8ef3-7b6f4913e506",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6a25a23-b918-4ac1-aa4d-0f2b425fb36c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bdabbc0d-5839-45bb-bf46-484eb278db9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "858379fc-cac0-4fd3-a3b7-e0ac3dda3c32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb1a2d17-ab86-43b3-9252-c7ee2ebaf7bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b663282e-5627-4de4-9481-1162d7a7b6d0",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42e98fe3-05c9-4f03-8cb6-145250d771e2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c01e0d97-d113-476b-beb6-36c37fef0912"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a60912cd-dd2f-4b73-9e7b-111fb2010f93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ec2a0c3-1ea0-4e5f-911a-2cc2a8948cdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1df93315-6a87-44d3-b34e-e8a2e5b1ab0d",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dc47475-0273-4d4e-90b0-4d5c1bf7d53a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "904bb97a-5f55-4a8b-8dea-224cccab79e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d99b80f5-e9a2-40da-9ac9-57f6d338a277",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e892c68e-4e55-4d06-8c14-c07c85ab4678"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dfb167b-a324-4f82-9f9c-5bd3fbd6de90",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bad8f5e6-0c60-42a1-b1ce-d1fc7ef4e920",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "446c0216-0160-4b79-ac46-b839c5e7eb4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91a26a52-3e5a-410d-86cb-8d6aa6621f7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1846b554-cc28-43c1-bb7a-3bf4f2e97565"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd424604-eb0f-4d42-b0e2-62762350194a",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b7a54f9-a9ad-47b3-aa9a-f2859c48c6ff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "10c4a48f-534c-4e37-8aff-1c9405ccb07b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff3f734d-92e4-4033-86dc-4f88013dfdf0",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "275e44b1-7542-40de-95d8-abdfda4e255d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9fc852a-e17a-418a-b888-cece7d7e1fa0",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7fde8c4-6d8e-452f-9fca-bbb5df488b57",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e29103bf-7138-4c29-929e-dfc9ca4ad3fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb4dfab9-e5ed-43d5-b125-36281582c3c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eedba32d-94de-49c0-8017-40960b39c64e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5044854e-53b2-4630-8fe3-82371f8ca24c",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc5088c8-d976-42c0-aa44-2c0a98d5e1ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e86be119-fb2e-40aa-8cb7-d8bd81ea9440"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65ca3861-25d9-4d7d-afc4-36204fe6b485",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "994ae68f-b978-46cc-818b-cb52b23af39e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a466f23-35af-4393-a33b-7594c7fa95c7",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "902cfa3a-2726-410e-a0c7-cfc8534dcaf5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bb37926d-839a-4f9b-9f1c-969804f1679b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52d0e74e-78a4-49f2-8455-0de39baefdcf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37d7d8f6-2d63-42b8-b34f-f15d460b7066"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4ea3807-776c-4f36-9a32-35806fc9ef11",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c3ea74b-2b92-4116-87d0-f270690775a4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1aefba38-a742-4616-84f4-bccf5d40b414"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "888400c5-ac22-421a-81e5-2193cd0d4e85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe25309e-37c7-4051-ada6-a2d6d1495f51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac8d782d-3ee4-49a8-981a-2581f5951f4e",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "007bdfcf-62fd-460d-bada-b8ee04884fe2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "89da7b54-36c9-4b2c-8297-6c7267b64648"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e962452-b9f1-4e4d-a288-e2847581a578",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c7a3f24-e282-41fb-9471-3f1dd8c5b40a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74b46827-7830-4d67-9e7c-c21917c69970",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38a7016c-8e4b-4cfe-9025-56d54df06dab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4d56a60c-dd4d-44e6-9eb1-3b5188b92975"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1d3875d-d96c-46af-8475-ccf909374dfe",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa56ec41-73bd-4b62-8576-9cf459945abb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c260d86-3b8c-45fd-b660-7f15626ce91c",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3c0d81e-81fe-418a-9070-887e68e1711d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "33e8299a-5e2b-4aca-bfa6-a5ec702a3bdf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fe847c3-2ba9-4fa7-9d3d-8274d1056ea3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e7e1df9-7154-4f57-99c6-2174bf671c57"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "55b808d3-dc6c-430e-a7a7-60f637dbfd2c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "75880450-8c34-4288-861f-7c700f400c3a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b6046013-8b97-488c-81ed-6cbb6a4ec3b2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9c79c294-ab21-4046-bba1-464d6b22a479"
                    }
                  }
                ]
              },
              {
                "id": "d1ef6b77-16e8-4fe6-a244-de0e94aa1a94",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fb46615c-e6e6-4d2c-9402-33d444cd80ea",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d0b32ef-0f1f-4e81-b8d7-eb1a4a194024",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "519ef80c-34f9-4f99-bb8a-fb61a15a994a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03d2b6ec-edf6-434d-997e-1051da6ce27f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1175a43d-64cb-4c52-91a5-8067af5e9390"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "49f21baa-3ad4-4c49-83d1-d0b75efe70e6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "92e61640-4b74-450f-a5f7-c83631b234e9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ad80c69e-32e2-4b81-957e-e7d5b35aeeb1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f034e0d2-26a0-4fd4-b3d5-12aaee5dc6ee"
                    }
                  }
                ]
              },
              {
                "id": "ec6f76c7-32fd-44af-8545-9479730edd0e",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "77ed232d-9d17-470b-a8f2-2a68fe69a8da",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b466f335-d4e7-4432-a1a8-531d4f14f768",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "41d80f12-b1b7-4bda-b366-b324946edf13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b7c57fa-0a86-450c-84d0-321ff6a6dddc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7efc2502-60de-460e-a9ed-da3921cc909e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "77ff1847-d3d3-44b3-9edd-d79497c17801",
            "name": "Positive Testing",
            "item": [
              {
                "id": "2b8d418d-3a33-42db-ad8e-7f07048db267",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6ad04ecf-8fce-43e4-9b42-2778e6f383c6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "735b35f7-e975-4c57-9d9d-9e6ec55a867d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8211d5c9-8cd1-444c-a52b-3f7c7b850a73",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d3a9f423-5a88-480d-aa3b-4bb641e81a2f"
                    }
                  }
                ]
              },
              {
                "id": "43ac618a-d36d-46b6-aa0c-7a49bd790bb5",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "68c91756-47eb-42f3-8dc6-829d32f13df3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "afbc9403-a847-4b67-ba26-5ff4c7061a78"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ead1a4d2-3ddc-4208-ba61-0ede7daec57e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c9fb4693-ca28-442f-9d60-68d3cb0afeee"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "374ab2ce-d3c8-49e7-9a9d-5f9fca2d730a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "c493a478-e72d-4a1b-9f85-7d44497891bf"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "14b17589-b91c-456f-8e0b-af84362136a9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9a413e58-bbc0-49f5-a39e-f5612c935e1a"
            }
          }
        ]
      },
      {
        "id": "a1c8cc40-87f9-44e6-b81a-f3ed578c23a0",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "62d40d62-1f69-4a51-a6c5-8e22286828bf",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e21633a8-c3d4-48d3-a4fc-cd5b3ec4c62d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "47e0906f-34f3-479c-92db-a20f5c526476",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bdf7b27-5f2f-4e25-bacd-e102dd28a3f6",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "0935c044-aa43-4c0c-9759-0300941c0133"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7d25a5e-3ac3-48bd-8da9-95524a5a7ac1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c83e2d4d-acbb-4612-9e4e-22ad5d408d09"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "515b9127-8e60-426e-a112-283edd067216",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "37dd8d68-4584-4859-890b-a764b677dff8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d9480d1b-b79b-4c57-b55b-1de9268aad74",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3ac4366c-0932-4808-9b4a-29e7330478a8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c717a86d-acd5-4a5d-a908-e2373cae2425",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "db583988-60b9-492d-8796-14394cbadc59"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ce4ac5d7-5313-4b4d-86a0-d5dd968ee197",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5c46a871-c1c0-4201-9447-f61fafeda08b"
            }
          }
        ]
      },
      {
        "id": "e6a4fd41-2081-4bd2-ad4c-5aa4508bfb24",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "34891965-1a2a-4ba5-901a-fc54ccc58df8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3aa1915a-9904-4939-a1dc-d5a82b6b1fa5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "117323ab-4c91-421c-b291-b7ba4849eef3",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3158a0c3-d864-4b11-9af4-c1a5ae4f2d2d",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4ba5f3c7-94de-4507-850e-b8be2f9a8b13"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa5f08ed-9033-4da3-b15a-1b9f93fb2557",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0cd69929-f3be-4903-9c8c-1007513afd80"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3e8b470c-74f4-4881-9981-3c2cd9412216",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5446e340-9875-45fc-a943-2c985bbee45c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1c903da9-2b4c-4d8c-99e6-99d51409195a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "de4c306c-891e-49cb-8d0e-c9ae1bd04523"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5b16cef7-7c95-4f4a-9822-c94f525098c8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "ee3ca4b6-61c1-48d8-afcc-72ea38d0e3e5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "55b6884e-28dd-4d0b-a98d-09313e82be22",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ba68779d-180c-4fa5-8a32-a91005957141"
            }
          }
        ]
      },
      {
        "id": "733eec9c-cc8e-49f7-bcaf-880cd1a51dfc",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "a692db0b-11ef-4e6a-9115-d0bf7b8a6400",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8ef764ce-17e3-48e2-ada8-924779f4ef1e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8b828b60-a929-419c-9620-9dedcd8fee1c",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a4e307d-c62a-480d-b79f-898ef244f447",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bc4b935f-6c7d-4269-9768-32405f73203f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91f975c2-9a62-4ff2-a1d4-29fbe542e974",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b5b9fef4-1ea7-4ae6-9ba0-dd3e695631c1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a23dff73-43a0-41ee-8d41-cd83a09a612d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c7db78c5-4e40-418d-b6c5-f037f9b90083"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "77f52708-91a4-40ad-b5d3-249569d12aaf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "46ff47be-82f1-4786-b9ed-8102933364f5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "12465e14-0edb-41ab-83fe-63b9559b48b7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "df90dd0b-4f42-4e7c-918f-f04551b9c02a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "28d67f9d-a8f8-40ac-9669-96a035327eb3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9820b3df-0524-429a-b59e-d4df2948d548"
            }
          }
        ]
      },
      {
        "id": "91c813c0-d046-49d3-9335-848cc380caac",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "69a277bc-69fb-4782-ac68-760b9b6df24f",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3cbb5764-5330-413a-8852-77fb14011ee2",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "a1912243-597b-4d1a-a505-ec37a7cc76b5",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "05d44115-3d24-491c-894c-b172e169eff5",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cf6fec43-c06a-492d-a0c1-617a3c071c55",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 77
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 74.52280701754383,
      "responseMin": 5,
      "responseMax": 732,
      "responseSd": 85.39097083938434,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1707352422917,
      "completed": 1707352453432
    },
    "executions": [
      {
        "id": "bae3ef6f-576d-4023-8c33-0d6c5612a030",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "065cdcf1-0fc9-4c19-a76e-883d57630de3",
          "httpRequestId": "8f39ef44-18f7-4b4d-a643-426358e3d4f8"
        },
        "item": {
          "id": "bae3ef6f-576d-4023-8c33-0d6c5612a030",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "baf75d20-e8f7-4f21-8906-538d243f2327",
          "status": "OK",
          "code": 200,
          "responseTime": 108,
          "responseSize": 0
        }
      },
      {
        "id": "9d0b31c5-c3b9-4757-9b78-f633552fe634",
        "cursor": {
          "ref": "4ba90a51-8da9-4622-918e-f55849a31666",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "cfc1529e-28a2-42df-bc8a-b3137420413d"
        },
        "item": {
          "id": "9d0b31c5-c3b9-4757-9b78-f633552fe634",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "dc9a1a3d-2b2e-4300-9699-52e0a9cf6010",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 0
        }
      },
      {
        "id": "eb1e76d6-0569-4478-bf01-e2ef2b3f0bba",
        "cursor": {
          "ref": "f28ff711-ec7f-433b-ac8c-325eac9a7e59",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "43c85ddd-14dc-483b-8ae0-fc07dd2ddabd"
        },
        "item": {
          "id": "eb1e76d6-0569-4478-bf01-e2ef2b3f0bba",
          "name": "did_json"
        },
        "response": {
          "id": "992469d2-290c-4d4b-bdf7-377b9727186a",
          "status": "OK",
          "code": 200,
          "responseTime": 387,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d613991a-444e-42e9-9556-3bd30a44ae19",
        "cursor": {
          "ref": "b4d6e797-0c0f-46cd-a030-eb294b3e2918",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "21fc2d4e-f69b-48c5-94f6-e222cc1d228f"
        },
        "item": {
          "id": "d613991a-444e-42e9-9556-3bd30a44ae19",
          "name": "did:invalid"
        },
        "response": {
          "id": "ff7437c1-566f-4fd5-8854-d9c8a490d49a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d613991a-444e-42e9-9556-3bd30a44ae19",
        "cursor": {
          "ref": "b4d6e797-0c0f-46cd-a030-eb294b3e2918",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "21fc2d4e-f69b-48c5-94f6-e222cc1d228f"
        },
        "item": {
          "id": "d613991a-444e-42e9-9556-3bd30a44ae19",
          "name": "did:invalid"
        },
        "response": {
          "id": "ff7437c1-566f-4fd5-8854-d9c8a490d49a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a6275a7-2da3-4a03-b793-ab6cd67500c5",
        "cursor": {
          "ref": "e9d4c1bd-f0fe-439e-aad9-46c728c18506",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "9ee66b3c-6321-4e97-a064-b3c205f14b00"
        },
        "item": {
          "id": "5a6275a7-2da3-4a03-b793-ab6cd67500c5",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "02069308-4fad-4fe6-8bd1-9c61029e7509",
          "status": "Not Found",
          "code": 404,
          "responseTime": 153,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2450efe0-2761-4381-90d7-25db257ee182",
        "cursor": {
          "ref": "9667c994-c34f-430f-b46f-578b670f5f25",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "f18c2d32-4c30-49e8-be9c-2ca7b5a1aca1"
        },
        "item": {
          "id": "2450efe0-2761-4381-90d7-25db257ee182",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "d2a2c439-3c4f-41f9-8c1e-22e589d473df",
          "status": "Not Found",
          "code": 404,
          "responseTime": 49,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b077d88-33c3-48af-8df5-56644ccb538e",
        "cursor": {
          "ref": "f68c92e1-98f2-4c8f-ac68-f3079a84f610",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "d197ef2c-3545-4df7-acfc-2e33005596f9"
        },
        "item": {
          "id": "9b077d88-33c3-48af-8df5-56644ccb538e",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "6d74da4c-857d-48cb-ae08-1922254709f3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17a58b1c-c777-49c6-978d-845b9d57ea0a",
        "cursor": {
          "ref": "08ae5099-3dca-4515-9942-9be8db12e90e",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "beb80813-da3c-480f-9411-f62c328b1bb5"
        },
        "item": {
          "id": "17a58b1c-c777-49c6-978d-845b9d57ea0a",
          "name": "identifiers"
        },
        "response": {
          "id": "f19be048-4a5e-4b3c-ac6c-a0d0aa19b1f5",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53f78bf2-554c-41d7-9bb1-d412db9a5806",
        "cursor": {
          "ref": "968b18a5-62bd-41fe-8335-77e170b154d7",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "071f9f2d-6af4-472e-954a-355d57935703"
        },
        "item": {
          "id": "53f78bf2-554c-41d7-9bb1-d412db9a5806",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "a362cf33-5556-4358-ad59-32373718e385",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e67198c2-cd24-43ca-96d5-fe878da960ea",
        "cursor": {
          "ref": "39609346-1608-4bb9-9839-efb01ae69e38",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "f0805606-528d-4448-9f4a-42cfdc44f78a"
        },
        "item": {
          "id": "e67198c2-cd24-43ca-96d5-fe878da960ea",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "7e0ee501-3ef2-433c-b6ff-fda96e3b0b00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a486f420-1773-429b-a342-5a354078a010",
        "cursor": {
          "ref": "f59734e3-63c5-445a-a00e-9b44256681b4",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "8da0ac5a-cb98-4a11-a21f-0bbe83694f69"
        },
        "item": {
          "id": "a486f420-1773-429b-a342-5a354078a010",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "fac49a1e-9d5d-44c2-96e8-607f74727cb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e28b7fc8-9b90-41b9-b271-3fbaf77537be",
        "cursor": {
          "ref": "234dda9d-4902-492f-9d27-f6915c5dc52f",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "03bc4bdb-2a89-42c5-94ea-9837149b9b56"
        },
        "item": {
          "id": "e28b7fc8-9b90-41b9-b271-3fbaf77537be",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "77b5f609-0540-4957-ab03-a8a0ac747151",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebe9170c-c7ed-4540-8554-915e19494e47",
        "cursor": {
          "ref": "d4882547-1252-4939-b129-a65c6a20afd8",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "11383ba1-0130-4ee8-8a78-23761340f0ed"
        },
        "item": {
          "id": "ebe9170c-c7ed-4540-8554-915e19494e47",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "92a72d33-9263-44b0-bf7a-6fd33c9cb590",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1420c549-22a3-4f60-8339-f9d6c55baacb",
        "cursor": {
          "ref": "a5c5efab-d95c-4ad7-a6bb-7477c17137c3",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "4200c9c4-ab20-47c0-b925-99c39fca43c4"
        },
        "item": {
          "id": "1420c549-22a3-4f60-8339-f9d6c55baacb",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "9fd9d074-f18e-4c5e-bccd-7e13939c9616",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5a8c029-af42-4cbd-9dc8-b9d597d6c220",
        "cursor": {
          "ref": "70e001c3-2e33-40f8-9dad-2496498cc37b",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "de2df010-e8e1-4667-934e-d8346d3ace2c"
        },
        "item": {
          "id": "f5a8c029-af42-4cbd-9dc8-b9d597d6c220",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "4eb3d6c1-5293-43a2-870c-a8e91ffe5b45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5797f2f5-6454-4776-9c18-540dc9dc983d",
        "cursor": {
          "ref": "c913ab7f-e17c-4c7e-a215-240670c9e862",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "702d3360-212c-40a6-b8c4-92271a07f4f4"
        },
        "item": {
          "id": "5797f2f5-6454-4776-9c18-540dc9dc983d",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "8c9a383f-3d58-4714-b3bc-2f9d968c8759",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78169155-fb46-495e-88e9-5be61ae64169",
        "cursor": {
          "ref": "b8b238fd-7920-4e26-b937-a3a6d5f0e25e",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "d77ae944-3c7a-482a-9179-adb35c4559fc"
        },
        "item": {
          "id": "78169155-fb46-495e-88e9-5be61ae64169",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "6ea3a726-2304-499c-a2e2-c695ab33d97a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aaf8caa8-2e78-4bfd-aaa2-3ee787e40626",
        "cursor": {
          "ref": "202c8a4e-7b95-4837-b1ab-9c5e864cb9aa",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "57e46a99-7bb9-4b3b-96a7-c84beffab89f"
        },
        "item": {
          "id": "aaf8caa8-2e78-4bfd-aaa2-3ee787e40626",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "d2670c9d-7e5e-4130-89e6-07157f4288af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75fb6eed-37b2-4007-8c38-82b0e10bdbaf",
        "cursor": {
          "ref": "8af8a476-f4ff-4cca-aa2d-dc0d3e184c76",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "65e70e65-e5eb-4d6d-91eb-9ca83363367f"
        },
        "item": {
          "id": "75fb6eed-37b2-4007-8c38-82b0e10bdbaf",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "4eaa94c2-7347-4626-8b34-be4e044f1ba2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f59c8912-b291-4730-811c-a591708c85a2",
        "cursor": {
          "ref": "2fd3a4f1-7327-486d-91c1-9b8df4df29c5",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "dce058af-38f6-4d7f-b241-443b9ba74a72"
        },
        "item": {
          "id": "f59c8912-b291-4730-811c-a591708c85a2",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "a6b355d1-4f81-46e4-9e1c-a27bd758ad5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e63a6a3-86dc-491a-a9b2-b8e521abf710",
        "cursor": {
          "ref": "670dd960-6dca-4a44-a946-531f0d1a9778",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "88787382-6133-4678-8c30-89e10ee8b1a8"
        },
        "item": {
          "id": "5e63a6a3-86dc-491a-a9b2-b8e521abf710",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "2b9d62d5-cfc0-4e90-8640-4b8244fa2724",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1128942c-6db7-46c5-acb1-aebe8fba9ad3",
        "cursor": {
          "ref": "7ad7c413-4d16-4c14-9dfe-0c173e4025bb",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "3c62ee2b-a373-4141-a620-48950ce362b5"
        },
        "item": {
          "id": "1128942c-6db7-46c5-acb1-aebe8fba9ad3",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "a4ede248-b3f8-426d-adbb-2193e13ea8ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc487c8a-f122-4082-9db6-fd8ad78e7d7b",
        "cursor": {
          "ref": "c82c7a59-c032-4fc0-9239-4aabf1958cd7",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "defccec8-5417-4e22-ade6-97bf088c70b6"
        },
        "item": {
          "id": "cc487c8a-f122-4082-9db6-fd8ad78e7d7b",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "5a15837d-e083-4fee-b2e5-7521a9df30fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6576fb3-c26d-4f4a-99b0-dc69201c87c8",
        "cursor": {
          "ref": "70763a77-220a-4393-ba11-b8d989ea1f08",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "c12452a6-7cb3-4f37-a160-530d01f43bad"
        },
        "item": {
          "id": "c6576fb3-c26d-4f4a-99b0-dc69201c87c8",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "beb9b708-3a0a-44f5-b5ed-2e590b5fbfda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99db748d-b29c-44e0-a9e1-ac2aeec440b3",
        "cursor": {
          "ref": "bc35ccc1-c6da-4aa6-b524-dcb31d81cb28",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "0a650185-2e8b-449e-a805-043391cc6d23"
        },
        "item": {
          "id": "99db748d-b29c-44e0-a9e1-ac2aeec440b3",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "72c72b6f-dab8-409f-8066-7ec364d1914f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6ca78ec-0e94-4584-a6c2-c902789dc088",
        "cursor": {
          "ref": "cc94b6b3-aa6d-43cc-a1cd-2d223416a6e2",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "98473e4b-b030-41e1-992c-da30eb854948"
        },
        "item": {
          "id": "d6ca78ec-0e94-4584-a6c2-c902789dc088",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "cbe1bdc7-b74e-4f8c-a079-e51b9854804b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7569eaf0-eae8-47b0-8b14-d40fc886c379",
        "cursor": {
          "ref": "e4d00f5f-af21-4569-8e14-5bf28ec37fc7",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "dfa52c39-5ba8-4435-830e-cf7879e13e88"
        },
        "item": {
          "id": "7569eaf0-eae8-47b0-8b14-d40fc886c379",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "c0a31c85-15d1-4352-9cf5-0974c66e8efe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab5e2722-1ec6-4430-9022-b7bc008e5e2f",
        "cursor": {
          "ref": "066016a6-2322-4071-8385-90d440fb7aaf",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "8fec7dbf-4608-4064-b33a-284f3a6b415b"
        },
        "item": {
          "id": "ab5e2722-1ec6-4430-9022-b7bc008e5e2f",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "c07d5f45-7f62-47b2-9ba9-d57a57685c40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19f26374-7fda-4075-8737-b8e8a0da2908",
        "cursor": {
          "ref": "aa712247-96f7-4e54-bd25-cc7d709c7623",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "49333775-86b6-4c70-ad09-7a4450f10759"
        },
        "item": {
          "id": "19f26374-7fda-4075-8737-b8e8a0da2908",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "b7a572a1-1fbe-4157-8c1b-86dc6bf52766",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe93bb3b-c26e-45e5-9464-bab1a4845bca",
        "cursor": {
          "ref": "d147ef69-7cbe-4d3c-90cd-d5697d2a87ac",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "cd103cc6-0bc0-4f3f-892c-f5b1d0e85ada"
        },
        "item": {
          "id": "fe93bb3b-c26e-45e5-9464-bab1a4845bca",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "438dd78d-a554-4d1c-9baa-a687602f9c5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "936f2dc4-3640-4c09-8bfd-7bf07c5fc130",
        "cursor": {
          "ref": "b6f29f7e-a0b0-4b2d-9f91-314d440d9376",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "bbe2bd9c-6f09-4459-8b7f-8a125412fd81"
        },
        "item": {
          "id": "936f2dc4-3640-4c09-8bfd-7bf07c5fc130",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "74184276-f325-4b06-978f-23d32c58e3f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25c663f5-1924-4b06-98c6-cf0cb4d19154",
        "cursor": {
          "ref": "75520eb6-873b-4e29-8da4-bfe6743585a1",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "8eba7f59-1604-4762-844c-252e5e07c596"
        },
        "item": {
          "id": "25c663f5-1924-4b06-98c6-cf0cb4d19154",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "f4588b3c-fab1-482a-a4b5-4183771e2f47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cef2dfa-605a-4728-8b72-5950be09c736",
        "cursor": {
          "ref": "3a21fa96-9138-4e43-a5d6-833ffcccf043",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "e7e6e124-3db9-4473-a253-4ef710cc91e3"
        },
        "item": {
          "id": "6cef2dfa-605a-4728-8b72-5950be09c736",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "8cf139c7-f4d9-497c-a507-f4b37bb16be5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12952573-38ef-45b5-99ab-4802b9ec2483",
        "cursor": {
          "ref": "c4e5bcc1-1cad-4d61-967b-1499a39a3efa",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "869ae1d4-dc62-4d55-a28a-23101b8f1078"
        },
        "item": {
          "id": "12952573-38ef-45b5-99ab-4802b9ec2483",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "37a57ddf-2906-4428-a407-f5569e959feb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66cab741-b3ec-4b39-8521-69ff8715d0fd",
        "cursor": {
          "ref": "cccebb9c-fc01-438d-afb1-7e1f55011031",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "908d5a10-4dd2-4ee6-a598-9e937cf0135d"
        },
        "item": {
          "id": "66cab741-b3ec-4b39-8521-69ff8715d0fd",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "feca8d64-4c00-4b01-aca3-58b249be09ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0570af7-da8b-44f6-9a74-4fdeb054a3fb",
        "cursor": {
          "ref": "986d3b23-f126-4011-9195-e7ed26dfdc18",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "11bbc672-4c03-42e1-9db2-70c9cf815471"
        },
        "item": {
          "id": "e0570af7-da8b-44f6-9a74-4fdeb054a3fb",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "e7e1a094-25c3-4f54-9fc1-c602684fb7b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52b9c697-0f4a-4a9a-a629-08d5c05cfc19",
        "cursor": {
          "ref": "0d5ebcea-20aa-4af2-8841-4e90e5481751",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "d16e574c-fbf7-4612-9611-25ffa681f223"
        },
        "item": {
          "id": "52b9c697-0f4a-4a9a-a629-08d5c05cfc19",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "bdd8dbe7-68e2-4dc7-86e4-50ae482531f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0903e0ca-7b2e-43b5-a4ee-2216ff3fcf72",
        "cursor": {
          "ref": "ba8a8c6b-a49f-41b9-83fc-f8bebe3487cd",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "d8837468-78ed-418e-87f5-41493c920616"
        },
        "item": {
          "id": "0903e0ca-7b2e-43b5-a4ee-2216ff3fcf72",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "e6dc164c-fddf-476a-901c-12a1f933dd42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "251ca648-3e13-4cee-87c1-03403233cd2b",
        "cursor": {
          "ref": "725a2699-3533-4905-9b49-bdfe4ea269bd",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "3552eaa2-ef1d-43d5-8567-a20464aa3988"
        },
        "item": {
          "id": "251ca648-3e13-4cee-87c1-03403233cd2b",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "89dc737b-11b9-4e3f-b860-7f91494dce96",
          "status": "Created",
          "code": 201,
          "responseTime": 732,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "f8694d3f-a7c3-4d74-9fae-1d0ba5275e69",
        "cursor": {
          "ref": "9ed834d8-4d2d-4f79-8cd1-c78ffc766da5",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "88686d9f-4b3b-414b-a496-c26dc66869a1"
        },
        "item": {
          "id": "f8694d3f-a7c3-4d74-9fae-1d0ba5275e69",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "a2264f8a-df1d-4a51-b31d-950c9c5457d0",
          "status": "Created",
          "code": 201,
          "responseTime": 312,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "d72f3c19-f511-447c-96d8-1c2935e57370",
        "cursor": {
          "ref": "a8cdc624-7084-4402-9e44-7e27a10cd631",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "fcc2dd1f-56f6-462c-84a1-4b239a353db5"
        },
        "item": {
          "id": "d72f3c19-f511-447c-96d8-1c2935e57370",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "1bc70c82-685b-4e5c-bc7f-6020c7f51f5e",
          "status": "Created",
          "code": 201,
          "responseTime": 312,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "4b047825-58f2-4302-8796-0d08f08da0d2",
        "cursor": {
          "ref": "6e832564-d5b8-483c-8658-f2b128a57a66",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "1df24cfd-0302-47d1-b031-32518f92fffb"
        },
        "item": {
          "id": "4b047825-58f2-4302-8796-0d08f08da0d2",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "b8fb3f12-9f29-4d74-89d1-8007239e0cf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06b6a1ae-fdc7-4d2f-86f9-5f4c8e93c30b",
        "cursor": {
          "ref": "d23541cf-a5ca-40e3-8089-c2558d7b9a9b",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "aaeec42d-d47e-4601-b518-50b148dbc9c7"
        },
        "item": {
          "id": "06b6a1ae-fdc7-4d2f-86f9-5f4c8e93c30b",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "b45530be-6f0b-4808-bc34-1b7063b3064c",
          "status": "Created",
          "code": 201,
          "responseTime": 266,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "d2242176-8777-44b3-834f-998af9473558",
        "cursor": {
          "ref": "d789d0ce-0545-433d-9d87-aeeaab81c019",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "56c83011-2f6f-4f35-975f-feccf417403c"
        },
        "item": {
          "id": "d2242176-8777-44b3-834f-998af9473558",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "3e5c3b0b-d4f4-4bf0-9e6c-da219115eedc",
          "status": "Created",
          "code": 201,
          "responseTime": 285,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "e752411f-d4f0-4020-baac-136d0da40494",
        "cursor": {
          "ref": "1279fec1-f062-4968-afc1-a2e45815b6c0",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "edc60561-4a99-4945-821b-af1ab4bf6d95"
        },
        "item": {
          "id": "e752411f-d4f0-4020-baac-136d0da40494",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "dedc6cf4-fcda-4f90-9db6-18232952f216",
          "status": "Created",
          "code": 201,
          "responseTime": 292,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "21621167-83bc-4d59-8708-10e2e8ad7539",
        "cursor": {
          "ref": "3a44fdf3-64df-47f1-afc7-5635fbc12368",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "504d8bfb-77b2-4cd7-a5ec-ad5aebbc6a18"
        },
        "item": {
          "id": "21621167-83bc-4d59-8708-10e2e8ad7539",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "6a11d7e1-40a0-4c00-9b43-4dead5995a23",
          "status": "Created",
          "code": 201,
          "responseTime": 283,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "e9d340ab-30f8-463c-aad3-95bb9fa09f4c",
        "cursor": {
          "ref": "8e675ffc-cf84-494b-9f81-65968679b970",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "3fa589b1-5fbb-4426-84b2-adcd10d0eec8"
        },
        "item": {
          "id": "e9d340ab-30f8-463c-aad3-95bb9fa09f4c",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "c725fa1d-0084-4e37-ba09-ec7e00ca36e7",
          "status": "Created",
          "code": 201,
          "responseTime": 269,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "c7968671-5e02-4387-a855-e4717c272eee",
        "cursor": {
          "ref": "f1d1b39b-bab2-48d2-be11-3b68c26d6682",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "0253fc8e-fe27-484a-9e0c-493b22af907f"
        },
        "item": {
          "id": "c7968671-5e02-4387-a855-e4717c272eee",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "a7796494-d584-465a-a560-316731bf186d",
          "status": "Created",
          "code": 201,
          "responseTime": 298,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "3f380791-2f1b-47a4-8ecb-9319708d15ef",
        "cursor": {
          "ref": "dc4eaed6-6aa6-4518-981e-ce3e2ccfeb73",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "4d997d39-58e0-4b1d-b1bd-6b9b1827357a"
        },
        "item": {
          "id": "3f380791-2f1b-47a4-8ecb-9319708d15ef",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "561f0fa5-c299-4bb9-9d01-7a893a7a7a90",
          "status": "Created",
          "code": 201,
          "responseTime": 292,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "4d10357d-b414-4aa8-80d5-b370ccbbc3b1",
        "cursor": {
          "ref": "a77808c0-cb73-494f-9fb9-832321470d48",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "7197c2b9-9053-4420-89f3-eb653e9e04ac"
        },
        "item": {
          "id": "4d10357d-b414-4aa8-80d5-b370ccbbc3b1",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "9dd9e862-a7ac-45d6-9381-4c100e9fa47a",
          "status": "Created",
          "code": 201,
          "responseTime": 342,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "f9c4dba2-90a8-4d6c-82aa-1e5038766348",
        "cursor": {
          "ref": "67ff1aef-eff6-48d3-bd64-c3cf0b9d1e84",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "987a24d4-35be-4883-89a9-26df72529b19"
        },
        "item": {
          "id": "f9c4dba2-90a8-4d6c-82aa-1e5038766348",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "424b456e-0a9a-4b2d-92d6-9057830f6de0",
          "status": "Created",
          "code": 201,
          "responseTime": 305,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "d4f80010-d8ab-49c1-99b3-0d6067293d25",
        "cursor": {
          "ref": "7a5a0320-2a52-4cac-92c7-9a25f1ac82f4",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "f25353f9-2de5-46c9-95ae-3c39758a0332"
        },
        "item": {
          "id": "d4f80010-d8ab-49c1-99b3-0d6067293d25",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "a408240d-467d-4e4f-b663-4fffa839ad23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0ee2c4e-7713-4e99-9a1f-e31d8c414f90",
        "cursor": {
          "ref": "d6e38979-d251-47da-a83d-d3298bcc9098",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "cd5ba6a6-6510-43f7-9f6f-04d965878691"
        },
        "item": {
          "id": "d0ee2c4e-7713-4e99-9a1f-e31d8c414f90",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "93ab6d44-b848-419e-b6f0-58f60d1c0903",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dca3b87-8e63-49f4-afff-10ca56bfe72a",
        "cursor": {
          "ref": "ad97377f-9703-458e-a741-5aefc0274267",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "0134964e-d88a-4ba1-a7ae-33c27e88833e"
        },
        "item": {
          "id": "5dca3b87-8e63-49f4-afff-10ca56bfe72a",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "5349320a-dbdd-4baa-b795-6b1f02e630b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f434ae9-a32f-433c-b30b-217292c73db0",
        "cursor": {
          "ref": "94888fb3-ffaf-4f8c-81b7-cb29bdfcd7d5",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "fdbe3c0e-f8f7-4aef-9a12-69debc33e3b6"
        },
        "item": {
          "id": "0f434ae9-a32f-433c-b30b-217292c73db0",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "a96b4e73-2110-4e81-aa76-54d9e4250f68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02882c52-a7ff-4e49-98b8-d8705dfc2951",
        "cursor": {
          "ref": "bbdf85ba-f430-47d6-8579-490134aa80b8",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "4c0c5f18-0e53-4466-b698-a74a9e539f15"
        },
        "item": {
          "id": "02882c52-a7ff-4e49-98b8-d8705dfc2951",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "41cd7854-47ed-40b8-be68-d7b3bad46962",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d22e4e58-30b0-4ddb-aa01-f0852bdb7ea8",
        "cursor": {
          "ref": "34158d70-20c8-4ec0-8a49-31278f054cb7",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "96f58026-8571-48b3-9505-10674f02a91d"
        },
        "item": {
          "id": "d22e4e58-30b0-4ddb-aa01-f0852bdb7ea8",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "01fe6fde-b39c-433b-8c7b-5c90d97b8e63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f280382d-f4b1-4c5f-8231-7f40784a4fa1",
        "cursor": {
          "ref": "c40f77f5-7eeb-49a5-a565-a9a84b1bd767",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "52384039-e0fe-46b1-84cd-30a34a50a9c1"
        },
        "item": {
          "id": "f280382d-f4b1-4c5f-8231-7f40784a4fa1",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "ccc5d941-cd98-4919-a6ba-70bc9638df1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d12b463-cb1b-463e-a059-d1e22f7e149d",
        "cursor": {
          "ref": "23c5a0f6-8881-4434-ab04-c623245dbb83",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "d34ce8e1-3fba-4411-8c70-7d85b0ed1251"
        },
        "item": {
          "id": "6d12b463-cb1b-463e-a059-d1e22f7e149d",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "abf9dd2f-0b67-4886-a020-271cd9e88502",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19037829-549e-4121-9271-737fcf1f6823",
        "cursor": {
          "ref": "07eaf91f-2ca5-471f-9573-9d4ae0b79017",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "55513619-518d-46a9-b454-af62543109be"
        },
        "item": {
          "id": "19037829-549e-4121-9271-737fcf1f6823",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "65768db9-862b-48e4-a7c2-56e3fff595ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9a96712-786b-4800-b797-34ec8537a726",
        "cursor": {
          "ref": "ca723cb7-7bbf-492c-9caf-e9a76bce4920",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "1507dc33-29da-44b3-a17e-6ee94269d29c"
        },
        "item": {
          "id": "c9a96712-786b-4800-b797-34ec8537a726",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "66a26ee3-c02c-4ffe-8b4c-e95b4015fdda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e81e1fa9-523e-44f2-8e45-c031f9b78364",
        "cursor": {
          "ref": "0dc97952-931e-4282-9e2d-1636a79561a9",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "f21d6d6e-85c0-4a8b-8130-1ffc469ecaa3"
        },
        "item": {
          "id": "e81e1fa9-523e-44f2-8e45-c031f9b78364",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "c32c0c49-9178-4c11-83c3-6a42b25ef060",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c49253bf-ce1a-4742-afd3-0c0fe8565e26",
        "cursor": {
          "ref": "187f1f9a-7641-48c5-aaa5-fcceb71279fe",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "fc1027b9-9fd9-4160-a35e-40f4b4e9af82"
        },
        "item": {
          "id": "c49253bf-ce1a-4742-afd3-0c0fe8565e26",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "997550d0-7589-49fe-a017-1c0d87f5b249",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4c4369f-5e98-48c9-ba8c-5e7eb34c459c",
        "cursor": {
          "ref": "45791d25-13d7-44d0-909e-5fcca364c4e5",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "798f7444-01e0-42ee-a0de-12f73acff4c3"
        },
        "item": {
          "id": "b4c4369f-5e98-48c9-ba8c-5e7eb34c459c",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "c2648038-35db-459e-a773-f54c5e37d841",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d087b0f1-104f-4067-86da-a66df69d401d",
        "cursor": {
          "ref": "fd89d10b-8705-44d7-b4e8-0106c723b408",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "0a831c68-6732-4a8a-a447-34b73cb7bdae"
        },
        "item": {
          "id": "d087b0f1-104f-4067-86da-a66df69d401d",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "2ce774f2-d66e-4e94-b6e5-13525e047c8a",
          "status": "Created",
          "code": 201,
          "responseTime": 285,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "4d4bc228-9141-4a11-b5a7-e567cf8e3a9a",
        "cursor": {
          "ref": "3c003e8c-35a1-46c8-8ade-b290b415140b",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "13376126-09b0-4f4d-9821-897cd2f87143"
        },
        "item": {
          "id": "4d4bc228-9141-4a11-b5a7-e567cf8e3a9a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "4f2f7004-1fd9-49a3-99e4-cc3f1c1277dc",
          "status": "Created",
          "code": 201,
          "responseTime": 294,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "33fbdfcd-63ce-4a1a-93de-ef5b7917392a",
        "cursor": {
          "ref": "c9044695-4124-4d5e-a7fa-0a026be7844c",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "3234ee9e-db20-4dc4-97ba-e340ca331bae"
        },
        "item": {
          "id": "33fbdfcd-63ce-4a1a-93de-ef5b7917392a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "fc86a103-ee1b-47eb-93f4-3b1be4d840f8",
          "status": "Created",
          "code": 201,
          "responseTime": 280,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "d5a3c40b-f5da-4498-aa61-a46b43078303",
        "cursor": {
          "ref": "916cb08e-6101-4513-9384-59e3f84fa12f",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "2a7ebe9d-1a5b-4c48-b2fe-5e5b769939b9"
        },
        "item": {
          "id": "d5a3c40b-f5da-4498-aa61-a46b43078303",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "8f07b5de-aa42-42d0-8644-deb89bed3d16",
          "status": "Created",
          "code": 201,
          "responseTime": 297,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "9b6a7d62-394d-42ab-a24b-8dbbff1aacdb",
        "cursor": {
          "ref": "d2a26fc4-07fd-428e-8e60-5e6cb78ca1f4",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "1046d898-b91c-4a1e-97de-8cadaccb6e2f"
        },
        "item": {
          "id": "9b6a7d62-394d-42ab-a24b-8dbbff1aacdb",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "a491ce5f-b887-4f7c-a66c-eafe18db8fc4",
          "status": "Created",
          "code": 201,
          "responseTime": 454,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "36c6c4e1-0031-4f02-827e-796a80f5b669",
        "cursor": {
          "ref": "97d66f0b-a68b-455e-82f9-1c66c33213c6",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "ab59adb3-b033-40d7-ad1a-2d24de0805b1"
        },
        "item": {
          "id": "36c6c4e1-0031-4f02-827e-796a80f5b669",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "161fb92b-79e1-4f5e-934a-c16f66f0be7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fcc5a3e-1ca1-450f-9f25-a7ce30656996",
        "cursor": {
          "ref": "298734b4-aac4-4052-92cd-1b1a0fe8c6d8",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "e825d4ab-45a4-41e6-8050-862346ac7cea"
        },
        "item": {
          "id": "3fcc5a3e-1ca1-450f-9f25-a7ce30656996",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "1e266a58-17c5-47d9-92f0-658cd01dc262",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99f9949b-f545-4173-bce9-fad118f2cf74",
        "cursor": {
          "ref": "53438644-d818-4145-85eb-9324b3027734",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "c637b37f-5f8b-4033-a930-e6b96d51dcb8"
        },
        "item": {
          "id": "99f9949b-f545-4173-bce9-fad118f2cf74",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "b5a0443c-0424-42f2-a549-d6905e50dad1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24336326-4904-4b4d-971d-e8492efd4f7b",
        "cursor": {
          "ref": "4bf3b647-5ae6-4d7a-b83c-b5bf7e0d8d3a",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "72b86f6d-3f05-43d9-8f73-a51c8639763c"
        },
        "item": {
          "id": "24336326-4904-4b4d-971d-e8492efd4f7b",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "8e9fbb64-2b1f-4572-8ed1-7b79e82ada77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "206b7bc7-1f63-4f8b-9e90-b16122c8fdae",
        "cursor": {
          "ref": "8c68c064-f7d2-4172-808b-d142dbeca374",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "645fcae6-c063-4f25-9cf2-45f506870d24"
        },
        "item": {
          "id": "206b7bc7-1f63-4f8b-9e90-b16122c8fdae",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "09e06f7c-42c8-41f4-94d9-66ce1cc41b7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "780229e6-94cf-45e1-9271-d3503e7426b8",
        "cursor": {
          "ref": "9ad6baba-93cf-434d-a5d7-57fe4c2e5ca7",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "246f4502-0546-497f-920a-e7927f4fd322"
        },
        "item": {
          "id": "780229e6-94cf-45e1-9271-d3503e7426b8",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "73a95f4d-db07-4803-a3ce-2b4f11857454",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe32825f-413e-41b6-b8c0-ac7526af7390",
        "cursor": {
          "ref": "fa24dc29-0bff-46a6-ad5d-949c5fa0073c",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "2605a00a-5acf-4107-ac1a-cc636ab04550"
        },
        "item": {
          "id": "fe32825f-413e-41b6-b8c0-ac7526af7390",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "7da63f44-093e-4df0-9b6a-bc7ee16cc67e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb0466a3-24bb-4504-a8c9-7fd78f3deda8",
        "cursor": {
          "ref": "6ae1b579-843a-4ef9-be7b-8efcbebf316a",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "4f9942ca-e52e-405d-baac-29511092e34c"
        },
        "item": {
          "id": "eb0466a3-24bb-4504-a8c9-7fd78f3deda8",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "dabb7cd6-70e0-439e-8da3-83ea586210b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92fec88f-2967-4d64-b54d-4503e8803fef",
        "cursor": {
          "ref": "a7ace4a5-82d2-491c-beb1-de0dec4706b2",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "5233db2c-5c77-4075-b0d5-59951ccd40d5"
        },
        "item": {
          "id": "92fec88f-2967-4d64-b54d-4503e8803fef",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "697cc433-bc35-41e4-b007-a493c593e434",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19a40fda-4d4c-4be4-989f-a202d68d931a",
        "cursor": {
          "ref": "7cd21156-9a52-4a9c-91f4-63f1281a5328",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "a68d3d85-392b-47be-95b1-fc4189d6c2a5"
        },
        "item": {
          "id": "19a40fda-4d4c-4be4-989f-a202d68d931a",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "f333bd6e-0306-4b43-9287-93ebcf808c8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e71c942-c79a-4dff-9c6a-3eb4f5ba5706",
        "cursor": {
          "ref": "65c6d5c2-f7f8-46dd-bd87-3bff6fa3e084",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "c99fc936-9056-47e9-86dd-6782248897b3"
        },
        "item": {
          "id": "2e71c942-c79a-4dff-9c6a-3eb4f5ba5706",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "b38618c3-9909-43fa-8481-df082e1468fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b1c297e-98a9-41a3-a137-d5d0bd93a363",
        "cursor": {
          "ref": "485103ad-4b56-4869-a924-899d4f77d171",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "e7d0b6e0-059e-4776-b106-f63e04cf7988"
        },
        "item": {
          "id": "4b1c297e-98a9-41a3-a137-d5d0bd93a363",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "a32b76ca-76a3-41f1-bf47-4fb5f275455a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ae6667d-19c1-43ca-9bea-bffe73ff9820",
        "cursor": {
          "ref": "2947eaf8-6e72-4076-bc86-624653c7fa5e",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "f4ad3b77-2454-4b9b-9e6e-04b1ccbf8657"
        },
        "item": {
          "id": "2ae6667d-19c1-43ca-9bea-bffe73ff9820",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "ac524b9f-ef1a-49a9-921e-1ae3befef247",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbac8696-1200-4eaf-9d35-63d8daa28f5d",
        "cursor": {
          "ref": "cd09eeb4-2d25-4e91-bbb1-ea432119571d",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "799854a1-39c7-4007-afe8-16d86a528d4c"
        },
        "item": {
          "id": "cbac8696-1200-4eaf-9d35-63d8daa28f5d",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "8739bcc6-d938-4140-a591-b4ee1c4473c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "253c3d4b-f6eb-4bc1-a581-ce2d78694f05",
        "cursor": {
          "ref": "a9ebb04d-aa08-4929-95b2-f32c184d1308",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "de6a0580-f77c-4488-a9b8-6381f9cdac38"
        },
        "item": {
          "id": "253c3d4b-f6eb-4bc1-a581-ce2d78694f05",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "57874eed-9f66-4934-aca7-38589581f68a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4a17b68-2079-4789-be37-e2645a3f53ba",
        "cursor": {
          "ref": "3fa3e525-b1e0-45ee-8565-06b066f4dd26",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "6996ac53-ea0f-4906-b5cb-760ec25dd852"
        },
        "item": {
          "id": "d4a17b68-2079-4789-be37-e2645a3f53ba",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "eaf8d787-e232-4fde-9f1d-921ad46c4218",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07294de6-53c9-4194-bfc0-19d68ed996fc",
        "cursor": {
          "ref": "0d118be2-9586-47d4-9820-36c0fcc1439f",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "27f697e7-f667-4631-ae7c-3cdfa7e7c1a2"
        },
        "item": {
          "id": "07294de6-53c9-4194-bfc0-19d68ed996fc",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "feaa861f-b8c6-4029-8f8e-67601316b18b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc461871-2e88-48e6-a9cc-2666f2907204",
        "cursor": {
          "ref": "6990a90d-b8f1-41bc-8438-2f7949e64bdb",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "e9f63151-16b4-4436-9cc0-76f142393ab1"
        },
        "item": {
          "id": "fc461871-2e88-48e6-a9cc-2666f2907204",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "9b099bc2-1e1b-4c69-b432-0b60f1df64f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0196cb8a-d09c-4925-9932-b74263e0caa2",
        "cursor": {
          "ref": "fd5768f3-f451-4b9a-8355-86f46bb75b83",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "3d93939e-70c0-420e-954b-ce05d3159445"
        },
        "item": {
          "id": "0196cb8a-d09c-4925-9932-b74263e0caa2",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "2fdd143a-43d6-41b6-8678-ab1ebf92718d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "587b7da2-f831-4bb6-9f4b-19670558cd5f",
        "cursor": {
          "ref": "3c975b57-4b50-4b96-a418-f63f234b8f61",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "baf7f1e2-a5b8-44ff-8f4e-bcde350e4153"
        },
        "item": {
          "id": "587b7da2-f831-4bb6-9f4b-19670558cd5f",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "56165c33-d298-432b-9208-4b89e18c9269",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90d8b943-1c34-4f11-aa94-94bc881215ba",
        "cursor": {
          "ref": "5c869782-f3ca-4fbc-8bca-0a28f21b925d",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "a3c3d387-1df2-4825-8e18-ad33ec915d2d"
        },
        "item": {
          "id": "90d8b943-1c34-4f11-aa94-94bc881215ba",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "16faae0e-1aff-4854-8f3d-29c69bbb431d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16d5c795-e6c2-4020-b4b4-112d454fc0ca",
        "cursor": {
          "ref": "711149f0-7a1a-499a-b0bd-8b6953fb91dd",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "d5436eab-c70e-47f9-9e76-0e7c7fffd23f"
        },
        "item": {
          "id": "16d5c795-e6c2-4020-b4b4-112d454fc0ca",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "9f260f72-adce-4706-b509-1292bc07192d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4ab6eda-31b7-413a-9889-c14316ae429c",
        "cursor": {
          "ref": "8530dc1e-380a-4934-9531-2536172c1c67",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "8de97a6e-cbc6-401b-ae46-13cd175a2fd4"
        },
        "item": {
          "id": "e4ab6eda-31b7-413a-9889-c14316ae429c",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "c5a8480f-70e4-4111-82f4-f77206793a17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37a602c9-a8f7-421d-8e5a-870b6b7ecb6f",
        "cursor": {
          "ref": "aa2583d5-dede-4074-b971-85901fe470db",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "5b6da535-5229-4a3d-9f4a-4ffa47c8ce8a"
        },
        "item": {
          "id": "37a602c9-a8f7-421d-8e5a-870b6b7ecb6f",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "0efefb01-3589-4f0e-a2a6-b004a82c747b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dad13ce5-0f2b-4e86-92dd-546d878a5ef2",
        "cursor": {
          "ref": "e09e7c25-a440-42d9-97f2-739bc41c7f77",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "414bbec3-2502-4507-b9ad-c35d78d715d2"
        },
        "item": {
          "id": "dad13ce5-0f2b-4e86-92dd-546d878a5ef2",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "35467d96-a154-45e9-a287-a9c94b5a2d4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8bd2256-f973-4114-ade2-5d0a7d12350f",
        "cursor": {
          "ref": "67bc166b-e649-4c51-8c04-26276cbacd60",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "7d545651-34b2-4064-836a-de44240b0b2f"
        },
        "item": {
          "id": "c8bd2256-f973-4114-ade2-5d0a7d12350f",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "714c9dfe-0ff1-4105-a2a1-7ce124477a1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50cb7dec-f6cd-42f0-9950-62e3233d8f21",
        "cursor": {
          "ref": "be336219-6fe5-4620-97ae-1e3f0fcab014",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "9f025d1e-eee2-41d2-99ca-b81dc7d94eaa"
        },
        "item": {
          "id": "50cb7dec-f6cd-42f0-9950-62e3233d8f21",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "61b3dd77-c65d-4b1a-8c9e-c1cb3da07f26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed4199ea-0932-46a7-a1fc-c197a978e493",
        "cursor": {
          "ref": "de0e6a86-0c4e-4b2d-95a2-d87378d4839a",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "ae3f29cc-3f65-45f8-b1f2-a1cd302723fa"
        },
        "item": {
          "id": "ed4199ea-0932-46a7-a1fc-c197a978e493",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "c39d9ed7-e057-496a-88c3-5ce9b6ce894e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "041c3d6c-7489-41ee-8bd6-f8926cf0968d",
        "cursor": {
          "ref": "4a804435-7ff0-49ad-ae9f-002681cdb6fe",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "def69f2b-a87f-442f-93e9-774f71c1eda8"
        },
        "item": {
          "id": "041c3d6c-7489-41ee-8bd6-f8926cf0968d",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "a0776bf2-bd34-416d-a8e4-0160f235ecb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eba4e9c7-ab4d-46e5-872d-01e549c17487",
        "cursor": {
          "ref": "dc485d90-b005-4e5b-9cb8-e10a90029ef7",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "004de1c6-9835-4c68-b915-f0d608ad4199"
        },
        "item": {
          "id": "eba4e9c7-ab4d-46e5-872d-01e549c17487",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "77ea7f8f-7672-4305-b92a-2e8d3b50f1ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6629f61-8448-4c63-85dc-f96b27a7d138",
        "cursor": {
          "ref": "7706db6c-0673-4894-81a5-e70b43485e2e",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "b1b04d83-a457-4a46-ba1e-b7481af923af"
        },
        "item": {
          "id": "f6629f61-8448-4c63-85dc-f96b27a7d138",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "c596b3d7-b0c7-4684-b865-e2e0efb4dc74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "493bcc89-9251-4d46-a5dd-21fa2b9da67b",
        "cursor": {
          "ref": "42cb1921-5b65-472b-b7d4-ff7a23e10dcb",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "a9734f80-fd96-4635-b334-1fe77c6f6df8"
        },
        "item": {
          "id": "493bcc89-9251-4d46-a5dd-21fa2b9da67b",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "cf635ee6-6d91-4905-8381-ee9b7a5f9b86",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 28,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29b332fe-42d0-452d-a2c6-00a726668f04",
        "cursor": {
          "ref": "6319e64f-70c3-4c59-8091-c800f8bad571",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "1184e63b-48a0-41f4-8d5e-8498ab7f55f2"
        },
        "item": {
          "id": "29b332fe-42d0-452d-a2c6-00a726668f04",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "09d73c12-7567-42d4-9aa0-71c915f66a95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "cd42c107-502c-4ad2-89f6-e731d56cdf8d",
        "cursor": {
          "ref": "120c0f23-4a43-4e55-9978-5abf71b07187",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "64b2353f-f181-4272-88c0-468c1dd6284b"
        },
        "item": {
          "id": "cd42c107-502c-4ad2-89f6-e731d56cdf8d",
          "name": "credentials_issue"
        },
        "response": {
          "id": "05ab89ac-36c6-480f-bc91-4be294316aa5",
          "status": "Created",
          "code": 201,
          "responseTime": 287,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "77ac47e6-704e-446c-af31-b490755e3b86",
        "cursor": {
          "ref": "4a3e3e2c-ec9e-46fa-954d-e04a83f065eb",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "b65e0654-ef3a-4bdf-90f5-037d4c8d1dc4"
        },
        "item": {
          "id": "77ac47e6-704e-446c-af31-b490755e3b86",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "773be07a-5510-43d6-8b0f-f39ad29c5c47",
          "status": "Created",
          "code": 201,
          "responseTime": 302,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "43286558-f1aa-4854-b683-0f6f81e12b45",
        "cursor": {
          "ref": "a78d32ba-b3a7-4035-bcf1-3113325c2f08",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "2313280f-78be-4b9a-89a3-4c81123b59a0"
        },
        "item": {
          "id": "43286558-f1aa-4854-b683-0f6f81e12b45",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "0b932c4e-4266-4dee-81b0-b49fcbc911d2",
          "status": "Created",
          "code": 201,
          "responseTime": 274,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc7c25a3-bc08-4661-8bbc-bce26e1f79c9",
        "cursor": {
          "ref": "d356ab05-6d45-4731-a4ad-11599fd969f4",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "a4c9a16a-b3e7-43be-b942-7d02a9901093"
        },
        "item": {
          "id": "bc7c25a3-bc08-4661-8bbc-bce26e1f79c9",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "7092a2c2-5258-4a1d-8ca5-b1b3f718c3d6",
          "status": "Created",
          "code": 201,
          "responseTime": 275,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbb0003c-a594-44b0-8b59-230e93997444",
        "cursor": {
          "ref": "9e24f822-1301-4eb7-9897-6bfbecb3288d",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "5f820467-f1d9-46f5-a98e-f4796de9337b"
        },
        "item": {
          "id": "dbb0003c-a594-44b0-8b59-230e93997444",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "7f53b1f8-7ec2-4588-af2c-8763ba225d34",
          "status": "Created",
          "code": 201,
          "responseTime": 274,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-02-08T00:33:58.007Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-02-08T00:33:58.007Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "d174d923-89f1-4771-a91c-1d48b95a64e0",
        "cursor": {
          "ref": "587db263-eaed-47cd-8a4f-a2f69d5127a7",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "d974f8a7-d427-4570-a94f-d7313770d688"
        },
        "item": {
          "id": "d174d923-89f1-4771-a91c-1d48b95a64e0",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "2054fee1-f9cc-42a6-bbdf-29694935c265",
          "status": "Created",
          "code": 201,
          "responseTime": 301,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5966d9ad-92f6-470a-9069-1e5723e904fd",
        "cursor": {
          "ref": "ad2a6ba8-80ad-4dc1-bc2c-b6ab9b68e8ef",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "25901bc0-0f5f-4f11-b659-ddcdf4875c38"
        },
        "item": {
          "id": "5966d9ad-92f6-470a-9069-1e5723e904fd",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "7b53d3e3-f422-47f8-a5ea-a2109e09ac0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a82c10ec-642e-45d9-a9c2-6acb53405f04",
        "cursor": {
          "ref": "8d0fd528-1dba-4aaf-88c9-90bd913bc2fc",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "9389942c-f514-4474-a669-e548e5ee4b32"
        },
        "item": {
          "id": "a82c10ec-642e-45d9-a9c2-6acb53405f04",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "3b882175-7ebc-4100-a68a-d3e9317ca3c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97566d9d-c622-43d2-b4a4-4bf3cb972da3",
        "cursor": {
          "ref": "78e0986a-96b9-437c-8f59-4c7f2932ec8c",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "0cc995bd-7b7f-423f-b1e3-b9fe38414768"
        },
        "item": {
          "id": "97566d9d-c622-43d2-b4a4-4bf3cb972da3",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "acaf77b9-901f-494f-a7be-cb146db74189",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08dcee45-26ce-4aaa-a97f-0e49da30646a",
        "cursor": {
          "ref": "5acea7bb-4069-4c4e-98ff-4335fef77796",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "b5472a5c-568c-460b-8eae-18aa9d5510d9"
        },
        "item": {
          "id": "08dcee45-26ce-4aaa-a97f-0e49da30646a",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "d1a6174b-3142-4389-8adf-73d518c900a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4205fc7a-f179-4240-87bf-9d760c3883d6",
        "cursor": {
          "ref": "61710f60-15c6-43f3-b241-cbd6e23ec3c5",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "7fefe567-09bf-4bf7-80d6-ef42d816394b"
        },
        "item": {
          "id": "4205fc7a-f179-4240-87bf-9d760c3883d6",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "a54ae757-2430-4134-9c97-de3a9e73ce39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebee6d59-9ddb-4686-a26c-2ab78ae267e1",
        "cursor": {
          "ref": "63137e12-b050-438d-ab54-0abda2f392c8",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "5e061a26-a25f-4d4b-9231-3e91843d73a6"
        },
        "item": {
          "id": "ebee6d59-9ddb-4686-a26c-2ab78ae267e1",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "7c566fab-7b4f-47b3-803e-40ed8c54e266",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4f70ec8-c2f0-4226-b532-3cc5c5274519",
        "cursor": {
          "ref": "6efeca85-a2c3-46b4-947e-c7f6f9429644",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "f96109c2-d448-407d-88e0-30093dae0ba7"
        },
        "item": {
          "id": "c4f70ec8-c2f0-4226-b532-3cc5c5274519",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "282f82d7-39b9-46c4-89e7-83dd4371b30c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b1a5ef7-0a82-4f09-bb70-d2be3d0f0f5d",
        "cursor": {
          "ref": "e4159caa-36b1-4c5a-a06f-315d9ad42525",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "d6bf13ef-622b-4955-80f3-1a7fbe17e336"
        },
        "item": {
          "id": "6b1a5ef7-0a82-4f09-bb70-d2be3d0f0f5d",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "3ac3f9eb-895d-46f6-bc57-38e6b4770ee1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b34721f6-7c5a-4be0-81e8-83eb767128b1",
        "cursor": {
          "ref": "d89347d4-cf90-4868-927a-2b7413ca2b6e",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "78f364d8-905d-4a4a-8594-1d9d5dc6f969"
        },
        "item": {
          "id": "b34721f6-7c5a-4be0-81e8-83eb767128b1",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "d77954b9-9e0b-4b89-85f6-bec51dcabf80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11df165b-fa4b-4f9e-a046-2147c5ecbf12",
        "cursor": {
          "ref": "7f174f5d-e199-4d41-9d6a-4a363bce49df",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "39f389a2-b6ad-4554-b996-4c6a97caf64f"
        },
        "item": {
          "id": "11df165b-fa4b-4f9e-a046-2147c5ecbf12",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "ce3f17fc-d833-4615-a37c-ab8bad302b3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abf7355d-620a-4baf-b55e-ba808a4bcd19",
        "cursor": {
          "ref": "2dc97d2a-e13d-498d-8f3a-a037bcde2c09",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "8255de0c-ca56-4c4e-861c-2e4e2300eac7"
        },
        "item": {
          "id": "abf7355d-620a-4baf-b55e-ba808a4bcd19",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "e2a75f6b-ccdd-43c6-b2b1-258eec0a4c53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9b51ed8-e734-4c27-ade8-95514a505246",
        "cursor": {
          "ref": "2a3a7e70-149a-4162-8045-b69e370184b8",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "6b453220-32f9-43a6-a06f-d44bb9e653f0"
        },
        "item": {
          "id": "f9b51ed8-e734-4c27-ade8-95514a505246",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "54239526-67fb-48d5-88b5-599ab9bc842a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "480f9978-c8ee-4e68-94bb-83c0a452cfc7",
        "cursor": {
          "ref": "04864b27-1f07-42cd-98f7-9e93a5f3fea4",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "49e421bb-4cb3-407e-9377-1cb7c76820f8"
        },
        "item": {
          "id": "480f9978-c8ee-4e68-94bb-83c0a452cfc7",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "aefc9497-6310-4393-86fa-7761de761f80",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 97,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "261f49ab-04ad-4d39-bf1f-506db5ae929f",
        "cursor": {
          "ref": "9e6e3363-fbe9-45a7-8a41-45e60e2e165e",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "b8a94ae5-d013-4298-9038-bea4e1f9b3e8"
        },
        "item": {
          "id": "261f49ab-04ad-4d39-bf1f-506db5ae929f",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "95962258-3f1b-4034-a221-86269398ba83",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 99,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "b85a6d99-abe2-4f50-995b-091c41ab7c63",
        "cursor": {
          "ref": "4cc49f3c-1364-4bd3-85b2-71a06b45140f",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "c307c9ab-bdb5-4bc0-aa29-316f36d7ddaf"
        },
        "item": {
          "id": "b85a6d99-abe2-4f50-995b-091c41ab7c63",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "9565bd0b-b6c6-4036-81a9-08b33a44d840",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88bfd51b-2131-4e54-876d-a72f405f350e",
        "cursor": {
          "ref": "b946ba16-c6db-4fcf-9547-62b5e2c0bef7",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "0ea6a764-b8d7-4619-8e8f-a32f1d9356b1"
        },
        "item": {
          "id": "88bfd51b-2131-4e54-876d-a72f405f350e",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "e8d6b508-83b2-410f-8b56-e580c59b3fca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b6bbe7e-35b5-4e95-970a-2bb086bb071e",
        "cursor": {
          "ref": "d87decaf-b3e5-4e83-8f04-695510183a32",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "a6470e34-516e-4d9e-acd3-8cce87fff2ac"
        },
        "item": {
          "id": "9b6bbe7e-35b5-4e95-970a-2bb086bb071e",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "646e0a49-5b7b-4fae-a1dd-e80953862f03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd528eef-0992-475d-8a8a-4b81ea9f7db6",
        "cursor": {
          "ref": "b9fbb505-de80-4c96-ab41-5d71d5b9fb6f",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "ea5dcb42-dfb3-41c5-813a-0767ff6f62b6"
        },
        "item": {
          "id": "fd528eef-0992-475d-8a8a-4b81ea9f7db6",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "e7915dd4-3947-4106-aedf-b33b4d9c1b84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44ae805c-864e-4366-a840-dde807d17a7f",
        "cursor": {
          "ref": "d63ad60b-b043-4b9e-97e6-81ec01a1c635",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "6dc8b727-44e1-408a-9e2b-aa33858ef4bd"
        },
        "item": {
          "id": "44ae805c-864e-4366-a840-dde807d17a7f",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "a2fd0e72-2bf3-46ca-810b-27fa099b4837",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95c1fe22-dc99-464f-b01a-65ec70831202",
        "cursor": {
          "ref": "1da01062-6810-4950-bfa3-9e4250617709",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "b3cd51ff-c140-46ea-a15e-d295bab51ff4"
        },
        "item": {
          "id": "95c1fe22-dc99-464f-b01a-65ec70831202",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "d6a00f22-c665-4bf5-a4f9-7f5e9c305cb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e0e6dfd-14c6-4bba-a6a2-338618894ef1",
        "cursor": {
          "ref": "497d4d77-ece8-4cd7-8063-6075571fd513",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "1111d847-7a4e-45b0-bc5b-0386fb882f74"
        },
        "item": {
          "id": "3e0e6dfd-14c6-4bba-a6a2-338618894ef1",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "48f7571b-d282-45f1-8c4f-01074061fbd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6696b4b-748b-4ac6-832b-136381f9b506",
        "cursor": {
          "ref": "4c2b36ff-ca2c-4cce-9abe-838fc4ee3c57",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "1bff06b8-7603-44b3-b41d-608a99b0da3b"
        },
        "item": {
          "id": "a6696b4b-748b-4ac6-832b-136381f9b506",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "0bd2d3a7-5ca8-4925-9b20-93b58010f7ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af9be6ec-1423-4667-9f3b-ee0d0caefd4d",
        "cursor": {
          "ref": "1424f1ec-3b73-4e38-89ee-9e61aa790225",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "76fed252-7ec1-4506-ada2-79b86ab58b57"
        },
        "item": {
          "id": "af9be6ec-1423-4667-9f3b-ee0d0caefd4d",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "0140a5c0-c57f-4e9c-9ced-eac2423cf896",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f73779f0-d1f5-4eb6-8f8d-603d72c367e3",
        "cursor": {
          "ref": "5b8fb0b4-bd0b-4fc6-bedc-57b6457aec25",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "81d53830-fa52-400f-a283-7fb5eb4da8e6"
        },
        "item": {
          "id": "f73779f0-d1f5-4eb6-8f8d-603d72c367e3",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "9c759112-7a78-4b41-9d54-58af539af2cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51d429a9-9099-4551-a8d7-63396e0a86d7",
        "cursor": {
          "ref": "48729a35-ab26-4f7a-a85f-bd081f822504",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "238d4cdb-fc1a-4171-ae4f-503c6ebb4099"
        },
        "item": {
          "id": "51d429a9-9099-4551-a8d7-63396e0a86d7",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "58cf0579-709c-4078-ae5e-436d960fe2a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18c711f8-3ddb-4b3c-a44b-de662fa22777",
        "cursor": {
          "ref": "048f3427-5b6b-4c1b-a3c4-361d735890f8",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "4cc0dafd-7cc6-41c3-b0f2-fda2515a45e4"
        },
        "item": {
          "id": "18c711f8-3ddb-4b3c-a44b-de662fa22777",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "eb715ddf-b142-4b33-80be-e591471ab51b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d75efcb6-201b-4989-8abb-cb247d09949f",
        "cursor": {
          "ref": "b64035bf-a2c6-437f-9051-d911f1161317",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "907a1263-fc21-4ddc-8fbc-d63e20700b80"
        },
        "item": {
          "id": "d75efcb6-201b-4989-8abb-cb247d09949f",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "61dd607b-8844-427c-bf6a-fc71a0121452",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f3b6560-65cc-4744-a009-38e6f332315e",
        "cursor": {
          "ref": "2503d5a6-6af9-453f-aad7-4622247ebbc4",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "6bae2387-a941-448d-9330-1b85257e663a"
        },
        "item": {
          "id": "9f3b6560-65cc-4744-a009-38e6f332315e",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "5d442559-a02e-4a38-b2de-3ffd434b5920",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2db4e7c-e2cc-43b9-b4d2-730a1a774471",
        "cursor": {
          "ref": "1875ff39-a8fe-48e4-a3a9-d6ca4bb9911a",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "d5d83b86-5b7b-458f-bc81-45b42879fdbc"
        },
        "item": {
          "id": "b2db4e7c-e2cc-43b9-b4d2-730a1a774471",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "15a79b93-c66e-4c11-ad87-e6889255cdf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36914150-4dd2-40cf-bcfa-300342e38ea5",
        "cursor": {
          "ref": "b36ee1d4-c344-45d2-bbc6-0ba9c7e0efc3",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "a08ed913-990f-4036-91f2-c9859648944c"
        },
        "item": {
          "id": "36914150-4dd2-40cf-bcfa-300342e38ea5",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "4fff2e90-3c07-46df-ba56-21d866334b49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8365ea6-c459-4788-a80d-d01bc0ba14c4",
        "cursor": {
          "ref": "ed209f26-9461-4283-8871-9e2b9ceba6fe",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "436014b6-a253-4e13-b4ac-3ca3037c5878"
        },
        "item": {
          "id": "e8365ea6-c459-4788-a80d-d01bc0ba14c4",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "09293adc-2c3f-4d97-870e-e37cb30aace2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ecd545e-891a-45d8-9dd8-d15f03ca88fe",
        "cursor": {
          "ref": "f0769a4a-3ba1-4afc-846a-218d94a29000",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "7c719435-3b6e-453e-8cdb-8affd9c510da"
        },
        "item": {
          "id": "6ecd545e-891a-45d8-9dd8-d15f03ca88fe",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "0410589e-0f72-43a2-aa13-a334416d7589",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 92,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "2f95ffe6-d521-468d-8574-ac7cd6c2e952",
        "cursor": {
          "ref": "ca952647-356e-429d-a18e-836a94e675f8",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "f1d9cf33-6e34-48bd-9d9e-1729502412e8"
        },
        "item": {
          "id": "2f95ffe6-d521-468d-8574-ac7cd6c2e952",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "c88d61a1-0c31-433e-81dd-aaa3102f5b5b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83e34b8a-95a3-4ada-8757-3a6ca2cfadf1",
        "cursor": {
          "ref": "c631348f-1805-4395-9faa-a0f13b106af9",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "fed19aed-419d-43b0-835b-d40400a47249"
        },
        "item": {
          "id": "83e34b8a-95a3-4ada-8757-3a6ca2cfadf1",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "697c4451-db2c-4257-af50-eefcd69edcf7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a73e935-7132-47a5-8ea5-c04b7e241f5e",
        "cursor": {
          "ref": "9765a71c-126d-4bb3-9991-daaa67c0fc7b",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "2aa1d7cf-6342-4510-b2c4-a03dccb86c0a"
        },
        "item": {
          "id": "9a73e935-7132-47a5-8ea5-c04b7e241f5e",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "381a6c28-98c9-4b01-9485-853c276c64b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62268807-802a-4eb8-8e45-b26151c0120e",
        "cursor": {
          "ref": "183bf349-5c61-4819-aa27-bda2a5763cbf",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "06f340b7-574e-4d44-8f39-9e9b8cc59117"
        },
        "item": {
          "id": "62268807-802a-4eb8-8e45-b26151c0120e",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "c707a7e1-2a28-4c3e-8c38-e824547a5e2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f6c9a4b-ef8d-4850-a952-c7b29c4f1539",
        "cursor": {
          "ref": "814bc240-5314-4dc2-a8b1-74ab17921c6a",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "a8c664d1-209f-488c-8402-5f1058c24e47"
        },
        "item": {
          "id": "9f6c9a4b-ef8d-4850-a952-c7b29c4f1539",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "23c4d2ac-efea-4c9b-8e28-2364c3df770a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db9e1f55-daa8-4b14-b8f7-5d1a97e22863",
        "cursor": {
          "ref": "31134375-df02-4b5a-bdfd-d12b7e483f19",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "534d25a2-6ca1-4249-a4b4-92c450067863"
        },
        "item": {
          "id": "db9e1f55-daa8-4b14-b8f7-5d1a97e22863",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "7ed9812a-a3f6-493c-bae2-e6bc7a35f3a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76b65ba4-0cd4-4ca0-a361-94bb70dd1332",
        "cursor": {
          "ref": "3d123e46-1d79-4fee-be9b-69fab121267e",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "faa46574-e5b6-45d1-be12-aafbbb17ae75"
        },
        "item": {
          "id": "76b65ba4-0cd4-4ca0-a361-94bb70dd1332",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "8d0ef17e-4fbe-4237-bcc4-e5f7245a2d5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3db20d5-3198-41cf-9a4e-0d274e0d5c73",
        "cursor": {
          "ref": "c4c8ef0a-75f2-43f4-9f9b-29bae6bb477b",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "22ccd39d-0f02-4112-8ee6-b96bf36d2d9f"
        },
        "item": {
          "id": "b3db20d5-3198-41cf-9a4e-0d274e0d5c73",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "e1ab88d2-be39-4730-881b-0c20d6f52832",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa78591f-0d82-45fd-becf-e2c1a4af3de1",
        "cursor": {
          "ref": "c34cac11-61a0-4ca9-b736-29cd898e28ab",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "d2ba042d-e01d-4112-973d-2a7430a473ce"
        },
        "item": {
          "id": "aa78591f-0d82-45fd-becf-e2c1a4af3de1",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "8391d3cb-ab0d-4a7f-b4a8-6c56689c6b6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4304813-705d-49f8-a01c-33cf723f1b80",
        "cursor": {
          "ref": "0e4d6ba2-ecaf-465a-9e9c-28460a5de16c",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "1549984d-98ec-42b6-897d-0b24ab326ef3"
        },
        "item": {
          "id": "e4304813-705d-49f8-a01c-33cf723f1b80",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "0e1f4c16-fdc4-41b8-bb6a-d297785315c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd6e2fbd-68ef-4be2-ac88-61d42221cc8c",
        "cursor": {
          "ref": "61afd4ed-8ce5-48dc-8bea-9e98981cdeea",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "8605339d-275c-478d-9f6a-04fd418fff0c"
        },
        "item": {
          "id": "dd6e2fbd-68ef-4be2-ac88-61d42221cc8c",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "0919e0f3-c872-4056-8d70-465ffc10ef11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14326218-2890-495d-b3c2-1e0ba85ba024",
        "cursor": {
          "ref": "f1a12043-cbb6-489d-87ed-0d048857bfd9",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "73261188-6b1c-451a-bc02-2c39726e7346"
        },
        "item": {
          "id": "14326218-2890-495d-b3c2-1e0ba85ba024",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "1fe2a210-bcdb-4684-b5ac-a6f8d5af6662",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7111425-fc13-4221-bdd1-5b7cfae318ed",
        "cursor": {
          "ref": "5006e9b1-31a6-4fe2-b302-aa5c094c75b1",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "4c75bdf0-8b44-41c0-9c5e-f6e70dcfbe58"
        },
        "item": {
          "id": "f7111425-fc13-4221-bdd1-5b7cfae318ed",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "3e6392a8-030d-4b19-8602-d0c8dec5b19d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "897632f9-f98f-4c79-825f-2fa5f64147ef",
        "cursor": {
          "ref": "54e8f22e-a84b-4637-a425-b8d9f578f4ef",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "2fdfc188-0171-4e31-85f0-2d4ea97dcbde"
        },
        "item": {
          "id": "897632f9-f98f-4c79-825f-2fa5f64147ef",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "27f91543-064e-4023-abed-bd82f00003f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6beda817-8a08-4aaf-83d3-3a89f294795c",
        "cursor": {
          "ref": "d954ab44-5f9b-474c-a295-257b92d47db0",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "c3004e0f-8c0e-47c2-97f6-1cf6dd81afa6"
        },
        "item": {
          "id": "6beda817-8a08-4aaf-83d3-3a89f294795c",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "bcbc9d8e-3e04-40f8-9392-f0078106d051",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 93,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "5ae3950b-5eb7-4b73-96bb-f198c6970f13",
        "cursor": {
          "ref": "6f797db1-6936-4e82-8905-42b717e32f58",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "bf53dba9-d522-4af0-9334-b22773b4bddc"
        },
        "item": {
          "id": "5ae3950b-5eb7-4b73-96bb-f198c6970f13",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "e33b0fb4-fad5-4a49-a5c6-22e7f42d09ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "321f5b1d-8a33-4a2d-9bb5-84790fd815b4",
        "cursor": {
          "ref": "cdf68e76-ad06-43e7-ac7e-68e792b136f7",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "6b7e717a-6b8d-4b82-b7bb-e4094a2e6a6c"
        },
        "item": {
          "id": "321f5b1d-8a33-4a2d-9bb5-84790fd815b4",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "1df8d71c-5dd8-4106-a7a2-a5457d47a2f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54c6e6d0-b3e2-4f44-bf93-a96c363ecca3",
        "cursor": {
          "ref": "ea17b8b5-8685-4022-b38c-d8556fb0c36b",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "70ae97d0-184b-41a6-bf6d-94ea45aa2f04"
        },
        "item": {
          "id": "54c6e6d0-b3e2-4f44-bf93-a96c363ecca3",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "513b1b82-3d14-4287-9172-e54f53926064",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e38c944-c488-4251-8b09-aea85c23b5f6",
        "cursor": {
          "ref": "9bddc261-6b3e-487f-9d3a-120e443abc47",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "384df7ca-69a2-46a0-9633-a265efc604eb"
        },
        "item": {
          "id": "7e38c944-c488-4251-8b09-aea85c23b5f6",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "4f3b273c-8ad2-4f51-a5b0-997ea0fd483d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1dfede0a-80fa-40ce-8353-2a7f9101b68d",
        "cursor": {
          "ref": "23661dca-9354-4116-a4c0-a5ebe04eb499",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "afa07033-4c88-4e2a-896d-9f8ca1800d82"
        },
        "item": {
          "id": "1dfede0a-80fa-40ce-8353-2a7f9101b68d",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "30f6d6c9-2185-4e3b-9a57-c2c8345f0a2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "479fc4aa-cef6-453a-987c-41afa3876369",
        "cursor": {
          "ref": "0a6521d2-ad91-4a33-893d-4c3698bf9d27",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "ac464ee9-0ad6-4cf6-b925-72f23b268be2"
        },
        "item": {
          "id": "479fc4aa-cef6-453a-987c-41afa3876369",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "cf1c42f0-676c-4b73-b67d-912ca1395f41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "155486b5-de2e-41b2-8440-e7effbe21409",
        "cursor": {
          "ref": "979d9f42-7b99-476c-a31a-f7d444c58405",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "d485d0ad-3390-4b3c-ae5d-9fae686c430f"
        },
        "item": {
          "id": "155486b5-de2e-41b2-8440-e7effbe21409",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "2d4140e6-1c2d-4ae3-ab0d-84c33f95f475",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0481f111-c889-47d6-80f8-d40a2183e856",
        "cursor": {
          "ref": "76fd8f7e-b58f-4476-b40f-58ce172147df",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "c8380237-f8ad-4196-a6b3-0eaa872266a7"
        },
        "item": {
          "id": "0481f111-c889-47d6-80f8-d40a2183e856",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "f7e4b9df-0a16-4412-91da-97d4e05a5323",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "139e89c4-ac14-4069-bd9b-2bae4ae0a7da",
        "cursor": {
          "ref": "9aebd11f-12ea-4108-8c20-acf308f92e3b",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "ac4ad19e-2149-404a-8064-2d9cae51811d"
        },
        "item": {
          "id": "139e89c4-ac14-4069-bd9b-2bae4ae0a7da",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "96f79581-f404-41b0-8220-a73b6efbe8b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "883ff9f0-297f-404c-95b8-8e190b5f4425",
        "cursor": {
          "ref": "165f1765-0505-420a-87ea-10d3c756254f",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "9b2efd8e-45be-4f79-b415-58bdc84a2406"
        },
        "item": {
          "id": "883ff9f0-297f-404c-95b8-8e190b5f4425",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "1eb4bd92-868b-43e2-98ae-7bb17b00c15f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04039fa5-05f5-41bf-b729-47865c05307c",
        "cursor": {
          "ref": "44580240-11c7-4d25-9ee1-42df90685bd5",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "c00dc53c-ff29-45c2-ae8b-c56733307825"
        },
        "item": {
          "id": "04039fa5-05f5-41bf-b729-47865c05307c",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "9e75772d-b52c-4efb-820e-4357b866bcea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78f98e46-cb53-493a-9922-7b7319950bdb",
        "cursor": {
          "ref": "b84b3fb6-28ca-4f85-9a23-b9366b6b8543",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "2cf20c30-7d7b-4b21-b424-96056e68729a"
        },
        "item": {
          "id": "78f98e46-cb53-493a-9922-7b7319950bdb",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "a37be118-b294-4f25-9aad-595a09a0dcfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "889ad413-57d2-426e-9baf-910e50b84d31",
        "cursor": {
          "ref": "9f184b77-26b5-4895-956c-1950b2cc45e1",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "6ec1b814-e78c-41c0-8556-37921a46ad50"
        },
        "item": {
          "id": "889ad413-57d2-426e-9baf-910e50b84d31",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "a29e8640-12a8-4550-b307-9fc18ea3a901",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "011d56b3-3f43-4f64-b526-6aa49a5d951e",
        "cursor": {
          "ref": "d6c76398-d38e-46d8-9fe5-15d79355eea8",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "1db12e31-8aae-442d-84c9-b9624e6411d9"
        },
        "item": {
          "id": "011d56b3-3f43-4f64-b526-6aa49a5d951e",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "33ef2ff3-bc7e-4346-aa81-c9c1ae540d11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28c07010-92f7-4009-9727-033d48a2156b",
        "cursor": {
          "ref": "38f9bea4-1abd-47d3-a6c7-0bd265b4c289",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "d0cfd030-3ae0-48c8-baea-12856ca3f9ac"
        },
        "item": {
          "id": "28c07010-92f7-4009-9727-033d48a2156b",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "341a0ba9-00d8-4d55-9cb7-456a5df74b03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5916703c-da09-44dd-a594-23057d6457f0",
        "cursor": {
          "ref": "1e7a5323-c92f-48e2-8aa3-4bfa8e13a767",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "95a1274c-c02e-4add-b7c7-a7b88caf2d88"
        },
        "item": {
          "id": "5916703c-da09-44dd-a594-23057d6457f0",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "76285e4a-87e6-4c38-856a-c3b6deb4fee7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ece8a63-a492-435e-b0f1-669d8dbd4499",
        "cursor": {
          "ref": "40e299c8-3d4c-4682-97d2-13f645241536",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "9e16f835-b7d3-49ba-9706-ac505a5e789d"
        },
        "item": {
          "id": "4ece8a63-a492-435e-b0f1-669d8dbd4499",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "fd34183e-4b10-4bed-9236-80dedf049b35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "168f891c-3b62-40a8-b221-e5879a86a54a",
        "cursor": {
          "ref": "0d148ccf-d7aa-4a41-9dc4-9715099bbb7d",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "8f04f896-b3ad-4705-9dc2-decc3c94d63a"
        },
        "item": {
          "id": "168f891c-3b62-40a8-b221-e5879a86a54a",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "c110b969-decd-42de-b2a0-a24e7ca11d2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c0ad31f-062c-40e4-b475-2d7cce111c79",
        "cursor": {
          "ref": "46344aa4-16f2-4dbe-a17b-1b735e72eff5",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "42ee2a11-fff0-4315-9324-58c2f8ffeed2"
        },
        "item": {
          "id": "2c0ad31f-062c-40e4-b475-2d7cce111c79",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "7c20445a-8799-48eb-be88-76fdfa190030",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cb0c14d-9222-4e4d-8f66-c1143dd85a07",
        "cursor": {
          "ref": "ae543eb2-13d4-4d0e-9454-7aaf9991ec3d",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "a2794959-a9c0-4e03-a9c2-96de7656107c"
        },
        "item": {
          "id": "2cb0c14d-9222-4e4d-8f66-c1143dd85a07",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "bef6f6d6-2ed5-4863-94bd-0a3c40c9a374",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "681ed575-e0f6-4df3-a44c-0c666a9feec5",
        "cursor": {
          "ref": "bfd4a4f9-c733-42a5-a4cf-29768d4d0a6d",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "aa63170c-1cc9-49fc-84e7-6784c3d4475f"
        },
        "item": {
          "id": "681ed575-e0f6-4df3-a44c-0c666a9feec5",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "7e0eb806-b57f-4589-a142-492d467ad2e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5a4d4e8-ff17-437b-9554-e9319c7a4c73",
        "cursor": {
          "ref": "ed67ced1-c201-47db-ac63-0a0606c528e1",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "654e5733-aaa5-479a-9ec7-0dbbee06014a"
        },
        "item": {
          "id": "f5a4d4e8-ff17-437b-9554-e9319c7a4c73",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "29607191-77dd-4d18-84a3-3db81daf2f16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b91f10d-ae42-4d0e-bc61-918feb93e6be",
        "cursor": {
          "ref": "e6d546ec-1b26-4f9f-8804-6b1aecaf1483",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "b877f875-7d3f-47bc-ad1b-40611a0d5afd"
        },
        "item": {
          "id": "6b91f10d-ae42-4d0e-bc61-918feb93e6be",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "b8aa2331-96a5-4040-8771-0ab6fa72acbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a600fa7-e5b6-47d0-bd18-cfb299c7dcb3",
        "cursor": {
          "ref": "9412d5c5-5e5e-45df-b527-b8e2bb3ddbad",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "6156c6b9-6c75-4bc9-ab70-bd5fe6dd937e"
        },
        "item": {
          "id": "5a600fa7-e5b6-47d0-bd18-cfb299c7dcb3",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "8929ed98-7394-4f1e-b973-c87a4c521160",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 26,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9573454d-51fe-4652-ad2f-afb204d7f443",
        "cursor": {
          "ref": "73fc8cb5-6369-4e6f-845c-59fcca32231c",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "9d173deb-702b-42f4-948f-226659ee6007"
        },
        "item": {
          "id": "9573454d-51fe-4652-ad2f-afb204d7f443",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "5a85ed3e-3004-42dd-b41a-9695b4a110e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "552b52f7-6bf0-4ad1-bc16-3105341143bb",
        "cursor": {
          "ref": "77a76bd3-8ece-45c3-b27f-30a68f4e6534",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "6a76e023-fc36-4576-abee-5d9e396825f7"
        },
        "item": {
          "id": "552b52f7-6bf0-4ad1-bc16-3105341143bb",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "81af5933-900f-4572-84f9-fddb379ee513",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cfd9bd7-fdb5-41e8-b067-f0d8b31462c2",
        "cursor": {
          "ref": "9e169e3c-e225-4cca-ba32-bf538c2feddf",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "789f8953-c556-4fbd-9c3e-e24e9886c6bd"
        },
        "item": {
          "id": "8cfd9bd7-fdb5-41e8-b067-f0d8b31462c2",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "a9d3cb21-2bef-4981-a8e3-1a9fa098959d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e98ffd65-c1af-4dae-a817-5f9f9dee010b",
        "cursor": {
          "ref": "39d4e4d8-e0e8-49f3-8a49-737fc91b42cc",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "15e72f5b-a028-4484-98cc-25a62ef43538"
        },
        "item": {
          "id": "e98ffd65-c1af-4dae-a817-5f9f9dee010b",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "26c0b6d9-5970-4ba1-8b51-4d9016ee7061",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21fec020-2655-4e80-8a68-a00c9ad71c4e",
        "cursor": {
          "ref": "1e229176-c5f0-4d76-9fe6-2c1aba3fe2db",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "cbdffbb4-af11-4c91-89f2-dd3c6298e8a8"
        },
        "item": {
          "id": "21fec020-2655-4e80-8a68-a00c9ad71c4e",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "950f452e-170f-4919-9f35-1c1d258714d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e45d7701-4df7-47fb-b43a-0a6e260fe42e",
        "cursor": {
          "ref": "2b48748d-9800-4149-85c2-7c12312a0ccc",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "e0529323-0946-4da8-87f2-caef5d5764d4"
        },
        "item": {
          "id": "e45d7701-4df7-47fb-b43a-0a6e260fe42e",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "d39292a6-e07c-44ed-b7a6-8e908f09ebcf",
          "status": "OK",
          "code": 200,
          "responseTime": 139,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "594aadf0-7fe4-45de-b208-daec29e35090",
        "cursor": {
          "ref": "3f102201-ca6a-4e1f-81eb-1354f48e1a11",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "5a19bc69-8428-4198-9072-b40255d83024"
        },
        "item": {
          "id": "594aadf0-7fe4-45de-b208-daec29e35090",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "16125131-4373-4d28-ad0a-109d852a23e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d311425-563e-4602-991a-add3e8db37e2",
        "cursor": {
          "ref": "76f386c1-f9e7-40ed-8299-b524577b5302",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "28c67377-14d9-4458-bcd7-32492d5f3e24"
        },
        "item": {
          "id": "5d311425-563e-4602-991a-add3e8db37e2",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "a8421499-378b-4bcd-a09f-54df87acb3bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b89728e-232d-48e4-9e4d-8d584771fe33",
        "cursor": {
          "ref": "f966d43b-c73e-4e11-aca8-787dad0c5181",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "3e497144-3c74-4d05-8d31-3cdd79a6809f"
        },
        "item": {
          "id": "5b89728e-232d-48e4-9e4d-8d584771fe33",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "f142ed6e-ed3c-43df-8c0c-4f5fa2f1dc6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3e4289e-c9ff-4da3-838d-99a492837e6c",
        "cursor": {
          "ref": "21259aca-8df8-4d12-9856-bb7894a6ed09",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "77f8e597-8d44-44ad-8e19-c36b259e3bcc"
        },
        "item": {
          "id": "d3e4289e-c9ff-4da3-838d-99a492837e6c",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "8236968f-79d9-46d7-8a67-000b3a3fd312",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e400a1a9-4e59-4bf7-a36d-d70db1f0e529",
        "cursor": {
          "ref": "ef336dfd-2781-4292-8c8f-5810a7a33f97",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "2ab29572-71cc-4f24-ac7e-19dd0bac342e"
        },
        "item": {
          "id": "e400a1a9-4e59-4bf7-a36d-d70db1f0e529",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "c20a7c59-e67c-430c-9b15-44625f4b64d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e4cfb07-0151-41d3-8dea-52c4102b7d91",
        "cursor": {
          "ref": "ba3049f9-ebf1-4d63-aae6-0b56f4cdd09e",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "6b0b9252-44ed-41ef-a9aa-8f60db710b1f"
        },
        "item": {
          "id": "0e4cfb07-0151-41d3-8dea-52c4102b7d91",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "266378b0-5f3e-4c01-8f63-34caeb95bd88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2fcc90e-655b-464e-b9e7-f53c0dac308f",
        "cursor": {
          "ref": "3ee8af43-d9a9-4325-b98c-e76562160ab3",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "dfb2df87-e97f-4986-8452-012f8592a1f4"
        },
        "item": {
          "id": "d2fcc90e-655b-464e-b9e7-f53c0dac308f",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "bdcef8e5-55a8-45ba-b405-ad42458b4e7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e29811ab-c087-4873-856f-646ebe1690bb",
        "cursor": {
          "ref": "5069b047-55d5-4527-acad-86fd16c6f7fb",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "0bb81221-ba75-46cb-9f6f-6778124ee91c"
        },
        "item": {
          "id": "e29811ab-c087-4873-856f-646ebe1690bb",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "0c158e79-764e-4f14-bf37-e957a54add93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27e3a44b-168f-43b2-83a7-244c70e4c4fe",
        "cursor": {
          "ref": "17183c24-4f37-49b8-af27-e6fb1e2e82cd",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "a9915cfa-c8f6-4dd2-9859-2c4d6c0b26ca"
        },
        "item": {
          "id": "27e3a44b-168f-43b2-83a7-244c70e4c4fe",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "794702fc-9060-4de4-abe6-e25c55712ae6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35809340-0360-4ec0-95fb-04f452c3409b",
        "cursor": {
          "ref": "e5d86ea3-7a95-4c9e-ba3b-7e49396d95e7",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "53a637a8-755b-4b72-b67c-bd6241587f1d"
        },
        "item": {
          "id": "35809340-0360-4ec0-95fb-04f452c3409b",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "a2e36114-7f2a-4e97-96da-4694a0af5c86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a74ea68f-4d18-4cd8-8439-577816a4953f",
        "cursor": {
          "ref": "f7e48cb2-0ec7-4b98-933e-ae432b59aa61",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "dfb4c6e9-8da3-483a-aede-5b4c4ae83880"
        },
        "item": {
          "id": "a74ea68f-4d18-4cd8-8439-577816a4953f",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "d7f841eb-2150-4ad7-8c29-1942ca1b7a91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30588e24-276a-40ea-a15a-654e027bcd82",
        "cursor": {
          "ref": "a6733dae-c242-4a62-8918-d07603c8a62d",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "251f65a1-d758-47a6-b227-e0aa8106a2de"
        },
        "item": {
          "id": "30588e24-276a-40ea-a15a-654e027bcd82",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "ff8e6c4a-f950-4340-ad8b-0fa055dd701f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0165cb6-683c-4ea8-98c7-1cd085d296b2",
        "cursor": {
          "ref": "52035d9e-74d6-4849-8e4a-bf0c0be9675c",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "4baee689-9f2c-4281-aa6b-b4f3a01fa747"
        },
        "item": {
          "id": "a0165cb6-683c-4ea8-98c7-1cd085d296b2",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "3f2d0b09-1a5a-4f26-be90-ecb61afef29e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "136b072e-2a0c-401e-9a10-1fb0565124d2",
        "cursor": {
          "ref": "02d5f726-f13c-420a-b348-9a3ea22c29ac",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "8d8b8ec0-bd29-4ca2-8dd6-23942ca2895f"
        },
        "item": {
          "id": "136b072e-2a0c-401e-9a10-1fb0565124d2",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "a1d73a74-84b3-4595-95a1-e4c308411979",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c885491-ef7e-4725-ad61-7ed43d180c6e",
        "cursor": {
          "ref": "b6541081-b6e5-4b7e-b57d-23a9a28f0b7f",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "59ef429b-fc4f-41e3-8eaf-629581269429"
        },
        "item": {
          "id": "5c885491-ef7e-4725-ad61-7ed43d180c6e",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "9e7851c7-a08a-4c13-ae7d-f15f38341557",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f33d869-fdc6-4cdd-b79d-2e143c7bc0bd",
        "cursor": {
          "ref": "a65e4b1e-42b7-4e57-b4c4-2d2f2d8e7d7b",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "2e9dcdcc-36a5-486e-80c2-f35c1078521b"
        },
        "item": {
          "id": "5f33d869-fdc6-4cdd-b79d-2e143c7bc0bd",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "717b53af-5dd8-4ce7-9c3f-5600120a9e25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b5bb81f-e6c9-4f4f-b9ec-428107e0997c",
        "cursor": {
          "ref": "8286ff47-8857-4a58-846f-5adf81ec4bbb",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "8e0be735-1cc5-49e6-abb1-824ed0e96b0e"
        },
        "item": {
          "id": "0b5bb81f-e6c9-4f4f-b9ec-428107e0997c",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "d87a684f-028e-485e-9f43-bad05fb6005c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dcde272-87b6-45e5-bba4-548a620d6707",
        "cursor": {
          "ref": "16955bf0-6dd1-4ec7-bd8f-a97a748ba8cb",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "c22482c6-5d66-482e-aca8-cf8a98cdf3a6"
        },
        "item": {
          "id": "9dcde272-87b6-45e5-bba4-548a620d6707",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "47f20303-d374-49b7-af0e-8e8dd68171ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3723ddff-6913-4c9a-a081-ac86c11a9022",
        "cursor": {
          "ref": "9be21afd-ee3e-4c45-8f25-5aee028401ff",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "94c1f54b-7b3e-40db-a701-f0eca8e1adb0"
        },
        "item": {
          "id": "3723ddff-6913-4c9a-a081-ac86c11a9022",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "51f1029d-9b8d-416e-b66e-21089faff810",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "253ad756-2236-4e3d-94ef-ffb8e2ecfcbb",
        "cursor": {
          "ref": "d584e70e-c4cc-49ef-a382-2c34ee63f63f",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "f3725fe3-6459-489f-b6e5-69dacc431b6a"
        },
        "item": {
          "id": "253ad756-2236-4e3d-94ef-ffb8e2ecfcbb",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "1344bbce-848a-4be8-8ded-44c661ea26b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4c80864-b4c4-4744-b93a-69a20e138258",
        "cursor": {
          "ref": "9f0511c8-cb92-413a-a436-af1f2e9da675",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "2e49ea71-0fb2-41c0-8b20-758afa797633"
        },
        "item": {
          "id": "c4c80864-b4c4-4744-b93a-69a20e138258",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "faa34523-0da0-4238-9e71-5c294b4610f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cad630e6-9509-41cd-bf56-67bcfc87259e",
        "cursor": {
          "ref": "bc0a34be-6e3e-4558-8657-9152cfc6ebdf",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "ac414576-143e-49e3-9c44-5c5a576dd2c2"
        },
        "item": {
          "id": "cad630e6-9509-41cd-bf56-67bcfc87259e",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "e97debaa-9686-47ac-9f03-fe615f37744f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92d45350-584a-49bc-9236-0e3002039b60",
        "cursor": {
          "ref": "a8d8afea-d325-4abe-8db5-375c0975ca6b",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "f00376d5-1249-48ab-a6e0-98976a912842"
        },
        "item": {
          "id": "92d45350-584a-49bc-9236-0e3002039b60",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "23d89fca-1849-45ad-be73-d4b7a05bb69d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfdc25ec-a38d-4113-ab31-056770c564f2",
        "cursor": {
          "ref": "4e95e4ff-89d4-41e0-ae5a-b4d103a08390",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "1f7107f0-0cac-4513-b76a-ad977cf44c91"
        },
        "item": {
          "id": "dfdc25ec-a38d-4113-ab31-056770c564f2",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "3275bd0b-f19a-469a-8a24-a3b760ff04f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98b5311c-b1c7-4548-85e4-d7c8f5449913",
        "cursor": {
          "ref": "60b01aa5-28a2-4575-a77e-84b31b0b9fc6",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "743cc9fd-f2fe-4a08-a881-ec4f05e3a46c"
        },
        "item": {
          "id": "98b5311c-b1c7-4548-85e4-d7c8f5449913",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "174d0337-9eab-4116-80e5-f49d5cee6c4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2696091-3143-4639-a17f-c9d50cfafd85",
        "cursor": {
          "ref": "12d9a499-9ec0-4bb8-84cc-742565169aca",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "669950c3-fad9-4305-8ef2-094aa508c055"
        },
        "item": {
          "id": "b2696091-3143-4639-a17f-c9d50cfafd85",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "8790be24-0937-4271-a2f5-a7c68352269a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7fb5af4-3a0e-4593-9354-bd9a194e8f20",
        "cursor": {
          "ref": "94f22326-e7ac-45d7-9ded-9efb0effb49a",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "588d22d5-ef5f-435b-baac-1b936576225e"
        },
        "item": {
          "id": "f7fb5af4-3a0e-4593-9354-bd9a194e8f20",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "5f9047ff-cfe0-4f6c-a31f-a6b39337d76b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8832184c-fe8f-481b-8233-6b3c28afefe7",
        "cursor": {
          "ref": "aa822d65-92ca-4e22-84cb-da8787db4169",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "73a9e330-625d-4819-b9f9-044cb1732e26"
        },
        "item": {
          "id": "8832184c-fe8f-481b-8233-6b3c28afefe7",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "ddd09e2e-fecc-45a2-8aec-a5f48690ae65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08a865c0-e270-4faa-94af-33b5b0cee7d9",
        "cursor": {
          "ref": "491fd774-9a5c-4aa1-88d1-fc091868c219",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "433bc771-ffcb-4bd2-944a-51948baa318e"
        },
        "item": {
          "id": "08a865c0-e270-4faa-94af-33b5b0cee7d9",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "72c5cc59-c8cb-4b01-8cbf-e4d9150acfec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31153a18-3f0d-4921-b325-5eb398845f3f",
        "cursor": {
          "ref": "93a877b6-0645-42c8-9064-cc479b4f0ece",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "ccd32a83-6f84-4295-ad3d-aff4baca61c9"
        },
        "item": {
          "id": "31153a18-3f0d-4921-b325-5eb398845f3f",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "014c88d6-04cb-49f2-98ef-a613441b27be",
          "status": "OK",
          "code": 200,
          "responseTime": 152,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "7b4718f9-9d6e-4f13-a9a7-edd2fd57896f",
        "cursor": {
          "ref": "c347c0f2-3736-4295-9071-98e94c97bef0",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "3aa5f1f2-6aa5-43cc-9dd0-5fe7b72c04b7"
        },
        "item": {
          "id": "7b4718f9-9d6e-4f13-a9a7-edd2fd57896f",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "81cf21e4-308a-420e-a012-5b9cad7f4a93",
          "status": "OK",
          "code": 200,
          "responseTime": 139,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "3f93410a-63bd-4a85-bbbe-e109210d0aa2",
        "cursor": {
          "ref": "6cd25b69-4ad2-4f0d-9309-18900dcb89b9",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "77d68029-37a1-4eef-a7eb-92e3b138a3fc"
        },
        "item": {
          "id": "3f93410a-63bd-4a85-bbbe-e109210d0aa2",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "7cf0b8d3-b73c-460b-8b7b-3cf1f36f90ba",
          "status": "OK",
          "code": 200,
          "responseTime": 142,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "8ad4ad4f-2aa3-430f-a4df-89a17af36314",
        "cursor": {
          "ref": "936554c1-7ffc-43c9-aa06-8d3f166e6688",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "a5155357-cd7e-45ca-a1df-dd3934b19472"
        },
        "item": {
          "id": "8ad4ad4f-2aa3-430f-a4df-89a17af36314",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "72734ddf-5989-441e-a422-9fe10e4f7132",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c56abe1a-f6f1-46eb-a35c-510d8258ccb2",
        "cursor": {
          "ref": "cd0ab4f7-acfb-4aa2-a488-0ac6b52971c0",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "0e29d459-0f82-44e9-ac2e-b3c56a4dcec7"
        },
        "item": {
          "id": "c56abe1a-f6f1-46eb-a35c-510d8258ccb2",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "76de7697-dcfc-43b9-8f43-7a0ef815544c",
          "status": "OK",
          "code": 200,
          "responseTime": 133,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "bb695f79-8e6a-4872-b97a-23de6103fd6f",
        "cursor": {
          "ref": "ad321a9d-ea15-4775-a861-afdaa5447b12",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "81bcd725-baa9-4f49-a1e8-067e580b8ae6"
        },
        "item": {
          "id": "bb695f79-8e6a-4872-b97a-23de6103fd6f",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "c69c0e1e-6b3a-4921-85c4-0fceff57c975",
          "status": "OK",
          "code": 200,
          "responseTime": 217,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "a97e781b-a6fb-4e8c-8f55-92139242b259",
        "cursor": {
          "ref": "be0dad80-dc3c-4799-96d0-65c31548d996",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "66a56844-9a08-42c7-b24f-6f86fb9595d7"
        },
        "item": {
          "id": "a97e781b-a6fb-4e8c-8f55-92139242b259",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "b64c68a9-58de-4f10-9fef-481006708efe",
          "status": "OK",
          "code": 200,
          "responseTime": 150,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "5e7446a6-bc76-4ced-b4ba-99dce87cc71a",
        "cursor": {
          "ref": "9dc8d08a-c287-4562-86b7-91b6c2ba8399",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "ff2ab999-15f2-47a4-8558-7a08f181a709"
        },
        "item": {
          "id": "5e7446a6-bc76-4ced-b4ba-99dce87cc71a",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "e739b88f-0ed6-47c3-a7f4-03ad226dcb46",
          "status": "OK",
          "code": 200,
          "responseTime": 161,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "46f46fb5-7f2f-401a-aa6f-1a9572add187",
        "cursor": {
          "ref": "833f2442-2c9e-4ec4-813a-460e065a42a0",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "78b96b62-38dc-472d-bb28-e83513ef658a"
        },
        "item": {
          "id": "46f46fb5-7f2f-401a-aa6f-1a9572add187",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "82a52660-5ad4-4527-b343-bc80ff5d6542",
          "status": "OK",
          "code": 200,
          "responseTime": 134,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "a0c9acd9-fcad-4acf-8925-6a9a46f6da3d",
        "cursor": {
          "ref": "d30a0296-a492-4125-871f-b37b4f126dac",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "2c7f6c49-cc63-497d-a8db-a6bf40db71eb"
        },
        "item": {
          "id": "a0c9acd9-fcad-4acf-8925-6a9a46f6da3d",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "985a059a-d224-43b5-bf04-7df629619b6e",
          "status": "OK",
          "code": 200,
          "responseTime": 135,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "05ccceeb-72a3-4f09-9ee9-5a7ed36e2f09",
        "cursor": {
          "ref": "401c2c38-e285-4d82-9175-47e5dc744c19",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "60d95259-337a-4102-943b-96d8a3feef07"
        },
        "item": {
          "id": "05ccceeb-72a3-4f09-9ee9-5a7ed36e2f09",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "56fea441-4b02-4213-a646-7569e67b398d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b919d885-55e9-49d1-9ac7-755ce0e84a63",
        "cursor": {
          "ref": "3ff1cb3d-b456-4f2d-90b4-692066496f55",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "bc166f48-6684-4d67-9beb-b052ac58d48a"
        },
        "item": {
          "id": "b919d885-55e9-49d1-9ac7-755ce0e84a63",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "b6b6c6b7-4421-49ea-bd94-89a7902469fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e5dd5ac-6dcc-492e-a958-b71e89f1b935",
        "cursor": {
          "ref": "aaed3f51-3f2f-443a-a8df-9336e60a969e",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "2db7087f-ad78-4a8a-b5ab-1c739093ef02"
        },
        "item": {
          "id": "9e5dd5ac-6dcc-492e-a958-b71e89f1b935",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "4bc06d17-f720-4096-aad9-56ccc3a1a871",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "672db020-ed8f-44ed-878b-ec4993b6c47d",
        "cursor": {
          "ref": "bc9262c0-6feb-482a-aa5b-e1b15598feae",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "62dbd41d-6be5-4088-81e5-b8ccf79c60b3"
        },
        "item": {
          "id": "672db020-ed8f-44ed-878b-ec4993b6c47d",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "c75f5000-dae5-47fc-a685-b1a50463fb4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b146029-aa4b-43e0-bf66-f41f8427857a",
        "cursor": {
          "ref": "0c36616e-d491-4cca-8629-5ba5922381e1",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "9f08d2a9-b83a-4e1d-9104-25407a733cf8"
        },
        "item": {
          "id": "3b146029-aa4b-43e0-bf66-f41f8427857a",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "032ed35c-8074-4973-8a46-fe61e9cc6867",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99a90005-79b5-49e6-81ee-0f22f6bf5694",
        "cursor": {
          "ref": "a74e8dc4-30a4-4146-adf0-febd51ab3394",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "a7c7f4fe-6356-4bb2-931a-ee91ad1fb956"
        },
        "item": {
          "id": "99a90005-79b5-49e6-81ee-0f22f6bf5694",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "f791421f-ad19-4c94-b2a1-8066b87ed721",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b71eec96-7b26-4ed0-803f-072bfe9afd40",
        "cursor": {
          "ref": "c4e8ffbf-490d-45b5-a421-35cda697014f",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "19cdfac2-c315-4903-9eec-a10c9e27c9b8"
        },
        "item": {
          "id": "b71eec96-7b26-4ed0-803f-072bfe9afd40",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "993d6655-3d5b-481a-bc18-383333bafbab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54c6fb68-d73c-4afc-84ab-af3ea7dbc2aa",
        "cursor": {
          "ref": "c9ea223e-010d-4790-8434-4c44044bb9ac",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "8ac60e6a-adc1-4fc9-9cb4-8f97204d2fd8"
        },
        "item": {
          "id": "54c6fb68-d73c-4afc-84ab-af3ea7dbc2aa",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "c87e4012-8427-495b-9a2f-07d53b9f2f5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5bd8579-cc8c-467f-bc46-5f0f29654184",
        "cursor": {
          "ref": "c5030262-751e-4e4e-8195-e0189b910e2d",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "e40cb4da-20f1-4c6d-b8de-0447dfa9eecf"
        },
        "item": {
          "id": "b5bd8579-cc8c-467f-bc46-5f0f29654184",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "045459e3-911a-4154-8b6d-ea2269f2f306",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dabaf67-ad8d-4b01-b073-a9c679c9e5c6",
        "cursor": {
          "ref": "fb38cad7-5462-4c97-bc90-b78156e0c600",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "f2a1db7c-0ef3-4f7e-bb33-4aae6c5923d6"
        },
        "item": {
          "id": "4dabaf67-ad8d-4b01-b073-a9c679c9e5c6",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "9c26ea64-380e-4d14-aefe-8ffb44f6c62c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "999cb6dd-b27e-488b-a840-9da2826f185a",
        "cursor": {
          "ref": "7a350322-5712-497a-8336-c8aa84560140",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "c5fac205-c03e-4af8-9595-3d62b8c3d05b"
        },
        "item": {
          "id": "999cb6dd-b27e-488b-a840-9da2826f185a",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "84225b4e-dd92-464e-b316-74452e614c41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bae736e-db38-4c21-ac04-24ece4971afc",
        "cursor": {
          "ref": "255a5f33-a6c3-415a-8891-5104f65f583b",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "7a598421-50ff-4851-867d-705722daa6ba"
        },
        "item": {
          "id": "4bae736e-db38-4c21-ac04-24ece4971afc",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "04587e88-f2ad-4340-b346-0d3d6bb84bc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b22565cd-daf9-442a-a045-cdcaab9646c6",
        "cursor": {
          "ref": "ab24916d-92cd-4893-ada9-13674a3a9478",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "a59b6080-7207-4440-b71f-9d9773cd78c0"
        },
        "item": {
          "id": "b22565cd-daf9-442a-a045-cdcaab9646c6",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "43dcaf29-8e59-4a66-b594-9dfc00350dbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a3224f8-60fa-4da7-bd33-2b7be73a7f4f",
        "cursor": {
          "ref": "e8ea4fc1-69c7-40cd-b7a0-6a0a262607b0",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "30e4080a-b63c-4201-a3b1-e9ed63d31832"
        },
        "item": {
          "id": "7a3224f8-60fa-4da7-bd33-2b7be73a7f4f",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "acfe5436-4755-4e8d-90eb-bc188e8b7dc4",
          "status": "OK",
          "code": 200,
          "responseTime": 153,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "e5150317-08f5-4376-ab0d-43e44118b76b",
        "cursor": {
          "ref": "314dcdb7-3bfc-4629-acb3-a907fa657219",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "34bd77ee-eb5a-4fac-8c77-a8dd1929fbe1"
        },
        "item": {
          "id": "e5150317-08f5-4376-ab0d-43e44118b76b",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "60873219-ab71-4154-9019-832f668ff096",
          "status": "OK",
          "code": 200,
          "responseTime": 223,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "f31e2d53-bd00-4e03-b579-f3f0ffe1b6af",
        "cursor": {
          "ref": "6afe6c9d-a750-4949-8ca7-37013e7d79a2",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "75fabb9a-34c2-47ae-9a6f-cd2a5fb12be3"
        },
        "item": {
          "id": "f31e2d53-bd00-4e03-b579-f3f0ffe1b6af",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "9bb22447-41e2-4f3c-a392-518a81eb3ebe",
          "status": "OK",
          "code": 200,
          "responseTime": 124,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "53432e51-185c-40a3-9116-bbf6bc4d28ec",
        "cursor": {
          "ref": "7c3c968b-65d3-4e14-a3e2-59e46970bdad",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "a2288618-b3ea-4bd3-81a3-ef57ba96bfdd"
        },
        "item": {
          "id": "53432e51-185c-40a3-9116-bbf6bc4d28ec",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "6c7a8adc-9cee-47c3-9b71-6b607370320e",
          "status": "OK",
          "code": 200,
          "responseTime": 130,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "948dcfc1-89eb-43fd-802f-f0f13495744f",
        "cursor": {
          "ref": "e588d1a3-06bf-4fa3-840d-361b575717f9",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "978a9295-f699-4b45-9190-354a6fbda11f"
        },
        "item": {
          "id": "948dcfc1-89eb-43fd-802f-f0f13495744f",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "3b252226-39ab-42de-8720-d11dab8cf13e",
          "status": "OK",
          "code": 200,
          "responseTime": 131,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "ade8e3be-550d-4eb8-a0d7-6c5112e6655c",
        "cursor": {
          "ref": "5906e950-4619-477e-8347-206be404552f",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "3fc763d7-336f-43c3-83aa-ad72f524e74c"
        },
        "item": {
          "id": "ade8e3be-550d-4eb8-a0d7-6c5112e6655c",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "b063e493-967c-4d46-8e1c-d1add5646bb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffecd7ab-e103-4f47-ba86-0964d61f6335",
        "cursor": {
          "ref": "6b722bbb-fa5c-4979-9c75-8124e502a2e3",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "07b01b29-fda9-4b52-aa75-18f093a59cbb"
        },
        "item": {
          "id": "ffecd7ab-e103-4f47-ba86-0964d61f6335",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "89906e52-4d6f-4483-b4c3-273b741aa5b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e834f072-13a8-4cf3-9445-4cde3032f102",
        "cursor": {
          "ref": "66c04ef4-80a4-4f37-af89-79a36c15deef",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "6783e3b7-c0c5-4493-9ef6-b3b23f49d3b6"
        },
        "item": {
          "id": "e834f072-13a8-4cf3-9445-4cde3032f102",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "15240682-c9fc-4501-a9ae-1e7d5837705f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79fe8195-0c34-4685-84fa-7d8c402c040b",
        "cursor": {
          "ref": "88001573-0d33-48d2-87fc-fc4e25f72019",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "0ea6c8b1-a443-47ac-a596-c7f086da68dd"
        },
        "item": {
          "id": "79fe8195-0c34-4685-84fa-7d8c402c040b",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "e03d3000-6f0a-4d6c-96bb-e3173f564667",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38f82b8b-fb3f-47e3-88d2-de2b94cf31f2",
        "cursor": {
          "ref": "8774d168-a5b6-4c8e-a373-608f56429ce3",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "4fe668c7-8c9b-4120-a502-4f2d27900a09"
        },
        "item": {
          "id": "38f82b8b-fb3f-47e3-88d2-de2b94cf31f2",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "d4cf22b8-d4de-4aea-bbde-221f1033374c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c76e377c-e221-415e-a1ad-b2aa46e153cd",
        "cursor": {
          "ref": "271f3fe2-9468-48f7-8962-24595639edf3",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "5a2a6be8-3e86-4cf4-9d97-85ade757cf83"
        },
        "item": {
          "id": "c76e377c-e221-415e-a1ad-b2aa46e153cd",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "7f71993d-5e5f-40cd-b6d5-f78248f4a882",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17c17ecc-d0e7-4e7d-ae87-52fbd94cbfc2",
        "cursor": {
          "ref": "1a260154-7893-47b3-b93b-8a51e0ba3e22",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "8012a99d-9ff8-4b0d-97ca-8baa24d5181b"
        },
        "item": {
          "id": "17c17ecc-d0e7-4e7d-ae87-52fbd94cbfc2",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "9aed3419-ef8f-410f-8d51-37c71c4cb33f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a40a9376-b3c0-4a44-a97a-d7c0d3b77724",
        "cursor": {
          "ref": "b9f917c1-3e8d-47f8-bad7-965e01873329",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "951159a8-f8f5-4d27-8254-ed752c1c457c"
        },
        "item": {
          "id": "a40a9376-b3c0-4a44-a97a-d7c0d3b77724",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "f7e167a8-c9bc-4cef-9ddb-3f1d96f5cb1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f327ea25-8c23-4836-8aad-b785be554636",
        "cursor": {
          "ref": "c4416218-c85b-4245-8922-3c19e70e28f8",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "b1f39b3e-118d-4e18-8515-26fa53b73a2e"
        },
        "item": {
          "id": "f327ea25-8c23-4836-8aad-b785be554636",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "111946ad-f4b5-4a74-a59c-f29395059ff3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ef077ff-8b68-4f09-b553-b01759fe433a",
        "cursor": {
          "ref": "41086fac-7527-4bbd-87db-bf7c89b5597c",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "a3448fbf-f8ef-40c9-8f13-c2453929fcd7"
        },
        "item": {
          "id": "7ef077ff-8b68-4f09-b553-b01759fe433a",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "ab55c67b-e45f-4362-a898-c4e557c8f94c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7107f95-b06e-4e23-895a-9eb9ae976476",
        "cursor": {
          "ref": "12507e22-a6cb-4541-b2e5-4f44447e7807",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "e0dd78b6-0853-46bd-8d8b-204c1ba490d7"
        },
        "item": {
          "id": "a7107f95-b06e-4e23-895a-9eb9ae976476",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "a4d3825e-9146-4ed8-b212-9e5b00ee54de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bae8e99-533f-4448-90c6-ac79208a772a",
        "cursor": {
          "ref": "70d2fd29-8127-4045-af56-2b3a2bb123cf",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "cdf67e4e-bf17-4236-9cde-b1d30f6f8de4"
        },
        "item": {
          "id": "5bae8e99-533f-4448-90c6-ac79208a772a",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "fc611d8e-ff4f-4846-84d5-55ea31099fdc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04b1aaab-41e7-4b63-96fc-f2cabaa0110c",
        "cursor": {
          "ref": "b158a6b4-b08b-4fc7-8830-71b9b5505229",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "2ff5490b-d9ea-4008-965c-3bd00893cb70"
        },
        "item": {
          "id": "04b1aaab-41e7-4b63-96fc-f2cabaa0110c",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "9afd6099-a030-4729-85f4-be57def246a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "312bb118-284c-49e4-acf4-dec49fa83a4f",
        "cursor": {
          "ref": "94fdfc5a-3999-4604-bdfb-b63e3d2ff765",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "906c92dd-63ab-4c8a-89b2-631e4cf4ac76"
        },
        "item": {
          "id": "312bb118-284c-49e4-acf4-dec49fa83a4f",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "a48027d2-1cee-456e-83e1-5634aa7be160",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5183175c-3cde-453a-a81f-e9066576eb7e",
        "cursor": {
          "ref": "18658c8c-feca-4e9b-931e-c748947dc482",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "9248475d-0f4e-4236-ae0e-29c728b29372"
        },
        "item": {
          "id": "5183175c-3cde-453a-a81f-e9066576eb7e",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "9c374057-f98d-442b-a5e0-97e495870617",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10d2d5c0-335f-4ccc-a1de-69163217e682",
        "cursor": {
          "ref": "5d72793a-8d1d-41e9-ad30-b5a775118e5a",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "0d32bf18-ee35-4ebe-9c12-ba15b47e4e91"
        },
        "item": {
          "id": "10d2d5c0-335f-4ccc-a1de-69163217e682",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "28d03bdf-4b21-467e-8093-884e416395de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a1d4c74-de8a-410d-b843-e6c84e9f5a3b",
        "cursor": {
          "ref": "bdd08776-b9e9-4817-9f6a-70b7ef231453",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "115db803-97e3-4edd-b918-3fd664b617fa"
        },
        "item": {
          "id": "7a1d4c74-de8a-410d-b843-e6c84e9f5a3b",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "ed50573e-4bbf-4db6-8fbb-e0af977d062f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cf96bc1-07dc-428f-ae09-b2a92b76dfbe",
        "cursor": {
          "ref": "67d66c8a-7ebe-4b0f-9494-0f439ebe3421",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "78cecac1-3289-4d9b-a068-dc66717667a7"
        },
        "item": {
          "id": "5cf96bc1-07dc-428f-ae09-b2a92b76dfbe",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "22bbf6a2-f509-494e-9818-6e6298375126",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83075493-20a2-45cc-aec3-605d9214fb81",
        "cursor": {
          "ref": "11e883dc-c6e8-41d3-819d-54fbed5ff533",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "1bc1b641-3c46-44e4-8dc4-325ae866bbe4"
        },
        "item": {
          "id": "83075493-20a2-45cc-aec3-605d9214fb81",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "68e59662-5d43-436b-8ca2-8576294f03ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff7cd0c0-b37f-4249-9b0f-5f1f0908cdff",
        "cursor": {
          "ref": "9019cb70-885e-4468-af0c-bc950c474391",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "2c6a9abe-4f1f-4fd2-941a-5a203f6a4020"
        },
        "item": {
          "id": "ff7cd0c0-b37f-4249-9b0f-5f1f0908cdff",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "c1b77042-ee1a-4758-a878-691565c69513",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "259d7566-06c0-4fbb-89b8-78c18bbf4367",
        "cursor": {
          "ref": "63e9984b-30e1-4475-a8ba-159f22b95a88",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "6a14739a-5f8b-4f3e-be33-618f20400575"
        },
        "item": {
          "id": "259d7566-06c0-4fbb-89b8-78c18bbf4367",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "6cd6157e-691a-43e6-820e-376c3c592410",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db8d6117-c039-4293-b157-7492160d75a9",
        "cursor": {
          "ref": "2bfd9b93-7494-4e05-b3d3-438168413cf2",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "61ff6251-184d-4ad2-aa49-26c20e360c29"
        },
        "item": {
          "id": "db8d6117-c039-4293-b157-7492160d75a9",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "bcf6ba25-826a-47e2-8240-16461f53093d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e440b367-af95-4fc6-8ef3-7b6f4913e506",
        "cursor": {
          "ref": "6db0e391-06de-4e79-b2ce-396e76fdd016",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "c2c5c8c6-f3cb-4c0d-add7-15607f675622"
        },
        "item": {
          "id": "e440b367-af95-4fc6-8ef3-7b6f4913e506",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "b6ffd8a7-b7be-4774-975c-aa1728fffe93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b663282e-5627-4de4-9481-1162d7a7b6d0",
        "cursor": {
          "ref": "465037b6-a537-4fe2-b1f1-c715177aff27",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "9f23a92f-e1b7-4dbc-9bde-43b968524809"
        },
        "item": {
          "id": "b663282e-5627-4de4-9481-1162d7a7b6d0",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "f49b2856-fcdb-4b1c-ba27-fb6e42ef7495",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1df93315-6a87-44d3-b34e-e8a2e5b1ab0d",
        "cursor": {
          "ref": "310f77c3-325e-4e1e-a63d-746015d1cbeb",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "468a03e4-7193-42b1-b896-08a3287527e7"
        },
        "item": {
          "id": "1df93315-6a87-44d3-b34e-e8a2e5b1ab0d",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "61b64030-60d2-4921-a74d-ceb2dc664b58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dfb167b-a324-4f82-9f9c-5bd3fbd6de90",
        "cursor": {
          "ref": "56ffb2c6-202f-4994-8af3-be2d7eb443fb",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "707998aa-65a3-4bc6-8e59-04e22e9ab28f"
        },
        "item": {
          "id": "0dfb167b-a324-4f82-9f9c-5bd3fbd6de90",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "e38f4717-dd80-4840-942b-41db7e105e53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd424604-eb0f-4d42-b0e2-62762350194a",
        "cursor": {
          "ref": "5af3f4c3-e884-4bc6-8291-a7e0c81209e8",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "718586fb-88b1-4ae6-b4f8-e57fdd577798"
        },
        "item": {
          "id": "fd424604-eb0f-4d42-b0e2-62762350194a",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "13a6e7ad-dddf-47ae-abdf-ddb227daaba0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9fc852a-e17a-418a-b888-cece7d7e1fa0",
        "cursor": {
          "ref": "b9a35a13-5cbd-428e-9ddc-c771d9ef45c3",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "15cba12d-83a3-40f1-beef-7317c1d6ae3d"
        },
        "item": {
          "id": "e9fc852a-e17a-418a-b888-cece7d7e1fa0",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "e2473f9c-d7e2-4f3d-8f4f-b443da78bcc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5044854e-53b2-4630-8fe3-82371f8ca24c",
        "cursor": {
          "ref": "b3bb2ab3-6209-4220-b7b7-29882ea8366b",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "864aee17-1f79-4262-b868-8eda89df7268"
        },
        "item": {
          "id": "5044854e-53b2-4630-8fe3-82371f8ca24c",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "73e58cbd-b95b-4ce4-bdc6-268aaa0d6264",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a466f23-35af-4393-a33b-7594c7fa95c7",
        "cursor": {
          "ref": "f885c146-8b07-4023-b8cc-a4687c767217",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "5f4407be-f474-4bc1-b7c4-fc119c7d6974"
        },
        "item": {
          "id": "1a466f23-35af-4393-a33b-7594c7fa95c7",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "0462f9be-a1f7-4b19-b2e7-a423d5bd13f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4ea3807-776c-4f36-9a32-35806fc9ef11",
        "cursor": {
          "ref": "9fa99559-9808-4243-8501-77f5e144d766",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "41cd3408-e864-4088-b2fb-5b3b88999251"
        },
        "item": {
          "id": "e4ea3807-776c-4f36-9a32-35806fc9ef11",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "9b058b13-fcba-4b5d-97bf-1d4ba124e8e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac8d782d-3ee4-49a8-981a-2581f5951f4e",
        "cursor": {
          "ref": "c222de70-fc9b-4986-ad6e-08e864b53586",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "55c0edc8-00dd-4d06-83aa-eb56c223c725"
        },
        "item": {
          "id": "ac8d782d-3ee4-49a8-981a-2581f5951f4e",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "e0139f53-a6ca-4c79-8138-ed88ec1d45d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74b46827-7830-4d67-9e7c-c21917c69970",
        "cursor": {
          "ref": "7932558a-4035-4f52-a986-1e2f78e43aac",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "db148b71-71ba-4949-9480-a5eacc5c1d67"
        },
        "item": {
          "id": "74b46827-7830-4d67-9e7c-c21917c69970",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "076458d2-3e14-4d05-b9ee-b3588b1f17ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c260d86-3b8c-45fd-b660-7f15626ce91c",
        "cursor": {
          "ref": "1fc00d7a-234d-4ac9-acc8-852c7da82375",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "9512a00f-e994-4cc0-8a13-a3443f434a58"
        },
        "item": {
          "id": "9c260d86-3b8c-45fd-b660-7f15626ce91c",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "739e73c8-59c2-4eed-a7d5-cc0caa7209e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb46615c-e6e6-4d2c-9402-33d444cd80ea",
        "cursor": {
          "ref": "fd9f71e1-5e7c-4eb0-a632-22b548f0ed90",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "7a0108e6-5e8f-4fb0-a1a4-5822ce80b9aa"
        },
        "item": {
          "id": "fb46615c-e6e6-4d2c-9402-33d444cd80ea",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "b7934cb5-999d-4eaf-8924-c52d287a663b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77ed232d-9d17-470b-a8f2-2a68fe69a8da",
        "cursor": {
          "ref": "4e333abf-7d99-4195-a8a6-03c806475bc1",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "766fd9d8-44ed-4819-a9bf-6f7564393af7"
        },
        "item": {
          "id": "77ed232d-9d17-470b-a8f2-2a68fe69a8da",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "e3e53026-f421-4f28-a49c-3b1248977447",
          "status": "OK",
          "code": 200,
          "responseTime": 140,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "2b8d418d-3a33-42db-ad8e-7f07048db267",
        "cursor": {
          "ref": "8fd72f8a-03d8-4379-8921-c4eed04f9648",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "6461fffd-eb52-43da-9d49-73d6056d9fcb"
        },
        "item": {
          "id": "2b8d418d-3a33-42db-ad8e-7f07048db267",
          "name": "credentials_verify"
        },
        "response": {
          "id": "772742ca-7ab6-431d-8d77-c1e2da4cd15b",
          "status": "OK",
          "code": 200,
          "responseTime": 143,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "43ac618a-d36d-46b6-aa0c-7a49bd790bb5",
        "cursor": {
          "ref": "fe3b3407-742a-4422-b68e-f2c0453f0a4a",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "46199c08-86f3-4931-a25d-701ddb81d454"
        },
        "item": {
          "id": "43ac618a-d36d-46b6-aa0c-7a49bd790bb5",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "2ee393e8-39ee-4e4c-b06e-df896753a814",
          "status": "OK",
          "code": 200,
          "responseTime": 141,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "47e0906f-34f3-479c-92db-a20f5c526476",
        "cursor": {
          "ref": "1b4af04a-3ee1-4376-a354-814192cf7fa1",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "3656524c-b3ef-4b70-afa0-547c9c978c67"
        },
        "item": {
          "id": "47e0906f-34f3-479c-92db-a20f5c526476",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "38567960-a3fc-4f3c-931e-79c079c75725",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 26,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47e0906f-34f3-479c-92db-a20f5c526476",
        "cursor": {
          "ref": "1b4af04a-3ee1-4376-a354-814192cf7fa1",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "3656524c-b3ef-4b70-afa0-547c9c978c67"
        },
        "item": {
          "id": "47e0906f-34f3-479c-92db-a20f5c526476",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "38567960-a3fc-4f3c-931e-79c079c75725",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 26,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "117323ab-4c91-421c-b291-b7ba4849eef3",
        "cursor": {
          "ref": "16c6cc0e-7b79-45ab-8e40-e7d417226291",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "238c8e3f-2f23-4e64-aced-956b3f1d0689"
        },
        "item": {
          "id": "117323ab-4c91-421c-b291-b7ba4849eef3",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "d37dac16-119e-4595-84cc-d55dc04c5fb6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 26,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b828b60-a929-419c-9620-9dedcd8fee1c",
        "cursor": {
          "ref": "590daada-dea5-4d81-8cf9-eb469cc335cc",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "e1b4e463-1c8b-4ce5-a9f2-b595a38f35d4"
        },
        "item": {
          "id": "8b828b60-a929-419c-9620-9dedcd8fee1c",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "69964107-ba94-4fb5-a0c9-5bd87e8c52eb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 26,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}