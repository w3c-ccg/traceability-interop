{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "5a87937b-fd80-451e-ace2-bc273b91c410",
        "name": "Clear Cache",
        "item": [
          {
            "id": "9b0ad51a-c878-46f6-a811-fb178b88851f",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f3b43bc0-9ed7-4745-bbf5-2b03c85424cf",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "7121467c-5a67-49c0-9e74-e48e4f10cf31"
                }
              }
            ]
          },
          {
            "id": "8d95a98a-68d8-45e5-a0c1-dcf9992f98b2",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "fe36af6c-6a67-43d4-964f-2faef718bc6b",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "76df72b2-dcd8-4165-b5ea-d35b121d65d7"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "7c1e00bb-b076-4881-a026-79bd8bff20af",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "89441571-ccda-4207-9534-ffbbc81db082",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3af44837-d3b3-49ec-a875-fb73a0d0c9b1",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "feab1834-3cfd-4d76-b54a-bf5cc0be2551",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d2f72db4-769a-4adb-a42b-cbb219516d8f"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "828570ea-3329-4a70-ac0c-691e42528a9a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a69293ca-3ad9-4aa0-ad5f-ff0813ce35ca"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "009be241-d270-48b6-8fcb-30ec6a9a6fc3",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "baa47a09-e7f2-4d54-87f5-279e0ff72ac7"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f297d88f-1eb9-41c1-bc00-88db73aa7894",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "b4a18c02-4e0a-4449-8c14-1f4d2b29cb22"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3bf92518-6a7b-4e44-adeb-765d436b1ccf",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "30852204-da84-48d4-acde-0f34c3521e7b"
            }
          }
        ]
      },
      {
        "id": "e56668a3-5be8-462e-b8c1-71377fe29003",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "31601cde-d096-4e2e-84f2-4078796b0924",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ba9238ab-2cb8-4c6f-8823-7dbf5fbe19a5",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "1920cda7-8e89-494b-8c7a-363ef69fd2d0",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02dcfb5e-8865-4be6-a7a7-69ad32e9cd93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "876ad13e-3a74-4127-a78f-0001d8d7218b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e342fa43-3935-46cc-a4af-8963292e5bb2",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6aa234be-5961-48ec-b45f-651f35d649e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cb57f602-34cd-4385-a7ac-a55712269151"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ced29f7-106e-4da3-8e46-bf6df3e6147b",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecd6fb2d-2115-44d0-b6f2-c8d051f05334",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8c4557b3-137d-4163-b156-975a50590d89"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a52cf277-6250-49a4-b824-491ad5dfa9ea",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6bd5c2e0-06ff-46e2-ac05-29d806d12742",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03f5e683-66d3-45e6-b8f0-8482cdb63c8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5c6a7213-64d6-42bd-b2cd-8c8809d0c51c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d19654ef-8fff-4815-aa54-3a95d497b7e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb236ba7-f39c-4bac-86b4-cf80d626ae0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15c8b91e-a47e-47ea-a45a-e4fa56e3f4c2",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca6ebdc1-bfa3-400c-8bac-ce089612ea1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2e06dc81-8259-49f4-8aa8-d0c2bf924a54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99cedcf4-80db-4094-8189-9819e015f74f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "64aac86b-70db-46cf-981b-2b9dc9c4f4a6"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "4796bcd9-c872-49fa-9e81-1062b401f2d8",
            "name": "Positive Testing",
            "item": [
              {
                "id": "68c9ec4b-5c2a-4a52-885e-85a8b33b62c9",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "12724bda-d006-4c92-b74c-64f9f9b99033",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "12c584a4-cb9c-4013-bef7-03e7fc1c3f40"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f2006802-8807-49ff-aa64-5c231bd9667f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "7208af50-e7ee-42d6-840e-cad741f6b931"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9578a9c2-bc73-4b01-8646-511fbf293729",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8d666238-c641-40ed-8502-d39b7a67dea8"
            }
          }
        ]
      },
      {
        "id": "3005e8bf-607d-4a69-8c81-71e457f094f2",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "ab94b038-072c-402d-aea0-29773815ecdb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e1268c14-5f76-41de-b53a-7b3a317b2436",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "d744d6d6-b720-473f-9071-0c4bd4c6bed7",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5657e6a8-c961-494c-9965-a5848e2524d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d8c57ae-fbcb-4982-af80-5fd6062ae1d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d4fd2b5-a250-48b7-92a3-621d2a0a555d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "284f274d-d5d4-4cb5-a8f2-e620d306d54d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af1e750f-f7f8-41f9-b3ca-a25685700d59",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1823bb9-1672-4a43-a2c1-156107ce2885",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3aa9fbe-2559-4871-bbcb-7187e821c82b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a80fdab-01d9-42ed-b734-b13ce03492d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0c849a90-471d-4f6f-a50d-14507b69f7a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fba4310-fd97-4f4b-b505-39543fd682fe",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b0fd190-e1f4-43f4-9635-c3800a572bae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59c0b1f6-c48a-43f3-8425-452313d74030"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96a1f3b3-a6b3-45ee-b3c1-6cc74eac796c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ec04b524-e1e3-4df7-b2a0-cae4b13001bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "830287ca-4310-4b84-8e03-c1acd5fbc805",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb9544c7-26a0-40f3-9d88-49c19effe9db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "045c2490-98d5-4fc9-b7b7-a9d3a14fe998"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e154567-652f-4b89-9c33-296e23e59777",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b8f70228-196e-49c6-b900-9ef51f01ebbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6e99429-7c1e-4178-a5f4-ecc488b28365",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8544114b-a4e7-47d3-ae44-c0c781c6bfc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b92cfc25-b90f-468a-8cf7-3187243e8a9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c9e5f14-46a3-4c93-966d-e056a3a9555b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fea22ad7-67fb-4d79-980c-89d4efdfba07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77b60875-ad5e-4703-b7cc-d4dc4b037ba5",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3a46215-52fd-4a07-aa12-585d49c593cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "089360bc-aec8-46fd-9ade-8ae1a817747e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56fbfac0-f847-4893-b94a-cf89c280c2af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "af58ff32-13ed-4397-b9cd-c36df77e5e65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "587a5faf-a4c9-47be-a4fd-5dee87afbfbf",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0350f263-4c0d-4ce3-b526-f9a99f29568c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d30e9577-aca2-4881-bdfe-c89772eb4544"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1985b72c-7a89-49e6-8b3c-bad2da7c5df5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "613772b9-8fa4-4793-8cd3-17bb6cc24382"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af78f696-1731-4ecb-a627-32dad048e680",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da2fdce1-7315-448b-863d-61f5d65d4976",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d671b9bd-5016-44b7-9b32-f320d6872fab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbc659f9-b6d9-4877-b729-4c9e22429fcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "199bf971-64e3-4f50-9e27-c94ae2ed9340"
                        }
                      }
                    ]
                  },
                  {
                    "id": "662bb7cd-25c5-4be8-815d-9ca4b2cbe8a0",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a515be2-86e7-4328-97e6-78a1f7832d2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1d1b0a3-d21b-4969-adc8-967208e6210c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79c46e5b-4ffe-4bc7-aced-3b6774dd2b89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "790d5f94-dd3c-4be2-b5e7-4d2ad35e9edc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e12e027-bbb7-4774-a2d2-3d4e50f831ca",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "196ed634-0486-471d-b579-dce2a5c6b514",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "068548f5-327b-443e-bc7d-902103bf3762"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b784ea4d-bcd6-4090-8d57-de923666813c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c47c3aa1-a86a-45c5-9503-20466ddb4bc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d7a2877-6f9f-495c-8a99-642fff0600e6",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc16c7d6-1c94-47bf-9d9b-327c99199fa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a01093c7-2d55-4897-be17-b9e2cc4e8c52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c46c9c1-9b16-411f-b9b6-900ce35e1b7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "945a6f03-3b2e-4246-aee5-3fda94ac6e65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cedaa50a-bcb0-4e2b-9324-a8e1bacdd6c1",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32f4ba38-fcaa-4b44-b828-05ff2baf3e1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cacad519-2944-436d-85b5-26f6494f843e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3a1b71c-66d8-4bf0-a7a3-5f609fce35bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8715e62f-0c5c-43ac-a0d4-e03086973d10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "589f9812-49fc-40c1-bf25-3c07a8487502",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "263833d5-bcbd-4bb8-9249-c64e6c8d9164",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fde36fb3-a5ad-4aa9-b675-037cf566ef74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e235d7f6-5fc7-4f88-8ea6-d670718a105e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e42b0014-0be3-4970-84dc-c9bbb32f9d25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1633283f-7d38-4913-ab81-812fe0cf1977",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60e99699-828d-4912-adce-3e2054d769b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4cff5ba5-f7b3-4e9d-8201-12f156d4fff5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0c793e6-a64c-4582-b7b9-8489a8d1d75e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3218026b-c1d5-4aa9-9ac7-68c9174c2e05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d66bc2f-8190-4393-ac91-6930e2656ab2",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9fa0ff7-e99a-4279-9b3f-43984970939f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40c6776e-5845-45d9-9e6f-536b3f253d4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55c8c003-0306-41be-89a2-166fab428b58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "272df2e2-5404-413e-be1d-770eb873c8a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de5b92a7-76ef-4075-a8db-c09caf50d412",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "789c8e77-ea1b-4a2d-a0fc-867aeab9b130",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5f12c33-2207-4289-8c66-24ebadcd2193"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35318cfe-60b5-4a7e-a0ad-f4f6dad52f46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1b49737d-17df-44f3-901e-d37f915090f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4ad6157-a2ba-413a-b0c5-0ee30adf579c",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f779cc1-2e87-4671-b76c-bcef677e4896",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4751bb5-e412-4341-a915-8de1af2cb71f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bc581f1-9e64-4bd3-8ecc-37f369abde6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "80a4831a-5446-48d4-a2af-ed66b927b881"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30eb8da7-44e4-43a4-b8ef-95b5bf88da55",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f7756f8-3553-426b-9de9-e7904e9fca96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecebc9ef-e7ac-4725-95c3-6c22312b3583"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65800ab0-a84a-4b99-8850-06cd84744081",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "22dcad38-b6d8-4540-8104-5b35625be090"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bccf1400-16a6-476a-93e4-88e6148df246",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d738a52-8ffe-43fc-bd03-c3c6cc40e099",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9e3c8fc-e6ac-484b-a13f-80324b7cf19f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3f7c0ef-c993-425d-8cd2-ff626142f1da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e288bc87-78f5-48f1-ad09-b03e5b7bdd25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d38b995-1f6b-4244-a3f8-05c1d6ed1f4f",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f34dd102-e661-4244-8aa7-d0117b71d1ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e5fd5a0-46f1-45ff-8ae1-5e587ae3359d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a31e6ef-f6fc-4665-a839-6941cf859a61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "51301d23-485d-41c5-929c-356df873d45f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "589a189a-50df-4a26-88d0-c2e830c28180",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a449b757-68ed-4bc4-b3cc-20fdeacc073d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3136f45-b179-48ae-bcbf-cb5f8ad4f6d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d715388-079d-47b3-9760-d25e473130bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "54df0f41-80a4-4cb2-a37f-5c4175d7d175"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39e9102f-f783-4c69-8de8-684abaf0954d",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63b43288-5378-4d86-9fc0-7414fd4eef1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "700efd35-9a96-4464-8370-b294efb145fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a15765e3-ebc3-4486-8b5c-c60e2322b9b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d1d9d4c1-d880-42fc-83db-907e1a3c8bf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6afba53-20e8-460e-9fb6-d3b0cb14d40b",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0945130f-df11-4d83-b639-e7240338e242",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b620929-0bfd-4865-a2b9-4b9866401fe1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9eed032a-3c5d-4e4f-a6d3-30e4e71465ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7de99a1c-06f0-49ce-9429-5491c33c0806"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7451245e-dbe9-4cdd-a0f6-cc6ee9f868a2",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "435bd267-c38a-4b28-a801-8693a14a61b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "553c0b26-c3ab-473d-b181-49ec40deff77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b194f231-8892-4ba7-9761-d049ee02c7ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "972c5807-8ef0-4717-95f1-d707d337f63c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8381ed8-0640-4939-a6dd-9b5da712638a",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4cc281c-18a5-4d0b-9604-1816c1e3f9c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0204b8bc-ca0a-4b8c-9b10-0c7c136d50df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "311afb5b-8350-4df6-9fb9-0d3742949e28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d1486c90-a90f-4a0d-bf60-f83b34e099af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45d805cc-94bc-4994-abc7-d606f87c10fe",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3343128-2ce1-4c85-bb92-9f2801b9eb69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d6e6540-5c76-4041-a6c3-1cecf658b609"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bef679c4-3c96-4a4f-bd24-6300fb69f510",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b3304300-990a-4fb1-be69-9fbfe3462772"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20447494-7e9f-41c1-ba0b-c08667c483a8",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1deffc79-fbc1-46c0-93ee-88c45373f3db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "626c41ab-8945-4482-a95f-c227b820a839"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04146221-4ea1-4342-999d-54969ddbcedb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e15bacc0-4ab3-4f92-9669-9f61c22d23e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81d09d8c-5d3c-4541-9957-7ae7aa32d60e",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db18bc3e-790d-4014-92f2-bf08a0c61235",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41d136bc-7df9-4b2e-bf73-f646fa7208a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5808e11e-88da-4db1-8b00-a1424ae7e5fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9379880b-ab10-4439-b376-cf46534336aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a28e89d6-c8fd-4368-bd7d-1c5ed2355ad6",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f3a1ccd-1aa0-4944-8782-205c895bdce4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f428e89-b1c2-466a-9a51-2f2607ff0fcf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3eabb22-8f49-4642-a57e-ad2648225359",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ceb30c09-c233-4090-8323-41b569c4a85a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9ee41b2-fefd-495d-a27a-c006a4fecce9",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4852433a-d348-4511-b14d-ced0a897fe94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74a7692b-87e6-4624-b7ee-12744fb3ab06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b16ad1d3-bdb9-4f37-8f16-efbc9bb4d131",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "22a30807-a8f5-4d0e-bcc2-eb02add8ca8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "639b6a73-2593-4ad3-80be-db2b41fc955d",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e79feca-748a-44f0-a49d-9b168bf0fc3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9066db13-ec95-4488-8811-130a7a73b8d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c469f06f-16a2-4b24-8d37-3487d6ee88a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5e94b006-d4af-4c89-89c9-6bcf070a2728"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe37f6ca-c84a-4a0f-8212-28e5b0db3d46",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a1d8b7c-ae5e-41a8-9dcb-04367e8904d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f111b88e-5309-48fb-a239-726689fca3f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecc5bfca-1bab-4625-be89-f9020246792e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cfb7410b-ddbf-4dcc-ae8a-51cd9a79fa44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88ec9fdd-61c1-41bf-ab61-93c1d0dc04bf",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e505d79b-2f9b-485f-8456-1d7339451841",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab53201f-1a81-44c1-a500-69152d18233f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffb5fd09-8ee0-452a-95db-9a095f69c39f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f0ee7995-f2e2-4d4a-a6a1-3d09053ea40e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1625ceed-6b4d-4e8b-a938-ed348c890417",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68f612ae-5190-40b1-b629-6212511548ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a7b133c-14a9-4f38-8faf-55025c2e6f98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7aaf282d-9d71-495c-b79c-05fb5b157d59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4487374f-99ee-4d30-bccf-f140d378de1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5d17b5e-b1f5-42ec-ae2d-d3f87f36ca00",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39a71a4f-ffb1-4c3d-9e79-6d4744821a48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1e17d31-69ad-45d4-9f89-9bdd4f9fd0af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "faf42cad-ed72-4669-a415-7c4a223c4f94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "10982775-ef39-408b-bc19-b1810407c794"
                        }
                      }
                    ]
                  },
                  {
                    "id": "436a9a98-c07d-41a7-90e1-095d329e40fa",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e1918f1-087f-4ab3-b009-1d824ba2e0bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7a752f0f-0d6c-4e0c-8edb-57ef682d0ec9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd7f3b96-cf47-49ff-8b9a-6a2c36680e9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6c0a66f6-eb45-4f3a-91a5-96b3e756da27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "158dc58b-fac4-43fb-9536-cf7fc294a395",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c365c3b4-1624-4b0e-85c0-0f3cb19d0f06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bdaf4f6-aaa0-4e59-ae8c-8a7a28265971"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbc3fadf-7dd7-4a05-b740-791dd08fb231",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e994b2ca-8512-4ef6-998d-ceb6db6e393e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1789c5dd-ad0d-4677-bc96-5a00feca1a4c",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e48e2922-5229-4af1-bd70-0bde7c147fc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7f132ad-f000-46da-a958-08caaff5f68a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "439a9d49-6f77-41dc-80b3-2f87cb3e1778",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "e5853c46-3768-4ae4-b4be-f53448c3e037"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cd64e99-7ce6-4735-9d0d-bf4b287980d1",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7eee4be-c61a-4922-8436-ddcf15227b05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ac1d6ca-db18-4ef4-b5f0-8b5dfd3e797d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec32e851-0ec0-4e0f-9bd1-ea80a8a399eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "084cfea7-e585-456a-aff5-d7ff84cf176c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62f0fcf1-4d88-4590-bef4-059a5e235434",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eedbd45e-b4eb-4789-b087-1942a7083173",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f7d406f-c510-4589-9a4c-2dfb1ff929ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94938385-2dc2-4150-8bb6-eab1e7e7c554",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "6b00c989-2e08-42f3-980d-18b170b381ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "334a184a-de37-4277-93ff-4dcc6d0afc8e",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "079e2e94-9825-4022-867b-d6ac10517386",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f0834f5-0eed-43d3-adcb-dacdafa19e7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19e0a412-186f-4acc-8f10-4dfb1b9da47c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "cd2b2638-207d-47ba-8de5-9d2bbc896d1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e6bf845-da7a-4daa-b7c5-30ce995d30bf",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f55d0626-633a-4392-ac91-274660af5aab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44dab709-9c2b-4d4b-bf7c-66b2299f9617"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48959f0c-1d05-46c1-a989-4c3546dcc879",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "13aa3bc4-161d-4cae-94e9-2076a010c63c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe30b722-476b-4e24-85e7-bf3c9c9e0bf4",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b705bc9c-fb2c-495f-9343-eb9c4b3c333c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70aac9a9-1804-4447-94c4-5dcbd727ecc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18ec3ef9-8905-4b47-aecc-cb556f6905de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "282b9e96-000b-4d4e-8cbb-78c2edfaedbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83916fc3-67b4-499b-a5f4-15bf8e922411",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7beefa75-8b72-4e4c-8dae-527beb369300",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "656bc2e7-38a9-442a-b289-15e64a7806a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2704363-8dc4-43aa-afdf-3ec7bf801f98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "9a715f30-442e-44fd-8418-18b4e818ba35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1315ea89-5d9a-453d-bab5-a5ca44030d5b",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "665f4793-0e7e-484a-b5b0-3a4fe82ba170",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43a97a09-b72a-4dd1-b333-239dd3e145c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9aff7ab9-36db-47cc-be75-2788b943ee8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "aef8fb59-aede-4609-aa3d-3d8fcbe82951"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7254b1a2-a10f-412d-8002-e14178529566",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be47f614-a5d7-49b3-aaf1-6dd0df762965",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "395e2a19-036c-4b64-beff-e3bba31ce283"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e6de20f-f6a4-469c-988f-e162ad38b0dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8a4a2c40-840a-4fb1-ac9e-2c2f83ea2e62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d82f57f-91e5-4965-8fe1-99c9c7a2cab4",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bf8bd4b-88a7-43dd-95b0-ae45f24474bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e23da34d-ef44-4cde-872b-ca67717b9957"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adb348aa-660d-4dc9-a38c-22fdcc83dbcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6c2c9561-9bd4-4934-b7b1-f01dcfe45119"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9207f285-80c8-4323-b583-efc86466b3e3",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7305021e-5eda-4f19-a1b6-34ce88a13296",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5dfabf4d-77c3-4a5f-b2ef-0216cef7da0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a830f6b-0966-4ea2-8107-0c657a897bc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6550efc4-89dd-4f17-8112-d075056620e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f64a600-6f66-43ce-86ad-55797ca0789c",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d54a2f5-ef32-4941-abaf-2f1c7ba25103",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e205eb1-dd1d-4203-aba4-826e420b955a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3174bb0d-aacf-4488-ae90-b19fef99cc9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "75702860-5140-4db6-bdc7-e00bfac1c72f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c3dc6ce-1fac-44d6-8983-79cabd93c435",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dbc46ae-37b9-40b6-b083-40572bfd2c7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3989261-322b-448b-8a42-63915a1bc140"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47919e97-bd16-43f9-b87b-197ffdf184b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7c0281cb-c010-464e-9ac8-e1b5b51df8b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6d27c4b-0f9e-4290-a608-881065ae72ed",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a30f2f51-c399-4cb9-849c-2f1f61088260",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91224ea3-8165-4efe-be17-c2d631e823ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24d9e0e4-9cd2-4646-b8dc-2b439b41d54f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "9b6597b4-a6ed-40a0-a7c6-64e48a274787"
                        }
                      }
                    ]
                  },
                  {
                    "id": "323a43f3-401e-401e-9d79-35e5f35222de",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93f6fdb0-ee22-491e-b4ad-868eec98f67d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3636462d-d9d0-4214-b409-a7f9cd4ab1f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9236f11a-f095-4666-b79f-69c06f72a00c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "06d9bf66-9f8a-4887-9d7a-bb58831d67e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b6bdeb4-726c-4ceb-8827-b100d1635c5a",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d261203b-b80c-4638-9551-783a08614f0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "735f45a2-261f-41ed-9c25-9b1aa9802673"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22706329-f593-45aa-ad4e-b5e6cee92dfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c34b39a3-23c5-4f19-b791-9bde41cbb729"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac76696c-f5de-4c71-82dd-7646b9479db9",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c13cb8b-3ad6-4876-bb6d-1e2da98bece6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bfe1d41-2452-491e-a593-7c065d98e456"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02a56a3e-6dbd-4c86-bd41-14c7835a48fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e452933e-b376-46b1-b874-dedb721c5ce7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c156a6d-c3e4-44b4-948e-fefc13f93311",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb48d5f3-b66e-4ab6-8fe9-7e113e527ab4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a20be3d3-dcb8-4c15-9258-11cd9be611a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "434e15bf-51a3-45eb-9671-df9827660baf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "46f8e4b3-62df-4903-a6e3-98f60dd5910e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9345139-3b6f-45bb-b68a-65d0ca20e97e",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "101e02e7-377d-4e45-9965-db56bb72b56d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d4a59fb-9f6a-4fa1-8824-9e2cdc521a75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09d7f349-0cb6-4ea8-85cf-18817d223306",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "1cd6ab57-6c5e-4f63-8796-fb8f74d96288"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3b2a3f3-bca4-4dee-9057-b88f99ed7bc8",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82b7c7c2-cff0-404f-83fd-6f3c8466ebd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b60fec84-2bf5-4bf7-8567-4e16e523a99b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c38bee2-f094-4b32-aca4-8d30cb156566",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "ab4926c2-0603-4419-8817-f117e068b8e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afd3a7b8-9e96-4e4c-9e4b-58796054602a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bce8582-c574-4eb5-86b3-93ae39152d0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2150ec1-2cf1-4fce-b303-44feba7aad26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8730bca1-169a-4399-b21f-81df634394c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "5f3adee5-0677-4c65-86aa-237623a6ba5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dda945a-9476-47e9-a077-245a65b1d8fa",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a3ed893-565e-4cc1-94d0-100f742192d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4c4ddbf-d381-44e0-a401-6bcc27d95b6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76432801-49d8-4fa1-bf1a-6566d33e6265",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "a82f713f-14ee-4ca0-9ff0-a5500f1bb61f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "050c63e5-8a3b-46fd-996e-f5106589f4fc",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bf6125a-dae0-4dfa-a4ea-040193be5740",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7022256-f508-4b0d-b9d6-3ca97dcdff32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ba52296-1459-40c3-95c8-c247585f197f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "1bb56a34-1b7d-4ec6-b9f2-901c79451543"
                        }
                      }
                    ]
                  },
                  {
                    "id": "881d7915-65f8-46f5-b8ce-d2e7f9f6daca",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46c7eabd-9820-4494-858b-f68251ab98fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a34b721e-3691-4b24-be9d-c3fa29486584"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdfb8c81-61ab-49a8-b978-9283a185c8b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "6fec2841-bba2-4c87-a5e4-e3d765771ddf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f77429dc-5f9c-45a7-99c2-9e273896bc35",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e506bdbc-ae18-4f1e-bc29-89646cfa88d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d0c96ba-2139-482a-86ae-7fe3fd911e67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "411ef7f6-7791-463a-b29c-e945cf146497",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "d0200883-0ab1-4b15-8b22-8bf0fa5e4e30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6600932b-274b-4afe-adda-bcfe4df78332",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb7f590f-5bf7-414d-9b28-14a895f8c185",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "848a4375-fd4b-4cfc-8de2-15c2f1840ab1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2154cf03-b124-4777-803b-c5b3aceaed57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "cb60e3c9-922f-4892-9883-74f3295b46c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6843b1a3-fbf6-440c-8889-ef37cb0f18a8",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34406881-0a0b-4035-a6e5-739094c70a88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "390285fe-a106-4fad-bef0-06b9bcb96c47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aad9265b-9636-4028-8782-c1a30944ce9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6280bf58-8993-4ff1-904f-6ac81ef24965"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbe5c9e3-695a-4040-abbf-209ae43137c8",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51aaaf90-131d-47f7-86ba-fa6061b75d15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbd43d93-a314-467d-bf2b-63f53e2686ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47779ed2-98b4-48b5-94e8-0e93b81b7f3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7cb49221-3925-4f18-b2f2-c4491db7a746"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cefc572a-4403-443f-823a-1e5325a3b7be",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c46928d9-fb1b-48f6-944f-d1945f19b817",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18445944-7ab7-4400-adbb-c08b67497393"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98e34e4d-f81d-430f-81f3-3f7d14010e2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bdb89874-147d-4103-a9ae-fd989e5b3d3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddbc038b-a5c9-432d-b659-fccc2566cb69",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "262fca8d-2c87-4d2a-aafc-08de38bc7411",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "111176e3-e525-4822-966a-591950ec5b92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5232b86-0a7c-48e3-b2bf-c517a57675ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "513b64b2-7331-40a6-a557-eaedd3730b0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c5731f8-1778-413d-8e82-f33431945e6a",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6ed5a80-2443-4232-9e47-dae211faa600",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ac54325-0af3-4adb-8c1b-6a6db14a6843"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d399a2b-ed2a-4d98-9e8d-912064bd3ff0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "b28311a9-9e19-4ff1-ac5d-647b1d123fbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fdc7214-7f18-492e-9135-c28f129ca1ff",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae7da4be-0efc-4feb-a9d8-a8dfa3b06f4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68fe234d-224d-4ca7-82c5-a50fde5ba14a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bece8a80-c4ff-472a-994c-1dc236f0be1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "8a4781ef-a1c3-44ee-980a-eb3cb8d87a46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80aa281a-0a47-4c16-af79-fb7af874a0be",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06efae16-7a85-4d15-9c60-6ed3bb660267",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01316e98-ffa4-4640-8c21-73eb2904fc00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59760b64-4ac5-485b-ad8d-283e7f57ca86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4556a701-48c4-4e5c-a3df-bee8a993e8c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1dab4bd-80ff-4003-a096-5a534f5ffe9e",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca991ba0-1a5f-486e-ad3f-961da04220d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e966fa4a-6b22-40c8-a1b4-8e3fef058cb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d0b1baf-4e89-4c02-aeba-eeff9d1ea487",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a747bebc-2771-42ce-b9fb-36ee6a1485f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15220015-8869-4e01-8fa6-55d1e26214c1",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73ca224c-7ecc-4461-bdd1-465af72fe1a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b00243d0-3b04-41e2-b115-e2de584b845e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58f9b16b-5dff-4289-978a-0a6bd783df2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "dca182ab-372d-4553-bc44-695fb3398e96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36b86fb1-9d50-4a01-9b10-893fa7222787",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "012953b3-f34f-410a-a84a-05a32b60126f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "155e88b2-5211-4bd4-b0f1-7eb76c85934f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41c98b79-c84a-460f-bb94-6a1203cc3884",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c3334e58-f565-434f-9a6e-f8ddcc1d7356"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54fce8fe-ecb9-4c8d-ad72-603db00634cb",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b632d45-ed81-4627-a4f5-708cb26c08f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc8c1331-3f1b-44d3-92c6-45eaf25d938d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f29676f-57f3-4df5-b12a-03fca681e696",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "194c7eda-3257-498c-a363-39ea2e4b35fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f99f3a8-332a-483c-9c3d-b7a51cf4941b",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41bbb020-ba7d-49b5-b4bc-cd2aa3a276df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53ff350e-a2e7-4c0a-a414-c75dc9752123"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acb61679-92e5-418b-a932-daaf0a32f02e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "676dac63-7182-4788-935b-648c4c4f72cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "647ecead-37df-47bd-b1a1-8df98cc62326",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbc77abd-6ca7-4892-9362-f48cf71aa2b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3750673-c03f-4bdc-aa7b-337c6c6e8bf9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "266319a0-16ff-4e79-a8c4-62c94f0f9c78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bba39836-c541-4d5d-9de3-45182e222963"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ffc5546-18b1-4aaf-b209-1090b0e7f5a7",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c046d29a-c629-4f51-8e4c-d78c63cadc2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7b809c0-f0b9-4796-8b33-2edab12d083f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bc1e36e-d931-47f4-a46b-fe18632f07a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "88b0c393-dd6e-492a-a152-886af2de5b55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3e34f2f-7cc6-4eeb-93e1-e65c76d3b199",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0457bbf-9547-411d-8084-1e5a94aa7f65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64963277-bc27-4007-90c8-ff711b406490"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "474f87aa-233a-44c9-94eb-97bdaa574ec3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a3145ef1-e429-4ebd-b23e-b915f40fae9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c29e249-1b94-41ba-bfa9-2e951c9806a4",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcaa7c63-cf84-461b-a1c4-55672e136948",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3c46c85-794d-4bcb-94cb-6b3b54c5ec46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40ae5fe2-8822-4311-8cef-7a4ec321fb33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "64e030e3-db14-4adb-9c63-a0509c4ca802"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec8e532e-80c3-47c3-9f9d-02d8fbcbb434",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2654f0b-df54-424d-a9cb-367f2a2cd784",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "148a5009-31e7-4d3c-afd8-c9a73c4dcc07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3522cc08-b81f-491e-9614-907a59f45637",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "936e68f7-a481-4422-8613-4034a9c47eeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08910c75-6453-4170-863b-7e49f33311de",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a045d14-b404-4188-a7a5-a06ad2e750ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be307098-c390-449b-babc-02c5380f65d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac0fba3b-234e-4e2c-aa4d-3cee21f7ae20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "24418af4-38c7-4d81-b12e-a84321c2027b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e153b39d-581e-43c9-b276-7195001e5d00",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "388ac61d-8eec-42ec-aff7-234d18c4c003",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11bfe7f6-9425-4830-bcd4-92f2e9768b1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cb50384-0aa4-45d1-911b-e241e17c9357",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b6b04069-e2c0-48bb-8857-24ec9b88da39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10e01f5a-a1ab-4ba2-9002-2f5de7545f97",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "094b50ee-f621-46a2-b7e5-7282fe5a040a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d511c15f-d8f8-4933-8843-bc67819fa9db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "594a14a9-42c7-4d2a-869e-dcfd0f7f0c67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f3b49b76-6b1b-4945-b633-1b3be1758e22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8391a4bf-e9cc-4e9c-98cf-e02f7f2b2818",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef3c763d-f595-48d9-a1d2-e2bf045ea7ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7fd816d-0f1c-420f-997d-9da9f8ae875e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97475bcb-c53e-47f0-afb4-d8b70b6fad8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ff8cb99d-0163-458f-b569-68c060232089"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b33ffb9-4b79-4470-9ee3-dcf61b010b12",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bc18692-c870-4416-af84-31c02fe51460",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e06b2bd7-fd3c-4832-b7ce-377476c6ee0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e12e70e4-14f0-4128-b6e7-c39b6b475d62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b2b48e00-7465-42b7-ad6b-8b1286d6c8ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e91d68d-e5aa-452c-af68-7b27e5fc8d62",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "255c1837-203b-4685-88c2-57aa97afb7d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "761d16c5-8b8f-4e9c-8877-082081b183ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cd32450-f739-42f0-9161-d8d067d623ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f8eb37a6-d4db-4bd0-9483-ef7adf83f267"
                        }
                      }
                    ]
                  },
                  {
                    "id": "272fa4ea-565c-4353-9608-2188da81e00a",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4844f64-1cb9-4571-8c4f-f03aca4ee3b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "986d0ea1-3fbd-43cc-9dba-c4a5a1560fff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f714c632-bed8-470e-811f-98bb191ae384",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "29d901e1-0b1f-47d5-babd-3355eea74687"
                        }
                      }
                    ]
                  },
                  {
                    "id": "963667b7-bd45-44d6-b981-81062acca931",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15839c85-b761-4948-b0a1-385eae1cb1f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8128c773-ab6b-40ad-a26e-8fa2e72887b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bda3f0e-84aa-4d2d-aabc-5189ed5f75ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "cf9e3612-13fe-4f14-a262-77273edb2d84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "322a8cbd-e0f8-4363-8b70-a59db3ad6486",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e21f271-82f9-487a-88ef-c9442c237073",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed86af8b-e236-4d48-9eb2-b05a92a3ca09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bbe7dd5-bae1-429a-9534-1175b3f85144",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "52408007-4229-47d0-8371-44a4694cd3ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40af4beb-4e5e-4db2-a622-540319a29b19",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e6d6f0a-0227-4d49-b0aa-d61ecdb82873",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f87e067-1dfe-4c5b-a1be-3f032ce50836"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e15674cd-80d6-4f85-83ac-dac654ab0b65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "4329feaa-dce1-4447-80da-90e17e958abf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73779cd8-ae47-448f-bbe8-015dd02866d8",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebaddfcb-5edf-4b68-ba71-91f0479ec57f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9688291a-efe8-4449-958b-0c6a0cc32755"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe515c8f-1449-4c12-abf4-221492302aa4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "e9914279-3e29-4d87-aa6b-d15f2a546fc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3355c86-91f4-44d0-a0c6-18e1d758f438",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e479ff7-4a59-40c9-86e4-a7dd104e9951",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "90a7dd26-08ce-4738-99f2-c3b68cb90bd5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04dc11fd-a1f8-40b9-9b39-f067d5c1f5cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "94b71830-b93b-476d-9793-0f3913b68a17"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "918a9e1e-d7b9-4b16-9496-01c25ede0841",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "030ce7ef-e1be-428f-8223-6c18b38ed9d0",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1089875-4396-4a6f-9201-459e19d01644",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9db087c9-c7e8-469a-8de0-e6b884aabdd0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5114820b-550b-4ba7-9c45-5396df33b02d",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0016d46b-b483-4738-8a32-06d3edad4080"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04d1b9ca-2a3e-45b9-a7c4-b8175c9ecdf2",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fd9585b-0017-4cd3-9538-3934c24a42f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4ed008e8-d7e3-4f32-9934-163e5aa6ae09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8057f8cc-85a2-4c5d-a1c4-5f904f329cee",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "17248995-b74b-4341-8d8e-ee09d8f18fd1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3fb7362c-3dad-4735-a4d7-1b8abe0022ba",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "42112625-902c-47ab-899d-ba2ac1254674"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "491430ce-fdc8-4726-a27b-31f6623f0954",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "270725e9-6d7c-43a5-b284-a31dc19371e1"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "aed9a786-bd5c-40e6-b492-956872428e22",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "654a906a-2ab8-4159-ae4c-fb2223717d31"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "5c682ee5-9dea-4d65-99fd-a18792ee7e3b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "796b0377-cf6d-4983-b911-b31e61307479"
                }
              }
            ]
          },
          {
            "id": "b1edcfb1-f5e1-40bd-a127-e0c5a7e9e628",
            "name": "Positive Testing",
            "item": [
              {
                "id": "050ca30b-9d73-4ada-8b9d-83597e9ab221",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "487f3eea-4775-43df-94b2-4fda0cc934a5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "135d4517-3e6c-4630-b0bd-c99980d81abd"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ecc810f6-0946-4851-ac9c-ce8839f3e67e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a635d8ba-ae6b-46ed-98b0-3bc46efa3f6f"
                    }
                  }
                ]
              },
              {
                "id": "e58af1bb-c3a0-4f70-ae84-e6a513a261ab",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3fb42a05-f4fc-4e8a-85e5-a23255360079",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4a146bbe-0d86-4409-b48e-61022e1cf1b3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "510fcd38-2eb7-4f96-a2f7-1c2c4faba081",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a99805c3-9b3c-4825-9359-d5e1c16033ca"
                    }
                  }
                ]
              },
              {
                "id": "3adfc849-f56e-41aa-b55a-b6b4941c96b0",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "78c98daa-7920-4c56-ab91-76f6563e6a36",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "dcbffffd-93a2-4326-a472-23e4f86ac80f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9a379714-3fb1-4342-ac38-eb31bb1ab3ee",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "425d8bff-4f5d-4df7-bfda-985f546f9f51"
                    }
                  }
                ]
              },
              {
                "id": "2b5dd153-0431-40bd-8c2a-80083c4639fd",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8da0e896-1894-4fb5-add7-13d32a65e3b7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fecbed97-772e-4a8d-8d75-87c41e1e80d8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d0ac035a-9be9-4211-92d2-30a6b8fb616b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "42a567a2-7ca2-4eab-9529-84a11dd7c783"
                    }
                  }
                ]
              },
              {
                "id": "58cafbf8-f707-4797-b1b9-eb8861f8f9bd",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "828259f3-4fa8-47d7-8ac6-c0e31549495d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5b118c16-17ab-4213-a549-3686fc43016b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "eae6be14-8006-4660-a14c-e6a5a71bd599",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "8cbcf072-22a4-489b-8872-6e613954d79f"
                    }
                  }
                ]
              },
              {
                "id": "c96f0f9b-024f-48d5-b69c-73b1bef2c546",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "eedf9b2b-eac1-4eca-af7f-5ef773cb7774",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cbb2538a-bdd1-4a60-8d94-4cc9fc825dd0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "250a7ff6-7186-4393-b480-e91e8dbf05d0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a62cbd5b-23d4-4cf1-9294-4bc620b4869d"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1611c254-eddc-4ff9-b8b6-3d940aceb2ab",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0b4aa161-c4d7-4549-83ce-5c4d815bc633"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "85fc2a26-1112-46a8-ae65-056778904b4a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d18bd9d0-f8af-42b9-a537-3259fbe59559"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "553461cf-c13a-4664-b2ca-6ab22d362178",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "cd30f0c0-7e6b-47ed-9ebf-4afe52b39ea2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "05015a64-32ad-4e39-be8c-c1046b66b805",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "644fa47b-256e-4744-a642-fd6f481bc423"
            }
          }
        ]
      },
      {
        "id": "192398ed-68d0-4d39-a7fc-05ab91f84ee1",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "bd4b3bec-bfbe-4639-93b4-21095a1d16f1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "30916557-87e5-4089-b197-17a7d041c9c4",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "429837d1-a792-492a-812c-3fc023be1aa0",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2337f49-5ece-444d-94a7-62fe6c734ccf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73d0774a-e8a5-44c2-9e6d-721561b9728f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b63f5739-26b5-4f49-9427-562b7939b564",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "724ea63e-4967-4e29-bc4f-fe1265bbbf57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bdeee71-1230-42f9-94d6-af239da1595b",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c15c356f-e058-4b8d-884a-dc202b6907c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8b41952-4ca7-461d-ae4d-bd29e75ae6d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7066825-d7d6-4ccc-af87-fc0eac927e72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "dafca5bd-3884-4713-8b95-7f338a3692fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7ecaa10-9301-40a2-8f47-9e7c164c8d6c",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "608d8057-c87d-4438-a35d-56a80345b366",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0424da9e-0c62-4cdd-b49c-4dc6e2f6576b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c581ec6d-bff0-427d-ba7b-6214eaea2d5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "414516d3-f9d2-48f1-b5c5-9a575f47c55c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9eee573e-176e-4dfc-aa8b-2fee02cdc503",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "612374e0-557f-4944-a836-8ce6650c9fb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf812e29-1444-4478-9235-d4b1c52b06ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c67b4506-c1e1-41c9-b17c-5c96e01a9cc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "979fbeb6-0199-467f-aa5d-21fb0688fbc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39d57348-2b9d-455f-b6ed-283413482a16",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "205f23ad-0836-4613-979f-56b43938bcca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4828031-23e3-43ea-8f83-2c1e0a51ed8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b80ed1ed-ff8e-440a-ae85-2898c4a7bd02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8709067c-8166-48c7-863e-fe894fada7b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db92c0ba-b239-4ffb-96cd-0d02292c200b",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19737e4f-dbd8-4c35-907f-66121e7f3911",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "890c5092-22a3-4c6b-9eb8-91788d50a606"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02098fdf-fbc4-4f1f-b0b4-a2e85a79647b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ce280e7a-9002-407b-9dfb-09216327516d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "266e852b-3db5-42b7-8e5a-768e1212a3e8",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3e8d2d1-9f17-4040-ac02-5a1d679893ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56dfc04e-8c8b-435f-b7a7-0a8cce00b232"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc55d374-f305-4666-93ff-3cf48c643ff6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "5c8b7d04-8193-4423-b33f-f9dc7de299fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "682a88f8-2598-4551-9a0e-66b9cdb70399",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c23cf241-561b-473c-895e-2d575e5207ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81ba7e1a-4ba6-4b76-a43c-206b004d8c5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "357549f9-20c3-40ca-aef8-bab6205f1d8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "06874283-8afb-43cd-be94-351df65bb889"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ad390cd-3674-45d7-a4dc-68e933ff200e",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12898bf5-6116-4aa0-a630-d861da646f7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f748067-2577-4224-afe2-605dee109e74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de82772d-cd5e-403d-b8f9-b014cb6abf6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b39fb4b8-11fb-4801-a9f0-29706c6d0921"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31cd4b9f-d83b-4e21-a08b-2408830e8f98",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70b381f4-4097-4200-94c2-1a59f305e288",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "721a445a-53a7-44d0-8756-bb3f610f6622"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7df3b2ce-6b41-4c3b-b66a-a924683619da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6c6cf935-cccc-48ad-9173-f723976c3a88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a012e88-b9d7-42fd-b22e-d6025bd85333",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8719426a-b81d-4814-9af0-da4590236dfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "145051c4-dca4-4730-a702-8b8425b8988b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4c50ec5-d6bf-4f63-af77-4a5d076cc198",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "826e175f-f1ea-4bae-a1ef-f8bf69a6efa4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06e4067d-23eb-4fd2-8936-dd1a14946608",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1b97647-6fa1-445f-80f1-94651b1fd664",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be708891-2df8-4474-808e-5da5155487b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff230001-8c1f-4729-81a1-274d789e97e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "dd5d3a69-03de-473e-bb0d-ab47af83de7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9e9b679-84ed-41ed-a92d-ac52408848c2",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3d95b96-2030-4dfe-b28e-63dd57f75c30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15453e9a-6e49-47df-9489-d8ca0ee5f10d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9982822a-e074-431b-872f-41c09b5b7049",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9ba21e20-5c3c-416d-b472-4375f5c5f7b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34a1788a-63f5-4d69-a267-735f3ca80386",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c01ad38-b84a-4547-a654-2856c0f79278",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8f0076f-4dcb-46ba-aaff-ed062cd0ab3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddc494f2-999f-4044-a7ef-e369254efa9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "356ff1ee-7bdd-474d-988e-5cb3bf6b2971"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f39ed50d-3fb9-4a30-aa30-fcf6b17fdbcb",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2791bedb-fc06-4a5b-a558-49fd5f596e32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "957f46bd-ccd6-41a9-941a-93cd63808942"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c9a0009-cd65-4b2a-baef-0b3eb34b65da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "f6548f07-3106-496f-840d-2069711309a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8922ee5-a06e-42be-be60-2087c74ecbc4",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9ddcb75-259e-4e32-8b6a-b7cf28eb1e44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89a0c9d2-f9de-434c-a3ca-9fb5afaeee59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b1e90a2-f8bb-404d-95c1-210e2deabe3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "a1178612-9e2b-422d-a9e0-803bff533324"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31c6ef41-844a-4b39-9ff5-3378b2675de3",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdcd25c4-4ce0-452b-b3c2-16fde4467d31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "286f8a75-e1ba-47e4-9bf5-d62ce418d1c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32389ad6-b912-40bb-8bd4-e4d8e1584db4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "bcc88b36-62de-4873-bfb4-0ac65ee3c618"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8932eaf4-4b19-442f-af01-dad47e54ab83",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "887d70c4-460e-4f53-9858-f65fa4c88759",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18ceaf16-78dc-4248-967a-1eeb2581faf2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac34ba24-76c2-4c57-b14f-f3847f21b3bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b2734bbe-5afe-4dbe-b6c8-5aabf781e191"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ddaca13-bf70-4be2-b8f1-850bc702c63c",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cc84cb4-a383-4aa1-9a95-f4dcb3051d5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b0c38bc-006d-490a-9250-c0a8ea7d0dac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d87ce3bb-8f9c-41e1-a1e2-b86a56ff3bc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "253e1e30-095e-42ee-b979-02fd928f93e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50d45dc6-20fb-441b-b5af-fb668b20eca9",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5333524d-fd3d-46ca-bad9-6970298610e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46bd76cc-9e4b-4446-8178-e6118e42c5af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17fd805c-c8b7-405f-977b-725783e442bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "15c0b3a4-9c52-44da-8769-04ba8ee218e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88ca41cd-1545-425a-ab94-f185142d6154",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f93dc46f-19b7-469d-af8d-b97ff0e8fb30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14199e52-511e-436d-bde4-b307c2c7552c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5450dce7-a715-46f9-8ebd-8c554a237ab7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9e708810-7ff3-4707-b2ef-f2c3d65bfdf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1e1b8bb-701c-44c3-b234-2b148318e0a5",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd4c8a2f-4355-45ce-adbd-30bc2b9d83e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1eff4afd-0e25-4c6e-befd-eebc4eba9e3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bd89d1a-3291-425b-8cc0-344a2276d890",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "97b01848-65e0-480e-9afc-b5f3ae746f43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "148c262f-b86b-4c10-a0b2-27e3090fcfb5",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6a39893-8153-4a03-8077-910d753fca6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0eeb13cd-a31f-4f42-a510-824834043793"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de93ab04-8902-4bdc-853e-2f0453ec151b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7174560b-d77e-400f-ad13-032af0b10be8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c911412e-8925-4c51-9886-b47cf916be80",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6287fc2f-a982-4aa4-9f25-192bf46f3a9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce471381-f1e3-45fe-a012-48f3d1fbcf69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "514ccd71-c242-42dc-ba9d-ccfc48556fa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "15144fcb-e296-4116-bc5c-6464f3c2da66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0d31cc3-71d9-4904-9ada-ff4c35c64927",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe91dfcf-8775-46ea-a15b-c890a7fb0fd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca49844a-e604-4ff4-a6e1-f46085031fa1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e442f01f-f42f-472b-98d7-4038d465283c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "300b6d26-e803-4c64-a77b-f059d69c746c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a5118c0-87a7-434f-b684-d9e1ad68b100",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0e84fdd-8bd8-4eab-9e11-47238479cb29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca3cb215-3576-41e7-88b1-64499ecf3b26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4ae8479-6c9f-4cad-b81a-34fe43e559b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "594f4736-2f4f-4545-8618-6e036fdde407"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f44969aa-44ed-4064-aece-a2b360ddcb0e",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d21fa5f9-02b1-4d0f-aee5-bc773ad2b858",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f60f0692-865b-40a1-9360-b08a7a151fd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e49b923-1781-457a-a827-1633d5f09118",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fda89f18-a100-4cf8-b84d-236458dd761c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9d6188f-a515-4cd4-a379-bb519603c100",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d724235-b03c-46be-8c87-dfc7601f0996",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "119a0988-78eb-492c-b4cb-be1956b62c17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "443bb077-a4bd-46aa-be83-c6bb24b31101",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a9022eb8-68e7-4d6e-8282-ad56adb0ee3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1258f1eb-f5ed-4638-811a-369b45e402ed",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c44bc137-7746-47a6-8005-c1da24f2e971",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e705216-98c0-42e1-9647-f4b7c51702ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fef7b2bd-6a32-403a-9afc-fd8d7e386111",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "061fbaa1-96d2-4059-816c-23240b0b820e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "030dde3e-0634-4033-b271-5ac9770ecd34",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38b5e20f-3156-44b4-9725-e18ff9b8f217",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c5532c3-ac8a-40d5-8a40-68cdad1f9203"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31766660-e01d-45e9-91e5-dba903f4536c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b91f49ae-fc0a-4dcb-a07e-051a9d840ed4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f08c83f1-8408-48ad-89bf-c51fefaa7425",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9303aaf4-02e1-481d-b8bd-8b7426131370",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1dcfd09e-680a-4caa-b410-05159ad2ba03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf765bb8-789d-4bfa-aa83-ab955855aa8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "aee5f565-0051-438e-80eb-5ad9066b1a23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0783c867-25fb-40ae-9a90-63171cbb283d",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ad24f52-1dd2-46d5-9997-7144a7bcd1fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9ca99ea-27ce-4a07-89ea-7b1ee85b79b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fafa2bc0-3a81-4254-82b8-ae6eef4ac08e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7a9838ec-ac17-46e3-9a2d-12d7ec191921"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f5074756-6a40-43a1-b616-0f38cba3e1cd",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c0d95f41-6c2b-4b4d-8a42-6fc2329d3174",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "117bfdab-6aed-4393-9c19-06831fd38004",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "81c17d4f-8051-4e92-b751-5726481b6d29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4990762a-fb0a-49af-99b3-30e1e8ba63e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c173a243-1348-41aa-97d8-7588a73d2eca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec6aa836-470f-4a65-a212-e2d1eb0458ef",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb77bcb4-748f-46d7-9a5d-edb253b08803",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "51cc75f8-5054-4b74-9820-4aa5b6c86b07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b107e85-9bae-4f66-afea-9a7dc32f9ee4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7a388226-ae22-44e2-8ba4-498faf88fd1e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9e82ebc7-6f4c-40a9-94b8-1b741cca5c80",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4d3fca78-233d-44f7-a77e-2dc56be55119"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d65c2994-a8a7-47af-a586-4ad32e746e55",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e9c521f4-79b6-4417-81f6-df091a6d71e4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1d85e1d9-1858-42b4-8c73-1b08253e1bc8",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "d2566447-74b7-4973-b0e8-909f15e0cf7d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "97dccd17-68f1-434e-b0cb-7cbd0b213bec",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a05dcb89-2760-47fa-9484-e9533369d54f"
            }
          }
        ]
      },
      {
        "id": "ac6b2661-1291-4180-a6f7-88d9c58f9a1f",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "dfc1d508-3370-45a6-abb6-5436902b1d48",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f361d304-853e-40dd-a4d8-ccbfdacb62e6",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "bba0daf8-d01b-4a50-962b-173d6cabec5f",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d61e03a2-a291-4e5c-a51e-415ceddc0da5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7a7f385-c947-4eec-82d9-f807001da411"
                        }
                      }
                    ]
                  },
                  {
                    "id": "485cef7f-60e5-4f8a-bf6f-c93be6d3e160",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7308a4d2-cceb-4ff5-bd93-50132593a90b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f7effb8-a794-443f-935e-8403ff43a8d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53c5dd6a-436b-4483-847a-7ed953a2a872",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b301b3fa-3acf-4209-9c1a-ba48b1e5e62e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47576d66-fb3d-4ae0-b064-7fbaa26ca102"
                        }
                      }
                    ]
                  },
                  {
                    "id": "397aec5e-853c-4dd6-b66e-e0cb3e8de127",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a46b63b6-8c87-4d98-b1db-3434e467aacd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4079902a-acb1-4de1-a77f-69c70f3d74a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7741f074-d34b-407e-9af7-cb82dc5e613e",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "989b772e-08aa-4f9e-b9ff-3e2f62aa1efa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bdb5311-e47b-4acf-8662-78c5fffaa358"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cd092a7-e4e3-4558-a653-729daa29db44",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "728121d9-b814-4601-9300-66e485ec1cbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d392d28-5d4d-45c7-b54f-184451bbe067"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdcfb260-f413-42e0-b141-108dbee6b219",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd3cc6d8-0ca6-42a7-903b-bce915e4b8ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "871be01c-bfc7-47fa-bd5d-ae4c27119b0b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73389cce-5997-4fb4-a1a8-268af0f19b54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "574bb151-13fa-4cbd-a3cd-9a5caf2c62ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee810188-a99b-48e7-816e-681a2906cbaf",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5bbeb9d-6109-47cf-a616-dc20aa9bc20d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e3e89ba3-c954-499b-901e-67dc5df7badc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bb33450-c9d4-42ca-b032-4e4ad225248b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13776f18-41c8-47f9-8b81-732e76f9e738"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0565a581-86c4-44bc-a1f1-0687f3b0b094",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f9325ea-6045-4a58-8283-73dd2c43239e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b6448fd9-e3be-4656-a584-f3c8fa98f6b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b4bd4d1-787c-48ee-93ef-7fdd28fc5966",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fc88bb3-c5cd-47f7-aa2d-43fbde49fc63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f0a76ae-258e-49a2-afd5-5f61bc554e97",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46a9a8b1-ad2d-4789-86c7-2845a9277774",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0e1b9530-aaf8-489d-90b5-9aa5811a8285"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b39022e-c459-4c21-8411-90a201742840",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "867fda68-6977-4596-a23b-2061db551368"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d78c01a-967e-44ec-8361-1c890e390632",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2233c73-ea90-43a0-8fc8-9ab32d2fc722",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1df133f2-7354-4260-b5e9-42f3bd3706e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc6a07e8-c22d-4784-bc0d-b2f70fce4ddc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61e6ccab-94d6-4703-af33-c5e3155143ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "550b78f0-4fcd-486e-9ad0-9df70b29247b",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94227be7-1309-45f0-81cd-f16ccb999340",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9962bcb6-2d29-43f5-9b8b-7a92fc178ee1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d54ea403-f907-4442-bee0-a8ae4cfc2f86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7434f50f-abc7-4765-861b-d7b12bc2c170"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0ee9122-40df-4eba-bece-83e93e227ae9",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37f080c4-956d-4075-85ae-167872307104",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1bf68d9f-543b-42ca-830e-6e88ff7503a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48da4056-1fef-4eff-96cd-419a10ffb58c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90ce35c5-1606-485a-bf37-c655ac203006"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b0245b0-dcde-48c9-a704-04de970939dc",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11dc823a-94b5-4ad0-b9d1-4cd33be5d8e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5da719ff-38af-4f59-a25f-003b2a0d67e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a65a9053-4959-43d6-aca2-f8a26b0a91da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69cdb544-99a3-4a4a-97ec-361b5d431091"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f844210-8502-4acf-a2bf-8d013df21ffe",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16ca0b03-9c9e-4403-8ae1-4c28e31564c6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7b3cefbc-9eaf-4151-8b5c-4f30228f349d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd9a35f7-67e6-429b-9157-ade3082b842d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69543568-2983-4348-a6a4-ba1bdd44bd37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "267c469d-032c-4c37-bd1f-361859123366",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8714656-0de9-48b5-857d-db140c175745",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8071c0c5-840c-4ae5-8e8c-ee87ceb66d6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3f2ce81-0d58-44df-8376-893ba52c69a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e9daae3-243d-426e-9d85-72532053c92c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5763af40-81a3-439e-bdd0-86d18aeab636",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf6a9e17-776b-4280-9122-20291ad1b835",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31965a6b-7e9c-4bf6-8d84-9d47985bbf0f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f1fcd12-c963-4e02-b50e-6a179035b0a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07333c6f-3470-4d55-8cb9-367cd725035f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1441ce1f-52c8-4c38-8caf-ac1560a2aaa8",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6836bd7f-d95d-4c24-820b-ba396e7dd7cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80aaf75f-c296-4a3f-b2f7-75351e3ace86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c2d00d1-a49c-40f7-8c91-85be866d8719",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfa0cab2-eb3b-48fc-9ba7-840628f0e99a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57c5b876-d55e-473b-a5da-fb1133553a9b",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba8a30fa-988c-4b76-a779-b1716ca043e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d7c98e8-d8c6-49a2-9594-b77f998b3afd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43b37c49-78fd-4b1d-a669-abcd076f2a06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cca8226e-3111-4ff2-9ec5-fef90dc04f36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40aedc0f-e7c7-422e-a713-a1b4010008ed",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "091543db-bfc6-4a40-a303-04c08748db68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "901f07ae-9bf0-4bd1-8b73-d0401e58f004"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ac22c1d-b146-4b0f-ab96-12efaeb74a75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "282ba8a5-6edb-4073-9611-a72b48dc833a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58752eda-2d43-4846-8999-3cfe9bf1e186",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f824e5d-c734-449f-bb45-7bc8c6a09d86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69ff71e0-b513-44fc-8d0e-88bc8c2afa3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c023133-bf30-4517-969d-41d5edd80692",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b967adcd-4072-4362-9c83-9ad801ba3d7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab165eb9-0027-4e4a-b0a3-e912043a21a3",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff7c0c56-47a8-4c32-a956-cf720b107ebf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cded06f5-9cdb-4cb1-8450-57e87c5646fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f0bc96d-91c8-49b8-ab08-f22585c54556",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c94b1aa0-af20-438c-8f6c-be8d69f505db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "282e971d-f1a5-4df2-853b-8e1837e20b7d",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "983d40f4-ce6c-416d-bc78-b953cda2230e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5963f8f-3793-49a1-b158-6d9fecf53fe0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26da1f50-3142-4f59-91be-9969f856d0ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02ddd262-c4d2-4011-8cd0-6e3b223d17cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "236a863d-b8e9-45fc-8608-60d6d7c5ad6f",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae5ea17a-3bc6-498a-af4b-da107c9f972b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a9bd0c20-a15b-456e-96a7-22d1b0f2e054"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df534e25-325a-4c3c-a08c-07bbe9534c97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67df0fca-0d34-4467-a18d-25f7a4a51177"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74289456-a600-4460-be9f-492849666791",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae1ad843-2af3-42ce-80c7-54728da9c938",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "575c4efc-328e-4960-a9a9-b54fa6c7fea1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11f9e5d5-9d04-486c-aefb-633727539487",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "261a2490-0f46-463a-8410-d3e4a7fd690b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05bea851-cddf-4acd-a83b-95a76685ddad",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0becc4c4-a2e0-4961-927e-f0cab076b6f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ddfa497c-4859-4add-9c70-d0a806f2af0b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "720884e0-f2d7-4b7d-a6d6-b0f62517815e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04de6477-1409-4cb9-b786-1e2c1295fe1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56c15b72-d0fa-43a7-a812-0d10d579795f",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9009a9d-01f6-4da5-bb45-b2dcf15bc346",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "26539e7a-39d8-4ee7-992e-0020af8d038c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd4968b5-8157-4d70-bf55-2d09a58e0489",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "124ca041-d175-4ea2-8c19-db0e01ed6bca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad11b243-4ba7-4d72-98a1-c5629123b117",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea01bb37-0320-4556-b388-d11ba870dbc1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8c0b3d0-bef4-40aa-a03a-a86def392439"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b285e25-37d6-404a-9084-59ee449b338a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07d5a2f5-46de-4cee-a4f9-48919b03a2b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cde68bb1-9f1b-4240-a06a-23a5f2802e07",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3678eb91-325b-4ba2-8198-693cf5f78b5a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e552bd89-1bfe-464e-bd7e-493bb00bb276"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73cafcb8-42e4-4372-8b60-7d75b832d18a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db00f8b9-bbda-4e0e-8988-4b015819ca6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c96e45f-7d3c-47a7-a9f1-184d64fd5059",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cf3eae4-5112-4c06-9f03-505eca59e6f3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "23a896de-232b-4d9a-8203-48b26694e96f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43053e04-03cd-4d54-b173-902a3e1f155a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "594168d6-ee42-402c-b491-f046de966f3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81642a87-7377-4363-8c6d-b93fb528c57d",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "feae26bb-ba45-48f2-9279-31269ba27584",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "991db195-bd19-4751-b8a7-f49e56716840"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fde5710-91e7-41a1-870c-5758aa82a125",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7a05324-52f4-4a83-8dfa-3d156a5a45e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef9af7b1-4ced-4bcf-9750-3dd8f9b3e13f",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ae3ba58-6601-4ed8-ab2d-95a5ea125aac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b5c7f42-f2f7-4caa-a65e-46f496dde878"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cafc218-8a6c-4bf1-b6ad-65a24e04fdfd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2fffa78-d255-4ac9-a501-e9998777d266"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b2da991-c69b-474d-90f4-425b170f6611",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78041878-948d-4293-9694-545dfc306bf6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "91012ba0-a658-4a7f-a787-ea38a8f0f0bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b81e332d-c18e-4665-b867-d35ffd9524e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e51561f-6fdb-42ef-b907-368763c57f8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4c8cb10-b44b-4159-837e-af99e89e44bf",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbd9569b-8a1b-487c-90ae-de03f50f0524",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a1714212-f0ec-4682-a8c4-2c63f3166ec7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf6df24e-4bb7-48f0-a62c-aced91f4c63e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90451a5a-cfae-4ee3-895b-282b34bf85a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "867cc2cd-29b7-48e8-806b-8270e3158881",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb8ae26c-e10a-4329-8ba5-15c67f6ee78a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0da71f5a-6798-4b46-b770-722de2029d4d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87eea8aa-8bd1-49d4-b396-c77fcd29cd08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "954ca7bf-b336-4cea-ad16-e7a5a477f6f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8bbcb28-9833-4cdc-a875-3b50010bc2ea",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "484bed65-60d0-4441-bfa4-1821a8abc4c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47ad816f-35bd-425b-9e5c-163c4a425099"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dc6bd5d-ecdd-490c-8339-afaa6292da3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09a14b33-a012-43dc-b51a-ef0022ba0090"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e3d3647-0338-4b5b-981b-f37937355c5b",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dccdeeaf-3226-4b2a-bd1b-5af5a75ef9ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eea996dc-9c34-4228-a551-7fc7a3bb4821"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f009a0d-925e-4845-bc43-374e05f37185",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c2b1afd-00c7-4c95-b212-64a180dcc0d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b7edfef-648d-47da-9178-279f00e39964",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7df93686-54b3-4eda-af97-729d5c7e5a3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3cc0d41-a229-4bda-82c9-a369ca3c2e24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b4e704a-f740-4fca-a337-db177516a183",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d9cccff-331a-4460-8609-1ef809d3b536"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c2cab2a-64d5-442b-8e5c-3827603b932a",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38910829-c8cd-4d2f-88c5-020fa2734aba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82d07076-6ce8-4723-992b-3e66ef4a2c9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "495a7db9-3216-4874-8bfd-b98104726cf2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7f6f043-3183-4633-8664-f2ff7742a0da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6f5e132-dcdb-4edf-bdb3-45433ef16169",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b20cdc90-249f-4242-88b5-a87513a1b1df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a5f82f1-1590-48ed-a17c-0967d826897f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bf6c19e-da82-4075-8983-c4160f6082c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "446b4eff-6022-472f-8a18-045ca3241351"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ee2e87a-e1fc-46b9-9a57-5043f75bedc8",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e60eccfe-e0b2-4fa5-a642-736ca0aee241",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "380c7b32-3516-425f-960c-62e5943bde57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2e3c541-c74b-4f63-856d-c1647d7a453f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58044d89-565e-4347-81a5-a9ecd757d118"
                        }
                      }
                    ]
                  },
                  {
                    "id": "530672dc-d407-47a1-8d54-d0563c9ea716",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f8bf800-b997-4f21-8b89-73681912db82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f8a3b90-fd70-4fda-af33-abb14386df3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f12cb777-e762-4360-a961-b3b821d8bc1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aff1eabf-d674-4061-b3f9-8e37fc9cd709"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03f6cc43-0c88-43f5-a7a7-1c3e3b0bc7a9",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba8e850e-ad90-4d27-a49b-4a324271a3aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7073e01-bb7f-4319-984b-26312fffbd04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec44a941-4901-4c56-8012-e040e12ebf06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68f89636-e08b-4735-8fa6-9d444b7eff4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f087deae-316a-48e0-bf29-2d4b60742616",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c01913ca-0467-4e8b-81cb-39b5eeee5b71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80b378ad-feb7-4c6a-bd79-0f8777a58693"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82ed6c91-e3e6-4c89-ae45-eb6fb23fd30e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7538f3c4-2ca5-468f-b99d-99a9f7756e54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "981b0bea-ad80-491e-8397-682d17b7915e",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fd7c328-0d0e-4e92-916a-01db0e1ef101",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9c1b2fd-a4cb-438f-b3b5-704f117ade6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c97afee-0f82-41ef-b1ce-345a1004af32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63dc7b66-b5c8-454a-a65b-2133134d9326"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5a6277d-1001-4a65-93a4-872ce549b859",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "523d2b5f-223d-4585-b952-34db66d3f55d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b62a2cee-f607-4fbe-ad76-7eb1ecea2414"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a58ca46-8a24-4927-a843-6fd72afe3d0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f481729-a7d7-45a8-808e-d34afcba42d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee1613ac-09f2-40e4-80a9-47ea54d314fe",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d55bf81a-077a-4742-a78a-bf1b07263b5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "484c9050-4f7f-4614-a4e0-6ddaab05ff40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc3dee5f-8ca9-47fe-83df-b1fa41dbeae5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5a8dc9f-4a42-4160-ace8-2b5f8b21e50e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "110b4a1d-94c5-4a51-87f5-953e110ce233",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "867602f3-66bb-4352-af5e-af023ed29ebd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5235eee0-115f-4107-98a0-2c50944008c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92703a1b-6720-46aa-ab10-ab74374c7725",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "676ae845-6559-4601-bd1b-a42838ab7589"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ce7aca9-cb0d-4278-80a6-b20ef771e936",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8161a914-751b-4d90-994c-6953a670a544",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ac494ad-82cf-4df1-9057-b2aefeafd392"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5e3e07c-cea7-4d02-811e-c0043a73c925",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c566c77e-111b-4e34-9c43-bdd3e0ac7005"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78c4ea94-1309-4573-8120-677eda882a84",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bad0a25f-a2e8-4bba-8ae2-219a31090f01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36767a9d-34e9-4858-a9be-6c4dc46f3c51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03fc3a46-030a-4e99-8721-38b459169ba8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd2ec8b0-740c-4bbf-ab26-896d082911dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "721e37d0-2a12-4f96-a4ca-99c7297d619e",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b80c9e58-f847-4409-b001-1e2042835108",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fc9c13a-156e-4983-8a84-e8e9d8011efc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5562a79-b734-4a1d-918f-905e8bde0bf6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3ab7e67-4a3c-468e-a1fd-e1c4c69ebf8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d839de24-5697-4853-ae02-6a7899b83543",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebc95d9e-d042-411b-8c20-ea05a90bf9d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f4bfb71-68a2-44b0-af4a-fb12a127c069"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0232091e-fc48-472c-91fc-1a8f53b514ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e497003-4b93-40e6-bfed-ee9ece3efe24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96db03e9-c99f-42e8-9904-b1af61b52982",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c22dac8d-f707-4516-8c84-0f5d0a97683a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "560c4d16-e199-414f-ad41-cbc2717fa4c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "028fab45-6de3-41f9-9927-b4b53cdb53b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d56e2154-2250-4edd-a437-4dbd5c182598"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf34cf63-d3fc-4920-9c82-b34a11338313",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ff2cd5b-0e05-45ae-a875-608f374ffb8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a697c63-a4a6-49eb-81bc-7d9674409abf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c792d900-d8ef-431c-b6d5-7116368735cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81729d80-1421-42ff-b3b7-2d68957a8956"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b55ef6e-e87a-4c8d-bc9d-ec6da948731b",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8fd46cf-7ce4-4d68-a280-d0678efe66e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b2d0e28-9585-4b9a-af7d-1c43f4516984"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4771faa2-b3fa-4e59-98fd-53f5c07eed01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a79fc2d-ed28-42a8-a851-7d8418338796"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e57cef0-8693-4587-b438-13af4189d6ed",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d493ad3-086b-4596-86f4-f155af5775c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "091ddcf1-5941-4356-8def-960dce1c6e3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55d8e6b1-2394-42b0-9349-58084a719d26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e29ce61-dc2d-4970-907e-4adb3de046a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7680d6a-2a48-44d8-b3da-1958c7d04cd4",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "885bc244-2e08-43f6-a139-059c317bf7fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f24800c1-eb30-4d99-a2e8-86afe6d3b745"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a7083a0-75eb-4fe4-919d-9ac5b623ee0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9605b87a-637e-4e10-8bea-8bbe960e4c96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5296fc3b-330a-45b0-afc1-10bb5a9af07a",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d55c2052-558b-44bf-b0c0-6ec8f84fdc6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "999a6d73-6f3b-4600-b210-651c3eaf1844"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "746d8ba0-a582-474b-b952-b67913a26b36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4768f51c-ed7a-4944-b8b3-da005517a3a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24140ce1-2e31-4fce-bc80-1d65755c4cd2",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be09e672-2d7b-40d8-91ac-e4fd62cf39a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a056232-1fc6-4ad8-b069-f49f66ba5715"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "836c6711-3ecb-403d-85f0-6106a56bc0de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49132361-cbfd-47de-ba57-8fa25f9568f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cf8dd2a-b816-480d-a43d-23239079ca14",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d282de0c-0080-4441-92a1-ee7b8ce0c33c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8abcf7d-5858-479e-9734-abd2063b33e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e883f94-8cdd-4964-a564-24a871a17992",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fff7391d-fc1a-4c6f-8cf3-e916aaa14eb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e9b6616-a6c3-4c60-96bb-686e7227beaf",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4ac55f9-fbbb-4554-8173-d7b2c9429cfc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19205572-4086-49ec-980d-6bc50e09b821"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94f3558c-30c5-4bb7-b2ec-789ddb86cc2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "817bcbf7-50e8-4379-9454-b5e80e4b4be1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35c49ecc-04a7-4928-9b7b-be38356722b5",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc4cfedb-c41b-488b-96c2-2f5a96fbadc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d026961-5d0c-4821-98d2-926ebeedba7d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54609817-d009-45bc-b705-2ac789493c32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee5d4c69-7790-4ef4-9de4-6ec24c714278"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf727f8f-e79e-44ab-b69a-b479a4613c99",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1ead675-6344-4f8e-a1bc-457264b95213",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f04344f-eb09-4292-a85d-c79d4d64c8a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02ac699f-ff20-4a0b-b7d6-c8572decf439",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1b4fbc7-c17b-43df-85ef-885dbfa83fe2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4af062cf-5ae0-40c0-8f48-6765d9b01281",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93230ea2-361e-4f91-bfa9-55bbd526fa9a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2594270d-0971-458c-8982-de7a3739a40a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3ff7255-8ba7-4eee-a5b6-8e408ecf038c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b949f3b8-2222-4d08-890a-b5eee5b6ca02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b4da1da-0089-4cfd-bb22-7becf1a12abb",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1801234-5e27-4f63-a742-f879cc1bf812",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c779f27c-b6ac-42fc-98df-586a557d829d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecc88114-d3be-461b-9290-5554b0f71e86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "260e7b67-e752-4dfa-a034-528cff16b6b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3355895-6fc3-4318-b834-cc629450625e",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4c79fab-1959-4f15-85e0-68679c15a20c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "be1cc542-a0c9-43e5-8612-34465152d324"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41f1f00d-3d34-408f-921d-55630b3a9e8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1019f2ce-5af5-43a3-81c6-9da0fca1a91b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c24e3b78-295b-4343-9a25-2cf52042de37",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa434110-c1a0-4d9b-af37-caf108e0e3c8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8800548a-4eab-41d3-a76f-80b0112418e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7140215-7b74-4035-8cf3-b99cc0d95c79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c6f4ad2-a391-4755-a373-24582da5297f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32f23023-7e4f-416c-8c9b-7d0ef555d671",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9938e07-8cba-4d5e-acdd-70b1d3b749f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e26adbcf-ecbe-4e07-a4e7-fc06e6c3300f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb5e35e6-dacd-4e4d-bd32-e25927828f12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca473a21-543e-4b57-b082-8bb6f6279342"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a10dee7e-f385-4af0-ae7a-c84ad63a6163",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aeca5190-9619-4547-9de2-ca2eda6140da",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2f8b696e-7ad2-4814-a488-61805bad5e2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d081b649-e774-4192-a59e-9ed48137b05d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf6da4bc-8f44-484a-89a4-13901b2f70f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6f82b1b-28b9-4547-ba42-d8883ef1332e",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0fc40af-9296-4682-b3c9-79f7164935fc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7b651a15-4d59-42d5-8867-1ee2c8ab471d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a30c2c8-e821-4d27-b196-251fcea28387",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf98eef5-4a54-4f46-b51c-ef9a739eb000"
                        }
                      }
                    ]
                  },
                  {
                    "id": "789d8f12-559e-4682-8cd7-3118fcb910e5",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9d7d983-c7f9-48a6-8100-0537a6a8d425",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3733eeff-c0d8-449e-bb0f-13354f145ba5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "297b8fbc-910d-4b02-9509-6dbe15a3d117",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ca0db4b-6d30-4b1c-8ec9-7baf3e13867c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55e5f66c-554c-4bab-9f20-8b67ebc23198",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab7846cd-184f-4ad6-8aae-31a6a034d948",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c5e0f0f0-0eb3-4060-814c-7717b6cbf876"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8960e245-c407-48da-a6bd-04f1378d1e1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "383ba993-c628-492c-bf13-557ab0ccd69f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff3c274a-1797-485b-860b-f7baed1f9b24",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddff2abf-2137-4aa8-8c9d-34144ac90403",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "33c4c79b-0a07-446d-833a-ea65546c6055"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ffa4c8f-fb45-44bd-9471-cc43089ca209",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9537ccfa-c89e-4319-9afd-651d027e4a26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cb75f3b-39a1-4044-b02a-90c7671c21f5",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a2d3af0-cec1-4626-b461-e84e82047653",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fda022dd-7d2d-4a5c-831a-3788dc2788f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d639b3e-7777-4f36-a61e-4f7940425cc8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9dc5320d-17f3-4522-927b-beb747975142"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5638af76-2d74-4130-a945-3e4f3e238658",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6933e9eb-f530-4294-9d4d-35973ccec2d9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5ef6910a-6bce-45a3-9748-2f95ba9437b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c79ae6c-94c8-420b-8177-258b388649e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ec035f0-a080-4f6f-adbd-66851dfeff5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e959c64c-9d3e-485b-9b9d-8feeb356c667",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45da39a4-a947-43a0-ba57-60dd1e7e8578",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a40fe206-688c-4798-a021-3def6e3dcc29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11d83ad7-046b-4159-b8d3-6855991a33d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82087fb7-a5c6-4f7f-986d-0ae8608330ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b585520-22fd-41b1-969e-ef1ac4b087ed",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20420719-6cf8-4a3b-bba2-67fd0181e9de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "481eb585-6db7-4188-a59d-73a015d92189"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "129ff4a8-0626-41e6-8bdb-9744e8df8162",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42395b63-c4d0-4790-90a2-8e4d7af256fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7f539a3-7bb3-4324-87c1-ba4b4bfc3833",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b95cebb-aa9b-4b65-a858-22156846549d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e2a87f82-28fd-4b3c-9c00-4747dbeecaa8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebb387a7-02ad-4cc9-b49f-5f148145e636",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7a69999-038d-4175-9308-cf042c3deb45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "051486ee-27c1-4581-8578-dca1ca126b81",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b96dff58-6f24-4cf2-8ba3-8ee00cb019dc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "543bdfa9-20a4-4493-b003-ea0479cd8c4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "064fcb6f-6524-4a2f-a18a-a6f59748298e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6a73241-a18d-401d-abfb-849205abfed4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f6daff4-51cd-412a-b057-f07f3a19fa37",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca4a3f3d-0087-4f68-ab19-3a807fe87997",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "15db2a63-7695-4d86-b53b-2f7332a7aec7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac2a6a08-fbd3-41aa-899a-f6a91be5955d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e5bbb53-913f-4871-a93e-898cb62cdb27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa7a771e-2269-41f6-9341-b85fe45b4c31",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e944d588-929c-472b-a318-5e53e3ef5489",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aadde7b5-b2bf-4f32-ae1b-631a712b5d7e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eff5a499-4cfd-410c-837e-0a958aff21bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7927e6b-ad9c-4791-8ffe-a0a4195ca9da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1733b159-90ee-48ac-b7c4-cc6d0c6724bd",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0da9c2fa-ebef-4503-bc3d-b44a9cb794fd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c4eca08f-d64f-47fe-8687-0b839e7560f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e10f4e3-3f57-4abf-b9ef-a79af7154cfb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0925a4d-0442-43a1-9fd4-ecaf2f63f16b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee4b4999-2a3f-46dc-aed5-ed6af5d846e6",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c01b6a58-fb96-4623-919f-8cb8c5b7dcd1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1c3cbebc-e106-4891-afb7-c4afac5a1b40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f3fcb21-d4f8-4bb3-9b69-02457785a850",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abe3397f-1a47-4b32-a698-4d6d6f39859f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efd67a05-7146-43a2-8071-642ee83ec76c",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "518c702c-f48a-4cc8-bed9-d4147cc76c66",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e1ba143-87c0-4eaa-8aec-66244b8d60f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b22face-b866-4712-8189-71e822de66da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1be967e0-2ef8-41df-b049-e566e6d3ee0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1759e38-bea7-4a75-bc07-889daf729fd9",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f79748b0-7ed7-46ce-8e94-759b97cff546",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "296f9d2d-e510-48fb-8eac-f7918f40560b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7aac9aea-baf8-4a87-b75c-34b2dfbdf25a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d29123a9-9da8-4155-8c58-ec509439c854"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bebb18a1-81b8-49a9-b271-96140af7ab1a",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "280e7ffe-1424-435f-8be6-0de82e96c557",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ae30936-9908-4ebf-ba02-8f037f5b6760"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1b8c0ef-4484-492b-a2bd-88309d7e3ceb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d33354f3-d4c8-450a-862b-d8a5302b91a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "370f109d-553f-4406-8a91-34332076500a",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "981adbee-356a-4403-a2c7-5c09a62a8e0c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aa991bb2-1e1d-4b87-be37-e0265f650d74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45fa19ac-2b16-4e09-8865-328f5e334581",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44b2ee28-7fe3-4086-990c-8cae4930e433"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8cee6d2-6ec8-430d-a083-4f2cf59d2389",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8a7faac-e363-4dc6-b2af-1120cd43a64a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "78c9abba-14d3-496b-8928-1f57d489a693"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6bfa406-8085-4cf0-9da6-d40dff38acc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "811b244d-8a07-4e8d-b0b0-4e29a3f82b81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5d0fd12-9466-48fe-87df-61ad22de3bec",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7fd2029-3fd8-47a3-92e4-e1151e03c16f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "602272f2-cb07-447e-871e-cdb9a986c879"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07067ace-47d5-475f-9b7b-6342d2ea8f42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07aae9b8-ce6d-42f2-882d-bda3cd091970"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46799234-6d83-4e1b-b1a9-9be57783f299",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea2e0160-9329-46a1-8c4d-e40116ed087b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2a2bc953-9f06-4466-b6c3-4c4d17b6c32e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35b227cd-64a0-48d4-9d5b-887dc443fadf",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f50684ee-f63a-4af8-b172-d377efdeee2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65302db3-0924-4ba1-8009-0f43e650cb2d",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e41ab1f-1e81-4432-a4db-6731d87c313b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8339f0cf-16a0-46b3-af9f-602c42ab12c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3829f889-9ed1-46f6-89d9-969d16daaa3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1191e6e-3aec-4d93-ace2-99c883c0c166"
                        }
                      }
                    ]
                  },
                  {
                    "id": "256c984e-d0f0-4e60-8ed8-044f4fd7c25a",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cbc9a73-87fd-4fcd-874a-6f0d490e90fb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c239922e-c1bc-40b6-8d6f-39235b69c3be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3711dae-9e35-4a34-9880-e5142c27a252",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65a4db07-19e7-426a-8c1a-c09227e98b95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ac05454-5d72-46b9-957b-8c90a701fd7f",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56ad6b97-97b4-4dae-8f31-5cd56c8caf39",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d22782ff-28bb-4d55-bbe7-d1887c906bb8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf6f0066-5c64-4b59-a6ae-f7d1c47324ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49731cc8-6285-4c9f-84c7-f037f4a5f054"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f40e6d25-7c24-4ed1-a608-a71ab0748d40",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af577a99-93fc-4cad-84ce-c9f45fdd2e7e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ff41ba52-01c8-48b8-a76c-b05203355a8a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b57ebdec-e8ef-41e3-9f0c-797fca394fcb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f44a14f-ef62-4450-98c4-7070db73ce29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b30b9e2-397e-4cb1-b0f9-69f0fdfff775",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afec10a3-7be5-4644-bebb-cdf3a160f4af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eac943f8-eda7-4fdb-8423-5b64864ed5c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f836776b-5c30-4b52-8c8a-72d6fbc16f2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b18b717-4d2d-41db-b85f-b58105d284d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "212d4207-3496-4a6c-848d-12d07e321f9e",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8b2830c-5da1-490f-8c89-4d3b5d10bb87",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f2926775-d7ee-4cc2-aa36-9bfc5eb76de7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "654499cc-b90d-45db-bfe5-5388d2efec84",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5681fccc-f120-49d5-a0f9-40c0ac16493f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "195fdef3-921f-41cb-be36-3276b9c275e7",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea365f60-9581-4c6f-83fc-bea6daea685b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c2a299e-e2ab-4a5b-ba01-b7df633a7322"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36b21cf8-7015-4b14-a800-a63b893a3616",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fcc2d3c-e790-4034-9d82-02ac9cf24be6"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "02dbe7e6-5df0-4115-9d63-8bbc3ad3bdce",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7f9ade4e-bf5a-494e-95f7-ca07e13229d0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3b7f130d-5dca-4dc3-93b8-b6f7f980f12c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9d8d17a3-2b69-4244-a918-d931d7c9e4a3"
                    }
                  }
                ]
              },
              {
                "id": "400c8fba-a6ed-4e97-80d4-91a8fc75fc1b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b605f810-7bdc-4644-9fd3-4205ec1c1ef4",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4eb4e663-3565-4e6b-a28b-f481083b82af",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "d3fa812c-a41b-4d9c-af56-63a249d5f71b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f177fd6a-ed15-4877-bb41-63ffd40b423e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "eaed5df7-ba93-44e6-bd4f-7dad527a4a5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e97adb6-86b7-45eb-9653-95235d837579",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3193f3bd-2470-4e5d-bd57-757e5a0d0dd3",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "385027ec-157c-4905-91ea-0bdebd5b4bbe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8627174-8bbe-4347-bb65-9bb907a40067",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "085d23a7-7453-4c0a-9ae7-dc06ca5db897"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8ba37c37-5d2a-4394-bf2c-6b1bd9fc210f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e948644b-1022-49dc-a9f7-b26992012901"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "39d79381-655c-424e-9e2f-a810dfcb9873",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9b4b0fab-c488-45e1-9cfe-f8be7a2c9dbc"
                    }
                  }
                ]
              },
              {
                "id": "e8fac216-7f6f-45ff-8f85-7a0ded016847",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "d14de5c7-6f8f-4f11-80c2-924a3b77f7c2",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b7e6cdb-9bcd-423c-ad11-4e7dabd85f05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "57b9f093-c09c-4b62-ae02-75491a4b225f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85645ca4-b39e-4f43-bdf6-c01920af84a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6493dcba-bb9f-42c7-add5-98157aa7c2dd"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "029c7a5b-27d7-42d2-b9ed-b11eed1d9955",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f07e7b46-b71c-4fed-b2e1-081e8bd07079",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "982a2fd4-2c4b-4294-9679-383296d5876d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "b290c544-e349-472f-99ac-e37729744dd9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cb0895c9-c688-4d17-ba15-2198f8567e1d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ecb7c419-d12e-44f0-a89c-f3e437133b91"
                    }
                  }
                ]
              },
              {
                "id": "fa2c980a-adaa-463d-9bcf-6e7b90ca19e5",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a794a272-feee-4e2a-86f3-f5717153b180",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "2a3b0e70-4707-4a39-b356-ed08ff819654"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7643b570-e5c8-4a53-9464-58ba811cbe65",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3165875c-fb28-4b5f-9b7e-c5a7c7a6e384"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "10701cd7-9864-4a28-b2a7-856648326529",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "d0498549-48ff-4eb2-9207-f1075a8ab688"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "be1cb93c-c702-4639-a81f-d22015d7d733",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a692de37-057c-4af8-a1c6-7365e28002f5"
            }
          }
        ]
      },
      {
        "id": "b059e5ac-1a43-4274-a065-87ac8bd76f72",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "b2518ee7-5ad3-4416-b0ad-b4fed12d2064",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a098f078-efa6-4633-bacd-24788a3ed25d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6c292a34-8696-4f50-a083-36558978a66e",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "760c84b7-e766-43bd-8e44-091620a58607",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "da3f2b55-8b1f-418e-a6be-911dc74999bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a89ba328-1996-46d2-886e-71160c8ef3b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "87fbb4d4-9876-4d5c-925e-4fedb00f4a91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42de01a7-3d1b-4abe-a1eb-1d0b2add6390",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d91b9dd2-cdca-40e2-b694-8b7ec8731029",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "30f295c3-9d27-4894-b546-543576fb5a25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df049e7b-40ab-4959-b6cd-35d023bcb7aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "454cbf05-367c-4a41-b9b0-432c02b8ce60"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "14005621-44f7-4495-89fa-c8a178cba0cc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ca8795b4-f2d6-41b9-905f-9d1f18753535"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "18028079-e076-4043-a25e-5c17f1d846b1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fa189cec-d3bc-4d2c-ba3e-e25731e21e85"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e9b05a6a-b4cf-4c8d-aa53-c37680309807",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "d9825c3a-9954-4306-b917-5c535618c382"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b774814c-87fa-4447-8d0b-3bf139fcc152",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2f816aed-2840-4d98-af56-3a4706b42bc9"
            }
          }
        ]
      },
      {
        "id": "7f7b5c87-2d6c-4e8f-ab05-e5dc0b04736d",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "07a5e46b-b6bc-43ad-8487-48f4b3f13a9c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bc88e6b1-13eb-42b9-a520-b01e37c26917",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "11f9e241-e065-40d4-a551-3ed71ef3acaa",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efd873bf-9570-43ab-8bb0-e35ae031b064",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fb3f4e1f-30fe-44b7-9815-9b27b2e63988"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "912ae3b0-9f4c-409a-aef4-0bf9903679b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b2cd2fb7-eb30-4515-bb5a-d0f8012c4b7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "861edf20-9f24-465a-aecd-e41d3730caf3",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95d02067-15af-4693-b0d4-83a521cfb5f8",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "018c4488-8db0-4f0e-b97d-e583a6ad6023"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ecc4602-c397-40de-9cbd-7806f187124c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "172513ff-029a-43ad-af31-c295c4393a21"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "73266fd0-d1b9-47bc-a1ad-1f43907340bd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c981cc2f-5207-4488-b985-d6d3123032cc"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "177ca09e-0f26-4574-9c55-247a952fc695",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "afa52112-daad-449f-8b25-f293f04d5aff"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3c8fff37-cd0a-49cc-b413-40f4b0da0b36",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "72501bbc-33c9-47da-83db-d7d48c28742a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "98c4558d-4af0-4600-9e93-35a4092bfd28",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "38ee0dc4-c528-4261-9c4d-fe7d62454b0d"
            }
          }
        ]
      },
      {
        "id": "1e8ee504-9308-440d-a85c-7f93f03ea241",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "ce9f4f42-2fe6-4c80-999d-b6ba21a56e68",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0506242d-9609-4ac4-b519-71fce79318a2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "67b78592-8c7e-40bd-ae08-ade1e9cbe908",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f915c611-a2c2-4362-b212-14391f0d74c1",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e3ea03f1-a6c0-46c9-88b0-af5a38f0f6da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39ea95dc-b069-4bd9-889f-6363672423c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4b28bd5c-6870-441d-b8eb-b46ae2a295c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce0a1e15-872e-43b8-9177-c80063b2f340",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bb5e94c-f02c-4b38-80b2-fce2586ce72a",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "827e7056-4d49-41ee-8fcc-749fdfe25559"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd1b161d-f8dc-416a-8fc8-958a1ec298d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6db627a5-d9b3-4b18-b35c-d609cad58cb4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cec73788-e296-4aba-8bff-c99b5d5ef486",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6bfcd8b8-342e-4fdb-9344-75ad32f6c0c5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "979b896a-8e05-47a1-9cb3-776b2d7586e2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0bb0dd5b-e0e7-4b9c-abf5-b7daf28ed5c0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "63b72667-230e-4d11-b44e-abf1f5bede7f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "e8a4f095-45e3-4ec9-baac-a03bb406d60a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "da121e54-018e-4cbe-941e-c18346426d00",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "66ceba89-36ce-438f-b929-d1c9ad05bfd8"
            }
          }
        ]
      },
      {
        "id": "479555d4-ee0a-465a-994d-af179c3ee340",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "552c2991-0b2a-4f30-83e6-f6aedda059c7",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d837b2da-3b65-4fc6-a095-fa7955237752",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "a3a0df2d-50e8-44ce-8c9d-2a4be2a69900",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "47f6ce51-55ba-4a9b-b5f3-009010686621",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a8ca59f9-9d86-4bac-966c-0380bd63818f",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 509,
        "pending": 0,
        "failed": 204
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 754.0423076923079,
      "responseMin": 10,
      "responseMax": 28365,
      "responseSd": 1745.7364993415058,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1680654692513,
      "completed": 1680654899268
    },
    "executions": [
      {
        "id": "9b0ad51a-c878-46f6-a811-fb178b88851f",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "7df8ebaa-3995-46c8-8ae7-365a4725b4ef",
          "httpRequestId": "5a0f79e2-a227-4488-b748-f4866ccfb3cc"
        },
        "item": {
          "id": "9b0ad51a-c878-46f6-a811-fb178b88851f",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "c50a3c54-278a-49c5-8f7a-ede93ed0a568",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 0
        }
      },
      {
        "id": "8d95a98a-68d8-45e5-a0c1-dcf9992f98b2",
        "cursor": {
          "ref": "4a9d2ada-07c1-4701-94c2-a86e136e69ba",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "27394413-ade1-4bf8-b953-9e6c2d5a8b01"
        },
        "item": {
          "id": "8d95a98a-68d8-45e5-a0c1-dcf9992f98b2",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "7406a986-c234-48ab-b5e6-371387e9c811",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 0
        }
      },
      {
        "id": "3af44837-d3b3-49ec-a875-fb73a0d0c9b1",
        "cursor": {
          "ref": "16b3d325-d338-4a12-a28c-d9b4ff91c4d8",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "1e6e3673-3707-46e8-98ca-b9e18c9fdcd8"
        },
        "item": {
          "id": "3af44837-d3b3-49ec-a875-fb73a0d0c9b1",
          "name": "did_json"
        },
        "response": {
          "id": "047d5bb0-793f-4705-bb11-f48de6712f46",
          "status": "OK",
          "code": 200,
          "responseTime": 1164,
          "responseSize": 1640
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1920cda7-8e89-494b-8c7a-363ef69fd2d0",
        "cursor": {
          "ref": "f7566d18-506b-476f-bb46-444f81a4931e",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "9b1e0ae6-7062-4cbc-b0bd-3c79cf34156b"
        },
        "item": {
          "id": "1920cda7-8e89-494b-8c7a-363ef69fd2d0",
          "name": "did:invalid"
        },
        "response": {
          "id": "776682dc-b4dd-45a9-ba75-3ca81ab38be5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 740,
          "responseSize": 398
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1920cda7-8e89-494b-8c7a-363ef69fd2d0",
        "cursor": {
          "ref": "f7566d18-506b-476f-bb46-444f81a4931e",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "9b1e0ae6-7062-4cbc-b0bd-3c79cf34156b"
        },
        "item": {
          "id": "1920cda7-8e89-494b-8c7a-363ef69fd2d0",
          "name": "did:invalid"
        },
        "response": {
          "id": "776682dc-b4dd-45a9-ba75-3ca81ab38be5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 740,
          "responseSize": 398
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e342fa43-3935-46cc-a4af-8963292e5bb2",
        "cursor": {
          "ref": "20e11176-94f0-4f5d-92d1-cb95ed25b09a",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "47f40d3b-bb48-4788-82df-bd597fe035f3"
        },
        "item": {
          "id": "e342fa43-3935-46cc-a4af-8963292e5bb2",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "88d5965c-2fa6-4ac1-b628-b2c085db10c0",
          "status": "Not Found",
          "code": 404,
          "responseTime": 710,
          "responseSize": 123
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ced29f7-106e-4da3-8e46-bf6df3e6147b",
        "cursor": {
          "ref": "6c915d4a-45c7-4e69-970f-f21ad16ece2a",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "02377de7-ce66-423f-832b-0a4896317c1c"
        },
        "item": {
          "id": "4ced29f7-106e-4da3-8e46-bf6df3e6147b",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "3342697d-78f5-4e13-86d5-891b179388c7",
          "status": "Not Found",
          "code": 404,
          "responseTime": 665,
          "responseSize": 123
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bd5c2e0-06ff-46e2-ac05-29d806d12742",
        "cursor": {
          "ref": "7a142192-e49e-4700-94e4-0a37c0cd5b1c",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "433d4b6a-d5ae-4157-b8ac-e6147d4bb0b2"
        },
        "item": {
          "id": "6bd5c2e0-06ff-46e2-ac05-29d806d12742",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "f0642b32-af80-4bc1-9df8-699440d8cdae",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 41,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15c8b91e-a47e-47ea-a45a-e4fa56e3f4c2",
        "cursor": {
          "ref": "2900a4c1-2c4d-46ee-94f0-59b8d24802cd",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "777de5b2-01cd-4752-b948-9cf94324b613"
        },
        "item": {
          "id": "15c8b91e-a47e-47ea-a45a-e4fa56e3f4c2",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "2d17c175-db68-462d-a75e-b3b3deb58924",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 638,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15c8b91e-a47e-47ea-a45a-e4fa56e3f4c2",
        "cursor": {
          "ref": "2900a4c1-2c4d-46ee-94f0-59b8d24802cd",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "777de5b2-01cd-4752-b948-9cf94324b613"
        },
        "item": {
          "id": "15c8b91e-a47e-47ea-a45a-e4fa56e3f4c2",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "2d17c175-db68-462d-a75e-b3b3deb58924",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 638,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68c9ec4b-5c2a-4a52-885e-85a8b33b62c9",
        "cursor": {
          "ref": "0a5a5fbf-e422-4b11-a34c-2fd15d67ab4e",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "060b16f2-5f5c-47f0-a339-092333892788"
        },
        "item": {
          "id": "68c9ec4b-5c2a-4a52-885e-85a8b33b62c9",
          "name": "identifiers"
        },
        "response": {
          "id": "9645458c-62a1-4bf1-86ba-6050480d043a",
          "status": "OK",
          "code": 200,
          "responseTime": 1470,
          "responseSize": 1656
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d744d6d6-b720-473f-9071-0c4bd4c6bed7",
        "cursor": {
          "ref": "7da8770e-a81b-4719-b9b7-b6e650d7a0db",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "b4281aa6-ac3d-4026-9cb6-87b7f915750a"
        },
        "item": {
          "id": "d744d6d6-b720-473f-9071-0c4bd4c6bed7",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "a05b3abe-49a1-4d9a-a867-f628046572e2",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 1788,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "d744d6d6-b720-473f-9071-0c4bd4c6bed7",
        "cursor": {
          "ref": "7da8770e-a81b-4719-b9b7-b6e650d7a0db",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "b4281aa6-ac3d-4026-9cb6-87b7f915750a"
        },
        "item": {
          "id": "d744d6d6-b720-473f-9071-0c4bd4c6bed7",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "a05b3abe-49a1-4d9a-a867-f628046572e2",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 1788,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "af1e750f-f7f8-41f9-b3ca-a25685700d59",
        "cursor": {
          "ref": "635511ec-8124-4320-abdb-2f3c55ad3d26",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "c4530cd6-9b7b-4e2f-bc27-b3ce056d8735"
        },
        "item": {
          "id": "af1e750f-f7f8-41f9-b3ca-a25685700d59",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "9391765d-283c-4005-a83d-267d6e889f15",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 645,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "0fba4310-fd97-4f4b-b505-39543fd682fe",
        "cursor": {
          "ref": "7393656d-dc28-4446-afbe-37b788c87096",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "bec342c2-9719-45b9-87df-fae275d83e53"
        },
        "item": {
          "id": "0fba4310-fd97-4f4b-b505-39543fd682fe",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "6b84a2db-6d2c-466f-8588-f2aef98d0227",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 637,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "830287ca-4310-4b84-8e03-c1acd5fbc805",
        "cursor": {
          "ref": "e00f50a1-f072-4cd1-a7c4-a25d38e5460d",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "5adf0803-8dac-4f3f-84d6-2c43749d9b4f"
        },
        "item": {
          "id": "830287ca-4310-4b84-8e03-c1acd5fbc805",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "d08c6745-b9bd-4613-aa5f-d863b59961dd",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 666,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "f6e99429-7c1e-4178-a5f4-ecc488b28365",
        "cursor": {
          "ref": "c14b142f-f01a-4603-a0aa-d43654dfd45c",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "55cc8aa9-feea-4924-a0ac-daa87b35e3f0"
        },
        "item": {
          "id": "f6e99429-7c1e-4178-a5f4-ecc488b28365",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "9599c9b4-8ad3-44ee-a86d-cb9480ebb4fd",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 653,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "77b60875-ad5e-4703-b7cc-d4dc4b037ba5",
        "cursor": {
          "ref": "fb265b0b-3aee-421a-b2d2-1a9144cc155e",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "9cfeddbe-2b68-409a-9004-e3009769a34b"
        },
        "item": {
          "id": "77b60875-ad5e-4703-b7cc-d4dc4b037ba5",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "615bc090-cb5f-416e-af61-485684918b37",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 657,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "587a5faf-a4c9-47be-a4fd-5dee87afbfbf",
        "cursor": {
          "ref": "283f3389-1b85-4453-9734-f7d3340a3a9e",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "8cba76e6-a8d0-4240-9e33-e638b52637f6"
        },
        "item": {
          "id": "587a5faf-a4c9-47be-a4fd-5dee87afbfbf",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "dea44232-31f9-408f-a14e-0ede650dc4ae",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 658,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "af78f696-1731-4ecb-a627-32dad048e680",
        "cursor": {
          "ref": "e25d6905-ae51-40f8-b769-ceea141450df",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "2d1069a0-1022-44a7-826a-d303b7046ef5"
        },
        "item": {
          "id": "af78f696-1731-4ecb-a627-32dad048e680",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "8ad5bf0c-a11d-4165-af40-e76122bc3a9c",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 627,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "662bb7cd-25c5-4be8-815d-9ca4b2cbe8a0",
        "cursor": {
          "ref": "32b8fd98-b4d9-4641-9bc1-0b3b15258ef0",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "dd7ece22-eddb-4521-bc5a-2d25ca4554c2"
        },
        "item": {
          "id": "662bb7cd-25c5-4be8-815d-9ca4b2cbe8a0",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "5ab453c4-ce7a-4739-93db-ed685719a4b4",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 606,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "5e12e027-bbb7-4774-a2d2-3d4e50f831ca",
        "cursor": {
          "ref": "8834dac6-4491-40cf-9f52-10d45318beed",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "8897230d-f27b-4de1-b92c-cad8c54c4f3c"
        },
        "item": {
          "id": "5e12e027-bbb7-4774-a2d2-3d4e50f831ca",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "e6304b27-965e-4867-b502-c8c0ea877374",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 640,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "4d7a2877-6f9f-495c-8a99-642fff0600e6",
        "cursor": {
          "ref": "b656cf4f-9e1a-4d55-bd9f-b8806a3c95e9",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "0070ae3a-7ab8-4fef-acc7-ee60cfceae8c"
        },
        "item": {
          "id": "4d7a2877-6f9f-495c-8a99-642fff0600e6",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "b370086c-df25-4747-952d-66e9de25d43c",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 773,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "cedaa50a-bcb0-4e2b-9324-a8e1bacdd6c1",
        "cursor": {
          "ref": "1b559953-5120-4b78-8916-4201dad19083",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "5bef6f8d-7e4b-4a48-a84b-25de5a7fc856"
        },
        "item": {
          "id": "cedaa50a-bcb0-4e2b-9324-a8e1bacdd6c1",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "875a779c-ddfd-467e-abd2-28329b6f03f1",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 617,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "589f9812-49fc-40c1-bf25-3c07a8487502",
        "cursor": {
          "ref": "e7268d1a-1308-4e4e-8895-dccfcf8548e2",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "195aea5c-51ed-44ee-aeaf-4b1bdc3d7a43"
        },
        "item": {
          "id": "589f9812-49fc-40c1-bf25-3c07a8487502",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "30581c4d-66f2-4838-a447-4584133d985d",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 737,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "1633283f-7d38-4913-ab81-812fe0cf1977",
        "cursor": {
          "ref": "19271eaa-6400-4e6c-8a19-a286af7f8083",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "b0213d1d-81f2-4f05-8e23-ce55d187dc1c"
        },
        "item": {
          "id": "1633283f-7d38-4913-ab81-812fe0cf1977",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "499b0a07-8ab6-42b0-9cf5-d102066376fd",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 1060,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "8d66bc2f-8190-4393-ac91-6930e2656ab2",
        "cursor": {
          "ref": "0e5dc496-12e2-482a-b864-932f7e8cc80c",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "c4d7ed1b-22d5-41b3-bda5-b60b46f3851d"
        },
        "item": {
          "id": "8d66bc2f-8190-4393-ac91-6930e2656ab2",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "cefaa5b2-0b0c-4b46-8a71-798864d1319e",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 982,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "de5b92a7-76ef-4075-a8db-c09caf50d412",
        "cursor": {
          "ref": "5e89ba98-f8d7-46c2-ba53-6adcea6b5480",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "525a7122-c383-4b35-afc9-1fa5f0084a73"
        },
        "item": {
          "id": "de5b92a7-76ef-4075-a8db-c09caf50d412",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "db0ff824-ddb4-47be-971a-6b0e9dff7802",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 913,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "a4ad6157-a2ba-413a-b0c5-0ee30adf579c",
        "cursor": {
          "ref": "337fdf62-d54e-4bea-adc3-154f75991af4",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "fa4e0dcb-1684-4c3a-b225-2bcd001fda69"
        },
        "item": {
          "id": "a4ad6157-a2ba-413a-b0c5-0ee30adf579c",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "21d9899c-b622-4439-ae36-b0afdb682ee6",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 996,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "30eb8da7-44e4-43a4-b8ef-95b5bf88da55",
        "cursor": {
          "ref": "4245d1a1-0e7d-4d3e-81ce-cc62329506f8",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "e0ab505f-973b-40a9-bda2-c6ffb1ebe193"
        },
        "item": {
          "id": "30eb8da7-44e4-43a4-b8ef-95b5bf88da55",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "f74f0730-508a-4874-8423-22c5c05c064a",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 619,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "bccf1400-16a6-476a-93e4-88e6148df246",
        "cursor": {
          "ref": "e51758c0-4645-421a-823c-3e5b298c38d6",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "a773f51e-f621-4527-a67c-f7dd8df32f1f"
        },
        "item": {
          "id": "bccf1400-16a6-476a-93e4-88e6148df246",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "c9a9ccf7-7ad6-4b43-bc4e-bba6715edccc",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 622,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "0d38b995-1f6b-4244-a3f8-05c1d6ed1f4f",
        "cursor": {
          "ref": "449357f4-b24b-46ed-8bd2-316dc108a785",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "480775a9-3b13-4abb-8ea1-9eff286eaf9e"
        },
        "item": {
          "id": "0d38b995-1f6b-4244-a3f8-05c1d6ed1f4f",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "6216b783-2131-49bb-81cb-0289dd3d99c1",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 665,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "589a189a-50df-4a26-88d0-c2e830c28180",
        "cursor": {
          "ref": "29d505b0-4747-4adb-a9e9-afdddcf01eb2",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "3606d009-a5a7-4cbf-9bf4-b133cdaaa64a"
        },
        "item": {
          "id": "589a189a-50df-4a26-88d0-c2e830c28180",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "4e64dada-6dea-439d-9314-58902ac3d2ca",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 662,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "39e9102f-f783-4c69-8de8-684abaf0954d",
        "cursor": {
          "ref": "0660a02b-5d6c-4a32-972d-7866f1f1989c",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "1036aa5a-d4ff-4560-a45c-e315689e62dc"
        },
        "item": {
          "id": "39e9102f-f783-4c69-8de8-684abaf0954d",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "784e1f46-5592-43be-ab45-498abf5a9652",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 615,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "b6afba53-20e8-460e-9fb6-d3b0cb14d40b",
        "cursor": {
          "ref": "4bd1cf97-067e-4a01-b292-5c93927886aa",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "a2e4debd-d62a-4e6d-9318-bd6156f19c87"
        },
        "item": {
          "id": "b6afba53-20e8-460e-9fb6-d3b0cb14d40b",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "3f136fa9-db5c-4ffa-b26f-e44b93050a44",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 653,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "7451245e-dbe9-4cdd-a0f6-cc6ee9f868a2",
        "cursor": {
          "ref": "dd03f50e-b33b-4091-ab0e-d7e53f4fc17b",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "7e36ae0c-12b1-48cd-b458-ff28724247ec"
        },
        "item": {
          "id": "7451245e-dbe9-4cdd-a0f6-cc6ee9f868a2",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "77439fb1-6f69-4e56-9da1-677ff234c04c",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 664,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "a8381ed8-0640-4939-a6dd-9b5da712638a",
        "cursor": {
          "ref": "034fcc42-5152-4e0e-80aa-0a520a84f000",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "ae2540c2-6bd8-403d-80f7-d4ca90491488"
        },
        "item": {
          "id": "a8381ed8-0640-4939-a6dd-9b5da712638a",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "f4ba1792-8b8a-4945-957a-490eb54cd2bc",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 653,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "45d805cc-94bc-4994-abc7-d606f87c10fe",
        "cursor": {
          "ref": "ccae1500-a57a-4ec0-9e54-92c1507feb4a",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "4646f8ca-8ab0-4d13-bd6a-b24afb6062a1"
        },
        "item": {
          "id": "45d805cc-94bc-4994-abc7-d606f87c10fe",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "d7237806-24db-499e-896d-d1475b6483f6",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 648,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "20447494-7e9f-41c1-ba0b-c08667c483a8",
        "cursor": {
          "ref": "3f6ef0e5-6f5c-4c2f-9f6c-df79bdb65efa",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "d76e7ce7-0e1e-454f-a5b2-f4aba59c3151"
        },
        "item": {
          "id": "20447494-7e9f-41c1-ba0b-c08667c483a8",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "567c1e9e-6e2b-4b86-ba3e-525d901e84b4",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 651,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "81d09d8c-5d3c-4541-9957-7ae7aa32d60e",
        "cursor": {
          "ref": "4ad0b783-1ecc-4829-993b-a1a400ca4c99",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "e3cc8ddf-f570-4a5b-8aaa-a4532f08f583"
        },
        "item": {
          "id": "81d09d8c-5d3c-4541-9957-7ae7aa32d60e",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "69c75a82-7f87-4123-a89a-dcfca848b13b",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 652,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "a28e89d6-c8fd-4368-bd7d-1c5ed2355ad6",
        "cursor": {
          "ref": "69502f8f-cd7d-43b1-845b-d5b90a684162",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "c4422de1-80b5-4b65-a380-052cf9f286ed"
        },
        "item": {
          "id": "a28e89d6-c8fd-4368-bd7d-1c5ed2355ad6",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "fa5d673d-ad1d-4ede-aec3-1ef762138b95",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 630,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "c9ee41b2-fefd-495d-a27a-c006a4fecce9",
        "cursor": {
          "ref": "6bb0c779-4b69-4816-9d96-f3f4ae507756",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "00843e9f-a142-48bf-adad-fb5be8391578"
        },
        "item": {
          "id": "c9ee41b2-fefd-495d-a27a-c006a4fecce9",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "ee0942e5-72a6-4b9f-8abe-4e6ac93e4850",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 619,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "639b6a73-2593-4ad3-80be-db2b41fc955d",
        "cursor": {
          "ref": "651acccd-43ae-4d4b-a6b7-79399ca3dd4a",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "44a1ce46-8313-44e6-813d-49b60956e31d"
        },
        "item": {
          "id": "639b6a73-2593-4ad3-80be-db2b41fc955d",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "3361c696-7043-48a3-9ad4-6ab1ef79ff45",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 674,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "fe37f6ca-c84a-4a0f-8212-28e5b0db3d46",
        "cursor": {
          "ref": "6f65eb8d-7b85-40d9-b6f3-3dae1cdf62c2",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "4c8e799c-2309-452d-984a-19ed704c8901"
        },
        "item": {
          "id": "fe37f6ca-c84a-4a0f-8212-28e5b0db3d46",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "316ca0a3-8a13-453c-8e35-a41304688eda",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 653,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "88ec9fdd-61c1-41bf-ab61-93c1d0dc04bf",
        "cursor": {
          "ref": "66843a1c-ade1-4be9-ba50-ed304e431ea9",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "4b9dac98-bf0f-4250-b570-b908f2b1e05a"
        },
        "item": {
          "id": "88ec9fdd-61c1-41bf-ab61-93c1d0dc04bf",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "eaecedad-98d7-4794-b9f7-6099f6bb567c",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 674,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "1625ceed-6b4d-4e8b-a938-ed348c890417",
        "cursor": {
          "ref": "80704a1f-c466-4fe4-9ddc-4c7ff10c830f",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "d52a63d2-7489-4811-966e-fa2e8b035636"
        },
        "item": {
          "id": "1625ceed-6b4d-4e8b-a938-ed348c890417",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "8b4e0e33-5691-4188-9cb9-b3a6bf880bc4",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 740,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "a5d17b5e-b1f5-42ec-ae2d-d3f87f36ca00",
        "cursor": {
          "ref": "c7cab628-cef2-48c7-b9d9-f66f09394c2a",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "158b9eef-a5ee-4eca-856d-2314114b3d59"
        },
        "item": {
          "id": "a5d17b5e-b1f5-42ec-ae2d-d3f87f36ca00",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "e439acdb-7f14-472c-875f-312261e9c8c7",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 709,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "436a9a98-c07d-41a7-90e1-095d329e40fa",
        "cursor": {
          "ref": "35241547-828e-423a-94b6-7bb4a61aff34",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "1a86e59e-6ed5-4f60-8e83-3822ec3f5786"
        },
        "item": {
          "id": "436a9a98-c07d-41a7-90e1-095d329e40fa",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "9be190a3-ec1c-4cfd-8dee-a736aa9cb883",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 908,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 403",
              "stack": "AssertionError: expected response to have status code 422 but got 403\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "158dc58b-fac4-43fb-9536-cf7fc294a395",
        "cursor": {
          "ref": "caeb8887-eb1c-48f2-9911-44b8d973bd0b",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "d78475b1-cb24-4904-96f6-a3ded1f6764a"
        },
        "item": {
          "id": "158dc58b-fac4-43fb-9536-cf7fc294a395",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "154c5128-e024-4b64-a4ac-37ec5d9b2251",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 1103,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "1789c5dd-ad0d-4677-bc96-5a00feca1a4c",
        "cursor": {
          "ref": "ae961569-5e99-4181-8587-d92dbd2521c6",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "128e139c-530b-4f3e-9c5b-8fbf0220c721"
        },
        "item": {
          "id": "1789c5dd-ad0d-4677-bc96-5a00feca1a4c",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "e7c0e3f0-49bf-4e95-97d8-508223d3a057",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 1030,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "2cd64e99-7ce6-4735-9d0d-bf4b287980d1",
        "cursor": {
          "ref": "d9e93721-1a2d-4b97-9e88-ac0aa5a28257",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "696156b1-b15b-478b-b564-fd9339d7a9e9"
        },
        "item": {
          "id": "2cd64e99-7ce6-4735-9d0d-bf4b287980d1",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "fb15a464-f271-4436-84fc-8c8343f87a8d",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 668,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "62f0fcf1-4d88-4590-bef4-059a5e235434",
        "cursor": {
          "ref": "d6cda70c-da25-4d12-a210-099730b5d9b8",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "89a8931a-7f30-4a42-9016-e390b8ce4520"
        },
        "item": {
          "id": "62f0fcf1-4d88-4590-bef4-059a5e235434",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "19904175-dba1-43e9-8483-912e6c279d0c",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 654,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "334a184a-de37-4277-93ff-4dcc6d0afc8e",
        "cursor": {
          "ref": "53aca7ab-1ccb-477f-b4f9-e84a3827a9ca",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "00f35fff-9a8c-46ce-8954-539db599e4aa"
        },
        "item": {
          "id": "334a184a-de37-4277-93ff-4dcc6d0afc8e",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "c03fe209-8488-4e6c-85a0-dfe41237a13e",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 676,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "2e6bf845-da7a-4daa-b7c5-30ce995d30bf",
        "cursor": {
          "ref": "44850fd6-618d-4786-bab4-6d4d9718b7f4",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "804e7e1f-d228-4e36-964f-51ff47abdb24"
        },
        "item": {
          "id": "2e6bf845-da7a-4daa-b7c5-30ce995d30bf",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "85e08077-e888-4def-bae6-25379add209d",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 640,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "fe30b722-476b-4e24-85e7-bf3c9c9e0bf4",
        "cursor": {
          "ref": "1ef499ad-b13a-4d0a-a390-92b953473ed7",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "d4314229-dbec-4e23-9ba7-1d75edf71672"
        },
        "item": {
          "id": "fe30b722-476b-4e24-85e7-bf3c9c9e0bf4",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "cc8713da-a079-4e75-b52f-0965f7ec80f4",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 637,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 403",
              "stack": "AssertionError: expected response to have status code 422 but got 403\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "83916fc3-67b4-499b-a5f4-15bf8e922411",
        "cursor": {
          "ref": "9236d86b-45cc-4c31-b4f9-113f76aa1fdd",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "b16ec2f6-ec16-4fd2-9147-a0cb8dc258e7"
        },
        "item": {
          "id": "83916fc3-67b4-499b-a5f4-15bf8e922411",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "6660632c-7d82-41ce-aacd-8358ef1ba0da",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 637,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "1315ea89-5d9a-453d-bab5-a5ca44030d5b",
        "cursor": {
          "ref": "8f854384-6017-4d84-9887-f69e5c083fa6",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "484c8e66-bca0-4064-9cf9-a33a7b5cd201"
        },
        "item": {
          "id": "1315ea89-5d9a-453d-bab5-a5ca44030d5b",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "5c2c11a0-405d-4431-bf10-37e98b2d0e43",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 665,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "7254b1a2-a10f-412d-8002-e14178529566",
        "cursor": {
          "ref": "9130551d-7c9b-4f5b-a4ac-cbfe038dcf91",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "bb96b4d9-2658-426e-8008-83a8d77ac08a"
        },
        "item": {
          "id": "7254b1a2-a10f-412d-8002-e14178529566",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "86529e2c-dfd6-41f6-8cc4-192f4af859e4",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 671,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "0d82f57f-91e5-4965-8fe1-99c9c7a2cab4",
        "cursor": {
          "ref": "73b62242-4247-4cba-a9d2-6e28872d5a25",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "18b7a06f-db20-4854-9084-04b4ffef857d"
        },
        "item": {
          "id": "0d82f57f-91e5-4965-8fe1-99c9c7a2cab4",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "9c5d3dd0-18b3-46ac-9442-572e8b781f28",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 668,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "9207f285-80c8-4323-b583-efc86466b3e3",
        "cursor": {
          "ref": "3e98ccfb-10f2-4bac-b4a0-a3bbd9a12a2a",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "b510b8ad-e608-487a-afca-f05ac3e071c9"
        },
        "item": {
          "id": "9207f285-80c8-4323-b583-efc86466b3e3",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "60fe772a-2b16-4bda-9749-a367264bbff8",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 710,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "8f64a600-6f66-43ce-86ad-55797ca0789c",
        "cursor": {
          "ref": "ed3555d0-9791-46fc-a7f3-9505c940dee7",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "7108e8fb-d375-4767-beb1-3a4e70e02250"
        },
        "item": {
          "id": "8f64a600-6f66-43ce-86ad-55797ca0789c",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "2d80de95-6a3d-4c3d-ba8d-2ab133b32e8f",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 634,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "5c3dc6ce-1fac-44d6-8983-79cabd93c435",
        "cursor": {
          "ref": "dda14506-b747-4a84-8456-b8b7000a47f5",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "1bf2d6d1-f950-4dea-b078-2fe59ede19f7"
        },
        "item": {
          "id": "5c3dc6ce-1fac-44d6-8983-79cabd93c435",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "4e236819-7e66-4d5d-a1e9-ec47e7347ecb",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 694,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      },
      {
        "id": "d6d27c4b-0f9e-4290-a608-881065ae72ed",
        "cursor": {
          "ref": "7a39b531-ff76-4018-a457-fc8701e48ece",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "269c8904-427a-4774-95f2-91919d04a01c"
        },
        "item": {
          "id": "d6d27c4b-0f9e-4290-a608-881065ae72ed",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "9f7c126b-4aa1-4bc9-82ca-bdbf4df03a06",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 675,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "323a43f3-401e-401e-9d79-35e5f35222de",
        "cursor": {
          "ref": "f523569b-1abe-4766-aa62-0e003b1b4bb2",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "d86abd1b-a2d2-4770-8ff4-30ab3853bde6"
        },
        "item": {
          "id": "323a43f3-401e-401e-9d79-35e5f35222de",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "d8ad7fe0-655e-45c8-ab2a-be803ab5d1be",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 688,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "8b6bdeb4-726c-4ceb-8827-b100d1635c5a",
        "cursor": {
          "ref": "a88f8de4-8d66-4a27-8979-836f18c8cd4f",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "9198a3f9-1a58-4b5a-a9d6-2f784899b5a8"
        },
        "item": {
          "id": "8b6bdeb4-726c-4ceb-8827-b100d1635c5a",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "a4201ca8-1824-48ad-a85a-a66c749b45a9",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 677,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "ac76696c-f5de-4c71-82dd-7646b9479db9",
        "cursor": {
          "ref": "8373a902-7bf3-4735-8fc1-97e25b95b478",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "644c4355-d417-497e-bc5c-8fd3d62be376"
        },
        "item": {
          "id": "ac76696c-f5de-4c71-82dd-7646b9479db9",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "a01cde0f-4b80-463b-b30b-6c20f41a3e30",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 679,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:63)"
            }
          }
        ]
      },
      {
        "id": "7c156a6d-c3e4-44b4-948e-fefc13f93311",
        "cursor": {
          "ref": "9b92d545-61fe-445f-9b10-d9ac3accdf9f",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "8de45b5d-0b1e-4e81-9af1-e66046523f4b"
        },
        "item": {
          "id": "7c156a6d-c3e4-44b4-948e-fefc13f93311",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "d79966a8-ca3a-4547-b059-1a128bf19df3",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 653,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:64)"
            }
          }
        ]
      },
      {
        "id": "f9345139-3b6f-45bb-b68a-65d0ca20e97e",
        "cursor": {
          "ref": "d9e685d4-9422-4ae5-81a9-2f4079c150df",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "36563f99-ad26-4916-96df-7d21e7cdbe88"
        },
        "item": {
          "id": "f9345139-3b6f-45bb-b68a-65d0ca20e97e",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "bd0ca71f-ded4-4232-b256-4087267b5f8d",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 668,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "f3b2a3f3-bca4-4dee-9057-b88f99ed7bc8",
        "cursor": {
          "ref": "4cd8c908-c472-4ac2-831c-63573f5906e3",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "6501ee96-4544-47f9-9190-c888721d6f5e"
        },
        "item": {
          "id": "f3b2a3f3-bca4-4dee-9057-b88f99ed7bc8",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "979a73d6-6e42-4cf3-8b93-cea8510e2970",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 1251,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "afd3a7b8-9e96-4e4c-9e4b-58796054602a",
        "cursor": {
          "ref": "497b1afb-736c-4ecc-92ca-3daee9365adb",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "b360198f-4a05-48d3-b2d0-984ff2fcffe3"
        },
        "item": {
          "id": "afd3a7b8-9e96-4e4c-9e4b-58796054602a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "8207075c-1bfe-4889-8e21-3346d162e6d6",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 1091,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "2dda945a-9476-47e9-a077-245a65b1d8fa",
        "cursor": {
          "ref": "34cede6b-2d5a-4f89-9ab9-56073327efad",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "1f6c161e-5425-4901-8074-3de88d747e71"
        },
        "item": {
          "id": "2dda945a-9476-47e9-a077-245a65b1d8fa",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "e0b877c7-89b6-46b5-9961-e8700224cbbc",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 1123,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "050c63e5-8a3b-46fd-996e-f5106589f4fc",
        "cursor": {
          "ref": "7c39091f-5ea0-47ad-99b3-1c352b86f496",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "e4db06cc-deea-4a2d-95d6-1acbd08f5f74"
        },
        "item": {
          "id": "050c63e5-8a3b-46fd-996e-f5106589f4fc",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "eaf4240b-55fa-4de9-ac19-636b88d86adc",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 894,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "881d7915-65f8-46f5-b8ce-d2e7f9f6daca",
        "cursor": {
          "ref": "7703a2aa-c418-4c27-885d-d47896ce4476",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "6e713592-7fe6-493d-8412-7e5eaf68e00e"
        },
        "item": {
          "id": "881d7915-65f8-46f5-b8ce-d2e7f9f6daca",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "f9a6f648-4209-43df-a274-fb914c15ae66",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 656,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "f77429dc-5f9c-45a7-99c2-9e273896bc35",
        "cursor": {
          "ref": "76029c1f-56ed-4562-bb1b-c8d242520dbf",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "3a30b675-7a96-46e8-81ad-0a978332b180"
        },
        "item": {
          "id": "f77429dc-5f9c-45a7-99c2-9e273896bc35",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "e847d5cb-4de6-420d-ba29-f70551d6b04f",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 618,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "6600932b-274b-4afe-adda-bcfe4df78332",
        "cursor": {
          "ref": "1cf76024-7910-4b63-b2d4-a3c4d15d6d34",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "a2db5c7f-e175-4de3-b933-3468464d4bde"
        },
        "item": {
          "id": "6600932b-274b-4afe-adda-bcfe4df78332",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "2d20a596-1c1d-40e8-806b-61b7d9821244",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 706,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:72)"
            }
          }
        ]
      },
      {
        "id": "6843b1a3-fbf6-440c-8889-ef37cb0f18a8",
        "cursor": {
          "ref": "8982558c-8311-4938-a655-e2177903749e",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "ec7ad04b-4339-4ef5-9565-39e60655dc2f"
        },
        "item": {
          "id": "6843b1a3-fbf6-440c-8889-ef37cb0f18a8",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "82c51348-6e91-40f6-b4d1-9b3451eac151",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 683,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:73)"
            }
          }
        ]
      },
      {
        "id": "dbe5c9e3-695a-4040-abbf-209ae43137c8",
        "cursor": {
          "ref": "7c336ff1-3368-43e0-be4f-22a5d0e32b19",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "5b2bc1e9-1be3-46cd-83ad-2f9f9b4d416e"
        },
        "item": {
          "id": "dbe5c9e3-695a-4040-abbf-209ae43137c8",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "78df479d-7ff4-4add-b03c-abad2c8b74dc",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 688,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:74)"
            }
          }
        ]
      },
      {
        "id": "cefc572a-4403-443f-823a-1e5325a3b7be",
        "cursor": {
          "ref": "cb746bf3-d60f-431f-8e19-cfc948f6138b",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "edf90787-aa44-4b10-9999-55d1b7cb04d2"
        },
        "item": {
          "id": "cefc572a-4403-443f-823a-1e5325a3b7be",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "337dc113-219e-4fbb-bb42-6c1a2c7c2747",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 661,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:75)"
            }
          }
        ]
      },
      {
        "id": "ddbc038b-a5c9-432d-b659-fccc2566cb69",
        "cursor": {
          "ref": "a57f16ec-4ef3-4ee1-a611-aa2e83e1be6f",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "a43aca89-7c4b-4a49-b06e-2679799bcdd6"
        },
        "item": {
          "id": "ddbc038b-a5c9-432d-b659-fccc2566cb69",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "d8ad6ec5-39ed-4914-a8b6-97380680152c",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 734,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:76)"
            }
          }
        ]
      },
      {
        "id": "0c5731f8-1778-413d-8e82-f33431945e6a",
        "cursor": {
          "ref": "a03cea61-9eaf-49be-a11b-b4bf915ad19e",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "f7e71665-1863-4c7e-abb4-8d16e7e5e30c"
        },
        "item": {
          "id": "0c5731f8-1778-413d-8e82-f33431945e6a",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "b127756e-f274-4776-bac9-32f1663616d6",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 649,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:77)"
            }
          }
        ]
      },
      {
        "id": "7fdc7214-7f18-492e-9135-c28f129ca1ff",
        "cursor": {
          "ref": "187005ca-ef8f-4114-860e-e2cd70ca76be",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "f9151d89-23dd-4f05-822b-bc7950324795"
        },
        "item": {
          "id": "7fdc7214-7f18-492e-9135-c28f129ca1ff",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "80cba832-dca5-4f8f-b5c3-6f510ba5ab16",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 651,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:78)"
            }
          }
        ]
      },
      {
        "id": "80aa281a-0a47-4c16-af79-fb7af874a0be",
        "cursor": {
          "ref": "426a4ed6-9872-487e-9a15-e43c53218058",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "e4706abd-a099-439b-8883-91f53817b29a"
        },
        "item": {
          "id": "80aa281a-0a47-4c16-af79-fb7af874a0be",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "1d78940c-11fd-4723-b1ad-33efbc7d1539",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 631,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:79)"
            }
          }
        ]
      },
      {
        "id": "e1dab4bd-80ff-4003-a096-5a534f5ffe9e",
        "cursor": {
          "ref": "fc330737-5850-44b8-ac83-45db8981aaea",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "9e933789-6ce5-4f99-b5f2-816456374965"
        },
        "item": {
          "id": "e1dab4bd-80ff-4003-a096-5a534f5ffe9e",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "28471bca-0234-4299-bd46-fc7104166220",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 648,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:80)"
            }
          }
        ]
      },
      {
        "id": "15220015-8869-4e01-8fa6-55d1e26214c1",
        "cursor": {
          "ref": "3fa343f6-c3cd-4a2e-8b0c-bc6141440bab",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "9b7f5ff8-47e5-4540-8c0e-11e654383c87"
        },
        "item": {
          "id": "15220015-8869-4e01-8fa6-55d1e26214c1",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "807edba8-eace-4370-b05e-6c84cfc73c14",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 621,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:81)"
            }
          }
        ]
      },
      {
        "id": "36b86fb1-9d50-4a01-9b10-893fa7222787",
        "cursor": {
          "ref": "06d01ba3-9057-4ce8-98db-9be2cb657dce",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "5de90d5a-5a0c-4544-97de-6d3a6b319bcb"
        },
        "item": {
          "id": "36b86fb1-9d50-4a01-9b10-893fa7222787",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "ac906d00-ad2c-4a7f-908c-db14c0a02faa",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 615,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:82)"
            }
          }
        ]
      },
      {
        "id": "54fce8fe-ecb9-4c8d-ad72-603db00634cb",
        "cursor": {
          "ref": "b339cc85-fbc5-4f31-b581-b408f2c3ddd6",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "ee38089c-037f-4598-a3ed-37f088579588"
        },
        "item": {
          "id": "54fce8fe-ecb9-4c8d-ad72-603db00634cb",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "ed815690-4743-4687-b61c-e6e33405cbf8",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 618,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:83)"
            }
          }
        ]
      },
      {
        "id": "6f99f3a8-332a-483c-9c3d-b7a51cf4941b",
        "cursor": {
          "ref": "80f44e66-2e14-4fb5-8b15-1328ec5f4090",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "b7524eb8-7816-4840-863b-efcf2130d5ee"
        },
        "item": {
          "id": "6f99f3a8-332a-483c-9c3d-b7a51cf4941b",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "557617d6-6747-4758-a058-bcfda06ab641",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 1125,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:84)"
            }
          }
        ]
      },
      {
        "id": "647ecead-37df-47bd-b1a1-8df98cc62326",
        "cursor": {
          "ref": "286ed7bb-ac66-4c35-b95c-1ec2997f53e0",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "d634c883-5829-4c0f-88be-166b5e452a26"
        },
        "item": {
          "id": "647ecead-37df-47bd-b1a1-8df98cc62326",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "4335fa91-21c3-4676-91b8-e9bd3448d3bf",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 1373,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:85)"
            }
          }
        ]
      },
      {
        "id": "4ffc5546-18b1-4aaf-b209-1090b0e7f5a7",
        "cursor": {
          "ref": "aa27d8fd-3e0b-4252-a93c-2e42c322dbda",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "51bfaebb-cbdb-4aba-8dcb-d1b0c122aa37"
        },
        "item": {
          "id": "4ffc5546-18b1-4aaf-b209-1090b0e7f5a7",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "22b50ba4-fecb-45b1-8fb5-9530646b7de5",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 1185,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:86)"
            }
          }
        ]
      },
      {
        "id": "a3e34f2f-7cc6-4eeb-93e1-e65c76d3b199",
        "cursor": {
          "ref": "f56f37bb-a21a-407e-b9f6-d3df6d704886",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "d896d77f-3df4-46e1-b362-a73838aaa72c"
        },
        "item": {
          "id": "a3e34f2f-7cc6-4eeb-93e1-e65c76d3b199",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "fd9cde5f-dcbb-4e9f-9a9b-dbce7e177159",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 838,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "8c29e249-1b94-41ba-bfa9-2e951c9806a4",
        "cursor": {
          "ref": "e204e395-ad8a-46f0-b443-9b93ee992a92",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "24f14fc5-102f-44ec-a5d5-ba38f814bd8b"
        },
        "item": {
          "id": "8c29e249-1b94-41ba-bfa9-2e951c9806a4",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "8a3d1850-dc91-4c08-8961-5154d2881791",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 657,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "id": "ec8e532e-80c3-47c3-9f9d-02d8fbcbb434",
        "cursor": {
          "ref": "c7f6a634-67ad-44a4-a480-db4d068944b9",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "9b1234f4-e9f7-4fbb-933e-eaa6728fcc2b"
        },
        "item": {
          "id": "ec8e532e-80c3-47c3-9f9d-02d8fbcbb434",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "140d979a-7fdc-48aa-9b75-d9ce88c9d9a0",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 669,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "08910c75-6453-4170-863b-7e49f33311de",
        "cursor": {
          "ref": "83d5adbf-6aa7-44eb-be42-9d9d1c0916f1",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "57fc8a0c-3324-4a64-8b2b-6bc2f8010d27"
        },
        "item": {
          "id": "08910c75-6453-4170-863b-7e49f33311de",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "ab812151-dda2-4ebc-9d24-106e39f2bf71",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 729,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:90)"
            }
          }
        ]
      },
      {
        "id": "e153b39d-581e-43c9-b276-7195001e5d00",
        "cursor": {
          "ref": "c13ca09e-acb7-40de-951e-bd28904a73e4",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "0e86a7aa-f1a9-4d59-975a-967f5b728f91"
        },
        "item": {
          "id": "e153b39d-581e-43c9-b276-7195001e5d00",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "8e921440-c07c-400e-8079-c630741397f8",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 658,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:91)"
            }
          }
        ]
      },
      {
        "id": "10e01f5a-a1ab-4ba2-9002-2f5de7545f97",
        "cursor": {
          "ref": "69463b07-f0e6-40cc-82ce-f8faf9e3fb23",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "2fac10ad-a766-4315-a15a-f8f60dd03506"
        },
        "item": {
          "id": "10e01f5a-a1ab-4ba2-9002-2f5de7545f97",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "e83d6a9e-763b-47db-ba52-7783ba8a4b5e",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 701,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:92)"
            }
          }
        ]
      },
      {
        "id": "8391a4bf-e9cc-4e9c-98cf-e02f7f2b2818",
        "cursor": {
          "ref": "0acf5337-323d-4160-9d27-aee93bb2b67e",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "7fb62b0a-142c-41d5-81da-98d315eae0b1"
        },
        "item": {
          "id": "8391a4bf-e9cc-4e9c-98cf-e02f7f2b2818",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "20d5c35e-ad62-4b2d-9a53-7152d024331f",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 661,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "8b33ffb9-4b79-4470-9ee3-dcf61b010b12",
        "cursor": {
          "ref": "6ae8df27-e899-46df-a03a-86d3f7d77b0e",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "1a06a5e1-aef9-4101-848e-3ddf6c8d374d"
        },
        "item": {
          "id": "8b33ffb9-4b79-4470-9ee3-dcf61b010b12",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "8fbeffe0-5999-4fe1-b14f-2dd31a2e088b",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 656,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "0e91d68d-e5aa-452c-af68-7b27e5fc8d62",
        "cursor": {
          "ref": "0d1bb5d5-205c-47c1-838b-de51b0a7b542",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "6b769b43-68ee-40bc-83e1-7fa178adcb98"
        },
        "item": {
          "id": "0e91d68d-e5aa-452c-af68-7b27e5fc8d62",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "78c7121d-0436-4899-aa4a-7d4b1fd714a9",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 614,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "272fa4ea-565c-4353-9608-2188da81e00a",
        "cursor": {
          "ref": "4b6f15ab-1eab-44eb-9480-78dc4807aa58",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "6c258f91-18c9-4630-9af5-db494a840188"
        },
        "item": {
          "id": "272fa4ea-565c-4353-9608-2188da81e00a",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "c193e7a0-9a2e-4b06-8006-a4a6bfff1269",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 676,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:96)"
            }
          }
        ]
      },
      {
        "id": "963667b7-bd45-44d6-b981-81062acca931",
        "cursor": {
          "ref": "c3207474-3e3f-4064-affc-fe840783660d",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "e1c60ffd-64b6-4a2d-8dfe-015f11ceb602"
        },
        "item": {
          "id": "963667b7-bd45-44d6-b981-81062acca931",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "f4f7edfd-7ad0-4f92-ac1d-2c2666486fea",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 734,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:97)"
            }
          }
        ]
      },
      {
        "id": "322a8cbd-e0f8-4363-8b70-a59db3ad6486",
        "cursor": {
          "ref": "5df75eb4-c242-47c4-a66f-c6c6cd5ad0b8",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "8a7e4306-2a4a-43eb-8c35-e25bd31e94e8"
        },
        "item": {
          "id": "322a8cbd-e0f8-4363-8b70-a59db3ad6486",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "da04d345-f00f-45ec-ad0e-21d6e73346db",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 630,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:98)"
            }
          }
        ]
      },
      {
        "id": "40af4beb-4e5e-4db2-a622-540319a29b19",
        "cursor": {
          "ref": "51e08d7f-94e7-438b-8ad2-866e6323c557",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "44ca5aaa-1bcf-47c2-b5b0-5697ac279fe7"
        },
        "item": {
          "id": "40af4beb-4e5e-4db2-a622-540319a29b19",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "a8561013-37ce-4444-9a3f-bb903a75899b",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 644,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:99)"
            }
          }
        ]
      },
      {
        "id": "73779cd8-ae47-448f-bbe8-015dd02866d8",
        "cursor": {
          "ref": "10cad33f-ad3b-41dc-84ca-8996b53e44e2",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "94e1d83c-3ce4-491f-8b88-f7d09f4d2c98"
        },
        "item": {
          "id": "73779cd8-ae47-448f-bbe8-015dd02866d8",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "6289c56b-7339-41ca-8958-b89641cd8f25",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 643,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:100)"
            }
          }
        ]
      },
      {
        "id": "f3355c86-91f4-44d0-a0c6-18e1d758f438",
        "cursor": {
          "ref": "3b75c47c-9fab-46c9-8163-7985e6df5cef",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "5f6cafd7-af5f-4eb2-bf54-4792422d071b"
        },
        "item": {
          "id": "f3355c86-91f4-44d0-a0c6-18e1d758f438",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "3da78475-56c9-4eae-9b6d-9613a3e5f35c",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 616,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:101)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "030ce7ef-e1be-428f-8223-6c18b38ed9d0",
        "cursor": {
          "ref": "addd2b4f-7088-4938-8ffe-efbe642f2f48",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "c831e452-d803-4b0a-a2b1-fc4daf55424c"
        },
        "item": {
          "id": "030ce7ef-e1be-428f-8223-6c18b38ed9d0",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "50233c64-b302-4c4b-9eb3-49b6b889150c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04d1b9ca-2a3e-45b9-a7c4-b8175c9ecdf2",
        "cursor": {
          "ref": "946793ce-7b48-4286-8b7c-df3770baeb1a",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "01bec638-36af-42b6-9fb6-30ea63fdb2a0"
        },
        "item": {
          "id": "04d1b9ca-2a3e-45b9-a7c4-b8175c9ecdf2",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "69ffd987-4fb5-468d-b2d6-d5b222f81602",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 618,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "050ca30b-9d73-4ada-8b9d-83597e9ab221",
        "cursor": {
          "ref": "a11fb044-4c78-4213-ac37-eb17c5baa935",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "113634cf-860d-4e95-9b6c-d234c6b7d945"
        },
        "item": {
          "id": "050ca30b-9d73-4ada-8b9d-83597e9ab221",
          "name": "credentials_issue"
        },
        "response": {
          "id": "df6b7f99-0459-45bb-88dc-4e8e15435dca",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 634,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 403",
              "stack": "AssertionError: expected response to have status code 201 but got 403\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:104)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:104)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:104)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 5,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:6:104)"
            }
          }
        ]
      },
      {
        "id": "e58af1bb-c3a0-4f70-ae84-e6a513a261ab",
        "cursor": {
          "ref": "3058718f-d6cf-433f-b6de-ebe64d0f5e24",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "4ca63d2b-9aa8-445e-b461-4774084334d2"
        },
        "item": {
          "id": "e58af1bb-c3a0-4f70-ae84-e6a513a261ab",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "af2e3f58-a3c4-48c9-b6ee-41d9ce99a718",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 624,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 403",
              "stack": "AssertionError: expected response to have status code 201 but got 403\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "3adfc849-f56e-41aa-b55a-b6b4941c96b0",
        "cursor": {
          "ref": "a16389ac-efe8-4fa4-93cb-54ee519f0097",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "07ea14c5-2ecc-4e33-be0c-fb2401c9e098"
        },
        "item": {
          "id": "3adfc849-f56e-41aa-b55a-b6b4941c96b0",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "0d599cf1-eedb-4e2c-a747-fe052bf986b4",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 624,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 403",
              "stack": "AssertionError: expected response to have status code 201 but got 403\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "2b5dd153-0431-40bd-8c2a-80083c4639fd",
        "cursor": {
          "ref": "af11ffb1-b524-4105-a531-afe989717022",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "9df73b4e-517a-4095-b4b6-3695d9c60aad"
        },
        "item": {
          "id": "2b5dd153-0431-40bd-8c2a-80083c4639fd",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "9a8e3406-88a0-4fdc-9fb6-90acdddc0e80",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 627,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 403",
              "stack": "AssertionError: expected response to have status code 201 but got 403\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "58cafbf8-f707-4797-b1b9-eb8861f8f9bd",
        "cursor": {
          "ref": "5d096b46-a50a-475b-b5ab-b1696bab6b63",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "7bcdb100-d961-4498-a023-d3f24e7f46bc"
        },
        "item": {
          "id": "58cafbf8-f707-4797-b1b9-eb8861f8f9bd",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "0bff28bb-17ab-4051-95dc-a7a851a22e65",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 632,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 403",
              "stack": "AssertionError: expected response to have status code 201 but got 403\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "c96f0f9b-024f-48d5-b69c-73b1bef2c546",
        "cursor": {
          "ref": "de949d79-eb56-41e6-9bce-4b190179f43b",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "1540c7c4-4cb0-4e60-ba3a-ea5c543b8932"
        },
        "item": {
          "id": "c96f0f9b-024f-48d5-b69c-73b1bef2c546",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "38f25a5c-8f82-411e-a22c-f7cb7751de70",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 664,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 403",
              "stack": "AssertionError: expected response to have status code 201 but got 403\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:109)"
            }
          }
        ]
      },
      {
        "id": "429837d1-a792-492a-812c-3fc023be1aa0",
        "cursor": {
          "ref": "6c43615b-d6e0-4d13-b287-dcf4a8984d8a",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "66dd4858-5d11-4ae9-9f8b-defb9052e581"
        },
        "item": {
          "id": "429837d1-a792-492a-812c-3fc023be1aa0",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "db191b53-16cc-43cd-8e27-4521b9ecb200",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 669,
          "responseSize": 612
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "429837d1-a792-492a-812c-3fc023be1aa0",
        "cursor": {
          "ref": "6c43615b-d6e0-4d13-b287-dcf4a8984d8a",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "66dd4858-5d11-4ae9-9f8b-defb9052e581"
        },
        "item": {
          "id": "429837d1-a792-492a-812c-3fc023be1aa0",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "db191b53-16cc-43cd-8e27-4521b9ecb200",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 669,
          "responseSize": 612
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bdeee71-1230-42f9-94d6-af239da1595b",
        "cursor": {
          "ref": "b2229b31-4ad0-4164-bb6f-a2d0fbdfcf1a",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "2944a762-8432-4620-897d-1b5c9a7cd2de"
        },
        "item": {
          "id": "8bdeee71-1230-42f9-94d6-af239da1595b",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "9d5c87fd-2797-4512-8dc1-f8604c58db6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 631,
          "responseSize": 661
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7ecaa10-9301-40a2-8f47-9e7c164c8d6c",
        "cursor": {
          "ref": "da004dac-6c95-43f5-8724-8037042e62c4",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "ef8b0395-8b1b-4582-84b7-72096d5178a1"
        },
        "item": {
          "id": "e7ecaa10-9301-40a2-8f47-9e7c164c8d6c",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "05a5301c-e5ea-4e18-8bd0-3d1cee8421cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 722,
          "responseSize": 617
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9eee573e-176e-4dfc-aa8b-2fee02cdc503",
        "cursor": {
          "ref": "d54f78d8-f792-4611-87cb-6f74e5958dd0",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "4fb2dc99-7a38-417e-8a08-21f74a8df78d"
        },
        "item": {
          "id": "9eee573e-176e-4dfc-aa8b-2fee02cdc503",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "1e10df2e-8d66-402d-b51e-3775916188bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 690,
          "responseSize": 614
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39d57348-2b9d-455f-b6ed-283413482a16",
        "cursor": {
          "ref": "cd09a529-b5c6-46a2-8adf-574ee411e4f1",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "c5ec4eb9-fc40-4b56-8f60-0da03a640e58"
        },
        "item": {
          "id": "39d57348-2b9d-455f-b6ed-283413482a16",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "a2505572-57a4-42f1-bfd6-6b66ef4865fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 635,
          "responseSize": 616
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db92c0ba-b239-4ffb-96cd-0d02292c200b",
        "cursor": {
          "ref": "d5c4790b-fd8d-4aec-9357-cc38508f426d",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "369cce90-5885-49f4-b03d-27ae27c858b9"
        },
        "item": {
          "id": "db92c0ba-b239-4ffb-96cd-0d02292c200b",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "c835f4eb-ad0f-41e6-a5c5-9251b9a1d2d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 942,
          "responseSize": 614
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "266e852b-3db5-42b7-8e5a-768e1212a3e8",
        "cursor": {
          "ref": "3c339b3b-fe17-4ed0-8333-09bb7680408c",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "f8a98035-5998-4755-be8f-92311199f3b1"
        },
        "item": {
          "id": "266e852b-3db5-42b7-8e5a-768e1212a3e8",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "b6e3b10a-438d-4e2b-9f5b-9ddd38d5a60d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1050,
          "responseSize": 431
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "682a88f8-2598-4551-9a0e-66b9cdb70399",
        "cursor": {
          "ref": "7c5bde5c-04af-416a-a936-490a17103856",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "37df8d00-06d2-4ba1-a56b-356703c460f8"
        },
        "item": {
          "id": "682a88f8-2598-4551-9a0e-66b9cdb70399",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "9def28a9-c44d-478e-9327-632a70f0612e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1026,
          "responseSize": 482
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ad390cd-3674-45d7-a4dc-68e933ff200e",
        "cursor": {
          "ref": "c9525884-b754-4a96-afa8-45da457176b3",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "d915330b-717d-4609-8f22-10088fba1104"
        },
        "item": {
          "id": "0ad390cd-3674-45d7-a4dc-68e933ff200e",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "226d4b8d-d87d-4129-9ed2-7d1ec34376c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1160,
          "responseSize": 479
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31cd4b9f-d83b-4e21-a08b-2408830e8f98",
        "cursor": {
          "ref": "ffadf1b0-f2d3-48a2-8cc1-5254ce90069b",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "80bdf853-1a14-4b6a-a84f-491ef6473e34"
        },
        "item": {
          "id": "31cd4b9f-d83b-4e21-a08b-2408830e8f98",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "0c633aca-ef8a-480b-9223-11896657e1d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 962,
          "responseSize": 481
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a012e88-b9d7-42fd-b22e-d6025bd85333",
        "cursor": {
          "ref": "72d6743c-f4ff-4be7-8e84-feaab4d65a1e",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "621705ef-e1a8-4329-8ea1-bd4e864de861"
        },
        "item": {
          "id": "0a012e88-b9d7-42fd-b22e-d6025bd85333",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "19e51c4e-9de6-4a14-bd5b-8a1319263cbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1006,
          "responseSize": 525
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06e4067d-23eb-4fd2-8936-dd1a14946608",
        "cursor": {
          "ref": "7a597d77-d966-4580-ab08-82100675274e",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "eac8ea4b-2865-4e3a-9f55-7f09a6ed5aaa"
        },
        "item": {
          "id": "06e4067d-23eb-4fd2-8936-dd1a14946608",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "07f0fbb2-af45-48f8-9f1f-3fc774e2f281",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 961,
          "responseSize": 503
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9e9b679-84ed-41ed-a92d-ac52408848c2",
        "cursor": {
          "ref": "14bd5b94-5109-4bc2-8997-7e5ff9dde158",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "57447a2c-bb1c-4a0e-a330-0a7811a949c7"
        },
        "item": {
          "id": "f9e9b679-84ed-41ed-a92d-ac52408848c2",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "caddb926-ae63-4245-bbac-3468b31ab5e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1003,
          "responseSize": 576
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34a1788a-63f5-4d69-a267-735f3ca80386",
        "cursor": {
          "ref": "f5592236-8799-4d9f-a9fc-6b038dbd4c9d",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "09e3639d-d92d-4a33-8fc3-712404b01161"
        },
        "item": {
          "id": "34a1788a-63f5-4d69-a267-735f3ca80386",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "996a30cf-dbcf-4b51-a84d-ff436a5c4104",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 974,
          "responseSize": 481
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f39ed50d-3fb9-4a30-aa30-fcf6b17fdbcb",
        "cursor": {
          "ref": "988b01fa-3793-42ea-b741-0a886b72cec7",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "20cc2ca2-2cea-4c84-a461-2ba963074e34"
        },
        "item": {
          "id": "f39ed50d-3fb9-4a30-aa30-fcf6b17fdbcb",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "75a9b78f-d52b-457a-8460-699d3af36042",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 611,
          "responseSize": 484
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8922ee5-a06e-42be-be60-2087c74ecbc4",
        "cursor": {
          "ref": "ab5c90a8-299c-4d26-9838-56aaba6135bf",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "6a4bd792-d75d-4a1f-ab29-3702da6d3fec"
        },
        "item": {
          "id": "f8922ee5-a06e-42be-be60-2087c74ecbc4",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "906979c4-aeb2-4403-a2aa-f62246f25e88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 726,
          "responseSize": 481
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31c6ef41-844a-4b39-9ff5-3378b2675de3",
        "cursor": {
          "ref": "2be04215-7504-41bf-a2c1-15990e7f4a61",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "265b7780-c00b-41a3-af88-109c272175c5"
        },
        "item": {
          "id": "31c6ef41-844a-4b39-9ff5-3378b2675de3",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "1cb6608f-e5a0-4259-9b99-1b8a32cd940c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 713,
          "responseSize": 483
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8932eaf4-4b19-442f-af01-dad47e54ab83",
        "cursor": {
          "ref": "3d46a708-4caf-48e7-86d5-541021232079",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "cc3066d0-f793-4204-b7e7-bdcd10e0a8a1"
        },
        "item": {
          "id": "8932eaf4-4b19-442f-af01-dad47e54ab83",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "df73c644-977c-40d4-a4ff-805f46c00603",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 751,
          "responseSize": 505
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ddaca13-bf70-4be2-b8f1-850bc702c63c",
        "cursor": {
          "ref": "4267366b-863e-40c7-ad63-e07f991f746f",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "4ecc5f71-00a7-422c-9952-cc24c737c219"
        },
        "item": {
          "id": "8ddaca13-bf70-4be2-b8f1-850bc702c63c",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "310c3a9f-9f52-4c62-91ca-11de392843b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 673,
          "responseSize": 493
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50d45dc6-20fb-441b-b5af-fb668b20eca9",
        "cursor": {
          "ref": "c19ac5ad-5f99-4de2-98e7-67abfdcf2547",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "cb0bf37c-e56c-4ab3-98c2-b07b608d9f97"
        },
        "item": {
          "id": "50d45dc6-20fb-441b-b5af-fb668b20eca9",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "d22f477f-6fa0-4695-a83b-643505d71582",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1135,
          "responseSize": 529
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88ca41cd-1545-425a-ab94-f185142d6154",
        "cursor": {
          "ref": "058f3bb7-9eaf-4168-b342-25ebadff4da9",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "ab3c1526-39d8-4b71-8521-98dab04b8e3c"
        },
        "item": {
          "id": "88ca41cd-1545-425a-ab94-f185142d6154",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "825a3ec9-4bbf-4f3f-a0f5-d48262f0d0d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1091,
          "responseSize": 506
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1e1b8bb-701c-44c3-b234-2b148318e0a5",
        "cursor": {
          "ref": "93919d0a-0f81-440b-9a5b-091afad9b8fe",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "a44a7380-d6fc-421d-92a2-2f3eb3ac6d18"
        },
        "item": {
          "id": "c1e1b8bb-701c-44c3-b234-2b148318e0a5",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "b0434b00-9d21-4a74-89af-b65ecf9833df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 976,
          "responseSize": 503
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "148c262f-b86b-4c10-a0b2-27e3090fcfb5",
        "cursor": {
          "ref": "8faf25b2-3d6c-4ae3-bf17-88bc59d3d0c4",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "8d793fd6-a603-4526-b051-24eee14afee3"
        },
        "item": {
          "id": "148c262f-b86b-4c10-a0b2-27e3090fcfb5",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "ef3cf959-be52-449a-80a4-7750c0286b81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1008,
          "responseSize": 505
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c911412e-8925-4c51-9886-b47cf916be80",
        "cursor": {
          "ref": "fa0849d3-bd83-4d2e-8c84-de80ed767ec1",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "3205acd7-6d40-4212-a913-d8a6cf52d8ff"
        },
        "item": {
          "id": "c911412e-8925-4c51-9886-b47cf916be80",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "eee8140e-b67c-49b1-a86f-0e2759c40a82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 698,
          "responseSize": 503
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0d31cc3-71d9-4904-9ada-ff4c35c64927",
        "cursor": {
          "ref": "cc654459-dc7e-4818-a7fa-ecaf341738c5",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "b450e8d8-2a26-46bc-ab4d-5172208a5ce8"
        },
        "item": {
          "id": "f0d31cc3-71d9-4904-9ada-ff4c35c64927",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "9c997f11-4d47-4bd5-a06c-e9812db4730e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 649,
          "responseSize": 516
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a5118c0-87a7-434f-b684-d9e1ad68b100",
        "cursor": {
          "ref": "f80f48ac-1494-40e4-9be4-cb616810b657",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "81a85d32-759c-4b31-879e-bc7c3164f640"
        },
        "item": {
          "id": "2a5118c0-87a7-434f-b684-d9e1ad68b100",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "92d2ad25-6c34-4d3e-8cfc-58e6d1e538cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 643,
          "responseSize": 514
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f44969aa-44ed-4064-aece-a2b360ddcb0e",
        "cursor": {
          "ref": "4b1c216f-5063-4c79-8f18-9c6d1c613e29",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "40bde68b-e014-4656-baae-f46f71926136"
        },
        "item": {
          "id": "f44969aa-44ed-4064-aece-a2b360ddcb0e",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "47cfa9e5-987d-4c93-92cc-f7f809f51d5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 719,
          "responseSize": 529
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9d6188f-a515-4cd4-a379-bb519603c100",
        "cursor": {
          "ref": "a51b3f7b-17ae-455f-a463-99b25e797082",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "acdee287-aead-4dbb-9b97-3ce718e6de87"
        },
        "item": {
          "id": "f9d6188f-a515-4cd4-a379-bb519603c100",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "a7fa193f-5054-4837-ab52-f14fa26dd7f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 675,
          "responseSize": 529
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1258f1eb-f5ed-4638-811a-369b45e402ed",
        "cursor": {
          "ref": "86535c75-ac38-42fb-87a1-a4c0106c3d5c",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "0e3796e9-6d0c-4852-9b19-20cfa0d88c87"
        },
        "item": {
          "id": "1258f1eb-f5ed-4638-811a-369b45e402ed",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "25fadc20-31f8-49ad-91c2-acfde154f85d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 721,
          "responseSize": 525
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "030dde3e-0634-4033-b271-5ac9770ecd34",
        "cursor": {
          "ref": "affb4726-7747-46bb-b035-3ebe07341daa",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "947f47a0-bfdb-46e6-9dad-489a9d649429"
        },
        "item": {
          "id": "030dde3e-0634-4033-b271-5ac9770ecd34",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "5cafcf5e-a568-42d1-91a7-614ffdfa72a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 672,
          "responseSize": 528
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f08c83f1-8408-48ad-89bf-c51fefaa7425",
        "cursor": {
          "ref": "f0a7da11-228e-4e67-b11e-0b885593829a",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "cc4e2eeb-adb6-43b7-bb9f-26248c0a039c"
        },
        "item": {
          "id": "f08c83f1-8408-48ad-89bf-c51fefaa7425",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "5376e33e-680d-4b2e-93e8-826e1a08436b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 716,
          "responseSize": 526
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0783c867-25fb-40ae-9a90-63171cbb283d",
        "cursor": {
          "ref": "45ad0aaa-5720-4c7c-8baf-840126a61282",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "d0a77f56-73ce-4449-8a4c-8cb066e10677"
        },
        "item": {
          "id": "0783c867-25fb-40ae-9a90-63171cbb283d",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "645b65e5-a6d0-4095-b6a0-e2aafdfe5e7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 729,
          "responseSize": 539
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0d95f41-6c2b-4b4d-8a42-6fc2329d3174",
        "cursor": {
          "ref": "5f8490b6-248a-402e-82cf-58488b34a0c1",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "daa02f93-4923-4681-83ee-9e744e5c8612"
        },
        "item": {
          "id": "c0d95f41-6c2b-4b4d-8a42-6fc2329d3174",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "be0a9506-de0e-40e6-8da3-d64953ee817b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 41,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec6aa836-470f-4a65-a212-e2d1eb0458ef",
        "cursor": {
          "ref": "5fc866e6-06f3-4f40-b91d-d92fa7e8ef4c",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "658d9949-150e-4678-9fa1-1ef558576ad9"
        },
        "item": {
          "id": "ec6aa836-470f-4a65-a212-e2d1eb0458ef",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "c014a43a-23c2-4b29-aff1-d9fe70e05f28",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 659,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bba0daf8-d01b-4a50-962b-173d6cabec5f",
        "cursor": {
          "ref": "3d54c1ab-6277-4058-83e8-751ad1358708",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "f65f4b8c-b028-42d0-971c-01840de41554"
        },
        "item": {
          "id": "bba0daf8-d01b-4a50-962b-173d6cabec5f",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "26de716e-c3a8-4ab6-946e-828e13ca60f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 438,
          "responseSize": 325
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bba0daf8-d01b-4a50-962b-173d6cabec5f",
        "cursor": {
          "ref": "3d54c1ab-6277-4058-83e8-751ad1358708",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "f65f4b8c-b028-42d0-971c-01840de41554"
        },
        "item": {
          "id": "bba0daf8-d01b-4a50-962b-173d6cabec5f",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "26de716e-c3a8-4ab6-946e-828e13ca60f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 438,
          "responseSize": 325
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "485cef7f-60e5-4f8a-bf6f-c93be6d3e160",
        "cursor": {
          "ref": "ba43108a-6cbc-40c2-8cd2-6dc7f756a356",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "9092f5d1-5e90-4eeb-b752-da90ecea3e2a"
        },
        "item": {
          "id": "485cef7f-60e5-4f8a-bf6f-c93be6d3e160",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "0432cb08-3962-4783-b850-67daae85f80d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 440,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53c5dd6a-436b-4483-847a-7ed953a2a872",
        "cursor": {
          "ref": "785e3222-61cc-4e8b-8867-7b61fb440f9a",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "5ecd4426-37ab-4047-ab0e-3cb104551701"
        },
        "item": {
          "id": "53c5dd6a-436b-4483-847a-7ed953a2a872",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "ad23d516-c3d5-4adf-869c-a740d11b9975",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 447,
          "responseSize": 645
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "397aec5e-853c-4dd6-b66e-e0cb3e8de127",
        "cursor": {
          "ref": "608e5fea-af4f-44b9-9486-1967a4f803cd",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "c44484ee-8881-4f5b-85ba-5d3cd641e335"
        },
        "item": {
          "id": "397aec5e-853c-4dd6-b66e-e0cb3e8de127",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "fa3821e2-a477-45bd-b8ab-143b8a2e3828",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 453,
          "responseSize": 644
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7741f074-d34b-407e-9af7-cb82dc5e613e",
        "cursor": {
          "ref": "27c60ce2-438a-4b7b-b692-c5ffc71ea4f4",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "1b57cf58-1b6f-44ce-b05c-ccf53b071d2a"
        },
        "item": {
          "id": "7741f074-d34b-407e-9af7-cb82dc5e613e",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "8084a548-6241-4db3-a1f0-35eb8dd0f2e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 472,
          "responseSize": 645
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cd092a7-e4e3-4558-a653-729daa29db44",
        "cursor": {
          "ref": "fd7340fe-5cf5-42b9-9b63-6bfb310af1fd",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "d93c3530-ac1d-4251-a526-e8c57b1bc218"
        },
        "item": {
          "id": "7cd092a7-e4e3-4558-a653-729daa29db44",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "b11f3b46-1720-4c61-b725-c092831963e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 428,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdcfb260-f413-42e0-b141-108dbee6b219",
        "cursor": {
          "ref": "ee76a3e6-ca70-46d3-8d82-1aa4060a4206",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "8fcc708b-42b9-478c-a24d-9db97dffc0c7"
        },
        "item": {
          "id": "cdcfb260-f413-42e0-b141-108dbee6b219",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "8d0dca1b-c145-4fcf-b9bc-d257ed9fa8ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 439,
          "responseSize": 1311
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee810188-a99b-48e7-816e-681a2906cbaf",
        "cursor": {
          "ref": "224fac25-81a2-44a7-b100-29ecc60b7335",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "a48798b0-62cc-4dd9-9435-ff791d0e24c1"
        },
        "item": {
          "id": "ee810188-a99b-48e7-816e-681a2906cbaf",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "75e7b84d-5277-40d1-91b9-b56d4a95bb53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 445,
          "responseSize": 1469
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0565a581-86c4-44bc-a1f1-0687f3b0b094",
        "cursor": {
          "ref": "abd92d5a-24ea-4911-afce-b33a4672e6fe",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "d33959bd-92b2-4586-877b-cbf45c5f8b77"
        },
        "item": {
          "id": "0565a581-86c4-44bc-a1f1-0687f3b0b094",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "e561f7bf-dc7c-4051-964a-ab1dac10548c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 498,
          "responseSize": 1468
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f0a76ae-258e-49a2-afd5-5f61bc554e97",
        "cursor": {
          "ref": "9d5096e3-ba8f-4763-a819-ea0341046887",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "94998dd7-5035-419a-af78-4e415011e40b"
        },
        "item": {
          "id": "9f0a76ae-258e-49a2-afd5-5f61bc554e97",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "5570c7e3-6036-4a95-8e66-a23babb52bc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 416,
          "responseSize": 1469
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d78c01a-967e-44ec-8361-1c890e390632",
        "cursor": {
          "ref": "f4e4f726-1464-49e8-b33d-40a5d77851d5",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "8725a2aa-b157-4d6f-9531-120dc3b71e6b"
        },
        "item": {
          "id": "9d78c01a-967e-44ec-8361-1c890e390632",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "21da7fe9-8dab-4c1e-8c28-7e34c5fa70ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 445,
          "responseSize": 1367
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "550b78f0-4fcd-486e-9ad0-9df70b29247b",
        "cursor": {
          "ref": "c5cf3fe7-ad48-4b18-b468-3ea45ad4c5b0",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "aa86c10a-f9eb-46f0-987f-65f170dfbd54"
        },
        "item": {
          "id": "550b78f0-4fcd-486e-9ad0-9df70b29247b",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "08a047af-20cd-4e1f-9f29-6096325b340d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 421,
          "responseSize": 1354
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0ee9122-40df-4eba-bece-83e93e227ae9",
        "cursor": {
          "ref": "473d5151-b8aa-46d7-914c-849d40a6c347",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "1e7bacd8-de8d-4ef0-84b8-79b5a258f67a"
        },
        "item": {
          "id": "e0ee9122-40df-4eba-bece-83e93e227ae9",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "5dd2d90b-7f0e-4eae-a4c7-d8bd5dfcb691",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 468,
          "responseSize": 1532
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b0245b0-dcde-48c9-a704-04de970939dc",
        "cursor": {
          "ref": "de443a6b-2e8d-4916-a1b5-f2ffbab92d32",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "cbebf1e8-b00f-4f3d-9190-fe627f308877"
        },
        "item": {
          "id": "1b0245b0-dcde-48c9-a704-04de970939dc",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "67bcae45-8565-4ae4-b1ca-64964685f27a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 417,
          "responseSize": 1522
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f844210-8502-4acf-a2bf-8d013df21ffe",
        "cursor": {
          "ref": "a1563792-5a5d-40f6-9723-d9a69e03e986",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "a72e4326-5d71-4621-8d97-7777ad10dff7"
        },
        "item": {
          "id": "4f844210-8502-4acf-a2bf-8d013df21ffe",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "5c6e331c-328a-4e84-a751-fc03601ea695",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 417,
          "responseSize": 1521
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "267c469d-032c-4c37-bd1f-361859123366",
        "cursor": {
          "ref": "605463c8-2f04-4baf-9367-b409ce894365",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "42459ff3-9f5f-463f-b72a-fcf8958de70c"
        },
        "item": {
          "id": "267c469d-032c-4c37-bd1f-361859123366",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "e3e18108-1523-4492-b3e4-f85d02409d97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 437,
          "responseSize": 1522
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5763af40-81a3-439e-bdd0-86d18aeab636",
        "cursor": {
          "ref": "84d32789-1efb-4dd4-a858-20ad767d02d6",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "19284e04-377c-4540-8447-4073dbf25668"
        },
        "item": {
          "id": "5763af40-81a3-439e-bdd0-86d18aeab636",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "e6462c98-099a-4e7b-bd49-a9eea39e4b24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 456,
          "responseSize": 1420
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1441ce1f-52c8-4c38-8caf-ac1560a2aaa8",
        "cursor": {
          "ref": "0b34c044-2a0f-417b-a31a-40939b04f4f1",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "373b92e9-76ba-4fa6-9c5b-0fa437aaa446"
        },
        "item": {
          "id": "1441ce1f-52c8-4c38-8caf-ac1560a2aaa8",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "28073788-02a7-42a7-b326-023789034d6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 426,
          "responseSize": 1374
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57c5b876-d55e-473b-a5da-fb1133553a9b",
        "cursor": {
          "ref": "bd6a9ada-3b92-45c7-a65f-511057ee0acc",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "a8b35107-048d-4c64-835c-5bbd0fa0bc1f"
        },
        "item": {
          "id": "57c5b876-d55e-473b-a5da-fb1133553a9b",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "5d1ddee0-d8ab-4fe0-9641-d460c911f20b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 447,
          "responseSize": 1330
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40aedc0f-e7c7-422e-a713-a1b4010008ed",
        "cursor": {
          "ref": "b5dd20ed-2d06-4384-bdbf-2d0391fbc389",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "e545401b-051a-42aa-bce7-3552d5afb1e6"
        },
        "item": {
          "id": "40aedc0f-e7c7-422e-a713-a1b4010008ed",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "bfac1e47-a02f-488a-8bb8-66b1370ab593",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 443,
          "responseSize": 1328
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58752eda-2d43-4846-8999-3cfe9bf1e186",
        "cursor": {
          "ref": "85b315a0-6d7c-4551-ab29-509cb708c59e",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "6168a7e6-e208-4835-8df0-cb9a05e8ffe5"
        },
        "item": {
          "id": "58752eda-2d43-4846-8999-3cfe9bf1e186",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "2d3e06b8-ce1f-4058-8c7f-c8d733899318",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 825,
          "responseSize": 1329
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab165eb9-0027-4e4a-b0a3-e912043a21a3",
        "cursor": {
          "ref": "f196e056-0eea-487d-921c-1931c03aec55",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "7bbd4252-32d2-48e4-b772-48ff06e106a4"
        },
        "item": {
          "id": "ab165eb9-0027-4e4a-b0a3-e912043a21a3",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "6ac528d0-c3cb-43af-8cad-f5986de179a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 761,
          "responseSize": 1380
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "282e971d-f1a5-4df2-853b-8e1837e20b7d",
        "cursor": {
          "ref": "8993dbc5-af46-4075-820b-3d13b15ee2fc",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "019d8758-046d-4155-8d91-cf2eec52c380"
        },
        "item": {
          "id": "282e971d-f1a5-4df2-853b-8e1837e20b7d",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "8e86f6d4-ef17-4d57-8d26-19dbf2a3fe83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 757,
          "responseSize": 1360
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "236a863d-b8e9-45fc-8608-60d6d7c5ad6f",
        "cursor": {
          "ref": "5494d147-d443-4fc1-81f8-9756516ec146",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "5bb57f98-3736-4d5a-a5f6-f332f615b179"
        },
        "item": {
          "id": "236a863d-b8e9-45fc-8608-60d6d7c5ad6f",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "c6ca14dd-9c8e-4e93-94fd-93673bd33861",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 775,
          "responseSize": 1319
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74289456-a600-4460-be9f-492849666791",
        "cursor": {
          "ref": "55da7bb9-8924-4873-b5b6-07bc57b57f70",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "af927cf8-3054-4268-b53a-d7455d5df8aa"
        },
        "item": {
          "id": "74289456-a600-4460-be9f-492849666791",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "abbd1283-56be-4a1e-bcb2-f6ad982a3007",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 978,
          "responseSize": 1318
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05bea851-cddf-4acd-a83b-95a76685ddad",
        "cursor": {
          "ref": "f36c96c0-6557-41dc-848f-4940e8a57d7c",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "6eaa4fd1-b8d4-4cbe-b3e7-797180fb2557"
        },
        "item": {
          "id": "05bea851-cddf-4acd-a83b-95a76685ddad",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "c5c91bbc-62ba-4233-b496-47f0a3e88e02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 663,
          "responseSize": 1319
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56c15b72-d0fa-43a7-a812-0d10d579795f",
        "cursor": {
          "ref": "6e5a5675-144d-4aa0-8cbd-618f1a94e8af",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "54dae7bc-0773-4464-809e-8d5e92c35521"
        },
        "item": {
          "id": "56c15b72-d0fa-43a7-a812-0d10d579795f",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "0a550a32-c254-46d9-b618-2fde5efa94be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 450,
          "responseSize": 1345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad11b243-4ba7-4d72-98a1-c5629123b117",
        "cursor": {
          "ref": "2e0e77d2-fa12-4e9a-bd16-a0f3c0725eaf",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "7a918388-3d65-4903-a39f-3b395fa01593"
        },
        "item": {
          "id": "ad11b243-4ba7-4d72-98a1-c5629123b117",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "d335e24a-e36a-4636-9c1d-d590e4d37ede",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 449,
          "responseSize": 1372
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cde68bb1-9f1b-4240-a06a-23a5f2802e07",
        "cursor": {
          "ref": "03885951-b6a5-47ce-986c-e65171a81a2a",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "d0b3ad2a-a89a-4f81-95a6-3597386d7208"
        },
        "item": {
          "id": "cde68bb1-9f1b-4240-a06a-23a5f2802e07",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "c99b7dba-7b64-48a5-9116-9a79117b2e74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 425,
          "responseSize": 1339
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c96e45f-7d3c-47a7-a9f1-184d64fd5059",
        "cursor": {
          "ref": "95fb90b0-87e5-401d-a6c8-b95dd285a6ce",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "18c304a9-d3a0-456e-b8b9-2204b4323bbb"
        },
        "item": {
          "id": "0c96e45f-7d3c-47a7-a9f1-184d64fd5059",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "59ecfe3e-c8e4-4c0f-be1d-28236c86bce9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 559,
          "responseSize": 1364
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81642a87-7377-4363-8c6d-b93fb528c57d",
        "cursor": {
          "ref": "f2fdd247-e5a0-4d4b-a997-5b031c792114",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "ce1bf2ff-60e4-4cae-80a0-77459ab61b93"
        },
        "item": {
          "id": "81642a87-7377-4363-8c6d-b93fb528c57d",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "dfa44f7e-75a7-4fd7-8205-7bdb950bae4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 413,
          "responseSize": 1354
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef9af7b1-4ced-4bcf-9750-3dd8f9b3e13f",
        "cursor": {
          "ref": "83ce32e1-87d5-4d86-b7be-bd3190b83e07",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "e07d6576-73f4-4604-a381-bb0925251876"
        },
        "item": {
          "id": "ef9af7b1-4ced-4bcf-9750-3dd8f9b3e13f",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "1146ee03-fa68-48fc-b16c-8e438a65db43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 456,
          "responseSize": 1353
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b2da991-c69b-474d-90f4-425b170f6611",
        "cursor": {
          "ref": "879c33c7-8688-486d-916e-fc1538bbcb12",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "e32d6f65-6e80-46ac-9426-adfc7c600225"
        },
        "item": {
          "id": "5b2da991-c69b-474d-90f4-425b170f6611",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "c2421ed4-a665-426d-aeae-3da619d41177",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 464,
          "responseSize": 1354
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4c8cb10-b44b-4159-837e-af99e89e44bf",
        "cursor": {
          "ref": "2a63656b-434f-414f-86ec-0df86b7738a6",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "d3888437-bc06-454c-8d3c-4355a213380a"
        },
        "item": {
          "id": "b4c8cb10-b44b-4159-837e-af99e89e44bf",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "6c7314ff-62a7-4c3d-a1f8-7fd908bc8333",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 464,
          "responseSize": 1380
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "867cc2cd-29b7-48e8-806b-8270e3158881",
        "cursor": {
          "ref": "e245cf02-8fdc-4571-90a6-7e833d36fb69",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "46a2c2f9-b8d5-4a71-bb65-b82ed603bd25"
        },
        "item": {
          "id": "867cc2cd-29b7-48e8-806b-8270e3158881",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "a5012ace-f825-4ad3-a5b9-4c7a604e8e9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 434,
          "responseSize": 1328
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8bbcb28-9833-4cdc-a875-3b50010bc2ea",
        "cursor": {
          "ref": "35ac3a07-7aa8-4a14-b9f8-9483e8f74077",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "4b9b5b6b-3b4b-4ffc-8c43-e1c33cf01c88"
        },
        "item": {
          "id": "c8bbcb28-9833-4cdc-a875-3b50010bc2ea",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "95220cbd-697b-4a57-a585-0275b4fd03a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 483,
          "responseSize": 1801
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e3d3647-0338-4b5b-981b-f37937355c5b",
        "cursor": {
          "ref": "26a7103a-9bcb-4abd-bb2b-049c4ea5caf2",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "f02c78cc-914d-43fc-b20e-06a03ec75b29"
        },
        "item": {
          "id": "8e3d3647-0338-4b5b-981b-f37937355c5b",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "11c40952-5654-4281-bdfa-fe0af18d540c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 418,
          "responseSize": 1787
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b7edfef-648d-47da-9178-279f00e39964",
        "cursor": {
          "ref": "ddae0a6d-caa7-4577-aab3-8484edfdf40d",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "26843611-b54b-4de9-a000-b92e7f951db4"
        },
        "item": {
          "id": "3b7edfef-648d-47da-9178-279f00e39964",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "1ef3f571-8a1e-4971-b1ba-4b8942e5a0cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 452,
          "responseSize": 1785
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c2cab2a-64d5-442b-8e5c-3827603b932a",
        "cursor": {
          "ref": "e62b02ed-818d-4cbd-919a-c9786e6dc598",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "77edad60-ca7b-44b7-acb8-64b86a52ea43"
        },
        "item": {
          "id": "2c2cab2a-64d5-442b-8e5c-3827603b932a",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "e3bddc95-41fc-43c2-9a64-55b46b32001c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 454,
          "responseSize": 1786
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6f5e132-dcdb-4edf-bdb3-45433ef16169",
        "cursor": {
          "ref": "1126ae97-f395-4841-aa03-20c950a2cc68",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "7275826c-cd31-4c80-b1cb-520f0791b39b"
        },
        "item": {
          "id": "b6f5e132-dcdb-4edf-bdb3-45433ef16169",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "5bcf2fa4-1a70-4e0a-91e9-b9019478fe58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 468,
          "responseSize": 1817
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ee2e87a-e1fc-46b9-9a57-5043f75bedc8",
        "cursor": {
          "ref": "8a169b8f-1efe-4026-a793-1419db6d21d1",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "25c80942-6d88-4f90-bd19-6824860cc3ad"
        },
        "item": {
          "id": "0ee2e87a-e1fc-46b9-9a57-5043f75bedc8",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "d006589c-d50a-43f4-a353-ce71bc184d0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 420,
          "responseSize": 2160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "530672dc-d407-47a1-8d54-d0563c9ea716",
        "cursor": {
          "ref": "09ac7b06-526e-40a5-b278-79ba479dc999",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "ea248f4e-2ec8-42b9-9c2c-25f8a9f6befb"
        },
        "item": {
          "id": "530672dc-d407-47a1-8d54-d0563c9ea716",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "d81ff235-adbb-4485-aeec-869b2d3a7d8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1050,
          "responseSize": 2146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03f6cc43-0c88-43f5-a7a7-1c3e3b0bc7a9",
        "cursor": {
          "ref": "6fd7a9bb-beb9-4caa-902e-da07df00dc47",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "6e74a342-94a9-4868-ac56-1242c8a396dd"
        },
        "item": {
          "id": "03f6cc43-0c88-43f5-a7a7-1c3e3b0bc7a9",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "dbfb2da5-1dab-4040-822e-11df301fb7b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 962,
          "responseSize": 2144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f087deae-316a-48e0-bf29-2d4b60742616",
        "cursor": {
          "ref": "11ab576e-d8b1-484e-b982-63ad39810ee9",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "6c1c0fea-9675-4b76-9b28-32fb721ad461"
        },
        "item": {
          "id": "f087deae-316a-48e0-bf29-2d4b60742616",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "284be158-011c-495a-aa12-3c61677af59a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 878,
          "responseSize": 2145
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "981b0bea-ad80-491e-8397-682d17b7915e",
        "cursor": {
          "ref": "6b8e7404-96be-412a-98e5-6115def48750",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "d61d4580-a815-4a52-9726-66b555c67167"
        },
        "item": {
          "id": "981b0bea-ad80-491e-8397-682d17b7915e",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "5c1c28dc-1745-4b62-8a57-c685eee3e9e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 772,
          "responseSize": 2166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5a6277d-1001-4a65-93a4-872ce549b859",
        "cursor": {
          "ref": "9a2b6dba-68ea-4bf1-9022-659038047aeb",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "dd1cd9be-22ca-49af-9f69-fa04795f4645"
        },
        "item": {
          "id": "a5a6277d-1001-4a65-93a4-872ce549b859",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "f28aeea1-3f41-461b-bc71-1e29c10fbca6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 778,
          "responseSize": 1370
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee1613ac-09f2-40e4-80a9-47ea54d314fe",
        "cursor": {
          "ref": "c1a24134-d317-44c8-b550-7b2ee6e72da3",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "549bd258-ec5a-485e-a275-070fc60eba10"
        },
        "item": {
          "id": "ee1613ac-09f2-40e4-80a9-47ea54d314fe",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "7532cf31-daa2-4b07-8f02-f29df20561a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 474,
          "responseSize": 1394
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "110b4a1d-94c5-4a51-87f5-953e110ce233",
        "cursor": {
          "ref": "fe796980-ba5d-45bf-8ead-ff8c83363c80",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "885b962e-b58e-4543-a2d5-aab9adc79ef2"
        },
        "item": {
          "id": "110b4a1d-94c5-4a51-87f5-953e110ce233",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "c6793d88-d9f1-46b6-86dc-4b335f1aacaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 415,
          "responseSize": 1375
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ce7aca9-cb0d-4278-80a6-b20ef771e936",
        "cursor": {
          "ref": "d3903350-cc6e-4293-b3b3-c5e6e3063670",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "4b7a6dd1-ba5d-42ba-98d0-e333bb56465a"
        },
        "item": {
          "id": "1ce7aca9-cb0d-4278-80a6-b20ef771e936",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "9b9476bc-c1a4-46c7-99d5-e3f1197668ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 437,
          "responseSize": 1373
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78c4ea94-1309-4573-8120-677eda882a84",
        "cursor": {
          "ref": "a81c8ef9-fd76-41e6-832d-e785c848b699",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "e4562295-d674-4ab7-bf13-af3f883fab7a"
        },
        "item": {
          "id": "78c4ea94-1309-4573-8120-677eda882a84",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "f001bcdb-f9aa-467a-b5f2-59c54f78bde6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 420,
          "responseSize": 1374
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "721e37d0-2a12-4f96-a4ca-99c7297d619e",
        "cursor": {
          "ref": "32872518-0d25-431d-9d09-4798c115a6a3",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "1ad59741-f3a2-4adc-a3fa-f5f1c478b40c"
        },
        "item": {
          "id": "721e37d0-2a12-4f96-a4ca-99c7297d619e",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "f264b44e-5fd2-4884-915e-5c47a4822a90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 453,
          "responseSize": 1400
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d839de24-5697-4853-ae02-6a7899b83543",
        "cursor": {
          "ref": "a6830e66-7beb-4a46-b476-671233ce8851",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "54a666f5-4427-43af-bcb5-ce4fb90a8709"
        },
        "item": {
          "id": "d839de24-5697-4853-ae02-6a7899b83543",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "d21b097e-bb31-4b41-a7cc-90eacb3e2445",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 422,
          "responseSize": 1430
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96db03e9-c99f-42e8-9904-b1af61b52982",
        "cursor": {
          "ref": "0ff2ec43-dc82-4962-9ab6-a4c7bcaa71d3",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "76aaf5ae-8f63-4c7a-b59c-0ef0b1a1b04a"
        },
        "item": {
          "id": "96db03e9-c99f-42e8-9904-b1af61b52982",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "be5d76db-df49-476f-adf7-2fb26818de91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 443,
          "responseSize": 1373
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf34cf63-d3fc-4920-9c82-b34a11338313",
        "cursor": {
          "ref": "fb56efb8-e6d2-4979-bec6-0322b487cfee",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "2ea99844-7810-4bf4-b829-5bb3fdda5e3b"
        },
        "item": {
          "id": "cf34cf63-d3fc-4920-9c82-b34a11338313",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "8a01f27c-7e68-4d0e-afe1-8e7101db3e26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 533,
          "responseSize": 1874
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b55ef6e-e87a-4c8d-bc9d-ec6da948731b",
        "cursor": {
          "ref": "de597508-0d5a-4376-9c34-7043303ca9e1",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "dd27fc63-3069-4e26-967c-1680debd96b9"
        },
        "item": {
          "id": "4b55ef6e-e87a-4c8d-bc9d-ec6da948731b",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "1fe331a2-52f9-44d4-8322-39be51b8d893",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 453,
          "responseSize": 1673
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e57cef0-8693-4587-b438-13af4189d6ed",
        "cursor": {
          "ref": "bb7b067c-65ed-4317-b935-24317599ce86",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "cc5b8a8f-196c-49e8-8a5a-160e502bf967"
        },
        "item": {
          "id": "3e57cef0-8693-4587-b438-13af4189d6ed",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "b7a3fba7-b655-499d-b647-d9b090afd656",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 447,
          "responseSize": 1671
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7680d6a-2a48-44d8-b3da-1958c7d04cd4",
        "cursor": {
          "ref": "96bf2c7c-0585-4d8c-9bed-74a079ddb9fe",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "0a7b7b6a-a10a-42f4-a208-86d98daa3ff3"
        },
        "item": {
          "id": "a7680d6a-2a48-44d8-b3da-1958c7d04cd4",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "4c1bdb2d-84f7-43aa-b28e-120c46d15175",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 452,
          "responseSize": 1672
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5296fc3b-330a-45b0-afc1-10bb5a9af07a",
        "cursor": {
          "ref": "0e917cd6-abb4-4802-b37f-15c51885a58d",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "02ca91a3-24fb-46bd-b8ba-d6b81177a197"
        },
        "item": {
          "id": "5296fc3b-330a-45b0-afc1-10bb5a9af07a",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "ef08fcbb-fb68-4966-88ae-9827cfda7702",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 469,
          "responseSize": 1685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24140ce1-2e31-4fce-bc80-1d65755c4cd2",
        "cursor": {
          "ref": "8f72842b-f91a-4e88-ab63-11313a62f68a",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "a8ee9acb-bd3a-4431-a317-2ae4a41344ac"
        },
        "item": {
          "id": "24140ce1-2e31-4fce-bc80-1d65755c4cd2",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "e37b9e95-41ba-44be-8144-40c680db066b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 423,
          "responseSize": 2209
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cf8dd2a-b816-480d-a43d-23239079ca14",
        "cursor": {
          "ref": "fa27cb4e-e44f-497a-9429-90cc7446fd23",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "744ca105-9b09-4cd5-8cb8-a2a004af818b"
        },
        "item": {
          "id": "6cf8dd2a-b816-480d-a43d-23239079ca14",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "1e124827-99d6-402f-8498-a7e64ff0b02d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 426,
          "responseSize": 2195
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e9b6616-a6c3-4c60-96bb-686e7227beaf",
        "cursor": {
          "ref": "1cfdc71f-78ed-4b1a-b218-a9393e04f961",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "5c335625-2b8e-4dd3-a9ce-42929346f14d"
        },
        "item": {
          "id": "4e9b6616-a6c3-4c60-96bb-686e7227beaf",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "3f06defb-5502-4ca2-9b2e-3766bc353f22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 456,
          "responseSize": 2193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35c49ecc-04a7-4928-9b7b-be38356722b5",
        "cursor": {
          "ref": "12ea0ac7-df9c-472c-ad3e-8a29699013f6",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "b7d00812-20d7-4e4a-9ef1-43dd0205275d"
        },
        "item": {
          "id": "35c49ecc-04a7-4928-9b7b-be38356722b5",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "c1e27d34-6e03-4e36-a6f8-fb0deac374eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 462,
          "responseSize": 2194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf727f8f-e79e-44ab-b69a-b479a4613c99",
        "cursor": {
          "ref": "fd0330f6-094c-47ab-abc0-32b74281d11d",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "0805c969-6c70-474e-a6ae-1938b7ce861a"
        },
        "item": {
          "id": "cf727f8f-e79e-44ab-b69a-b479a4613c99",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "6c1087d4-7353-4d1a-bb13-71839d9bb3a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 445,
          "responseSize": 2215
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4af062cf-5ae0-40c0-8f48-6765d9b01281",
        "cursor": {
          "ref": "a12881d9-6486-428f-b441-37163fbc0950",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "4eb2144a-1732-431e-9ccf-d271bb74ad5b"
        },
        "item": {
          "id": "4af062cf-5ae0-40c0-8f48-6765d9b01281",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "8f4e4e7c-3cd0-4690-b882-d70f288880f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 466,
          "responseSize": 949
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b4da1da-0089-4cfd-bb22-7becf1a12abb",
        "cursor": {
          "ref": "6597fa7e-0833-4e38-9799-72d62b4156e2",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "5d81e938-4469-4e9c-a128-9d20bc9c8bed"
        },
        "item": {
          "id": "6b4da1da-0089-4cfd-bb22-7becf1a12abb",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "86a8fa01-6863-41a5-ba09-05c7bc25d909",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 437,
          "responseSize": 960
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3355895-6fc3-4318-b834-cc629450625e",
        "cursor": {
          "ref": "251bbb0a-dcb6-402d-89d8-a4b11832e445",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "ee554352-a862-4eae-82fe-ecdcd2618133"
        },
        "item": {
          "id": "e3355895-6fc3-4318-b834-cc629450625e",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "1ca8cbc3-c0bc-4f72-9cff-ab3e5859ba75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 498,
          "responseSize": 962
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c24e3b78-295b-4343-9a25-2cf52042de37",
        "cursor": {
          "ref": "42d587c4-c68d-4865-aade-ce701012251c",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "79c5bb37-7d6d-4574-a08f-6237326b90b9"
        },
        "item": {
          "id": "c24e3b78-295b-4343-9a25-2cf52042de37",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "21f24d97-54bf-41e8-a52b-59f0a5d7a265",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3502,
          "responseSize": 960
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32f23023-7e4f-416c-8c9b-7d0ef555d671",
        "cursor": {
          "ref": "bdb8c114-1bf1-429e-9fce-fcc011eef91c",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "14fda083-621c-4eb7-85b0-d203ae3d362c"
        },
        "item": {
          "id": "32f23023-7e4f-416c-8c9b-7d0ef555d671",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "bfeb6bc3-62cc-452c-a4d9-25083239f55e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 764,
          "responseSize": 962
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a10dee7e-f385-4af0-ae7a-c84ad63a6163",
        "cursor": {
          "ref": "73944547-ed4d-4f63-909d-9b7eb2bbea9e",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "119aba4f-5fc2-4f8f-8be2-366b9a32406f"
        },
        "item": {
          "id": "a10dee7e-f385-4af0-ae7a-c84ad63a6163",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "fa24bc5b-4b82-418e-9d97-fd68fab1bb06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 886,
          "responseSize": 966
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6f82b1b-28b9-4547-ba42-d8883ef1332e",
        "cursor": {
          "ref": "dbbf1be6-2bcf-46ff-ae67-26a90142c12a",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "0f9caf65-73d4-4821-847f-da814f470f70"
        },
        "item": {
          "id": "a6f82b1b-28b9-4547-ba42-d8883ef1332e",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "de12d526-0ee4-45e2-a3a6-12d33b5def27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 809,
          "responseSize": 1307
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "789d8f12-559e-4682-8cd7-3118fcb910e5",
        "cursor": {
          "ref": "695950ec-6815-48e0-9794-3b5426cca976",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "9f288593-506e-4107-a10d-be9c190e164a"
        },
        "item": {
          "id": "789d8f12-559e-4682-8cd7-3118fcb910e5",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "f8b53e02-4c75-402c-b0e6-fa4ee72b9fea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 686,
          "responseSize": 1339
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55e5f66c-554c-4bab-9f20-8b67ebc23198",
        "cursor": {
          "ref": "d360f3ba-4c89-44f1-93c4-a901cb760c0f",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "fb99aef1-0f5d-4558-a3e5-e90f06673964"
        },
        "item": {
          "id": "55e5f66c-554c-4bab-9f20-8b67ebc23198",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "fded4ebf-9aca-4cc7-85b6-a2477be3a547",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 527,
          "responseSize": 1319
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff3c274a-1797-485b-860b-f7baed1f9b24",
        "cursor": {
          "ref": "09384da5-0541-4b37-a3e3-32b89cd78c59",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "1bf5d89e-ae27-44c7-8c98-03b9b094c38b"
        },
        "item": {
          "id": "ff3c274a-1797-485b-860b-f7baed1f9b24",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "5373014d-e44c-4797-8102-ed0c4bf52410",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 405,
          "responseSize": 1318
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cb75f3b-39a1-4044-b02a-90c7671c21f5",
        "cursor": {
          "ref": "070ce916-55fb-4dae-be58-dc737e710523",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "cce77d6f-7b39-4c2a-af0e-fd2479a1b7b3"
        },
        "item": {
          "id": "0cb75f3b-39a1-4044-b02a-90c7671c21f5",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "6bb4ac03-6ec6-4138-8005-43febccc9c78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 429,
          "responseSize": 1319
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5638af76-2d74-4130-a945-3e4f3e238658",
        "cursor": {
          "ref": "194d52f1-4ae3-423d-9055-f65d8d438222",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "7271edc0-6e3e-46f2-a4a6-233b18d0c7de"
        },
        "item": {
          "id": "5638af76-2d74-4130-a945-3e4f3e238658",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "c9a0a795-08e4-430a-8732-b7c54d65fcb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 442,
          "responseSize": 1345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e959c64c-9d3e-485b-9b9d-8feeb356c667",
        "cursor": {
          "ref": "ea5c76be-4893-4f6a-9494-4be399bff387",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "d3fbb53b-60b7-4830-97a0-acafcee83c97"
        },
        "item": {
          "id": "e959c64c-9d3e-485b-9b9d-8feeb356c667",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "3f593ed9-241d-461e-9f41-4c8d99e96346",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 441,
          "responseSize": 1344
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b585520-22fd-41b1-969e-ef1ac4b087ed",
        "cursor": {
          "ref": "358f9b5e-31aa-4aea-8d33-cd5a35190e4b",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "66d6b68f-d37a-469d-a427-9f0c044830f5"
        },
        "item": {
          "id": "4b585520-22fd-41b1-969e-ef1ac4b087ed",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "653fd56e-cb3e-4cb3-b694-a1e38913b8b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 504,
          "responseSize": 1339
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7f539a3-7bb3-4324-87c1-ba4b4bfc3833",
        "cursor": {
          "ref": "67eabe6c-65af-47da-89b3-cd99843ee61e",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "3581bf34-d8f6-4a59-b6f4-2b657e435c91"
        },
        "item": {
          "id": "b7f539a3-7bb3-4324-87c1-ba4b4bfc3833",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "72b100bc-ad01-4d6f-bb81-d6b5a749673c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 433,
          "responseSize": 1319
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "051486ee-27c1-4581-8578-dca1ca126b81",
        "cursor": {
          "ref": "c90cd837-a578-43e0-8834-b08225911e0b",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "91d3eb51-1f6b-4da6-95a3-b56635bdcf42"
        },
        "item": {
          "id": "051486ee-27c1-4581-8578-dca1ca126b81",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "0cabfd83-9351-4877-a9dc-62ef4d7e879b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 475,
          "responseSize": 1318
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f6daff4-51cd-412a-b057-f07f3a19fa37",
        "cursor": {
          "ref": "b5de3a49-50d3-428c-b876-58cd871adadd",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "296b59e1-0c04-4d01-8cdd-bdb4d92d4913"
        },
        "item": {
          "id": "3f6daff4-51cd-412a-b057-f07f3a19fa37",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "b7177d43-5925-4f23-ad36-65200c99a92e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 479,
          "responseSize": 1319
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa7a771e-2269-41f6-9341-b85fe45b4c31",
        "cursor": {
          "ref": "afd32fab-8acf-4090-ae49-781ec43265ce",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "61b90f33-237b-4cac-9d08-4aa97d6eadf9"
        },
        "item": {
          "id": "fa7a771e-2269-41f6-9341-b85fe45b4c31",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "13868968-74f5-4c9f-a8cb-a4afab71b1c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 470,
          "responseSize": 1345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1733b159-90ee-48ac-b7c4-cc6d0c6724bd",
        "cursor": {
          "ref": "0abb91f9-457f-4abe-a10e-62d7fdebb4e9",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "8ea52ed8-fc56-419d-ac7a-0c270cb8b1a0"
        },
        "item": {
          "id": "1733b159-90ee-48ac-b7c4-cc6d0c6724bd",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "ccf71355-adef-46ef-8d6e-1c72d9ce6bd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 439,
          "responseSize": 1298
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee4b4999-2a3f-46dc-aed5-ed6af5d846e6",
        "cursor": {
          "ref": "268b0072-4d58-427c-8c97-97d6baeb76aa",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "6068c5d3-172c-4aab-9963-d3c82bdddafa"
        },
        "item": {
          "id": "ee4b4999-2a3f-46dc-aed5-ed6af5d846e6",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "e3e3b8ac-6a11-42d4-8ec1-bd1b54029a10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 433,
          "responseSize": 1234
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efd67a05-7146-43a2-8071-642ee83ec76c",
        "cursor": {
          "ref": "7ab0b26e-12fe-43ed-9c04-9ce3691081d0",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "50727b09-102e-43d5-9168-c7c30951c049"
        },
        "item": {
          "id": "efd67a05-7146-43a2-8071-642ee83ec76c",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "7370ec44-fa7e-4b37-88ee-4cc3f80c2e8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 478,
          "responseSize": 1233
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1759e38-bea7-4a75-bc07-889daf729fd9",
        "cursor": {
          "ref": "aa5e4de7-c90d-4413-8fe8-5571cd9c4dd0",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "0443e9f0-07b8-445d-9e16-1efd734f9884"
        },
        "item": {
          "id": "d1759e38-bea7-4a75-bc07-889daf729fd9",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "9a5317a9-d960-4ff3-b235-16972bbb289b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 470,
          "responseSize": 1234
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bebb18a1-81b8-49a9-b271-96140af7ab1a",
        "cursor": {
          "ref": "d809585b-2a2d-496b-b70c-a5fa8794b3c2",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "1258accc-beff-44d4-a812-2db742a65815"
        },
        "item": {
          "id": "bebb18a1-81b8-49a9-b271-96140af7ab1a",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "918f1806-670f-448e-a4d6-075d33534d11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 436,
          "responseSize": 1304
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "370f109d-553f-4406-8a91-34332076500a",
        "cursor": {
          "ref": "ac4991d0-2e31-4133-9c45-c431e9850d1a",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "709a73bc-609d-4264-bbfb-cd1ef8a3db84"
        },
        "item": {
          "id": "370f109d-553f-4406-8a91-34332076500a",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "0582539c-b129-454f-8897-84523ad77f15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 467,
          "responseSize": 1339
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8cee6d2-6ec8-430d-a083-4f2cf59d2389",
        "cursor": {
          "ref": "05d998fa-f310-42a1-88dd-7fce6cc25c15",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "10a99480-5d9e-4e60-beef-c99df578c8eb"
        },
        "item": {
          "id": "e8cee6d2-6ec8-430d-a083-4f2cf59d2389",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "ec68b022-ad39-42ee-9a2a-4963f29ce30a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 469,
          "responseSize": 1195
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5d0fd12-9466-48fe-87df-61ad22de3bec",
        "cursor": {
          "ref": "9aec75f9-bd75-4d4c-ad3d-e6aa84102d53",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "38410918-fc65-4b2a-a427-c9f702c26a05"
        },
        "item": {
          "id": "f5d0fd12-9466-48fe-87df-61ad22de3bec",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "7c1c8a75-a1a8-4859-8d27-ac60733e6412",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 442,
          "responseSize": 1194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46799234-6d83-4e1b-b1a9-9be57783f299",
        "cursor": {
          "ref": "c7d284b5-9f40-4919-b461-5e13c76427a6",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "ffc623f5-7120-4fb5-bfeb-d74c7538dfe8"
        },
        "item": {
          "id": "46799234-6d83-4e1b-b1a9-9be57783f299",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "4b498f78-6192-4314-b726-a9955be281bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 489,
          "responseSize": 1195
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65302db3-0924-4ba1-8009-0f43e650cb2d",
        "cursor": {
          "ref": "407c3cdd-996e-44bc-9fca-935b517ed406",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "95a658bc-8d12-42cd-bab8-2f6a22d04693"
        },
        "item": {
          "id": "65302db3-0924-4ba1-8009-0f43e650cb2d",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "821f1bc0-8de2-4c1f-8462-a17951e6703c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 439,
          "responseSize": 1345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "256c984e-d0f0-4e60-8ed8-044f4fd7c25a",
        "cursor": {
          "ref": "1605a224-bdce-4022-b28e-a9ef1ae3aff9",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "e31b517c-8156-4126-9fc9-a5f3a1c498d3"
        },
        "item": {
          "id": "256c984e-d0f0-4e60-8ed8-044f4fd7c25a",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "2fc971fc-6712-427e-908f-d8d155ac7659",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 458,
          "responseSize": 1339
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ac05454-5d72-46b9-957b-8c90a701fd7f",
        "cursor": {
          "ref": "fac6a93d-39c9-4b61-856d-eeb63135178b",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "1cb88e69-34b3-4d46-845e-43239b0ff94e"
        },
        "item": {
          "id": "4ac05454-5d72-46b9-957b-8c90a701fd7f",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "08ae6f86-094d-4198-9ef5-9861dc10d1d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 460,
          "responseSize": 1324
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f40e6d25-7c24-4ed1-a608-a71ab0748d40",
        "cursor": {
          "ref": "6e149add-f3d5-4622-bd5b-f62c0b0bda12",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "64d5c419-875c-4481-adae-5c658596e207"
        },
        "item": {
          "id": "f40e6d25-7c24-4ed1-a608-a71ab0748d40",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "2ea2dee3-bec4-4840-a754-8e8e5f55f07c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 470,
          "responseSize": 1323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b30b9e2-397e-4cb1-b0f9-69f0fdfff775",
        "cursor": {
          "ref": "c275ba0a-6faa-4912-a9bc-a4ee27c7bdcf",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "b1b84481-b3ce-41ac-b28a-8ae60a95f780"
        },
        "item": {
          "id": "7b30b9e2-397e-4cb1-b0f9-69f0fdfff775",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "92ed6070-1d15-498b-a389-24d842915d50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 456,
          "responseSize": 1324
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "212d4207-3496-4a6c-848d-12d07e321f9e",
        "cursor": {
          "ref": "0e295991-19bc-4635-afc8-fcd488c27631",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "c025b242-7802-4060-8f7a-d26d30a56a19"
        },
        "item": {
          "id": "212d4207-3496-4a6c-848d-12d07e321f9e",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "11664639-1bd0-4166-90a5-f252d8f366eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 468,
          "responseSize": 1345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "195fdef3-921f-41cb-be36-3276b9c275e7",
        "cursor": {
          "ref": "44b13d63-5cea-44ae-bdc1-537cac621d85",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "7f3d9224-923d-44bb-9d26-522f513bce3e"
        },
        "item": {
          "id": "195fdef3-921f-41cb-be36-3276b9c275e7",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "db100ccb-8f67-4c73-96a7-e3024ab28669",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 484,
          "responseSize": 1339
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b605f810-7bdc-4644-9fd3-4205ec1c1ef4",
        "cursor": {
          "ref": "997b8a19-76f8-44cf-ad73-222c31277d75",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "86f2dfab-43fd-487f-be98-7f347a252ce7"
        },
        "item": {
          "id": "b605f810-7bdc-4644-9fd3-4205ec1c1ef4",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "212b4138-d84a-42b0-b98a-e5cb5fa54731",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e97adb6-86b7-45eb-9653-95235d837579",
        "cursor": {
          "ref": "449f8e99-8083-4ee6-a042-e14f55c2b9f3",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "cfe5923d-2459-49e9-af76-8322eb4d7891"
        },
        "item": {
          "id": "9e97adb6-86b7-45eb-9653-95235d837579",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "4579fe8b-8b1c-4fbd-95ce-dc7e3368e2bc",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 435,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d14de5c7-6f8f-4f11-80c2-924a3b77f7c2",
        "cursor": {
          "ref": "e308b126-2496-4f1a-bf5a-e9d03aa0b34f",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "7618b80e-73a7-480f-a829-95993e057dd1"
        },
        "item": {
          "id": "d14de5c7-6f8f-4f11-80c2-924a3b77f7c2",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "18dfb435-d008-4379-95a0-b9ee73617aa7",
          "status": "OK",
          "code": 200,
          "responseTime": 527,
          "responseSize": 338
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "f07e7b46-b71c-4fed-b2e1-081e8bd07079",
        "cursor": {
          "ref": "0a0b3044-7308-49a4-a97a-4621e4c7f613",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "529d7ed0-81d4-43fb-8ec0-289b726fc640"
        },
        "item": {
          "id": "f07e7b46-b71c-4fed-b2e1-081e8bd07079",
          "name": "credentials_verify"
        },
        "response": {
          "id": "a538b07a-af43-4d49-aded-98b08feb70fe",
          "status": "OK",
          "code": 200,
          "responseTime": 2339,
          "responseSize": 330
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa2c980a-adaa-463d-9bcf-6e7b90ca19e5",
        "cursor": {
          "ref": "83e73cb3-a15e-4b79-acd7-d7bf76b4d039",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "00364a56-945f-4dca-93ba-908815481196"
        },
        "item": {
          "id": "fa2c980a-adaa-463d-9bcf-6e7b90ca19e5",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "68c23c5b-9cdd-4a4f-a202-ce45926bc046",
          "status": "OK",
          "code": 200,
          "responseTime": 1740,
          "responseSize": 330
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c292a34-8696-4f50-a083-36558978a66e",
        "cursor": {
          "ref": "809a0575-adf9-449d-9e1a-761fb1988ab7",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "a03a3d05-08cc-45b8-a78c-b583fdc341d8"
        },
        "item": {
          "id": "6c292a34-8696-4f50-a083-36558978a66e",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "315bc61e-8b6b-4aa9-bfa1-b22cd370376a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c292a34-8696-4f50-a083-36558978a66e",
        "cursor": {
          "ref": "809a0575-adf9-449d-9e1a-761fb1988ab7",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "a03a3d05-08cc-45b8-a78c-b583fdc341d8"
        },
        "item": {
          "id": "6c292a34-8696-4f50-a083-36558978a66e",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "315bc61e-8b6b-4aa9-bfa1-b22cd370376a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c292a34-8696-4f50-a083-36558978a66e",
        "cursor": {
          "ref": "809a0575-adf9-449d-9e1a-761fb1988ab7",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "a03a3d05-08cc-45b8-a78c-b583fdc341d8"
        },
        "item": {
          "id": "6c292a34-8696-4f50-a083-36558978a66e",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "315bc61e-8b6b-4aa9-bfa1-b22cd370376a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42de01a7-3d1b-4abe-a1eb-1d0b2add6390",
        "cursor": {
          "ref": "d3e415fb-541a-43df-b854-1e663621ba9d",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "08627267-f4e4-4ba2-a396-ce2aa8ccc4d5"
        },
        "item": {
          "id": "42de01a7-3d1b-4abe-a1eb-1d0b2add6390",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "2f429b68-6936-44ba-b603-c0a7d067dc38",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 459,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11f9e241-e065-40d4-a551-3ed71ef3acaa",
        "cursor": {
          "ref": "963feeb9-7d1e-4f69-9623-4769d3fd2941",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "0f5c439f-edad-41cd-ac80-b07e7a39ec6a"
        },
        "item": {
          "id": "11f9e241-e065-40d4-a551-3ed71ef3acaa",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "07d5cb70-8963-436a-becb-e0aea53aef9d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 41,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11f9e241-e065-40d4-a551-3ed71ef3acaa",
        "cursor": {
          "ref": "963feeb9-7d1e-4f69-9623-4769d3fd2941",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "0f5c439f-edad-41cd-ac80-b07e7a39ec6a"
        },
        "item": {
          "id": "11f9e241-e065-40d4-a551-3ed71ef3acaa",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "07d5cb70-8963-436a-becb-e0aea53aef9d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 41,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "861edf20-9f24-465a-aecd-e41d3730caf3",
        "cursor": {
          "ref": "3744f193-82a9-494c-8faa-b23628efa4b3",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "77998630-3200-4811-b687-710d3107ff16"
        },
        "item": {
          "id": "861edf20-9f24-465a-aecd-e41d3730caf3",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "50cef042-cf78-4309-a10a-5b42408faa75",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 742,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67b78592-8c7e-40bd-ae08-ade1e9cbe908",
        "cursor": {
          "ref": "07398fb5-fd18-4361-a0b5-37319b5cb47f",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "dd629a67-0278-4c09-afb3-ee27f80258ad"
        },
        "item": {
          "id": "67b78592-8c7e-40bd-ae08-ade1e9cbe908",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "4b000843-b276-40ea-8293-134a23733827",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67b78592-8c7e-40bd-ae08-ade1e9cbe908",
        "cursor": {
          "ref": "07398fb5-fd18-4361-a0b5-37319b5cb47f",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "dd629a67-0278-4c09-afb3-ee27f80258ad"
        },
        "item": {
          "id": "67b78592-8c7e-40bd-ae08-ade1e9cbe908",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "4b000843-b276-40ea-8293-134a23733827",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce0a1e15-872e-43b8-9177-c80063b2f340",
        "cursor": {
          "ref": "4ca9da34-6557-4863-ad42-5773c52d7be9",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "5e2b65e3-892f-4417-8989-fd680edf3d19"
        },
        "item": {
          "id": "ce0a1e15-872e-43b8-9177-c80063b2f340",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "2afd7d43-4ba7-4eec-9796-39186fe4804c",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 765,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}