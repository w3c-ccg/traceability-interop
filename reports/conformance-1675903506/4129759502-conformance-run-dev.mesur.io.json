{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "6cc873a1-8a39-4272-8667-b1f979537722",
        "name": "Clear Cache",
        "item": [
          {
            "id": "0180f9ee-6479-44f4-8cd9-519923609649",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d3bf3cd7-3f24-46a9-99e3-6fcba08b1d39",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "f8de7d81-389e-4e9e-aa28-c7c68ebf558e"
                }
              }
            ]
          },
          {
            "id": "9bf8183e-08cf-4f7b-b279-2abb96aded76",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6715802e-6864-4112-91fe-203e343a0d42",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "52780219-d91d-4a91-bd7c-c4b7445b4085"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "0aa180eb-327f-4aff-866e-3545cb6df590",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "4427f539-b495-42b4-ba1d-ae5d75b9b1d4",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c2f6e2cf-cf72-4f7d-8391-667dd303a420",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1f649921-bf97-455c-9c47-89656ea330ad",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e3675f44-7b36-4b24-a10e-d0875f201b9b"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6ad884e6-c0b4-43b8-a408-993f2c9fe4ec",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4c7305f0-0513-49dc-98ec-577e10e94b89"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "7d39f11e-61e0-4999-b1b9-a30c79b5fc0e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b94c3192-f387-4613-905d-13126a87c963"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3bbe74bf-c292-43bb-a28a-3da4aa6917a6",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "44bcb6bc-9575-4678-872d-3ffbbbb21f09"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "82181fd8-2e6e-465f-96c5-e56ab457c790",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a726c20b-3f11-428c-b0ed-1a55cb355cda"
            }
          }
        ]
      },
      {
        "id": "99c03aac-eae9-482b-ba5d-4d0f9e49fdf7",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "bef06507-81f6-4224-984a-0500fd9010ee",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3ef395bb-cbcf-434c-9727-f87bbe0b261e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "6ccb8849-6d5f-4f98-9308-43f51dbf765c",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f60e561e-8aeb-4809-a1d8-80a5eab129be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fe0f9450-b9ae-410b-9b70-e3da0de0449d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90caaa55-5ef7-476e-a683-f5a2acfedec7",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d88ed64a-793f-464f-95fe-8824b7ed5392",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dffd0061-68d3-45e4-8ce0-cc2584b041d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9eed0aeb-de76-4727-a5da-1ea190daf5a3",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "223f60b7-186a-47ae-ba34-2411986dd84a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "450023c8-84da-447e-90ff-4037957749f8"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3153d255-7159-4525-a328-d780085c5456",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0a37ce11-510d-4e3a-83ed-476c79a5eeaa",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a509a83c-c32b-41fd-9999-95844ce2b838",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ce0df32c-b559-464a-9f60-adcf616376c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b94ae38-f8ec-4786-8fa7-b8f0aae84db9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe4c5ea1-db53-46cf-bb84-64eab3a8f50e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3a6a8b9-54c2-4c59-acd1-0a5118a1a191",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6866f2e3-d873-4d37-a834-32a3e0e4a5f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4298b282-1060-4c80-9e78-be55a535aec2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b8cd337-b2f0-4307-9010-fbbea7c5a357",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "30690adf-1173-4261-a4a9-776e3f9f1298"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "cbf50415-8ee6-462d-b535-0657d8954fad",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d1ddbe06-4b35-4bbe-adfd-f5cad0a8063c",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "935beeaf-95e6-40a1-9340-7dc48450c77c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "e6ad11e7-44cc-488a-8cf7-7364e7e44066"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d4e809bd-573e-4eea-835f-f36879d918ab",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "48421cfb-e167-43b2-9449-3b744f7748d4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "797bc01d-bd47-4b35-b6e4-09e1d3175a9a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "715539f7-8870-480f-9da0-1e2d080e9221"
            }
          }
        ]
      },
      {
        "id": "608df18e-5a64-4abe-a487-957a3af31343",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "4dc8803e-d7b2-4716-89ef-610e00233df2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6f9d6389-e992-4fb4-89a7-0c9d03a40ef5",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "e35c0777-5302-4ae5-a13c-4446dada8bb3",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "204652db-f0ae-46e7-8f2d-2a3a46514c24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a206de0b-505c-4e98-b3db-f00fc1562910"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fc8f758-893b-41fc-93ba-f91b0ed8994a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cec6e0d2-9c87-44c5-944e-2dae70f2de12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d659338d-2f99-4404-a5fa-127716ba8297",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e863f83a-0f97-4a52-8cf8-0339388c21c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b7d1124-1945-498c-a393-81409a4f0d52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c73d28c-eb3f-49d8-b195-d252e5666a04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bda78960-6317-48f1-b1cf-220ea8cf5643"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c83a69d5-b7f6-4a60-9930-35b0b471e786",
                    "name": "credentials_issue:credential.@context:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e201392-b6f1-402a-b12b-a1727916ba25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7849946-2387-43fd-a172-ef45ea22fcee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ebbe1f1-41b9-4938-905d-0d20d97e57fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must contain \"https://w3id.org/traceability/v1\"",
                            "    req.credential[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a3c5e55b-802d-4e6b-903a-f1dd2a59b609"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d56a52d-2d59-4582-8205-c65835553974",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "487b5a2a-f04f-4ae3-a779-d39f4789c6d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "418e7b08-cc61-4855-a088-67397b4cc11b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abcf2f98-6d99-4609-857d-b3f1469fe0b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "633bd3fc-22a2-4cde-95e1-8115440dbf99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce2e335a-9622-4a95-a4db-e32df68ec6d9",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e7b418e-7334-4223-a738-9bd66227f68b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f84537d3-0a22-46ae-90b1-27e42b9dd0a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f12eb666-56ea-4f6b-8dc8-141c90ad3112",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "eaba1643-b9ca-48a4-9e8e-305dfd159864"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e4d236b-dccf-4e44-9445-5e8b2abcbbd5",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c303e308-b456-43b0-8723-23140d799559",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3659f25a-11cb-4d1b-a5af-298411ff6cdd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa9f753a-243a-4bbb-a0ef-d1162c40d77a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8891a777-2e3a-4c50-bf6e-028eb91da816"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b08fab15-bfbf-482f-b048-76d79bb7eee6",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "985ad2ba-1129-4d9d-8a30-ead32aacbc1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06d053ed-90f0-47e2-a6c2-3bed609c1cdf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17034dba-21b1-48c3-8f3f-c1556f1d066b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b68f78fc-c7a5-42f3-9c3e-ad00e896e55b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54884782-5c15-4f7e-9aa4-0e5c52e2826c",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1327c125-e53d-4cf5-a902-e87a38588d7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72235ccf-cbec-4197-a984-75bb7d24aea6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dfbaf93-075c-4307-8538-a09fd9ba2c6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "12a3f170-fbec-43da-8aa0-61ace99e9e5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc11511e-e72a-48e1-974c-ff7e0ca98fb8",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "332ae8be-d378-4c7e-8f3d-01968084de2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5092d7e9-546f-4531-b98e-3296e258755f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc7763a8-934b-430d-9ca2-5ff8a46f385e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "44f34411-f56b-4e70-9f05-b897a83ff92d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40aec26a-3160-468f-b45c-b4f0ca447f9d",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed0a54f5-9814-49ab-a146-b3b6db1c9a32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76f7b016-0198-49a1-ae85-5228814f9a8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd76d301-c3b8-4a70-add0-b6a72750f803",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5403bda5-fbaa-4b8d-a919-1bb2980dbeb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62b678d2-0382-438d-92f5-0d12882ebbd1",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2738a67e-f730-4345-b508-823fc02698d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "727fd6b6-70fe-4a36-96c3-74b6386499f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2ad7d43-eb63-41bd-a04d-bda1ede8e74a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "01995160-213f-4ace-9857-b32f539e0b55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2f75306-8854-428d-8fd9-d332bad619e6",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bb6e46c-ff49-4622-af7f-010b6fc6d3ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e32b964-6327-4384-b304-819843ad765b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b6fd933-9ea2-4081-ae99-eb25f20075ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f2e8d1ad-8f77-4731-8839-5ffe2e3fd30a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5601c1a-9e20-4890-a1fd-e527a6745f45",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f11d7afc-e3cc-499a-bfcc-af7f5a98c4bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "064b6a13-43c2-45f2-aa07-dd6a10df758a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e415c56-8944-40e9-9f1b-fc4611723725",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "abb92549-615d-42eb-a311-283154a024ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c590832c-a93f-4945-be92-659cc54256b4",
                    "name": "credentials_issue:credential.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3da1671b-4b75-454c-9333-dec8c9e32046",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c62c2746-b3b6-4de6-a8c2-0980a9d040fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62e4e4ff-3f61-48ac-a54c-80df989fe44f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.id is a required property",
                            "    delete req.credential.id;",
                            "}));"
                          ],
                          "_lastExecutionId": "12987947-dfec-4f59-b941-84a1eaa16945"
                        }
                      }
                    ]
                  },
                  {
                    "id": "376119d5-bb29-476e-a81f-4c3f6545cb8f",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11f095f9-17f7-4ab0-9f11-5ae892cdf15e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "300f798b-4ee4-4254-ad69-c47842adfbfb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83fab8ad-d556-420a-b576-816f6e9f227e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7ede31ae-6409-4064-b9e5-11a62bcdc67e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a212232d-771a-4afb-93c2-4c978f8de788",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d86fa61-8256-4bc8-9561-1f6074898282",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f409310a-9e87-4b68-9618-290b66031497"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "501eccae-e1b1-49ff-a1ed-b5cb0149ffbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0cd246bc-6d93-45b3-8c9c-fc83f0a56fb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4c57277-4179-4174-a118-a0c0fbecef53",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb7cdddf-c06c-4e24-a1b7-a07e67415b29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19e787b8-4a42-404d-a734-e8e93a3566bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cfb0b8f-678f-4d2b-abf1-96c6a5554ae1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3007db34-cbdc-44ab-8c30-a48736d4951f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05b21c8e-1f35-411e-a94d-39c4d603a53f",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5a21ffd-bfb3-4ca1-a05b-e7e6309254f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d205e625-5153-48b7-b173-a83b27bec258"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaa88e1f-4826-4823-94de-9a67df1f4330",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1dd8400d-494a-40d0-b06a-ea04cfe53beb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a61b25e2-d540-4ae2-95fc-aee98191529d",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "738610ee-03c6-4a26-b3ab-ae0f2f553a8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ad56861-11a6-4c3a-8114-58977912da23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fd46b98-2637-4391-8727-988cbc4c933c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5de8d30f-40c3-4d3a-ba09-6151f1e45ac1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0916a003-26d7-489c-9b47-c66d7d881bbe",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "917d688f-81ba-425f-8179-ab672a06681b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3ea6537-7d25-4c05-b895-e030f7517754"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b604f85-ffbb-432c-914a-f4aed39f3c49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "367d92f3-4d8f-4447-af30-310a2167dff0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "141494d8-134b-45af-ad94-306fba26f642",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80d0c955-ef7f-48cb-8cbf-8538eb289093",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "341a2b87-3f26-4832-bfa4-ea801f953529"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "746fc9a6-ac26-4d7a-9c58-9e2c3677ad45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "58831ac1-f409-4177-a9b5-c5ebad75397a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c1a965b-af61-4777-a828-7e7eb187a22a",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "250d5e79-dc3e-44b4-9188-42b3fa7f9255",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "812ab3cf-79d3-42da-b7b8-5bf9984d27bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "702fc872-e309-47bd-a70d-8edea4d786cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1b4faeee-36c2-4ba6-9812-2c3bfb2a3c20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c98185f-758e-48e5-a441-aad9fb18579d",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b92172f8-2815-483f-ba3a-fffb0ece0b22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1037104-02df-4f64-88b0-2261d3104fb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72c4e3d3-84f3-489c-a723-a2615ebb3950",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0436b3ba-5507-4875-80b3-a434fa56cc8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76acc5b4-68bf-404c-a405-f1a21fd70b75",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8237d721-6f25-4635-83af-e57d3d767c8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88580909-20fa-4d1f-9d6b-f5c065ec08f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "259e4ca0-6426-460f-9be8-9cf4aa905751",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7f273ab8-8520-4e38-862d-9ba588cc2bf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dfe910c-f80d-47e3-a082-c64a625cb16f",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6048ddc-353f-46f8-8136-852a01d5d041",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "569b6cfb-1d74-4a92-a1a0-ba25393bc86c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d109336-fcbc-4b4b-b22b-1ab6da1a274f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "02c23093-bfc6-481c-9662-2aef34ac19dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "587281f0-7638-46ec-87ee-e286a4275c17",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b179f025-2e51-4dfd-a486-4e6177c1d0ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c877026e-8c1f-492c-aec4-c2e14410d504"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42658db7-5329-45b8-8f0f-14f7725f9a53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "aae4a52e-d287-4399-89b2-b66c824c73fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4406e9e-c8db-40b7-a965-0d8255aae53f",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0afe54ec-a733-45be-b20b-53c09c77d80d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d648991-d7bb-42cd-825f-f07eb7b4321f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09292050-9b19-42e9-ae86-51499902042e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e83d5072-0e58-4c92-b23d-3ebf13213324"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cae59cc-5419-49f0-9fbf-26a6904b9e5e",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a101f63-346f-448f-b693-600ffb2743e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7df25e83-af02-43dc-8424-e8c329b9bd36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86a70617-f124-4f7e-9cbb-0ea33c68ef9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f8be06a5-4a08-4021-b87e-cefa5c9976f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca8e3c64-e464-45a3-b566-7f84c7ada942",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32a9d067-c5a4-4fbc-a46f-1a4352e342e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5dc372c-0ddc-40a1-9d9f-716d629532a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4ee8330-2760-4665-acb8-a841b286992b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "60e97764-be81-4c70-bbd8-8cf187f8faf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94593734-edbe-4b9d-b30e-0350041b224a",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e50a926-93e4-426b-a699-f16e390ba307",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "817026af-d1ba-4238-b25a-3a08cbb0135e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfcba927-fc27-4d19-9ff1-736c37830fa3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6ee44be7-f83e-467f-873c-b97e782ae600"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59ba13d3-fef6-478a-8dcb-a5c3949d50de",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fba048f4-1407-4ced-846f-477f1f6c09a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "907c9bee-7168-4887-bbb6-114113661782"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da0a5812-e876-45b2-8ffa-87ef1642fd3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c414eb5b-e03c-42a3-997c-f4fb5fc10b09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ec84972-ddc9-4724-a958-10c5f2eff001",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18f240dc-62d1-4079-9887-f18f2c410023",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0276950-b4de-43c3-9caa-e628aea58839"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cbec0eb-8ce2-465e-9224-ab976e16aa7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "40e8c115-d30a-4b5c-b502-b6fa1a610528"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d306d9ec-454e-4602-a8a8-adf36e4a4d8f",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecc83608-159d-4962-87d0-88eb31ebede4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf2d85a5-e8d6-4061-bd24-0c90628733a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "023b0f16-d517-4bf9-b28d-13f3e00c538c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d7fee73a-118f-4fb6-a257-ac1c0eb0f6ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cce0ffbf-2173-4c78-9d16-c368137129f6",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "495f6796-2365-45cb-bbc5-5a150532a112",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcefdaf1-0c46-4e70-b974-37c51148fcbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d47a0648-6fdd-4524-8470-caae534c9068",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f5b01cfe-99d1-413c-9885-f2b222fab587"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cab81b4-6fa5-407b-a256-fdd7b8796f3f",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db3dfe9a-2483-4ebb-9ac7-450012caae5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fb832ba-5284-4234-b83b-a45d2c497990"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d88605ac-a9d5-456f-8a3e-8ce8023759b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b7aa74e2-2e0c-4a97-be21-5c1b33fa992a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c51d0aa-6e87-406a-b3c9-b7172d1bcd02",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e9a2aac-dec8-4c05-bcfb-8ec4d9115bce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f73b1b70-d638-4efa-9e57-7215ed8c3730"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb077711-5e5e-42ed-a6ec-15e8843c5e76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "df244c3a-99df-49eb-a410-be380e92bdc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dd643e5-85ed-4f26-8a6b-6ea73cf52f9e",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "baf28ee4-481e-44b0-9696-566862037d23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f761bf9-3365-4818-a880-bcf170d705c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d3849e9-f121-4d7c-be4e-cc1d6beb7152",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "f262cf4a-d365-417f-8833-49ac2d54d081"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43648460-b0c3-4c28-81e2-65192b78e892",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cc7ecb8-04cc-47d9-9e7f-dd90eb22e47c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4bd937ab-5bc1-44a2-848e-c74b1ef17229"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb6ac707-e112-498a-b439-4b0c6e331f96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "12fa87f9-4bef-4f79-ae9c-c831a1f883da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9306c96-a81b-4759-8d11-60c7f0c056cd",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba0024cf-1662-4965-aaed-d9808ea5c24d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f042b950-1b5f-4831-865b-af05febf5b32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "899bdbe6-2bf2-4585-aa68-ea5401281eb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b58788b6-f398-4ba3-b505-c96f25b382c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a30e67de-a07b-4ab4-9984-6fed9c5cfd9d",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7a2a75a-9014-4916-b4b7-79e712726583",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03790751-89a5-4e4a-9c23-f1a60e56f912"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5520f0f6-fe46-410c-b6f8-1d412aa3880f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c75be68a-e13f-420c-9b36-70adaa4d2564"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73d92cc1-dd5f-4bc5-9382-2e3029c891ed",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2e71b6d-e3f9-402a-b5a7-42299d2d7ea5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ee76001-76e2-4689-a65d-9bbc4aeebd81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4773f7c7-0136-48a5-bef1-45ed9d726452",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "a891dba7-8fd5-4dbc-9aa0-f59de7bb2c7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "031e43f9-58ea-4e70-b4b4-3c0911d48496",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3e46f9f-53e5-47cb-988c-7d4170adf412",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c7e2470-ccfc-4db2-8725-f2781487f449"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48964c09-b655-4298-8c34-48f2a1101479",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "af489ca8-9370-4b33-b2a5-eab96e6f6995"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f7fec01-1d73-45eb-8668-1eccf9382e5e",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad40c50c-67cc-46be-b77c-e2acd1771520",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "106c860e-42dd-4ba6-8e94-c5beb8eaec07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e27ee9db-3ac9-4d4d-a772-fbf7363d4c53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "8bc2551d-932b-493c-ba5b-a690f67bc25f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69a44a45-46ef-487d-83c2-233914626b2f",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50a598d3-fe7e-4182-85ac-99721402c9c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5f0ebc1-b39f-4dbc-809d-2ffd1212bc3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49abfa50-0c19-4f72-a67c-220077d9ae6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "f6413e65-4c0c-435a-bab8-6db1a48b3724"
                        }
                      }
                    ]
                  },
                  {
                    "id": "891887f3-9ee2-448f-a15b-4c49476c0409",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb17f18b-72e9-42ef-a9c4-771e2f188be5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "375a326b-5d30-4671-a417-3e67cc6e657e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "142adfcb-7146-4719-9429-24018294520b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "cbe27a3f-9b33-439f-8a05-a8c1741817bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e30e4c8-779c-4e49-9f3d-462859e5ba83",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "387c1c74-e9e3-4455-a475-7d399e4380ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb0c3bd9-117b-4475-bb24-d8990c4fa062"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ba4f7f0-0bcf-4ba0-86ae-7b4a7e337999",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "e6550f76-1d1d-4040-8ebe-860a8936e1b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "771f0dc4-ae93-40d3-83eb-e5fd3558692e",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1905040-87f2-4cd5-9670-ea06469cb712",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6a24b6a-cd60-4c1c-adb8-c5c436a795d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4c4e7cf-9d02-4d7a-a49a-3f391b5e1335",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "bdb9f601-0427-4247-b1dd-cca8ebde8658"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41ab3f4c-ea41-4399-b049-88313d59b2d4",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c63fc4a-3670-4b94-be3c-fd8ab28ff913",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a15c859-c188-4ef2-ad5d-854cbdc01911"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f261517-9e08-472f-9980-e4bb9847b780",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d9aa7a0d-15d2-4ae2-a879-1d4ff9c255d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef963216-3158-4f62-9702-82d34fb8b96e",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41dab760-431e-4820-b794-5c51ad6f6f98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08f5d0c1-0fd8-415d-88d0-05a248c1f86a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "362a5f15-065f-41a6-babc-ff5f3d634446",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c388773a-9877-488e-af99-60d94c6a72e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f51d2ff7-fed2-4681-9d76-c23e348935e8",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0136781a-0576-4821-910e-10a1b23c9439",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71af6526-0a63-4b8c-95b9-ed1a86f788f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae83307b-a552-443f-bcbe-b74785e30db0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c806ef77-7a7f-4bd9-bc11-4d388d5b2e76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c42efa0-bfa7-4cce-89de-70416c31e893",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e29d0754-b745-481e-8441-e5bbba397bc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1264c15-d932-4129-98b1-12f4f2207d30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c633d34-9451-424a-b711-a9a893ef2f0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2fa9eca5-7380-431f-ba48-e8feb80a9013"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfed37a4-fe3f-4ec9-9ad7-265cb0e114c2",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5faae82e-0bbf-46e1-89ac-eb6985a53a6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e12ae672-9409-42db-a02d-0b33e8828ed5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c47f0b97-0765-446a-90c7-9fe03770327c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bb2401bd-1642-41f3-bb7b-c9da50e69c38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a442ea4-a52f-48bb-abbf-e0490dcbb431",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e47ffe93-7af7-4860-8c70-765522fdbce5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0d4d865-b699-42be-8505-fb49633ff7b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6996170-92d8-46f0-9876-7fc2561bf495",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "ac69937a-2111-4af1-a64c-fa943e3e0299"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4830c3ed-d8ed-4809-8abe-eb06b2096e30",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a236129f-6544-4919-93db-492fc985c836",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3f3f103-4208-4484-acea-039b118a13c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dcb3248-258f-4d69-b437-7efb403649cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0a6daf2b-4955-4d0f-b8b2-0722ab6d2178"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d3fc325-d2fe-400e-891b-3624a09658bf",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78e2ba8b-4e69-410b-a590-0d187f53f8a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93e6e187-ba68-474a-9c96-20ea93ffc523"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c65ce645-8b76-4787-a43f-be3ba76fac3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ad2b4d6a-db19-41f7-813f-e5632aeb1026"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40e1a3f3-9bc1-4fc9-8ea2-01eb0d0cd159",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b56e134-81d3-4c8b-9c81-61c3dd9c8bad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "541b6727-67e1-49cb-813a-502b72a9d4b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c55ae2f-eb31-44a4-b803-c726ffb067f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "caab5a13-581c-412d-bf66-37a686fd332f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9d2847e-ce15-4bbc-9090-a7b31d788f6e",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cf7f35c-ab98-4db0-83b7-ed9202f56a6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6459617c-4087-421c-99a0-019498d023a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8fd6a7c-6bfd-41fb-88d3-015249341def",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "29b83047-0b9f-477c-944a-81b8a6fa01d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd0fc032-03c7-4a5c-87a6-2c7db14982d3",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba027382-71a9-4d16-af80-0402105a2845",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cb43d7b-45de-4832-908b-eaa0763f2b2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1869137-d9a2-4635-8c0a-5e2a2bd76d35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "953eabf7-0813-422f-9992-625b0f5bf82e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b17a2f0c-bd51-4426-85d4-f1154407b66d",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7893da5-e611-4c56-bda8-e6532512383c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e220f900-3d8c-4adc-95dc-2f51bb10e475"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ace6ae32-ed79-4843-8b67-3978c2e91c00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "523527d7-d030-4a3e-811c-10b68db2a076"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b06652b9-f3c7-4edd-8b04-6d7be81b26bb",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "994e2e64-023b-4c2f-a719-7249b1260140",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2c1d6ae-b776-4c6e-9dc3-bfa87463aeab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "508eca49-ed06-415a-beb2-29a12237f810",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "e8a838d4-9274-44bf-b42e-63fa4df04dc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26976ae2-4cd9-4353-b7db-10cba2713dc4",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "585f143c-ca8e-433d-9ee2-28370e7bf695",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a76c80e3-b863-4d0a-9cfb-dcd7345a08ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5c9ede0-d968-46dc-a055-bef5e71ba186",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "28754e23-6ef8-4e80-b9a3-b726118250e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f856ce3-bb90-4a5e-99e8-4a6a5122b7d5",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f05eda1d-a643-408c-9658-3ff4c5413bbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eeb5568d-a339-4864-8195-898f3a044a35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13bc0ec1-87f7-48b7-b68b-3d34050df0df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "cf1c9734-5b2a-4b0c-aac6-639dc3f07f75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26681d59-d5cf-4011-9b96-1880c7c63e14",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4cec6d8-ee73-468c-acdb-6a7c598cebb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e236ef52-deb5-464c-83a6-23f82e12939b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c6d332b-bd54-4cbd-9df6-2d367b6710a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "c4c69cdc-25bc-42e1-aa36-a08c988084c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "354c0133-7968-4cb2-a157-18abef827dbf",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16e2f5f2-0a29-40b3-907a-6e35bf0f2ea3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddd697b2-7b26-46d6-90f1-690634246415"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c86e168d-366a-4529-81ec-4ce9a759db3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "8ee4769c-5288-4ef2-a95a-7774f3843612"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebad000d-bd8b-41f7-b590-a55e7efb5729",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "539816b1-adbb-4d77-89da-c86758de4f63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2a6ac2a-1304-4b9b-ace8-3cffec4ca2e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64570e0b-bc49-42b7-a99f-a398759d6a2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "ed908ba3-872b-4179-9ecc-62cf19160c67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f76523bb-5d7e-4d74-b253-0aba83ded65b",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bcd0f2c-3cae-42a4-8395-ffeef7820a54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7763d6c-c85d-4828-a807-719a53b8cd65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0772746f-ea52-479b-bab0-91c03eeea67d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "512be2a3-d1a8-49cc-b865-417b4a3e83ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2788da35-78be-443a-81e1-fe9c8576ae19",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4575ad9b-ffa9-4fee-834a-7a6a2ffe9245",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a572267e-c416-4462-bd48-595589569fd3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "850b0ef3-a3b3-4c37-952d-1138a4ee845c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3c9134a2-c349-4c97-a09e-4069ffdc0865"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b574fe08-b29b-42ed-a4b2-5a8c2eb24767",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b13ec204-2d15-4da2-b574-fb2ad2daeea9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0585314b-9a97-448b-aee9-13f75b04b1a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30539b6a-188f-44c8-a6b2-eaef377c2e97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "097a0bbd-97a0-42e9-ac27-d9a4151b22fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1444e55-c5ab-44b9-96a2-e9d2d1c1c0df",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08332403-a770-4c8a-8550-a051da88bca1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d70b15b9-53c0-466b-b853-e3aee3846c97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "305ee147-6c08-4847-8662-5660851c78da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f3889425-bb9b-4379-a83a-e4b83b54a35b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44596004-9c69-4f76-9223-0bdb0743c14e",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33a55801-fa0c-4077-98f0-d4c5e677e9dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b473aaf-d62e-454e-b23c-d575d834f248"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f126f733-d9d1-49de-a40e-6988c3147001",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "8f7bd970-2fb2-4421-a6e9-28286b70459b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5551c759-7e2c-469f-8c51-143f2cce95e5",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8b3a45f-0d86-4b7c-8bcc-60def3346811",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3cd4744-d957-4c73-a005-009baa57caf1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f034b231-babb-4b3e-9128-17823ac37359",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "d7c06743-4eaf-462a-9c69-a1c173e127c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1134038d-b843-4412-b450-34a9855c04d8",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1cc2213-2019-4dcd-a8b8-f0e96466db97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78d461e2-9fbe-4d65-96f3-915a830f6384"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5e95460-e932-497d-b48d-a1f2827e5013",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b429201e-3736-4024-a522-46a4c9c2de4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94179a0a-570b-4bf2-b9ef-710b3c935d70",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "229fac7c-20a8-407a-adf7-e4d5ecbcc53f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cd07332-0da2-46fe-972c-76e545190128"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7331734-c7c0-4e9c-ad16-390348ba3857",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a8b870d7-14cb-4b9c-b2cb-2cf1786618ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85894994-2dc5-4b8b-853b-a794e08c0438",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ce61d19-ad0c-4024-9e85-f04f47230b39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "312c8484-98b7-495c-94c9-7ec2a9ca8f9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2350d1b3-a7e4-46b3-9071-05866fb84cd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "82b9e13a-3f3a-4d60-87f3-4715d0b17f0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbe72d04-d705-4533-a7cd-d484dd80d88a",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a11fae8-f881-46ae-9bdd-b5ee9501565a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76347827-0df1-4b05-be08-b1dcf4e5d88f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25107b27-64b7-4678-9f8a-7b52ce37bb0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "62be1d65-6902-4978-b623-3610aef0db0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a3248e4-1613-438e-9a77-833f6581ae24",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04f66be2-ab2e-426c-a628-4a222e08b97d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0395cef7-0088-43a7-8230-68caafc14567"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "317c7711-0540-4e4d-975a-1369ab177590",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4112a539-85a1-4572-99d5-bd84b3053b18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f63f15c-a0ec-4a83-a10c-4a27101ae90b",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ffb26fa-5821-4105-b3ec-f1ccc4f92515",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "910ed59d-13f0-407a-9bd8-460ee6a83226"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76734fa0-45f2-4d55-8320-49f3de403312",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6bab7c1c-4b37-470a-98b3-2277a9ce6091"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87f1ab78-4a8f-4dab-8e7d-a406153f1f8b",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e9ab165-0ce7-4881-8b45-6d2453d4396c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3d8ef71-ce97-4f9e-8b27-3c20c9fd0e26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a31a9869-0a23-4495-80d0-97f17e3f3df6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e44b64a4-e07b-4039-a697-08102a7a26c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "483e7d15-a5ea-4985-a06e-7a9104d478f3",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82ccc370-6142-485b-97fa-1d170efbd5bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4561042-b35e-4672-ac07-354e2a67a4fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75ff997f-8ad6-47fa-9601-410d8d38e41a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1ba843f4-16bb-40ce-97bc-412ec6246d7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "634ce645-e418-42c4-85a1-7af8841ca7eb",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de48941d-d0e8-4464-bff7-88a4b13aaf56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b6002bf-f2f5-4520-adf8-edbb0dc0a655"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a460f4f-e94d-49a4-b5a1-e844b4b80b64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f6c28334-a987-4bb6-8a18-c4e9f4482c6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a0fa235-2fe8-490c-b529-47471e0004d4",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b729ad3-5677-4179-a8e8-519f5d2430ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d670f098-a47f-4ebe-9d82-568e009150be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "809208fe-5914-4bc6-a056-00106de0948d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "afdb99f4-55d9-4046-a95b-57385257e258"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bce875c2-2677-4ddc-8fe2-2b9f154c9f92",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57282283-f7d3-4429-be73-89354aee2124",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b00aabb8-285d-4ad1-91b2-3bbf3a5ef3f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0bd72fb-b11a-4a6d-8c26-a2d44424d195",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "018dba9b-137b-454e-941a-0b3535184cd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eeb2cf65-c40e-4e46-94ee-ca0723259577",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61b90b29-1a63-4e2b-ab17-0c869b104ca3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71a17f91-0127-412b-80de-becf26485bec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "647bfa8d-f8dd-4360-ba60-99fcb3643dc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "2cb1e810-fc09-482d-9437-c673d0a7de69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9598d11b-acea-4fcc-9bd7-b1e26ccee5a1",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "428f2fc3-5d39-4baa-abe3-043799714140",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7800935a-1ac2-4b50-92ac-29c183b93d35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e8944b7-97e8-465c-8fbd-cda24ef5df7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "db0cafa5-2031-405b-812a-e5d07592947a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "222803af-1484-43a0-b16c-a4ab1fc1f76d",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06fedca7-c033-440d-a9e3-6ee74e211d6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c62bf95-ff00-47c7-8daf-6a1275fc7e1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dac177e6-6e20-4c7d-97fc-69540a3c2be3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "80fa9e25-bfcf-48b6-8b6a-8e4066d6eb6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95450260-081c-4dac-b520-adc827b0d8ca",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1110293-0813-4940-acf6-aca03f48378f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0f5f169-b133-4caa-9abd-722d0eb5c0a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c40fc6a-e741-4f9e-b6f4-424b3c477121",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "44b7d438-588f-45ad-b3ab-994a782bfb25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04844ce3-6950-48ed-90a5-3f72db14c68f",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25d44622-0268-4cfa-8451-4dac78f199fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "223311e2-a568-44ac-a6cb-c7279cc0869d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "217fdce1-3125-42dc-b4c4-7ccea22a6f97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2b873ebb-43ae-4ba8-a22e-1069a49816d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ac54cb7-a92b-49f9-9d34-6e23e3997bba",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdee8c57-03a4-475d-9a3d-b336c1f6b2ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3df7cc1-54a7-4831-bb5a-06ef7a4206cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f82efe49-c696-411e-a733-ecc6ff06652d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "40029129-e752-4ce1-ab2c-2d3e8285f3b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bff4c676-4a13-466f-8669-fe32cb67825b",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e582671e-5f15-43ce-9fde-741d12df66e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2b585fb-4bab-4272-96f2-76a5a5d8ad0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "986d1bb0-c445-4be7-9789-9a582d22a883",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "cf89bebb-5bc1-48ac-bb15-dc15277592d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aad29b23-da4d-442a-8eca-2e21f7cf34b5",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dcc8fb8-f36e-4cff-a42d-d83e80e32837",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6927e380-a4bb-4fa0-ab29-f87dd8d3e97c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5146e5c5-ea37-4d9c-a9bb-93464c76e5e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "b74a2878-c3ee-414a-9eeb-51f9aae6845c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48a8af4f-46f7-4955-8e8a-0266347fc455",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a7a586f-dac6-49bf-8ad9-9f525c28a042",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ad352d8-a426-4363-b8db-fecaa215525f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6c33f94-43aa-45c4-a570-14b0bcbae9e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "124c1366-cf30-44a6-9cd2-a21bdfedc53e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be19e872-efd9-446b-b04d-a1fbd2049819",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88f1bb6f-27c3-4190-8155-3db34f0b1402",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9906eef-cbf9-448b-96c9-da1276a62401"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af6505bf-91c5-4b09-9161-3e99ffca2aa3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "5a8b0042-69c7-4a18-a422-502390871f7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17e6d0f1-990b-4772-b7a8-cd550d78f6a6",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd9a807a-9db8-4b78-806d-c75e2ab07648",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3ed229e-6ae0-4e0e-8375-1caaffdfdf92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "477841eb-8aec-4cfe-b976-0d8c0d43eaad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "394439a6-e8f8-4e28-8204-dcdd4788a2de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0eb12fe-6b48-4827-bbe3-402f1d308e5a",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2c3ed3a-d51f-4e56-8b0a-5fbc9dc58a1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "82fbbbfa-44a9-45c8-ace5-a862c7e0444d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "515ba360-3d9c-4ce5-88fc-8e63ed594252",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "f8dcc14b-5d58-401b-9af8-280e6cf6ce15"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "44c520a6-5153-401a-a804-84584628680e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4d1d986e-9b6f-47b3-9aff-1da48bdda973",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "638ecca8-e105-42ff-8144-6f785a4e63c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "da3d18c2-dc69-473e-b0e5-bad0f05ff483"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a9bf169-970a-4776-a08e-555eb2c10229",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "e251a390-7bcb-4a82-8f76-f9d3c10562b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03fba921-b5fc-4f3e-9683-b0303885be9c",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aad8878d-a875-425e-920e-04e3d11f46ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f3559b54-18fb-46ca-b149-4ca5c0b1b6e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8a88c02-ded0-4969-ad6e-5e458a46c20b",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "2f75443f-88da-4a48-8c81-7b6c9e00a3f5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d8ef3d59-b03b-4370-9731-294cd799f6be",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4b53513a-155a-4ef9-b977-49367c5af517"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "63bc17ec-aab8-4a0b-b3ce-10b79b6bc85a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b16e5a75-7494-4da6-ba8e-9abbe295eb69"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6ec304ea-8e87-418a-995c-b8407b63c5bf",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "919f9137-9317-43fb-b07d-e66d6f33031e"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "1374105f-573e-4e80-a9e1-aa122385a7ef",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "474bece3-846f-42f0-9096-263c983fcc17"
                }
              }
            ]
          },
          {
            "id": "76c4c3c0-800f-405c-a4fd-7d5540a0ae1d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "dde2ec56-b082-431a-92a6-69f0355df8e0",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "989f4948-a7d5-4faa-a318-ebeb3a14dbb1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "24719aea-b888-4657-b9d4-61285a7ad9da"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2d8dc241-31ba-4b39-947d-6d4d38d10ced",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "ab805cff-08aa-4f46-a55f-af23c6b107d9"
                    }
                  }
                ]
              },
              {
                "id": "f3921131-0da7-4aba-8a70-59ac3110b377",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7a974528-c7bc-4e02-98c9-e5a5253fb58a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a6e62844-d064-4ed8-bb5a-3385e023d24d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "14b7d700-6672-43bc-8ae9-be035b1a3bc2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a4de7a04-816b-4f42-812f-b06013beef8e"
                    }
                  }
                ]
              },
              {
                "id": "2c6509a1-a575-4827-9605-e16ca7e68d22",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b586d99c-5e7b-4342-9fcd-2309ab84f9ff",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e1864e1c-36de-4dd7-9559-5b081a2d9f69"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "37d03875-4bf0-4c3b-a7f5-446e12b18b50",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "6ea2d215-28d7-4e0f-8ba2-104665f51ce4"
                    }
                  }
                ]
              },
              {
                "id": "36617040-68e9-4f87-833a-69b347ba6456",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e3f7d18b-4282-4b50-9c3b-d32bc77b7fc3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "edcd578e-316f-40ab-a8cf-362809ea4002"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1e677f28-35da-4810-903d-e57e4c871e4c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "7b36536f-b1e8-440f-b6cc-849212faf708"
                    }
                  }
                ]
              },
              {
                "id": "2d611b1b-05dc-4693-8994-7493e2e2b8f2",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "115d27a8-10b1-4c4d-9822-c1ab93045e40",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0083627e-70b9-4440-9911-854781be7964"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0b97bc85-4a0f-4227-ac8c-d9d20f723f86",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "329d4947-65b7-4d7c-8e2e-a439ad01bc56"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "081c55f6-c6b2-40e9-a7bb-0e10311a9f13",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "80f6d766-40d4-4243-aa12-6ed30a53620c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "173a229d-b30e-49ae-898f-581b0f39976b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5f8abbdb-d644-4367-a718-582012b2f8e3"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ad28dc51-45ae-4205-aadc-aafa135fbea5",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "f0245ce5-e10d-4d98-886a-89a01e3d370b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ce0b9c01-7188-4458-91c4-5127138601c7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b3b438d2-1751-49ba-b07c-a590bf1a866c"
            }
          }
        ]
      },
      {
        "id": "b5c0afb3-d27a-42aa-a647-587301d65143",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "c942cc18-731a-4f0e-af7d-a60a153b4b12",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8606da57-d6b5-4900-85ed-3ed8269472e1",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "368c6e07-629e-4ffe-be89-8534fd03d547",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c32abd07-91a9-4484-b8ca-3f8738853695",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b5033f5-7bfc-426a-b1b5-35fa3da7ffca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e52b6854-7365-4db5-9086-5b0332a4b16b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "5a52235e-83c1-410f-86d0-aeda7f2ad853"
                        }
                      }
                    ]
                  },
                  {
                    "id": "249285a2-7baf-4883-ae54-eb2ac6cc271d",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1353c6c-f5ec-4ace-9ba4-f8ce32a3727b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10466286-6074-4196-a187-3dd878ae27fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edff3d22-b7e7-443d-b089-8bce264dbea6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a1ad6498-9855-4105-b310-37f0dd0211c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e15edd2b-3b5b-40e5-b361-01187fa500d7",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c959146-56e1-4ebc-86d1-42742a0f0e1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a58c744-de05-42c4-bb72-45e97e0afb9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a239764-cf68-42b6-b637-2946dcc97f8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "85c69665-e597-4e8e-a0ae-e86ce1260bb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70ac775b-db12-492a-ae83-0d3d5b5d3011",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d2ef701-6172-42c7-9efc-c4e96bc31408",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a5c23fc-f0f4-4340-b65e-bd3e8111898e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0245467a-5ef2-4429-9398-00b3f8fe470a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9889d450-62b1-4d65-a333-8baa009195fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ae4a6f9-b030-4be6-b1c2-2ac6d5445150",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b8672c9-430d-4be6-b364-7bc35a78518c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e37aa4bf-43fe-46a6-9749-cb55cf5c95cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44a87e35-5443-48ce-a404-5db083a1e024",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cc20c1cf-f58d-44c0-a9b3-16a6a2420e67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7442e3db-1625-4b9d-b4a1-eb78d2d098ad",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05c6b7dc-5591-4556-b98d-7cbff00f8be5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f687d9a2-1700-4860-92ab-f66ec38b11e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33f12b99-0ac5-4d5e-8950-0b6ad903d1a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b80d43a5-90c1-41bd-810a-35a239b68790"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fada18a-89e9-42e4-a0c6-508bc98100c5",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3608d975-5278-405c-b5bb-c87419874fba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "014a26de-64f6-4755-b173-b82416bf1050"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abd0d24f-78ea-45c5-9d5b-604494b37a7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "3721cf10-4121-4c05-877c-cdd0b4b287d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6537b85-c4c2-4364-a139-247cf6eb04e7",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4b6dbe5-7391-4f10-b3cd-828c774441a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93f09308-c8d8-49b2-b121-950bc4461bc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "352e1bdd-abb6-4944-b821-1ff5587371cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "316e3d24-d785-4c24-9e79-68cffcb67821"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d80e3936-74cd-4610-ad0c-6314e4cffcf3",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6711283d-bce4-454d-a127-f1a9218c3417",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3ed6873-126c-4818-a2a7-b43a028eef97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b08ae81-9475-40ac-85f5-75231d7d1383",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6516d605-ab0c-4d5f-847f-04b38ff03a1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65aa11fc-eeab-4dcd-ae47-47e31defd14b",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e106eed-e281-4405-9574-3d3098b877e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85b0e1fd-6cdd-4b9a-a8a1-227f191abba1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a5a1d71-5cc1-4999-8120-769dd86f7a9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c3634c04-7937-4162-ba8d-3e2f2f0135ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bcf9350-ef41-4ada-8ee3-be121a6bcf84",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5689584c-d9fb-493c-ba90-7f0188b45b2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e126cafc-abc7-42dc-a0b4-5b7b5c0cb7ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45635b72-4866-4af6-8a60-f6e4661d0209",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "ab16d0cd-b202-44a4-8450-c9b9333fcf88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "774c6757-3cd5-428b-90f1-070290089fc6",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "872993b2-ab1d-4ffc-8f52-586d4e241b9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c82a5ddd-7ee5-4df6-8bd7-1ad87b325d0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1013a692-cb7d-433a-a0b8-2215b77cca77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "996f054c-925d-49a4-a7a0-50f54a43cf7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecc141b7-871f-46f8-b0b1-e570e9f8d658",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2effaa9f-8378-4c22-afe5-1ba008a5e606",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a1de114-5b8f-4a95-ba42-071defb3e2d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9ce607f-e4ef-47a7-8adc-f4ca3bc499f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b2fe4582-d833-472e-bee1-66cfda2aeda9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d74ce27-2b33-4c92-b82f-f10c387bf14d",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec8a466c-ce39-4265-8b26-bec54e28760e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10c85e18-0790-4e2f-a2ba-9a24c18c0792"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb20503b-21ff-4aaa-9e85-e8459cac0a4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "334d75c2-e9df-47ec-b559-81364e3c6289"
                        }
                      }
                    ]
                  },
                  {
                    "id": "695f947a-08c9-4636-88d9-88c5d87c8c25",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac0e88ce-13d4-49a1-b572-441e8ee69e09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fc3d122-f4a8-4538-a7a1-335a09e86f89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60c874c5-2d94-4e9f-b576-3563d6285e78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "31c4bbfb-6774-4512-a847-1966748658cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f44a46c1-a84f-449a-bb95-a03613b7361e",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f16e69e-c73e-43f9-a7ce-db76f650652f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1cac76a0-2979-4e21-8238-70809d2bbbe4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77a47ac6-1b7d-4b24-9b7b-509f0ae871d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "e4ecea09-9c72-4c73-9a79-a2d0c56c02fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "649cdd61-5058-4894-ac7d-ecb18d6c8b8f",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4b2e5b8-73a8-460e-a0f4-1774a665b36e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff241365-d313-4fc9-9ffe-b8cd31ea6fe6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43f2e179-b16b-4b98-9996-66690010d76c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "b0cd6a6e-9113-4882-8804-62c8d27f9cd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c324a00-650d-40ed-bdc4-ec245599f45c",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66bb7599-79ac-440e-b548-22b559919b81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77716d4b-4043-45c9-aa66-574bc0c5cbe6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bd326e6-5bad-4932-a525-8a1d6a8724df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "c28f3b17-3259-4bfe-a1dd-1337c28c3701"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78b01350-20e4-4984-a6dd-4d7ba4747b9c",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f69b247-ac53-4ddd-944f-4f915fd81fc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbed12d7-165e-4f46-b801-a7901585da10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23873d2d-e50c-40f4-bbad-7296847f33ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "60fe9e7a-19c5-439b-aa09-7a6f0069fd9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9294801b-0677-49f3-9e8e-d56789d1bc97",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ba7f351-1c28-4554-a1c1-7d1038e1dc93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45d0cdbc-8101-448b-876b-c912a8bb13e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2423f531-f001-4e46-8e05-8f03eec2fdcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ed81a88d-e1d1-49cd-b2fd-1a8750a03f1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2df14e8e-7015-4b3a-9615-5e816465fb75",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf0037c8-6edb-45c9-a3dc-9828fd5fb61f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "acb3f89d-e8fe-4618-9d48-e4b7152b855a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d333f157-fda9-4db4-aa46-4f739899d356",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f0104361-37d6-48c0-842a-f1f3b46b7ca5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8396ba47-30bc-42b6-9a4d-deda150cdc8c",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db7636f6-690c-4dff-97d3-fdb08cfbad6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b304c683-e1b3-48ef-b812-2e34fdb52db4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebb54675-bcb5-4253-94d1-e518c29425d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f3702ace-7ee4-48e4-95b5-7619ecb0ad41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cba9bc12-0e5e-4591-9bdd-edc51bb771a5",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ffc87b8-5d97-4bb6-8982-47751963331d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a2e5705-0232-4566-8282-5106429d1b7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f77e552a-0047-4151-97c2-7e496c4ba177",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "baa69544-4445-4d2c-a7b8-7690438edbdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3179de37-5ab0-44b8-ab04-eee0a1e6aa28",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93659a51-cb3d-4595-9e42-921a9fe63c13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0976c3e-1198-48f3-a025-b13da38208b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2aa6b117-ad67-4ea6-9e25-e89212e2a0fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dd6633a2-7d60-4748-a7ec-2db0c417b176"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c11408e0-ee95-4432-87fd-1b9ead5557e5",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65cf34f8-0971-438a-8e2c-f2a95c8f7445",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22daea62-ce55-463f-be6a-37068a97a5e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f77b372-8858-4ad7-ace3-fd3d69baf258",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1cba523a-aed4-4515-9023-71c991cf5d48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c09bf03c-5aa7-48b5-aa30-2c5d5d1f1112",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "040eda95-d2ca-415d-8eaa-3462a1e965e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "938ba89a-ce75-45c8-83e2-151b3e46d0b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b946300-1a0b-4cbb-b53c-bc465fae26f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "78f3ee90-8cd4-431a-b285-299274022389"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7861bc47-b8bf-4734-8e9f-0ed6fb51baf9",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3385f953-c2cf-40c3-a0fa-c163aed38dbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fb38567-23b7-4e23-9cef-f9439089f16e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6887bac0-0646-4d73-ba5e-596cebfd444d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9c46d9dd-8df5-46f7-bb8b-1dddafd95180"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2b1ba62-8771-4696-b377-e0b3172c9414",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e0b5bec-3587-40ca-93e6-fa57d734b72b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4daa47dc-e375-4e5d-a0f4-78ecfa8562f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20c5c762-e8a8-4c2f-94d0-5d178a9f96e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9c1aa931-bca7-42bc-b718-5ef08c41073f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ddef1d9-96b4-44e5-918e-c7d08a859157",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4752ad4c-cb2f-4049-8217-6995ef14578b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3397f172-a4c3-4e82-914a-17497e7c8027"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32058823-d695-4248-9303-5275fb979f12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1b099f75-e1e7-4c56-b0af-1a828d2db89f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d224ab1-2af1-4b9e-b2e0-0658fb9d6c4b",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a47b43d9-fb4c-466d-a399-306997b79ed5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3422ed9e-6e46-47df-b0f2-e6fe6b25224f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "615203bb-440a-4f70-bf6f-2aa174b0cd08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "58a09172-d696-4ab5-9bfa-da9131b57d52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3d3307e-f108-439e-85dc-1980a34c472d",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9c2b7ec-5eca-49f6-856f-c9167f6040ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fa0e521-9753-4816-8257-7cbff05780fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdcf14b3-40a8-46b1-9acc-cb428f4e2dc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7a3ba5f5-a8e8-414b-a737-a2c68b3b33bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af3a3093-98c4-4337-8755-b03519037ae5",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08ceec03-e1f5-47ab-8249-a8fb5272e0f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8a1fec5-9778-4a6e-81ed-8b169bdbafe1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0678a418-6a4c-4517-9116-cbbbfda726e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d68d6a57-abc9-4672-a788-66d9c9ee5ee2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e99b30ea-c7af-4dbe-9331-7d7cd990274d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d08871f4-cf79-41c4-b790-f0b185bf84e1",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea099e24-be71-4a31-befe-140534de1b04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f0f533c-6d79-4a0d-8301-6684d46e7029"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8283c9a1-d972-4646-8a26-ab101adf5a5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ea220733-8066-4e7f-9360-e9a0632bcb95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d47a9608-2ca3-49fb-b272-eeb794301821",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be9d08cd-95e8-4433-bf47-0e6efcc27eae",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "0fa8092d-e526-4c61-951d-b72ebb4a6226"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bac6fdd-9413-4c7d-9018-7b12e4802826",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "320cd930-a2cb-40ca-b3c0-2bc4eda6a22e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fbe033cb-6b7a-4032-a0ae-b3f8e5c8c95e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bb431ff3-d192-4368-86a1-583331ff58f1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c10f5b17-43a4-4c76-a857-00b69c168821",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4f427abd-56dc-40f7-b58e-013267119010"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bdab5063-489d-4709-99ef-6c0913c67bfe",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "880c3d11-2760-4265-ae88-f6d4f55484fd"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "56cf612f-9e90-4dcb-8a83-5a2f3d1ee8a8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "41490e98-e00d-4834-9290-aead0ffa456e"
            }
          }
        ]
      },
      {
        "id": "61a56ddf-40f1-4650-8e17-d4a5a05e6d2b",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "83590191-8b7a-4b64-b698-4d5cc8ed4b47",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d5329287-1135-4d66-97eb-db400edaf83e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "8c14da10-c9e7-4ffe-982d-c61597d05795",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d155f795-dd26-4717-b713-9eda71fb422a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5f181b5-b9cb-4531-9b97-ca3aae094c91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d3558fc-62a7-4172-a94d-6ea2a7608af1",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a485b51d-aa19-4468-9886-d57747a0d226",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3a662f8-b371-407e-b520-9ec29ec10f2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94b9c24d-4ffd-4ad4-b347-524df73dc54e",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c04d43e5-21dc-4016-90f5-d45564f2a4ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85201818-1393-4ab0-8f7b-82092d372b25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29a641c6-a4cd-4147-8a7e-c2c974b451c4",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87775972-a662-493f-833f-c286ae19e9d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9800f222-3745-4355-b66d-f6a2f9c7f5a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8c3a9bd-ca03-4823-896b-7f745d1a19c6",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a42ad3b4-4472-40e0-85d3-136950363a9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b7c9f75-5299-4e5c-986e-e4cedb876010"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eef1ec29-3863-4e48-b26a-e8e02e279e0f",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85183d13-c0df-46aa-a7c9-1ad43fe383de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a70668a-bee5-421d-b21d-1e19346f9959"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62d0d7b4-c782-4371-bee5-efde9615c63b",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6dbd769-04ea-4205-8711-fce529c3032d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "394cf912-e65b-45a6-ae48-9ccb958acd5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca58c76f-cf48-4b22-bcfc-2a700c6baf54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f99b675-36bb-4087-885b-bca44af6951a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30ee4f13-1917-4bfe-940f-3e3017ab3ed4",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1ca6112-a2ef-4789-8f34-1e1f86f764dd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f63c1d7f-adcd-47a5-a508-818b21275634"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e362009-d3d1-44a6-a2dc-8a8b454e1c84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b9b56ed-8d94-44ea-a1da-5dcc0d97b890"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2af10f0-bfd6-4d9a-9c78-9e6b31136678",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5849482a-2b39-4bee-9084-51e5e08d99b5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a8f612a1-69e1-4771-978f-74a0e4429eca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c0f1f82-fe00-4f27-b3b0-fbf8909526c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1d7260d-3e62-4092-8a2d-b017f321686a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af734f61-7a24-4a6e-b0aa-25b26a1cfe7c",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d97c60b5-b824-45f9-81bf-88d6541f49c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "171c1656-6cbb-4f85-a16b-92d58754c8b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a48919e9-3ed1-4673-a5c1-b0aab739f63a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09c68e02-79ca-4b87-93dd-d5ee32ae736a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e85a7e0-d728-4026-9c2f-04efd3b5059a",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "566681f2-1a95-4f03-a643-1c88774cb895",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a0f56d2-be2b-4d7c-a50e-a9f4189287f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9150d2d1-60fc-4252-a31d-5bb4fa4ab2f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88dfb7be-8544-4c9e-9c8f-e815aa8b3129"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9d15b0c-78d1-4516-b6ec-39b4ffc3eadf",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea0f7587-096d-4158-b8ed-183158e338fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52bf007b-55f1-4d0a-bb5a-cac3bc8acbef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f4875a0-6cd9-4bd6-ad4e-2cdbdc67d4e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52860cdb-2ed0-4a69-8d8e-5048b86304ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "931f0480-d5c9-494e-bf89-edb0af6fd867",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f01c379d-f0e9-4e77-a2fa-e614b269ab22",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4905e52d-c6ff-44d2-ad4a-c0cdd5b82c7b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1257e596-a32e-42b4-b5a8-9eb390b4383f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b63604f-a801-46a6-9362-bf0391f8e6a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0473b0e0-9071-4e22-a013-28d97d7fe1b9",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13bd4bd0-0a9b-451e-b348-91ef3afd5d3e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d7d902bf-4f37-420d-988e-f9edfe9fc0cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd860e26-afca-4553-b971-3cf97af3d4a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87f8c908-3b19-4095-8831-46fda3daf780"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08f9d509-872f-431b-a374-b6747d030797",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8499289-11e0-4b1e-8ce2-136576f49d2b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bed6ba91-6c0b-4668-9c12-afed2c8e79a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a839029-9054-4605-b891-dccf405ef2f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36edb821-388b-42f5-adf9-54ec24dffa07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d09bf28f-2271-435a-ad44-02b3559b31bd",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59178ea0-1f3a-4376-99ec-da88218c073f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b2ec1b33-b9f4-4486-9a9c-5669b11fb402"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb7dbc0b-7404-440c-ad47-ca27a956eef6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "460dedb5-caf7-4708-83ac-9a39ae615abb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "040570b9-65e5-4f3e-a287-36b927fe5258",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d179721-6fc7-45d8-8a02-8a5141ecb9e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87b3c7d0-14ab-4096-9232-99c8b50c75a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fa1c5bd-3323-45a6-bed8-1e5db16a2751",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff9b233f-5bec-4796-be80-db4b970e0fa9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a1eeb93-e623-4f76-9b79-ba20d6a5d259",
                    "name": "credentials_verify:vc:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd021d19-efb8-48ff-9609-e7b6f5db89b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36498721-3bbe-423f-90d0-54a83ae85ec8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d2f36eb-8ea6-491c-9d97-e4b4206d41f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bf1e258-f88a-4cb0-8a12-5851d3c2afe3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b6a91f7-e912-45f5-82eb-1659c1ae00b2",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8429f1c-b160-4595-a805-081c5d262208",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f588d495-1b8b-4fb6-b245-a6a7d9c7b2ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a2415a3-47e3-424d-a8e8-1d2e4fadf5b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "357ebcfd-dea6-4e28-ba08-78297a9dec8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fc5eab7-1d14-46c8-94fc-f03a3e5f4cc0",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e30776f0-9d96-4714-aacb-294fc72de4a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3b61ac6-5699-4489-803b-73370443a60f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8223546a-dc64-435b-8ef7-4f4cccca5de0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "634ad11a-b356-4184-b737-78668d996f83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e2e6900-1af0-4857-aacc-10c6299dc02d",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48813110-3fa6-4f51-9bcc-735a3d38d2ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "298be0c9-eb12-4340-9023-3e97c5bd4d78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cb9953b-2432-4743-a3ac-3f0644693f1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2f657bf-bd52-477a-b650-15b1da7db689"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57483bd8-5e14-4618-8010-8a557231aeda",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "becb3875-6c03-4ccb-8a7d-2876caaa6034",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d07ad8b5-d531-4d95-82a9-2e1849e6b841"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b638e07-7fba-4483-81a0-59c729d6b68b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40f35851-8184-4d00-8148-1ffe945c9cf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ce9d202-64f4-4d84-a702-821091331d17",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7df2c2e0-4912-433b-ac49-8358c1c2160c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98b1a281-150e-47fc-b380-e97ffe6e4ae9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07d4ce77-15e9-46d5-af8c-bfbdce326cad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "934713c4-f6a4-4dad-a5ae-21cde1f07069"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb036b81-ba49-46d6-bc58-ce6370ef6360",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cd9e280-dbec-4da1-9f0d-aaed3a8986e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c6cf92d-48ba-40b1-ac43-71f2827186a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dced797-1f36-496b-ac45-25916c6d1652",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ff0030a-d5e4-4560-a712-22cb734eb893"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae030934-3c85-4ae9-acb5-d727139186da",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3da5a34a-b528-4291-8623-07c3fec64e47",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d0dd28fe-996c-470e-ad5c-3363bbc307ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e24dd78b-1ebb-42eb-be81-f32bddd7d271",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "737bfcb3-c5fe-4405-aae9-c4e0f137c64b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c7c9ccd-0a0d-4cb8-a5f0-60e7f08f47e3",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3649a44b-390f-46dc-a588-644e30f29fda",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9bb09820-96d8-4f77-bdf4-92daeaed4847"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b4bf38d-4150-4936-9fe1-3ddc097f1901",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45612fb2-69d5-4d08-8dcb-62e609683a32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df45fbc6-bdb0-4213-9fb8-649d2fa3a884",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3696712b-9ba8-4d23-8f7c-040c60dc0516",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "31d7dbce-ff66-438e-a50c-e7a1047f6dc2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ff78f56-60f3-4eec-9145-7dab36a84401",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c61e7d9-5b10-4b70-8af9-75aa088575e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61780f48-7bba-4c06-99f4-2fcfbe0835e1",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67e2b494-05a5-4738-bb92-d3c7c3878078",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c81ff4f5-5727-480d-b805-76f5669ce5cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1c456d5-2c3d-4e52-8ff1-75c69a220b45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f585183-0bec-435c-a3df-2e98da18d85e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7256ea25-d23a-4a07-b526-b13c756a3226",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39783b35-4626-460d-bd5e-d9fc929a6236",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd91b99f-f530-4996-a42d-b79f2a8125b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6958c801-8960-478b-957a-a7c820b52025",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d10c6dd1-ddc0-46b8-b3cb-fd432884fcac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c1ea9cc-733e-472b-a236-13545cd3ec79",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50413bd7-1505-4844-8165-a2e42c8bc654",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2aad69ea-c1c3-46fc-9953-d57542d60720"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35489457-f722-41c1-ae67-69ba2bf2c8e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1231a143-316d-4fc1-970b-ff017da03f8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f82f61cf-834e-4fcd-8af0-4fb46f7e4383",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af457128-8b8d-4867-99e9-15f7432f8673",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "06c7a319-28f9-4f5c-8546-19d41ae2c197"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2c3a386-a160-4842-8e7a-c56ca0163794",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c8f162e-2d0b-4c59-91d1-41fce122b1b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d53da15b-c5df-441a-ae58-894a1e605aac",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c27057fb-dae3-421a-9177-e02e6edf6b5d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f7969eba-0fe7-4d87-89dc-2b8a6de29644"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e66aace-3ee6-4f72-98fd-0cf76f082fe5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46de43da-fc01-42e1-8235-ee155185afbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9e88758-b7a5-414e-b1f6-a380128fc8d6",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e349cf58-9dc4-4c39-85f9-4aefa7be6f42",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "10783e69-16d4-4921-95be-dad4f582506f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b34df55-6d79-438a-af24-251056957c50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2ab00bc-7f1d-4b67-a8d7-2b50d8348aa8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47b444a3-004f-407d-a7f7-0de8a4049b8e",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a74d5b2-eb87-4159-88f7-f98b7bcdeb36",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8ebff60f-97f5-4e0b-9062-c7908657ace2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a59fbba3-2284-4e17-8309-87205675b115",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfb33e26-cb57-4be9-ada5-00c64361924c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55ddea35-fb1b-4426-b073-73802752fabd",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b419486-584d-47dd-9e9c-33ab4910b07d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "748825c5-81fe-429b-a308-d039935ec87a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43871bc9-ac48-483a-873a-bbe4da6d761a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ab01021-e2a5-4c9f-bf45-b56ca9a29a1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "972087f4-1ddc-41c4-87d1-8c1cbacdbd1e",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5dd7017-d596-4102-ad9f-caf4e4a2803c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b19551ff-bc9c-4c48-b489-0442c03c7658"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "986b9b4c-10e5-4d95-bd32-cb4b3562e6e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9756dcf-7190-469d-a55e-dbe576331ca1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5023e0e8-37b7-477c-bbde-5bd3ceffa1c5",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "203a1ff8-22c4-4828-93b5-308f7f6eb562",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93dccb6c-c815-4bb3-afea-3659d9ed1d31"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ee0a5d9-0a1c-47e3-bec1-2c937d9662ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14a8c278-27de-45b0-bfbe-8951c470c793"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67565674-d740-40e7-9394-d1bb9acbb1d7",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76f95e8e-0fe8-4b0a-97fe-e1812c9e80a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bb083e6-b731-4e9c-96bc-65d0e8c641f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81d5640f-1344-494c-9b7a-754d32f608b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a076924-8b01-418d-9075-9fbbf9066b5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a37ab554-a8bc-4c88-9c6f-3db502708de3",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcd808f3-1393-4ae8-9ce7-3b057b124a55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1c55552-00f1-48f9-b4c1-4d86c14bb11c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "acb07ab1-bc59-47f1-9ab5-fc4aff34c35f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "828b8788-ed36-48b8-8a7e-0b50b722461c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83d5fbb5-df0e-4050-8a40-a53caccca1f7",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c52d72e0-bc38-4538-88cd-8826d999a64f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ef007dc-e125-46af-968f-59acb9d7107a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "973a03e9-d266-48c4-b547-fad7f88ee41a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8ccc4d0-6433-49e5-95bb-f1be3d6eb174"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8979a4a7-109b-4199-b3b1-62762aca721b",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9c5cd5f-4588-4df7-9e7c-22d5b5b08e5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cfaf46c-0e71-404c-b838-b40bd551beb2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1309d890-6820-42b0-a51d-c3cc9eaf27e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c626b63-37de-43a3-9e2a-b9909cee0e67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "253beced-7f4f-444e-8186-a6b9a9e32886",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7cd56d6-9978-4d1e-9ebf-48355741128f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d146ec02-e95b-4542-9833-4a3e796fcbff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdde96ae-8f29-46b3-aac8-8d9c31e5a77d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a54429b8-d1d9-4351-969b-8b96edae51b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a694d44c-7b1e-422b-93fc-263ce4295534",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ef023cd-fb49-42e4-9355-24032d3d1ce3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f73466bb-4147-4a73-82c7-ae7001194452"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dc678b1-15c3-4202-8fdb-7e7f0fbdad80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c21a1ee-3188-4c71-b436-54af479c04c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1eaffbfc-67ae-4f0c-9ad0-f13165f308ce",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1310be2e-1969-4751-9af6-e82f026dd1d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2d6023a-f337-426c-b36a-adff7a8d9cf2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "137f4e10-aa7c-4dab-88cd-1410a508d85b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af462a11-05a2-48f4-849c-e90461f57fc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b78cc42b-614c-4a47-af33-7c56707c2da9",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dde9a0b4-6d85-44d2-a644-5bfc7b2b06b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e1ffc2d-e0a4-49e1-8a9b-aa8ad921d2fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08f53d92-75bf-49b9-b0ca-1fbb803a9209",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18f70bc8-cce8-45de-b592-9d77306f255c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81e45fc5-c4c7-42f4-818a-cb6edde434b6",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b8b9098-5e88-45ea-8d7b-336c88a5f726",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71c0d660-0b53-43c6-87fe-a3ab0d5ed74e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7ef7b08-725d-468c-81f0-dc3a95fbff98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "261f48f9-97c3-4b21-88de-deffc8fd7063"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f897b1ea-8e35-4813-bfe4-7c09824430af",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1bc04c6-853a-42a3-9302-a2278a258a31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8496b49-5e3a-4137-8b6b-468c919957ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57b9a326-8d54-481d-984c-45d4bd2558af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12623e6d-d5e5-4e9f-8a50-8c07fa6dc9c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "516ea36b-7844-45ed-bfb0-85ab93643401",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b47fac3-2adb-4135-a0e1-7b67ab462a0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dac15e6f-ad97-45c5-9345-123bfb6f8415"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1904ab6-5d9e-4595-a7d4-53274fecd697",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20188af7-65bc-4781-bf95-116b658e71ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16beff21-f9fb-4b13-876d-7f2a3c9532b9",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46a936c1-e7de-49ef-a72f-1a48ef13c0af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82df3e58-7bb6-4edb-b777-4bcf73354340"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d6236d1-fdf1-4999-94c9-3666d8a4c11e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "802d6d93-1e7d-4104-b45c-908dcefe57ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f78ba11f-cf6f-4c4b-b637-ebad307eb1e2",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8442b44-d56a-47df-8528-ec3773f51cd0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1eaf47e0-e7f4-4613-9c18-dca8f6714065"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6825d41b-9700-4f89-b6ab-6a95e2d33821",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5cb0c4a-c266-47e3-aaa0-d69c054eeb10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29e278bf-c3c1-42ef-86f7-de5b47f699ca",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cee8b2a1-23ac-449c-8982-0b8b350816cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bcf51978-47d4-46d9-8377-7236cfc96a4d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a7110d5-54ea-4055-9de1-2c393ba4d10b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97703871-df26-434d-89fb-284e9753e31d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9f630cd-8fc0-4160-a735-18953b7799a3",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2eca1b6c-696a-4b97-a6f6-3eea478a4d97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfe265fb-bd61-4db0-9a8f-c96411ad28ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fded7893-897b-422f-8cf6-91154880e471",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b991dd13-214b-4663-a659-6c19c74375f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c74e5fec-eb84-4a54-a870-34ef7c03fe13",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81f62b25-ea04-4a0a-bcea-40afe850c25b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "424501c8-d02a-4a7b-924b-f1fb9e792cf8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a186d9bb-1b06-4db7-856e-b6ff408f06ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1a998c3-7407-4326-8b84-039c17b4e3aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "183985df-5248-4f72-8013-53bfb9316f6f",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d4ad52e-136d-4056-933e-2ae17300e039",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7da92a84-991a-4cb8-a765-35707bf6418f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe7a08a8-bc08-4e77-8f20-91dbb47c0b69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0a625e5-7ac5-4c06-92f7-4282df9fa6a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3db9f39-a29b-423c-9098-c3634671f59f",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e2116c7-03c8-41f0-bf97-8865a3a7c302",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55f2a5c2-2e72-4219-96a1-de6c2c7fcb5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b032ccf-fc31-4607-9e0c-72d97a49ba73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a353eb38-d6fe-4101-bf8e-7e8890841fae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6aa09aca-1ca8-48b6-82d9-2108db6c27f2",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4af602d2-72b0-4c93-b517-92828a1ebd80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25aced5b-bccf-4374-af6a-9918dfa3644c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "463450c0-05fe-406a-96ed-54b3117d07e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73439846-e470-4a49-816e-afc8485856ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "536ce77f-7985-47bc-8834-72ad30d3bc13",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66b3187c-7bb2-414a-9b6c-7c9e1b656b16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e73bfdb3-4bc9-43d1-a381-91f115800cc3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d191e821-078f-4e75-b694-7f609504822d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb6bf124-3bd9-40b8-9aff-5a580af2dd3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aba1d47b-29d5-486d-88e7-3d141f9b75b8",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5abd6298-e6b9-4686-ab2d-a8384e8a79dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45ae01e5-8472-4f05-bfb1-9d12d7978043"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88a3da22-494c-45ce-adb6-79aa31f4cebe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e67dfd81-494f-4968-a070-75a14f75adcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0923400-a56b-49a1-a8b6-5e0d85ebde97",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59b400d6-94a2-446d-a3c9-1e0a246e7fc0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "911fdca9-eced-43d7-b900-5247695a12c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c57ddcd6-b6ab-4aa1-82f7-6049bd276c85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24d2a95b-e6ce-4c9d-ad69-fabaa91df02c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b184bf7-62b9-446c-989f-8cf5794ba6e4",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce56a0fd-2c08-47fd-83c8-c80910dad248",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3d09c09-238d-4c62-9fd6-c524b1615c1c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24cc018d-85ba-40ed-bffc-052a7b5de9a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9855e66c-916c-43fd-9251-e89373382ef7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "530a7f8a-3ef1-46c9-a1cc-0d720e3a01d1",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8076b699-4eb1-4929-9b71-01f56886a53b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d78139b-de8c-435c-a82c-6cf7ffc87a39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c399b2ad-b7b5-4289-9261-d748f20468fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a31ebcfe-45c6-4dde-b73f-7054926049e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8341ce1b-0018-4b4f-ae8a-d8f6bfa31e45",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d95b5a6-e28f-4ef2-9ce7-d27613e68aee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83653c68-c510-430e-b3df-9dc74414fa66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0eab5d40-93ce-4c52-9271-24548d08b700",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12658205-c4e1-49b9-8420-c41d8841f662"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a0bb3ba-0afa-45e3-b9b2-a6511188f401",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d6de23e-feb4-4ec3-9fc5-355381bad4f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1445370-f782-4e30-ba98-8834292c62e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9494c734-f313-49b6-a8aa-3ccf33ef0e20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db4411ae-22d7-411c-a20a-2fab1665bde2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8aec2d64-ce39-4ae9-b2a1-743379e0dacc",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3aa09768-41e9-43b0-b8c8-77b2c4f999bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16ff3d08-911f-4102-897f-fe2f0ccfd1d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e3abbf2-a4b8-4a64-b453-b3847e64e85e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80b9c675-5dfc-48ea-9677-1d568127ec4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "908a623f-28e1-401f-ada3-59a8f9a26d4c",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fef5889-f73c-417d-a059-96612f151b21",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "02a76200-0b69-4d97-a477-7a28cb71aa24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ddd1287-db45-4c6a-a7a0-f95b4381dafd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "493eaadb-7bd1-4a6a-8375-a0c0dfc36d27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1bb23db-4dbb-49d6-865d-7617eb802b9b",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6c2c6d9-beb4-458f-835b-227c3941d6f7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f64cd3dc-e952-4efc-bfad-b380342948b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc85ccea-eeab-47f1-b0d4-2f3faff3b581",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41b7bc11-b5ff-4017-af01-79a57657f790"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ffe4c16-3a1e-4cb8-8787-95f7921c428c",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "666eb286-8bac-4da9-8fcf-e3d465114141",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e65b0b99-0e4a-4ded-8121-619536db5ed3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cacdea9-b291-42d5-b9c7-08ed70f5aded",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68f95334-8b71-464f-9f71-baa1ae440062"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e768e4b5-dc4d-4416-a132-1b7c4b7c4e24",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffe88c20-2632-4f5b-a2a1-8549288c9ae0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d3cc2cc1-04ad-4d4c-873f-e36af8abc676"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f88890b8-16ce-4d28-8d65-5296c0e72657",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fdd76a86-ec44-4276-8b41-abfe0fd6c318"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ef2bd1a-91ba-4c6e-afbc-8f2c11b09e78",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81d62b1c-15dc-4c39-beb0-0801e0f4e982",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b2f94b6c-16ca-46ca-9a35-fdfcf6a817f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d5a464f-dc8a-4831-887d-37a1a2ba9b43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd4b7ef3-d71d-49a6-acc0-5055714399b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "984b04ea-7d76-4dae-95f8-49a8e3c712e4",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c5bca63-71b1-41a3-87b3-fd097f682a0e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f680b197-df8f-418f-897e-2e3acae1c203"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c0593ae-73b8-4563-9506-dec7b19d222d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17ec14b2-c998-4787-bf0f-4b8287c3984c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1aea32eb-e123-44c8-bd05-76bc8531aacf",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "695548a0-009e-4c63-ac44-d2a26f204e80",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "66c54e76-64f5-47ea-9dfa-aae9bd26beb8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c26c1183-78c0-4e8b-b5dc-3cb58720cbaa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6b7bbf0-631e-41b1-a47b-1a6f8ecfe0d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e49c8ae-bc88-408f-ae7c-b7609345459e",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc721c17-fc28-4d54-9c6e-e4c009d92961",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "02f330fd-894a-4ae8-b802-6ffa5b3fbd04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c99dfcf7-8790-4325-8f73-f8374566a69f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76421592-cc77-4300-9993-d25fb1694c7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "081f53b4-3cff-4c14-9a37-6884ebf576c6",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "951519f8-95c6-44c0-8e69-d55ac3608146",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "41b7abc7-d040-41c4-bfd9-25303f12695b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea9984af-49d9-4cb0-bfe8-6771ac9ae5d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae2054ed-1dd4-4840-9d6b-b9e65cffba66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7517100f-018f-42bf-bebf-7b55d07556ca",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c499aa7-449c-4edf-95fd-cb70be11425b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e9dc42e6-1fd8-4caf-ab06-36a6bda72db5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30409b5f-4dc9-471d-adff-3c7fcbdeb059",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41c7e3df-6736-40ac-91e0-637d7edf1e11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51fd341e-34b5-42a5-afdc-20e2728e1c06",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4a7d6f4-ce28-4cb0-88a6-6de8b8a1384e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cbc6f556-d4ff-42e3-92a5-fa661d8b5229"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "103f1eae-e29d-4162-9f35-3dc9448f53e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4062ada1-ac9d-43b9-aac4-fde7ac82f9af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3aaca8b0-d1c8-42d1-a10d-2b274ecff242",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28c585aa-774a-4762-95d2-5c027f916cc1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a072a900-5c35-482c-88e6-d5908fe6667d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85dc0478-178a-494b-a7fa-99bdc8061815",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e4e701b-0067-4a77-9c6c-3c8e41062523"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dd39a3f-4105-4f13-bafe-1a1d4d36660b",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "554b881a-29aa-4ad0-8636-a1621cb616be",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0e3a7a2a-f2a8-422a-ae1a-5cccb84be9ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5b42040-2a9d-4faa-88f2-f74ab133b546",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3343d663-d774-41b1-a725-05bdfd01c9b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5cae9b7-46b9-4036-a113-3b344282d603",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c51c291e-2410-4c6e-a841-2cd51100b180",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "65a163df-b49a-409a-8b4c-06781aae5423"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8de44bc4-fd52-48e2-9ce3-2f69868a327c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05c29656-881f-445f-8255-c2ecccf9359d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bde9d4f5-85fa-4516-98b7-0aa9191da2ef",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0616661b-3211-4a06-8fbe-68b918b2e335",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e277dbab-e55a-40e3-9974-f0e75695f067"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2ef9ea1-6e9a-4f45-b8d0-eec201d25f42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "455a7e48-d61e-4add-a6d0-2fc856f061d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1a18221-1c86-4314-a051-3652fb294b57",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03fa1abe-7c49-4d0a-9384-f9bbbcb06546",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5f990653-2744-4f2d-8368-2109bd238b69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13d509f3-9c61-4ef8-ac89-33c92ad024ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00a1c44a-917c-49df-8c51-9f4564a0ad13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a57fe21-e554-4d8f-a197-1451a0aa0988",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54c49efe-27e1-4983-ac58-30ccc610a53e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7dc7d9aa-b913-453d-bc0d-465027d95845"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "707f9c62-82df-40b7-b224-52c41ecbb579",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e3b6b3f-1bc3-4432-b1af-34a79a701077"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abcb6f49-cd5c-402c-8bb9-5b3851f0685f",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "796e6189-bf34-490e-bc4d-6cf3c81f0f54",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9e320b02-18b0-4a34-a9c7-d352ddb6f6ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aaa2cb19-6d25-44cd-8840-7bf65cff97f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f1d0377-79c2-4582-b8fa-bc700d130cab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99c74ea0-4869-440e-ae31-2a08ca6f30a1",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e041abc-89de-4df5-81a3-262563f54d1a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fdd65780-cf51-4f00-94b6-37e81d16c595"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb48cd8a-02c6-4b64-b25d-ecfefa66a5dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8245fa01-41fc-4a4d-86cb-379de4a260e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "705e161b-807c-4eb3-b5b8-352559324f15",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37689913-8b43-4593-b535-1b01cdc2e3fc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a72bef6-b7f8-4a16-9477-2193ccb56f90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df6c8b84-e6fe-423d-8a29-3fae1f205e93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "114df977-a052-45d3-945b-44cc95524416"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bc0dfb2-ab6d-4c1d-af00-77454e550e5e",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b2a40b2-115e-4efe-98d9-b9de04dafb11",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c1e36ce-550f-45fa-b980-b1ac16beb335"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d60a2aa-a749-4fbb-97dc-a10c00d8b61a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d25d948-8ccd-473d-affa-fefc10ce594c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "266bace4-a2b6-4218-9743-a65895480665",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f14f5469-744c-412f-b0e8-81c03752b192",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "50873a25-4612-4339-9677-8fe87810beae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e83b76a8-205b-4c2f-9806-7ae617be776c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b49e6dc8-e042-470f-9516-1f00c011d066"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69ff519a-8e7f-4438-8f06-7942b95ac9a4",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cef9e3e3-7cde-439b-a303-260ac69fcc32",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7992c971-94d0-4e31-99ae-d3ad9316ab23"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c66173b-678b-44d9-8569-566cf7bc526b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdfdffe6-7ceb-4996-8d74-e973342bb75a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a49f06e-a85c-42ab-8ba8-c98f7045f5ce",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "014dba7b-6dc8-4d8e-af2d-8c5757595deb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "12f67bd9-5301-475c-a039-b86597c8064b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94074d68-c420-486b-9168-1916d637c754",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3fd7138-fc35-4dab-a409-8cc68c2c7d14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a3429a7-f0fa-46d8-b385-5d417ecae1a2",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d26e21a-0695-4db9-89d2-f1cf4656f55d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7bee49ce-8b3c-43e3-ac84-11822499351b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62e8c168-1401-4620-9d73-ba4507340a61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af515473-189d-493b-a0a4-5947c8419a4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8c4db82-3b23-4896-8b5e-528eb66ff7da",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2334e3ab-99e4-49ae-aedd-e8263ebe719e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "de2c810e-fb56-4cb1-a7b8-8dd4d55b680d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dcf90de-cb95-431c-9076-266c95ac6f57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb4d49f0-86eb-47e4-8d71-73b8ade27670"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98685495-2284-43d5-b162-91141a1b16ac",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b8427ff-72fe-4ae8-b358-9425c75b8b2f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2334db24-89b3-4f9c-b796-5f5696df36e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfb64d3b-cc20-4b16-9a8c-0552311085bd",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "005228a1-7bf3-47f5-a2bb-66c6f770509e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1008d021-cc7a-41d8-891c-9269eefac79c",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "221a83b0-cff4-40f6-82ed-34810aca37c2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6a3bb4cd-f51c-4994-9718-5c0a7756097a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae02df1c-1d28-403b-8f42-69ae945c3d15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0db3b15-c4c6-458a-bfcb-6ff5606ded82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cca6a729-fed8-450f-bbe7-49595533aff0",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "720e2e0f-b7ae-462a-83a1-54df8c67352c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fce57095-df91-4bcf-8b82-6300edeb30b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c73d1a01-8f76-49c4-a88b-eaf5f5885fd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0bef0f5-369b-468d-8091-f0d779a28d51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c72e3df3-2cd8-4931-aadb-380dc684b22e",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f70e6cb7-3b46-4ac6-a983-898550a41dc6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e619fb7-00f3-4830-801f-150ebf3576e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86553038-3f7b-4657-a69e-f4ee3299db9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ca4a3d4-a455-45c3-8362-ed51b0092dac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c146574-642b-418b-a8f6-48ac42295e3a",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "679e0101-8855-4ab3-92e3-51ac6cb6e2d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a89ab916-fc42-4eb9-b09f-e77546e8f6d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "551a0f33-5068-4fb2-b9b7-d851f165c12a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22f52eda-167c-437b-a578-929a06039c7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea5bc227-18ff-471e-aa4f-503c860d26c1",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ef0749d-8d31-453a-92e5-e3ca73114256",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9a8e6f23-7fcd-4443-9e7d-f90f632398f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "901db775-0330-41c8-be53-fcb420fae1d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1501381-7091-4a87-959d-def8b06e0703"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ea74bcb-d57b-44cb-bb9a-ff33a428065e",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0384a50-9484-41dd-bf27-f500fca6cd9e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "70ec5aab-5991-4db6-a2ab-0fb08e741ab8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "121586e7-d918-4578-97b7-c98b7e64aa58",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a43f300b-b1c5-46aa-be72-254ce8a1b5ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30b652f1-b86e-4ee2-b9d5-ec2a2b4aae42",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8a74658-b5f3-4f9d-ac95-0aae33a322c6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "19f00ee5-70e9-4140-988b-d12fbcad20c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f66c7b19-5e3b-4aae-82ab-e8717cc6a001",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f62ec6b-29c1-432a-bd2c-39cf71536534"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f056cd8f-98a1-4bcc-869c-8cca4472b33f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ec557d03-ef1b-4e97-8711-3e5a6fb23558"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cbd5f9f4-9e12-4af2-97ad-090096c3ea05",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b3539984-47a4-40be-87ac-ef16ac696d36"
                    }
                  }
                ]
              },
              {
                "id": "24db811b-a889-4430-8e6c-b5cc18d6ca45",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f988d861-cc92-42f9-888a-b111bba9b3e7",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "961b89dd-99e5-4588-b2ad-de494ed4d333",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "bbf29c30-8ea4-4148-b57d-b02211f1395a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90856120-00d9-4d57-b4a4-717adc8cc857",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ac724f71-c788-4406-865f-430add29b97a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a947d22-45cc-4223-b356-8158c4ee9ad4",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82ad5e17-ca74-41cf-aaff-449664293f86",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "9323f201-aef5-4274-a7c2-6beecb6b6c65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17e8a18d-9f73-4131-a9b3-d57565b3565a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d7cf872c-2ba6-432e-85a6-b69c8ae5ba71"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "24fd9604-df08-458b-afbc-6878cb603fe3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a7235b9a-4069-4577-8601-3746cd2f8993"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "81c975f6-4c64-4a3d-a99f-22efe5934cf7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a1d411ab-70eb-44b5-891a-36a3838e41c9"
                    }
                  }
                ]
              },
              {
                "id": "d885b119-8a3d-4864-a879-1f554ddc49b3",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "8a13b94a-ae0a-4028-b301-322600556e9f",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "070116a0-823d-4ed2-ab48-46ddd6394fbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "9fdda973-e999-4dca-a753-0b4cb0e14c0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17efc879-3b23-486f-ae48-55e4d9ebdbec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b7f88e1-0928-499f-a693-0364d19706d8"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "68420660-4098-4af9-822f-2bd1ca38e628",
            "name": "Positive Testing",
            "item": [
              {
                "id": "41ae68fd-5140-4ffb-aeeb-e035e466b39f",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0d5388f1-2207-4dc0-8107-6ca7744874ee",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "1154507b-b915-4115-8dc1-409385aa37ff"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9b27a3ab-2d8c-4bbd-bb4c-28ccd646dd1a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5b304e74-94a7-49af-93b6-7ddb796fca68"
                    }
                  }
                ]
              },
              {
                "id": "06d51d37-5a4e-4bbc-ac8a-8e0aee8338ea",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0e159986-58a2-4145-9c84-77c318c7a658",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "c382058f-5a93-45ef-815c-a9902c806297"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5a702e68-0822-4bef-95b6-c0019a881308",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8ec9462f-acf5-4191-9a05-3a2f978b680c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "485d3482-6ad3-4c6c-955a-151e22727d40",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "bb376e72-c7e4-404d-a01c-57280925c3eb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cfce9591-6b32-4af3-931d-976b9d7d0800",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4d3626c2-25b3-4000-84f2-91dbfaf65edd"
            }
          }
        ]
      },
      {
        "id": "3fc91922-1f0a-454b-ada2-b2ce821ec457",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "c96dfb39-25b3-42a9-a6fe-d2c40b1c8a33",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d31207ec-99ca-42b9-be22-283034ee1c95",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0f41ae9d-15a2-419d-be96-a916348244da",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b256fac-c739-40fb-9086-d67c4e060cd0",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "afb04073-ff7c-4e24-b8de-9841d3186b06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da1ef73e-dbe3-4f6e-a4da-9b98b8f3225b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c2d8ad46-cac1-42e3-8570-ffb3dcd96fd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be19b612-e737-4a02-b10f-98b8db3b1a5d",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "045e7fb8-527b-4eb8-89c0-a4d6076ecb89",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "98fda8c2-8861-491d-b0d9-89d7cc55c530"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9a740b9-c99b-4dc1-83f1-d852fd973240",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "12478866-10f7-42bb-a338-b565ad7eb115"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5866f071-cf95-4682-9964-187fe85216d2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d40c07e2-51e9-486e-868b-88dad8d0a56e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f2fc2962-47aa-44ad-92ea-bd34997b1438",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "145a3293-5d37-4c52-95d1-5ef3deeedfc1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "737c2d71-8b88-4e88-9cca-85a848ee1be5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "9553c253-6471-4158-af20-cf530dd89df1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "47b2a87a-bd78-4e34-a7fb-7f6834fcbce4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "84485e5f-caed-41fe-af9b-4e3425d719bd"
            }
          }
        ]
      },
      {
        "id": "7194f5f1-2f8d-4a95-9b75-9cc0295790af",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "25536e8e-4927-435e-be04-da68f934e6fa",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7c775a37-5a03-4ac9-aaa8-b223c438e044",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f752ea16-9aa9-4351-a45a-a2caca83ef26",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d8f60bd-eda8-464e-9c34-4395867fcaa2",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "f2a36058-c491-4acd-8b10-d398854f969e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ecf65d4-1d04-4ab6-86bc-38910763dcb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2da094dc-575a-4b96-8234-57d07f33022b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36e74b4b-6b44-4e9a-aefe-4f776b1c665f",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4eaf3a3c-131d-48e4-ad66-53f82826456f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "7a0fdfff-6c60-4dd8-9c6b-e2d1c47cdad4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15060316-5d9f-4989-aea9-7bf9810af760",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "97aef5ed-3cbd-49bb-bcd5-4cb9f3088fda"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2cb40b85-f04c-46cb-9871-d0cd85899734",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9bcb411b-0f03-40de-b28f-1a58b8768ba2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9b0a249d-c791-4c30-bffc-0fb344fc5824",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ef651683-f5d6-4392-94ed-1c271b34a876"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "54853888-ce22-4dba-aecc-933cd7d63073",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "e42dc66d-02c2-4739-8d78-f42b8b8585f7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "408d31c2-bac2-420d-adb3-fcb8fe436146",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b49b3341-99a2-410e-98da-241362656ea8"
            }
          }
        ]
      },
      {
        "id": "751a9273-ee7e-49a6-b374-88338a94880b",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "e70971f5-8ebf-4ec1-b8f8-fdcb251e06b1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b8b0947f-4097-4159-a0fb-359a38f55799",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2a9f58a9-3972-4b03-90eb-dc9c8e6aacff",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a4f1c77-db85-4511-bace-52bbd00898cf",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "c6214db7-dafb-494d-8b51-4e577e3b0ddb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4455c098-4c58-40ca-8085-bb385b62d4e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "41ff0d58-9dbb-417e-ae61-cc73608b8f4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19755028-9272-44ed-a58a-7e27df0a9fa1",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e93eb7c6-e3f1-45f3-8b64-7877ffe71ba9",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "46874cfc-6505-4846-9e72-b04b04e7efdf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4fbfd01-ad42-4aed-9463-2cc211eb2e93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "95d8100d-e97b-451c-bf08-27789e27afe0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "02d12b3b-db66-4b9f-98f6-8eef0679d3eb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "686decc5-6e51-4580-84e8-92bb375cbb82"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a0a8ef53-d33f-4661-a395-d56196f5f18e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "68aca21f-0a1c-498b-8f69-265cd45db1f3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "af364c9f-65d8-4776-a0fc-b149467d0939",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "c3325c01-53c3-4388-9bf9-5a96d7ca480d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b59a818a-5878-4ecc-ac53-5279b6fc651d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bf070efe-5329-4485-869d-09082f150fd7"
            }
          }
        ]
      },
      {
        "id": "e193f5b0-fb34-405f-9131-19a1617240a6",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3645ffb3-cba5-4bfc-a07b-12f8e24d79ad",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d74d4860-067f-40b4-993d-9a5a094b068e",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "70877158-9bf1-4581-8d6f-da4c0b99cc1b",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c7bd64d0-0769-49bc-9294-53cdf77302bd",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "15cb1ead-7c69-4a9c-83a5-a622f20820f4",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1925,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 262,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 517,
        "pending": 0,
        "failed": 39
      },
      "testScripts": {
        "total": 967,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 958,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 74.82442748091606,
      "responseMin": 8,
      "responseMax": 533,
      "responseSd": 46.16060263210657,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1675903191631,
      "completed": 1675903225579
    },
    "executions": [
      {
        "id": "0180f9ee-6479-44f4-8cd9-519923609649",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 253,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "be85c8ce-29c9-49dc-9931-699ac0f4f560",
          "httpRequestId": "b13beca6-5764-4dfe-9d56-c694183664f7"
        },
        "item": {
          "id": "0180f9ee-6479-44f4-8cd9-519923609649",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "8e7774ff-b959-4127-b2d4-32904f85825f",
          "status": "OK",
          "code": 200,
          "responseTime": 70,
          "responseSize": 0
        }
      },
      {
        "id": "9bf8183e-08cf-4f7b-b279-2abb96aded76",
        "cursor": {
          "ref": "3a38484a-639e-4181-8631-f17201417ba6",
          "length": 253,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "70868f19-1647-4567-8ce5-a5fa4e5577bb"
        },
        "item": {
          "id": "9bf8183e-08cf-4f7b-b279-2abb96aded76",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "4b41adc5-745a-4e46-8d1b-29eb6c3d054b",
          "status": "OK",
          "code": 200,
          "responseTime": 8,
          "responseSize": 0
        }
      },
      {
        "id": "c2f6e2cf-cf72-4f7d-8391-667dd303a420",
        "cursor": {
          "ref": "beab7bb2-5e8a-45b9-8674-9305819fda99",
          "length": 253,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "db0e19b6-ad98-4fa7-a6e3-e0e9eeb1c624"
        },
        "item": {
          "id": "c2f6e2cf-cf72-4f7d-8391-667dd303a420",
          "name": "did_json"
        },
        "response": {
          "id": "ecc6cd3d-c58a-45ca-bc32-2c3ada92a3dc",
          "status": "OK",
          "code": 200,
          "responseTime": 231,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ccb8849-6d5f-4f98-9308-43f51dbf765c",
        "cursor": {
          "ref": "f32d84ea-4c63-4751-8b28-85344cd155d9",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "a1600f2a-5a6a-4d3b-9aab-c36134f931eb"
        },
        "item": {
          "id": "6ccb8849-6d5f-4f98-9308-43f51dbf765c",
          "name": "did:invalid"
        },
        "response": {
          "id": "f0e182c8-9734-4082-8c89-49a65e1a136b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "6ccb8849-6d5f-4f98-9308-43f51dbf765c",
        "cursor": {
          "ref": "f32d84ea-4c63-4751-8b28-85344cd155d9",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "a1600f2a-5a6a-4d3b-9aab-c36134f931eb"
        },
        "item": {
          "id": "6ccb8849-6d5f-4f98-9308-43f51dbf765c",
          "name": "did:invalid"
        },
        "response": {
          "id": "f0e182c8-9734-4082-8c89-49a65e1a136b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "90caaa55-5ef7-476e-a683-f5a2acfedec7",
        "cursor": {
          "ref": "aa7f526a-705c-4052-93e7-9efc01b029f9",
          "length": 253,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "48b3dbdf-74e7-4c5e-8e25-f9eb0a1bd705"
        },
        "item": {
          "id": "90caaa55-5ef7-476e-a683-f5a2acfedec7",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "896de42b-7873-48b6-8813-4ea4c9ef24c9",
          "status": "Not Found",
          "code": 404,
          "responseTime": 109,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9eed0aeb-de76-4727-a5da-1ea190daf5a3",
        "cursor": {
          "ref": "1bc2f31d-474b-4c06-aabb-305f0eea5cd3",
          "length": 253,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "7f4334be-8a4e-4034-b539-be772259d3d3"
        },
        "item": {
          "id": "9eed0aeb-de76-4727-a5da-1ea190daf5a3",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "90e9e26b-431e-4ca8-b6af-ccfc3172b393",
          "status": "Not Found",
          "code": 404,
          "responseTime": 71,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a37ce11-510d-4e3a-83ed-476c79a5eeaa",
        "cursor": {
          "ref": "0481e5c1-8940-4376-ae51-e72866ee2146",
          "length": 253,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "a30bcaad-0297-4b86-8db1-94dcf5c451c9"
        },
        "item": {
          "id": "0a37ce11-510d-4e3a-83ed-476c79a5eeaa",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "4d476fb4-899e-4433-be76-cbd82b6bc913",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 68,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3a6a8b9-54c2-4c59-acd1-0a5118a1a191",
        "cursor": {
          "ref": "f0d8a1ff-629b-4ec1-8fb2-186296bee5cd",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "94d81f21-332d-4a1e-b6e3-bae5b5ed283e"
        },
        "item": {
          "id": "c3a6a8b9-54c2-4c59-acd1-0a5118a1a191",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "a4c330bd-db7b-4e30-90b6-e244599bff76",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 68,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3a6a8b9-54c2-4c59-acd1-0a5118a1a191",
        "cursor": {
          "ref": "f0d8a1ff-629b-4ec1-8fb2-186296bee5cd",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "94d81f21-332d-4a1e-b6e3-bae5b5ed283e"
        },
        "item": {
          "id": "c3a6a8b9-54c2-4c59-acd1-0a5118a1a191",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "a4c330bd-db7b-4e30-90b6-e244599bff76",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 68,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1ddbe06-4b35-4bbe-adfd-f5cad0a8063c",
        "cursor": {
          "ref": "bc0f90d5-1645-49d9-863b-4cbaee200334",
          "length": 253,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "a1ede373-2770-4f58-93df-c8abf85514a9"
        },
        "item": {
          "id": "d1ddbe06-4b35-4bbe-adfd-f5cad0a8063c",
          "name": "identifiers"
        },
        "response": {
          "id": "1635ee57-ebcc-45ea-aa7d-4e104f4257a3",
          "status": "OK",
          "code": 200,
          "responseTime": 107,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e35c0777-5302-4ae5-a13c-4446dada8bb3",
        "cursor": {
          "ref": "c2a1bf78-6b11-4873-9ef0-0c158b0b1e57",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "08cab7e8-387b-4235-994e-64d16f14e713"
        },
        "item": {
          "id": "e35c0777-5302-4ae5-a13c-4446dada8bb3",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "21ba10ea-c5f9-49a2-af04-76b189ccbe3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e35c0777-5302-4ae5-a13c-4446dada8bb3",
        "cursor": {
          "ref": "c2a1bf78-6b11-4873-9ef0-0c158b0b1e57",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "08cab7e8-387b-4235-994e-64d16f14e713"
        },
        "item": {
          "id": "e35c0777-5302-4ae5-a13c-4446dada8bb3",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "21ba10ea-c5f9-49a2-af04-76b189ccbe3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d659338d-2f99-4404-a5fa-127716ba8297",
        "cursor": {
          "ref": "5619d271-7b4f-43ca-aaa5-ee467e690a90",
          "length": 253,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "0c0fa7b3-955c-456a-8be0-cdc1208b12e0"
        },
        "item": {
          "id": "d659338d-2f99-4404-a5fa-127716ba8297",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "022dc29a-541e-444f-b28d-932982a2c003",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c83a69d5-b7f6-4a60-9930-35b0b471e786",
        "cursor": {
          "ref": "c87cf836-d764-4f5d-84e9-88f97006efef",
          "length": 253,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "64f696e1-7263-451e-ac2d-90271647bd17"
        },
        "item": {
          "id": "c83a69d5-b7f6-4a60-9930-35b0b471e786",
          "name": "credentials_issue:credential.@context:invalid"
        },
        "response": {
          "id": "a55d4248-889c-4225-9445-94731c228239",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 176
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d56a52d-2d59-4582-8205-c65835553974",
        "cursor": {
          "ref": "61d20bcc-72c6-44cf-84c7-18de0d988035",
          "length": 253,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "2ba00b38-d8b2-4af2-8d17-6816fc25fb37"
        },
        "item": {
          "id": "8d56a52d-2d59-4582-8205-c65835553974",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "bfa91cb5-6cc6-46f5-9266-05ba3ea81a05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce2e335a-9622-4a95-a4db-e32df68ec6d9",
        "cursor": {
          "ref": "65f6ce28-befa-4bef-b5d6-8ab2ce17ecc2",
          "length": 253,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "7e5f5232-73e0-47da-a769-189b586705a2"
        },
        "item": {
          "id": "ce2e335a-9622-4a95-a4db-e32df68ec6d9",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "19118e0a-3c87-445c-9082-274ebcf8505a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e4d236b-dccf-4e44-9445-5e8b2abcbbd5",
        "cursor": {
          "ref": "3b801853-47ed-4deb-8cc6-5dbffb7c8aca",
          "length": 253,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "7f10043e-ef6b-46b3-8985-c630434d84c6"
        },
        "item": {
          "id": "5e4d236b-dccf-4e44-9445-5e8b2abcbbd5",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "e29155f0-fd08-4190-95dd-be8a2efe91df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b08fab15-bfbf-482f-b048-76d79bb7eee6",
        "cursor": {
          "ref": "b511eae6-592a-4d0c-bb71-e2ee1aa9e506",
          "length": 253,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "ffade230-18af-4069-bd70-da3a75f74ddf"
        },
        "item": {
          "id": "b08fab15-bfbf-482f-b048-76d79bb7eee6",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "02379712-5afd-4309-989f-8f90c0afc4e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54884782-5c15-4f7e-9aa4-0e5c52e2826c",
        "cursor": {
          "ref": "1d84cfda-c35e-4914-9e34-c2060d7af4be",
          "length": 253,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "380c46f0-4cbb-4f9c-9084-575d19dd7233"
        },
        "item": {
          "id": "54884782-5c15-4f7e-9aa4-0e5c52e2826c",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "c27fe783-2006-4720-bfac-69bb09a69e4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc11511e-e72a-48e1-974c-ff7e0ca98fb8",
        "cursor": {
          "ref": "bdc53e68-b9ca-4128-864d-375a3f6adf07",
          "length": 253,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "e20f6b85-5b64-4425-a8d4-3b18ebd3a42a"
        },
        "item": {
          "id": "dc11511e-e72a-48e1-974c-ff7e0ca98fb8",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "5a6a41bf-2ba6-43ac-a2b0-f061a6bc3a2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40aec26a-3160-468f-b45c-b4f0ca447f9d",
        "cursor": {
          "ref": "9d91b969-2474-454b-adc7-74949261cfd6",
          "length": 253,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "5b8be772-39c3-4db7-a2e8-fa1475556392"
        },
        "item": {
          "id": "40aec26a-3160-468f-b45c-b4f0ca447f9d",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "edc01ff9-8532-423f-a1a3-aebe216d59f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62b678d2-0382-438d-92f5-0d12882ebbd1",
        "cursor": {
          "ref": "c47bd80a-2dba-4f95-b2f6-5e0519ed25dd",
          "length": 253,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "9d9533ef-762c-45fa-ba1a-1b812eb2bf53"
        },
        "item": {
          "id": "62b678d2-0382-438d-92f5-0d12882ebbd1",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "c424d463-b0a7-49cf-b4d9-60b12e9c25f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2f75306-8854-428d-8fd9-d332bad619e6",
        "cursor": {
          "ref": "804e4213-c604-4449-bbeb-190fc173573e",
          "length": 253,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "c3fdaa26-6c67-476c-b87e-3c1f7396efb0"
        },
        "item": {
          "id": "a2f75306-8854-428d-8fd9-d332bad619e6",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "f06354a3-39fe-4b09-bf62-81868d4dcb00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5601c1a-9e20-4890-a1fd-e527a6745f45",
        "cursor": {
          "ref": "50c20025-bc99-4e64-a3f7-cf3097ce9370",
          "length": 253,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "eedfd29c-01e9-4336-9203-06cbb03c22fa"
        },
        "item": {
          "id": "c5601c1a-9e20-4890-a1fd-e527a6745f45",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "d0e893cd-86b0-44a4-9248-dada48f3bfc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c590832c-a93f-4945-be92-659cc54256b4",
        "cursor": {
          "ref": "e9d72c3e-d65e-4f55-80cd-9f9e9843acdb",
          "length": 253,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "34bee735-99ef-45c6-9e73-463df5ec6753"
        },
        "item": {
          "id": "c590832c-a93f-4945-be92-659cc54256b4",
          "name": "credentials_issue:credential.id:missing"
        },
        "response": {
          "id": "62a45ad8-d6f8-44be-9912-a706a3f38940",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "376119d5-bb29-476e-a81f-4c3f6545cb8f",
        "cursor": {
          "ref": "70549410-355e-4192-8712-086fbbd22f4e",
          "length": 253,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "5e987ef4-1f58-42de-851d-c774981ca174"
        },
        "item": {
          "id": "376119d5-bb29-476e-a81f-4c3f6545cb8f",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "607fe0ef-6495-4bf2-a4ca-b3a661280482",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a212232d-771a-4afb-93c2-4c978f8de788",
        "cursor": {
          "ref": "e91f6a43-276d-40c4-bb3d-59f14c8e74c7",
          "length": 253,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "439b5d6e-c03a-4010-b3cf-26e67a65f919"
        },
        "item": {
          "id": "a212232d-771a-4afb-93c2-4c978f8de788",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "b2dd5341-d953-4b41-b409-dfbc24857de6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4c57277-4179-4174-a118-a0c0fbecef53",
        "cursor": {
          "ref": "1d64239a-d1ad-42ad-aa7e-4b8c5bebac59",
          "length": 253,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "e90c833e-5da6-4ea5-b7d0-bbc16e059d66"
        },
        "item": {
          "id": "c4c57277-4179-4174-a118-a0c0fbecef53",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "b5fe05cd-ad76-40e9-b851-b82465e80138",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05b21c8e-1f35-411e-a94d-39c4d603a53f",
        "cursor": {
          "ref": "a2b38d8f-fcc5-490f-9c8c-d8eee7be772c",
          "length": 253,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "a19fad3a-d021-4460-8d49-5b66eeab9078"
        },
        "item": {
          "id": "05b21c8e-1f35-411e-a94d-39c4d603a53f",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "90e502be-c1e4-4e37-b969-29ff31d0c4f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a61b25e2-d540-4ae2-95fc-aee98191529d",
        "cursor": {
          "ref": "488deb5f-610b-429e-8129-6e20626c0e43",
          "length": 253,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "fcd84fbb-88d2-43b2-9069-faec0e9c0580"
        },
        "item": {
          "id": "a61b25e2-d540-4ae2-95fc-aee98191529d",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "5f847e86-23ca-4f79-8a0c-4d7ae96aafa5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0916a003-26d7-489c-9b47-c66d7d881bbe",
        "cursor": {
          "ref": "eb77feb4-690a-445e-ac8b-c7a8749e5e6b",
          "length": 253,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "473dec3c-e64e-447b-8f86-9016f3e19e8e"
        },
        "item": {
          "id": "0916a003-26d7-489c-9b47-c66d7d881bbe",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "acadc18d-e24a-45d2-aebc-1b6b4b629b00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "141494d8-134b-45af-ad94-306fba26f642",
        "cursor": {
          "ref": "5ac5045b-3a82-4d16-9c83-782431e6b19d",
          "length": 253,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "4b8bddf8-a7c7-4c8f-adf0-9fa9828275ea"
        },
        "item": {
          "id": "141494d8-134b-45af-ad94-306fba26f642",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "fc615c60-a7bd-4186-a4b2-a8a4035eee55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c1a965b-af61-4777-a828-7e7eb187a22a",
        "cursor": {
          "ref": "1257fbc0-e803-444d-99a8-a7601fae9d5b",
          "length": 253,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "a1929944-bc13-4779-a56e-014f734fdbe8"
        },
        "item": {
          "id": "0c1a965b-af61-4777-a828-7e7eb187a22a",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "790fd9af-78df-49a2-9a8f-576c028b43b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c98185f-758e-48e5-a441-aad9fb18579d",
        "cursor": {
          "ref": "3480493b-ae7f-4378-a918-167918533eac",
          "length": 253,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "c461e14b-f9aa-42ff-9701-0e79db38b4be"
        },
        "item": {
          "id": "0c98185f-758e-48e5-a441-aad9fb18579d",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "cf67638a-0adf-4056-bd95-d4d4729f475a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76acc5b4-68bf-404c-a405-f1a21fd70b75",
        "cursor": {
          "ref": "1f80e3b5-4e57-447a-a321-324aa7a8b7c9",
          "length": 253,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "7e1af63c-ebf7-4628-940e-ccc0a7f0c454"
        },
        "item": {
          "id": "76acc5b4-68bf-404c-a405-f1a21fd70b75",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "f572b49a-903a-4821-bf17-8a38b8d8a2f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8dfe910c-f80d-47e3-a082-c64a625cb16f",
        "cursor": {
          "ref": "243cdee5-4eb6-48df-9720-124688898180",
          "length": 253,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "f0b12b2c-0f0f-4397-b855-5c1c0d40d722"
        },
        "item": {
          "id": "8dfe910c-f80d-47e3-a082-c64a625cb16f",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "eeb5a41d-1dbd-45d6-b67f-9c6da1d7ef90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "587281f0-7638-46ec-87ee-e286a4275c17",
        "cursor": {
          "ref": "9c21beef-bbfe-4bf8-9b05-cae4f99f9f3b",
          "length": 253,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "5cfd781e-b612-48b5-9622-93b4919028bb"
        },
        "item": {
          "id": "587281f0-7638-46ec-87ee-e286a4275c17",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "a3030b88-364c-4fd6-a6d3-33134a618f60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4406e9e-c8db-40b7-a965-0d8255aae53f",
        "cursor": {
          "ref": "1ea2414a-1f2e-4f12-894a-63bdccdbcd8e",
          "length": 253,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "3518167c-83f7-4a72-abf7-22a214b65e3d"
        },
        "item": {
          "id": "a4406e9e-c8db-40b7-a965-0d8255aae53f",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "370ece39-69fc-46cd-ab4e-26d3fc0879ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cae59cc-5419-49f0-9fbf-26a6904b9e5e",
        "cursor": {
          "ref": "469eb9d2-ba6a-4b3e-a4ae-e984bb1a2117",
          "length": 253,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "3d9774d6-3b5a-4e39-8e05-3da9f8b82e96"
        },
        "item": {
          "id": "4cae59cc-5419-49f0-9fbf-26a6904b9e5e",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "bbb2421c-b2cb-438a-9387-c225b474cd42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca8e3c64-e464-45a3-b566-7f84c7ada942",
        "cursor": {
          "ref": "a2a7c64b-ec9e-4f3c-b1c4-e44d327373c4",
          "length": 253,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "9eca6eff-e1b1-4cfc-9838-3a1310f180c3"
        },
        "item": {
          "id": "ca8e3c64-e464-45a3-b566-7f84c7ada942",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "0736f753-8c61-403e-b09e-ead6fa9c9a0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94593734-edbe-4b9d-b30e-0350041b224a",
        "cursor": {
          "ref": "b4b80ae5-146d-43db-aae5-96daf7bc8338",
          "length": 253,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "cb8995be-3616-4f0b-a260-dcf2d4ea3cc3"
        },
        "item": {
          "id": "94593734-edbe-4b9d-b30e-0350041b224a",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "c5ee000d-52b2-4917-a490-bd110fde80c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59ba13d3-fef6-478a-8dcb-a5c3949d50de",
        "cursor": {
          "ref": "a16438d5-b585-4eec-bb88-b432238ca93d",
          "length": 253,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "5f6b0a4e-f90a-4d7f-b6c7-745370c55f4c"
        },
        "item": {
          "id": "59ba13d3-fef6-478a-8dcb-a5c3949d50de",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "76e49c54-4ed8-4fc3-b769-6720eacc212f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ec84972-ddc9-4724-a958-10c5f2eff001",
        "cursor": {
          "ref": "d00750fa-4fdb-405d-beec-6199ed390300",
          "length": 253,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "ab55277e-8879-4e6b-86c1-583ee739c265"
        },
        "item": {
          "id": "0ec84972-ddc9-4724-a958-10c5f2eff001",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "790b1f87-b283-4d85-bf1c-ad352bd1577e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d306d9ec-454e-4602-a8a8-adf36e4a4d8f",
        "cursor": {
          "ref": "b18645ea-c562-4ae9-acbb-fc8b5d708d8f",
          "length": 253,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "2be8596d-efd2-4dff-b805-95d10a31f335"
        },
        "item": {
          "id": "d306d9ec-454e-4602-a8a8-adf36e4a4d8f",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "ccf05411-7bc8-4509-9274-bb87d78adbd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cce0ffbf-2173-4c78-9d16-c368137129f6",
        "cursor": {
          "ref": "0fc244ce-f72c-4887-8729-a29c1f6fcc5c",
          "length": 253,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "8c28dd94-0951-4445-abd2-1302e702ea3e"
        },
        "item": {
          "id": "cce0ffbf-2173-4c78-9d16-c368137129f6",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "d3cfc7b6-6fb3-4b4f-ba02-136b98544f9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cab81b4-6fa5-407b-a256-fdd7b8796f3f",
        "cursor": {
          "ref": "e6cdd608-2a17-4d1f-8609-bc64e96bdebe",
          "length": 253,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "0c4c6b6f-a254-4929-83ff-8441a912716f"
        },
        "item": {
          "id": "1cab81b4-6fa5-407b-a256-fdd7b8796f3f",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "9e77ba37-0373-4fd0-92e2-d2b4b5a5a260",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c51d0aa-6e87-406a-b3c9-b7172d1bcd02",
        "cursor": {
          "ref": "2b4df3bb-c546-41c4-bc9c-bcfb2634baee",
          "length": 253,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "fedf191b-3927-42d1-9d09-766b3bfd4cc1"
        },
        "item": {
          "id": "4c51d0aa-6e87-406a-b3c9-b7172d1bcd02",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "c595bc7f-5d12-4060-8fc7-ae216a971822",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dd643e5-85ed-4f26-8a6b-6ea73cf52f9e",
        "cursor": {
          "ref": "14a4c33e-f1f5-4939-a632-9af54fd1f2ec",
          "length": 253,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "135d75d3-aa0f-46c8-857b-347ae0c3913b"
        },
        "item": {
          "id": "0dd643e5-85ed-4f26-8a6b-6ea73cf52f9e",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "3612ba08-5359-4a2c-9986-f8780a29656b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43648460-b0c3-4c28-81e2-65192b78e892",
        "cursor": {
          "ref": "1c998bfc-2ff0-46bd-b4c8-41cf79d85b0e",
          "length": 253,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "a42648c3-ca33-4f75-bf59-c0c5f9b0229b"
        },
        "item": {
          "id": "43648460-b0c3-4c28-81e2-65192b78e892",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "84124db4-c3f0-4594-bdab-b5759f5e4bfb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "a9306c96-a81b-4759-8d11-60c7f0c056cd",
        "cursor": {
          "ref": "bd770164-8ece-4449-b929-3303e0ec8d73",
          "length": 253,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "a45897c8-c481-4e5e-bb57-ba5bad8216d5"
        },
        "item": {
          "id": "a9306c96-a81b-4759-8d11-60c7f0c056cd",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "2b6e8964-9402-4279-8518-a45ce5d130ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a30e67de-a07b-4ab4-9984-6fed9c5cfd9d",
        "cursor": {
          "ref": "86c2683f-c062-405b-9441-5857af916dcd",
          "length": 253,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "ae920426-6c4f-4887-a711-2df483604ae8"
        },
        "item": {
          "id": "a30e67de-a07b-4ab4-9984-6fed9c5cfd9d",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "1d6ccdc9-3898-43b8-bc23-ddbd258079c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73d92cc1-dd5f-4bc5-9382-2e3029c891ed",
        "cursor": {
          "ref": "2d4bc2cd-2567-481b-8ff2-4452a7852cf6",
          "length": 253,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "86206b1e-bbb4-40b2-a4bd-85f1bc622933"
        },
        "item": {
          "id": "73d92cc1-dd5f-4bc5-9382-2e3029c891ed",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "172efc8c-c424-4f44-bbc7-c330341d91fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "031e43f9-58ea-4e70-b4b4-3c0911d48496",
        "cursor": {
          "ref": "1020d105-48bc-494a-8f19-173756ee0a1f",
          "length": 253,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "355868dd-7492-4fd1-80f9-f2b23bd6bf2f"
        },
        "item": {
          "id": "031e43f9-58ea-4e70-b4b4-3c0911d48496",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "4ad1c107-db37-4cc1-bb29-69e492a53771",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f7fec01-1d73-45eb-8668-1eccf9382e5e",
        "cursor": {
          "ref": "7a74e7e1-5f67-4029-92a5-77eb4af1bf1b",
          "length": 253,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "d9076453-d003-4693-a8dc-43b6082be783"
        },
        "item": {
          "id": "2f7fec01-1d73-45eb-8668-1eccf9382e5e",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "91e7a13e-9e47-4b62-8cfd-d3cad5e7cfa1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69a44a45-46ef-487d-83c2-233914626b2f",
        "cursor": {
          "ref": "c835ba0b-7a99-4132-8236-16f96e0c7739",
          "length": 253,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "8f363f73-6f46-4657-922f-d30b2c5942d7"
        },
        "item": {
          "id": "69a44a45-46ef-487d-83c2-233914626b2f",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "3f9aca64-0154-4fb0-9956-59f534306e1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "891887f3-9ee2-448f-a15b-4c49476c0409",
        "cursor": {
          "ref": "10b8032e-b707-48bd-a37f-eb7966e44970",
          "length": 253,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "9cdc1329-4840-4b30-93c2-058f249e8c93"
        },
        "item": {
          "id": "891887f3-9ee2-448f-a15b-4c49476c0409",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "158c4e32-3655-401c-b1f9-d49675d090ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "3e30e4c8-779c-4e49-9f3d-462859e5ba83",
        "cursor": {
          "ref": "85e77643-cc4c-4b36-a3f7-1512fa134326",
          "length": 253,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "cfe5a6e4-8e8f-4a74-8278-89566a981c2d"
        },
        "item": {
          "id": "3e30e4c8-779c-4e49-9f3d-462859e5ba83",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "cdf3fc5f-47b7-4b4e-8668-7e91927bef0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "771f0dc4-ae93-40d3-83eb-e5fd3558692e",
        "cursor": {
          "ref": "25141dc5-8657-479b-a5e6-da55b8328154",
          "length": 253,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "e084a3b1-f8a0-421a-b2bf-4dcc00515646"
        },
        "item": {
          "id": "771f0dc4-ae93-40d3-83eb-e5fd3558692e",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "8f9b08ca-f2ca-431f-aa80-f031acc6f917",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41ab3f4c-ea41-4399-b049-88313d59b2d4",
        "cursor": {
          "ref": "eb6c426e-e1b1-4195-af53-26eca1b640dd",
          "length": 253,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "d0d6f2d6-61c6-4601-ad37-ae65bc2bf172"
        },
        "item": {
          "id": "41ab3f4c-ea41-4399-b049-88313d59b2d4",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "27c7a0c0-1a1f-4105-bcfe-149d459e851f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef963216-3158-4f62-9702-82d34fb8b96e",
        "cursor": {
          "ref": "69ec6fc6-c663-4478-abdd-418014a7fd35",
          "length": 253,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "19dcf0fb-88a7-4ecb-b415-ea39dfe2424d"
        },
        "item": {
          "id": "ef963216-3158-4f62-9702-82d34fb8b96e",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "60a18e3e-9463-431a-9383-826c99c15713",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f51d2ff7-fed2-4681-9d76-c23e348935e8",
        "cursor": {
          "ref": "84812ade-27ec-451d-be00-271323f1aa6a",
          "length": 253,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "c2e694ec-4e51-4e0c-8e21-267e4ddb817a"
        },
        "item": {
          "id": "f51d2ff7-fed2-4681-9d76-c23e348935e8",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "2df8c3b0-671e-40da-91ca-815ef238b381",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c42efa0-bfa7-4cce-89de-70416c31e893",
        "cursor": {
          "ref": "33adc5dd-0880-4a29-a1a1-48dfccc895d1",
          "length": 253,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "2dd58ceb-836d-4819-a363-49ce8cbef5f5"
        },
        "item": {
          "id": "9c42efa0-bfa7-4cce-89de-70416c31e893",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "45128947-0199-4c03-8d27-d28a6c142386",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfed37a4-fe3f-4ec9-9ad7-265cb0e114c2",
        "cursor": {
          "ref": "65226f3e-8664-4cbb-8fea-44b30ab4cc08",
          "length": 253,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "1b3cdc78-1a6b-41ad-a9ac-5a96e8079b21"
        },
        "item": {
          "id": "cfed37a4-fe3f-4ec9-9ad7-265cb0e114c2",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "d4f123d9-2746-47e7-a5f1-550d4ca0b777",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a442ea4-a52f-48bb-abbf-e0490dcbb431",
        "cursor": {
          "ref": "86c21220-98f6-4111-9cd2-dcd1f508e4a4",
          "length": 253,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "8d5826d4-ad3b-4fa9-864d-7fa54d700ea5"
        },
        "item": {
          "id": "8a442ea4-a52f-48bb-abbf-e0490dcbb431",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "033244bb-533a-427d-88b1-c2abe1d54efc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4830c3ed-d8ed-4809-8abe-eb06b2096e30",
        "cursor": {
          "ref": "95595367-424e-4a8b-90ff-0a7aea06cbe2",
          "length": 253,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "b903a891-75ea-4082-8d2d-1a9ca0e533ea"
        },
        "item": {
          "id": "4830c3ed-d8ed-4809-8abe-eb06b2096e30",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "4ae1dcae-35a6-4e96-91f9-af0ad58673b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d3fc325-d2fe-400e-891b-3624a09658bf",
        "cursor": {
          "ref": "6f476e9a-7b6a-42ed-8df7-17f34d9600a7",
          "length": 253,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "acc4a365-ec59-43f5-a396-1bdec9304a71"
        },
        "item": {
          "id": "2d3fc325-d2fe-400e-891b-3624a09658bf",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "21de7999-533c-4a30-8e35-f75e79699fe1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40e1a3f3-9bc1-4fc9-8ea2-01eb0d0cd159",
        "cursor": {
          "ref": "43478062-39df-4d39-a45e-b37055e0b918",
          "length": 253,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "a5026329-e452-4c89-aa68-0b456df94946"
        },
        "item": {
          "id": "40e1a3f3-9bc1-4fc9-8ea2-01eb0d0cd159",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "b6f5b5b0-8ac8-415f-8bc9-c205a38a4e14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9d2847e-ce15-4bbc-9090-a7b31d788f6e",
        "cursor": {
          "ref": "c47d3448-b807-4249-b903-cef33608b74f",
          "length": 253,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "2149516d-b948-4ed8-8181-686b873799cc"
        },
        "item": {
          "id": "c9d2847e-ce15-4bbc-9090-a7b31d788f6e",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "841c93c1-04fc-4979-8923-777a00061dbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd0fc032-03c7-4a5c-87a6-2c7db14982d3",
        "cursor": {
          "ref": "192846ec-fe8e-4e4c-b0d8-fbecb424da77",
          "length": 253,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "503034e1-b672-4eb0-88f7-34b93cbe7f1f"
        },
        "item": {
          "id": "dd0fc032-03c7-4a5c-87a6-2c7db14982d3",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "e5404f12-1615-487c-8299-ffea1ef445e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b17a2f0c-bd51-4426-85d4-f1154407b66d",
        "cursor": {
          "ref": "06ef34c1-ca8b-4d04-b277-e29a8def6fe2",
          "length": 253,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "3c6d373b-707f-4b8c-ae75-62306f5f6f44"
        },
        "item": {
          "id": "b17a2f0c-bd51-4426-85d4-f1154407b66d",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "b83c933f-d2d5-4d03-ae00-206d077ffc01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b06652b9-f3c7-4edd-8b04-6d7be81b26bb",
        "cursor": {
          "ref": "2d4ff914-61be-4bc3-8910-e05f9bfd60d2",
          "length": 253,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "4966f9fa-a8c2-4965-8d84-69af2e94a310"
        },
        "item": {
          "id": "b06652b9-f3c7-4edd-8b04-6d7be81b26bb",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "35e8540c-54ef-4610-b91d-8592fd0d2397",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26976ae2-4cd9-4353-b7db-10cba2713dc4",
        "cursor": {
          "ref": "b9817faa-1ee1-4842-8aa8-1f5f04fc45d2",
          "length": 253,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "a1a4f66c-df0f-4bbe-a2e8-485d6d57a043"
        },
        "item": {
          "id": "26976ae2-4cd9-4353-b7db-10cba2713dc4",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "9dcaa859-4649-419a-9b96-18feb28a9919",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f856ce3-bb90-4a5e-99e8-4a6a5122b7d5",
        "cursor": {
          "ref": "5126927d-f613-4d11-bb7a-2299e6050924",
          "length": 253,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "468b5d8f-49c7-41a7-af53-b3e24e11ca0e"
        },
        "item": {
          "id": "6f856ce3-bb90-4a5e-99e8-4a6a5122b7d5",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "4cfac1cc-c84a-4277-8439-7c9a02d715d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26681d59-d5cf-4011-9b96-1880c7c63e14",
        "cursor": {
          "ref": "ce4f717f-f092-431a-a7e6-49a6afdeb435",
          "length": 253,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "56381de7-4e8c-443c-9483-5435b95c97b5"
        },
        "item": {
          "id": "26681d59-d5cf-4011-9b96-1880c7c63e14",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "59fe3859-7931-4532-9ca7-2db85cf31c60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "354c0133-7968-4cb2-a157-18abef827dbf",
        "cursor": {
          "ref": "4878fd50-1d7e-44b7-94bd-76b16f43b209",
          "length": 253,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "c118c788-8d95-418c-bcab-63216b77e4e5"
        },
        "item": {
          "id": "354c0133-7968-4cb2-a157-18abef827dbf",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "8861507c-da54-42e8-b82e-931837606624",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebad000d-bd8b-41f7-b590-a55e7efb5729",
        "cursor": {
          "ref": "3dea699f-4794-446d-b02a-e2bdc01e385b",
          "length": 253,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "3c61cf86-29b4-4d9b-8f25-b29129901804"
        },
        "item": {
          "id": "ebad000d-bd8b-41f7-b590-a55e7efb5729",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "d16226bc-e912-4fa9-a017-6babc76e56fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 684
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f76523bb-5d7e-4d74-b253-0aba83ded65b",
        "cursor": {
          "ref": "de8f19e7-5c65-4395-99d2-e6a24d14dd14",
          "length": 253,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "af65f472-d6cd-44eb-b253-ad2084e951c8"
        },
        "item": {
          "id": "f76523bb-5d7e-4d74-b253-0aba83ded65b",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "2636f42c-bae3-406a-9ad8-d9ff2307f861",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 683
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2788da35-78be-443a-81e1-fe9c8576ae19",
        "cursor": {
          "ref": "45d82cb4-9d67-472f-b0ff-a366566c9fa7",
          "length": 253,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "6a569457-5b25-4ed2-9b2a-f2faa0ed5c54"
        },
        "item": {
          "id": "2788da35-78be-443a-81e1-fe9c8576ae19",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "1b6647f5-6069-43e4-9294-2d78baf33194",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b574fe08-b29b-42ed-a4b2-5a8c2eb24767",
        "cursor": {
          "ref": "3cc11422-2767-4d93-a03f-53846868d596",
          "length": 253,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "05c6aa83-7d3a-477e-9312-eea61b1c246f"
        },
        "item": {
          "id": "b574fe08-b29b-42ed-a4b2-5a8c2eb24767",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "756bde98-d324-462e-b7da-ab1a2f9f86d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1444e55-c5ab-44b9-96a2-e9d2d1c1c0df",
        "cursor": {
          "ref": "771d9d6f-72ab-43a2-9426-8d0a9a528f2e",
          "length": 253,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "d11501b5-fc86-4a83-bb5d-870e02977940"
        },
        "item": {
          "id": "e1444e55-c5ab-44b9-96a2-e9d2d1c1c0df",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "290719fc-2638-4706-9d50-8116b0672aa6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44596004-9c69-4f76-9223-0bdb0743c14e",
        "cursor": {
          "ref": "12637674-191a-40ee-a739-db1194048c31",
          "length": 253,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "b3492e26-a766-43b8-a388-4a07944401b1"
        },
        "item": {
          "id": "44596004-9c69-4f76-9223-0bdb0743c14e",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "46aae731-6a0f-4c47-8e2a-df2a86812c0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5551c759-7e2c-469f-8c51-143f2cce95e5",
        "cursor": {
          "ref": "e18970d3-6582-4ea7-87ba-6c529bf50ad9",
          "length": 253,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "2e7bbadf-2c74-428d-93cb-965f947dd735"
        },
        "item": {
          "id": "5551c759-7e2c-469f-8c51-143f2cce95e5",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "cb8f61b5-c729-47b1-b207-87d6c98d2a0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1134038d-b843-4412-b450-34a9855c04d8",
        "cursor": {
          "ref": "6f5a32ce-b420-4c3a-851e-a37bb29912a6",
          "length": 253,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "a0a9e622-5b2c-47a8-ac9c-1dc77a85d466"
        },
        "item": {
          "id": "1134038d-b843-4412-b450-34a9855c04d8",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "32911ff8-d4ce-4384-8a49-8370334bbdb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94179a0a-570b-4bf2-b9ef-710b3c935d70",
        "cursor": {
          "ref": "bf37d383-aef6-4f79-b3dc-c2c418e6ae6e",
          "length": 253,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "e4f6e644-bfa9-4f02-a30b-8d20078d7cb9"
        },
        "item": {
          "id": "94179a0a-570b-4bf2-b9ef-710b3c935d70",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "e9cac8c6-b814-4603-a76c-67a3ee3c8c61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85894994-2dc5-4b8b-853b-a794e08c0438",
        "cursor": {
          "ref": "37470e7f-0913-421b-b286-da3ec06c95be",
          "length": 253,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "d09d05cd-17c5-408a-a66d-db05f94457a9"
        },
        "item": {
          "id": "85894994-2dc5-4b8b-853b-a794e08c0438",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "534ce70c-ecdd-42f4-8320-5c40d51ff988",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbe72d04-d705-4533-a7cd-d484dd80d88a",
        "cursor": {
          "ref": "47f21d8d-0a9d-4b1b-86c5-90224535fa63",
          "length": 253,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "4af6ff1d-88eb-4798-b67e-d902107359d8"
        },
        "item": {
          "id": "bbe72d04-d705-4533-a7cd-d484dd80d88a",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "60fbf0e8-18ae-44d4-80f3-4e622d0a7bae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a3248e4-1613-438e-9a77-833f6581ae24",
        "cursor": {
          "ref": "aea93234-c1a6-4ce9-b63d-47cc8b8e848b",
          "length": 253,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "52ce5741-9a70-41d1-b678-ccd9d4c5cc12"
        },
        "item": {
          "id": "3a3248e4-1613-438e-9a77-833f6581ae24",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "d9b3947d-1021-49d3-a681-56d9909525f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f63f15c-a0ec-4a83-a10c-4a27101ae90b",
        "cursor": {
          "ref": "08e29d68-edbb-414a-be6c-12fa1efe6105",
          "length": 253,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "625fc66c-07f7-4a48-92f0-a11b6411a79c"
        },
        "item": {
          "id": "7f63f15c-a0ec-4a83-a10c-4a27101ae90b",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "29b1d00f-d3c6-403d-a7eb-90987abe6d6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87f1ab78-4a8f-4dab-8e7d-a406153f1f8b",
        "cursor": {
          "ref": "33d7e430-7a2a-48df-b4ae-3d6eac11a937",
          "length": 253,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "42688522-e400-4a5c-8b30-63e14457f5fd"
        },
        "item": {
          "id": "87f1ab78-4a8f-4dab-8e7d-a406153f1f8b",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "acba0a7e-71da-49d2-b663-0581f5e87568",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "483e7d15-a5ea-4985-a06e-7a9104d478f3",
        "cursor": {
          "ref": "2d5b44d2-ab21-4e56-969c-c8ed008e83f4",
          "length": 253,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "25701e0b-05b3-4cf5-b29a-988b77c6e596"
        },
        "item": {
          "id": "483e7d15-a5ea-4985-a06e-7a9104d478f3",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "f1c1122d-fadd-4f94-bfbc-dda54a92d169",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "634ce645-e418-42c4-85a1-7af8841ca7eb",
        "cursor": {
          "ref": "ea70097a-6419-42b7-96bb-7864363f6c61",
          "length": 253,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "a6239677-b4a4-4cfa-83e8-7f08d7f604d7"
        },
        "item": {
          "id": "634ce645-e418-42c4-85a1-7af8841ca7eb",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "79bc3b8f-1358-49e3-b740-24ca389f0257",
          "status": "Created",
          "code": 201,
          "responseTime": 84,
          "responseSize": 651
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "9a0fa235-2fe8-490c-b529-47471e0004d4",
        "cursor": {
          "ref": "5639d824-aae7-4eea-a622-2aeedf4c179a",
          "length": 253,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "063ef191-f82a-4e29-ad3f-18bbb86d56aa"
        },
        "item": {
          "id": "9a0fa235-2fe8-490c-b529-47471e0004d4",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "0305d3ca-c9fa-4055-811b-d511e340434a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bce875c2-2677-4ddc-8fe2-2b9f154c9f92",
        "cursor": {
          "ref": "b49e8b25-e3d6-457c-9aff-7f066e6e533f",
          "length": 253,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "d6d7df77-9a60-433f-99ae-97070cfc010a"
        },
        "item": {
          "id": "bce875c2-2677-4ddc-8fe2-2b9f154c9f92",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "73e6b005-94f4-475a-907d-c6176f94bd98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eeb2cf65-c40e-4e46-94ee-ca0723259577",
        "cursor": {
          "ref": "af1edd65-5813-44f1-893e-6ba02896fc3a",
          "length": 253,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "2663933a-6dee-4dea-8258-878d2e412180"
        },
        "item": {
          "id": "eeb2cf65-c40e-4e46-94ee-ca0723259577",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "1b0807d3-b6ab-49c1-bd92-6ee83bcdeb38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 515
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9598d11b-acea-4fcc-9bd7-b1e26ccee5a1",
        "cursor": {
          "ref": "a17e46ec-118c-4b76-90b5-0e2518dc93c9",
          "length": 253,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "43ede4d0-8ae6-4ab9-807b-bb766d89c4a6"
        },
        "item": {
          "id": "9598d11b-acea-4fcc-9bd7-b1e26ccee5a1",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "8a6ca76a-c1fa-46c4-8d02-0fdbe205a3b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 514
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "222803af-1484-43a0-b16c-a4ab1fc1f76d",
        "cursor": {
          "ref": "b1ceb528-24b2-4dc5-a91f-50793c0406d9",
          "length": 253,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "55f39dbd-5a1e-4115-9b97-324fcb110467"
        },
        "item": {
          "id": "222803af-1484-43a0-b16c-a4ab1fc1f76d",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "b53a6f98-70c0-486d-a5a5-9492e048712f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 516
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95450260-081c-4dac-b520-adc827b0d8ca",
        "cursor": {
          "ref": "f195924c-1aa7-4b4d-a69d-5f85131b603e",
          "length": 253,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "8dffde58-12ca-429d-bd67-e3517bb1ac80"
        },
        "item": {
          "id": "95450260-081c-4dac-b520-adc827b0d8ca",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "124cf322-d3c9-4d69-815c-f362cbe62e8b",
          "status": "Created",
          "code": 201,
          "responseTime": 84,
          "responseSize": 651
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "04844ce3-6950-48ed-90a5-3f72db14c68f",
        "cursor": {
          "ref": "9bd46f6d-8836-4ee4-92f0-6934181a6250",
          "length": 253,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "34f016d3-3447-47eb-91b4-55c6eb596108"
        },
        "item": {
          "id": "04844ce3-6950-48ed-90a5-3f72db14c68f",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "fd63fea6-6363-4d04-ac45-cb352ce6aa88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 516
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ac54cb7-a92b-49f9-9d34-6e23e3997bba",
        "cursor": {
          "ref": "e3de15cc-888a-4065-9f97-0982c9dc0a4d",
          "length": 253,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "f856f311-e83a-48c3-81c5-d9dd50895ab9"
        },
        "item": {
          "id": "9ac54cb7-a92b-49f9-9d34-6e23e3997bba",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "5f90a1d3-6d92-4430-9c5e-0b253c88062d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bff4c676-4a13-466f-8669-fe32cb67825b",
        "cursor": {
          "ref": "1bbb612d-5d21-4d1e-bc89-43897472df1f",
          "length": 253,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "4c3bb46a-ff96-44cc-a372-16adffa71537"
        },
        "item": {
          "id": "bff4c676-4a13-466f-8669-fe32cb67825b",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "269e22dc-9f81-466d-ad68-6b1e0f41b4b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aad29b23-da4d-442a-8eca-2e21f7cf34b5",
        "cursor": {
          "ref": "9294c9f3-5086-4f7c-a14a-881bdbac68f9",
          "length": 253,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "48b70f0b-7a55-484e-8d49-38a02c3c4b37"
        },
        "item": {
          "id": "aad29b23-da4d-442a-8eca-2e21f7cf34b5",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "28c83a66-31ac-4998-a611-6a5f0b57f1fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48a8af4f-46f7-4955-8e8a-0266347fc455",
        "cursor": {
          "ref": "c490ad0c-7a47-41ae-84b5-f4ced29bad3b",
          "length": 253,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "e71de2b9-cb55-42e8-81e1-0edb491fb96e"
        },
        "item": {
          "id": "48a8af4f-46f7-4955-8e8a-0266347fc455",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "9c43e420-d679-447d-aea5-76065b1ad41a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be19e872-efd9-446b-b04d-a1fbd2049819",
        "cursor": {
          "ref": "3f417daf-d8ad-4af3-ac58-d8cc5b846219",
          "length": 253,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "7d35fbac-87df-4a37-a2ba-238e1ca8059e"
        },
        "item": {
          "id": "be19e872-efd9-446b-b04d-a1fbd2049819",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "4b568693-5913-4df0-9d9b-9e5f7fa54388",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17e6d0f1-990b-4772-b7a8-cd550d78f6a6",
        "cursor": {
          "ref": "dd142bd0-e814-4f5f-acd5-cffd79adaf0c",
          "length": 253,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "90c5ccac-5156-4871-a058-a8a39845cb9f"
        },
        "item": {
          "id": "17e6d0f1-990b-4772-b7a8-cd550d78f6a6",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "369c51c1-b123-432a-8889-2473c9701221",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0eb12fe-6b48-4827-bbe3-402f1d308e5a",
        "cursor": {
          "ref": "0ecd9ae0-fccf-45ec-b93a-720816b31534",
          "length": 253,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "770c6e1d-53d0-4d78-8e18-18c628d334c9"
        },
        "item": {
          "id": "a0eb12fe-6b48-4827-bbe3-402f1d308e5a",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "039d623d-3287-4d29-ac00-be552e99b593",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 212,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d1d986e-9b6f-47b3-9aff-1da48bdda973",
        "cursor": {
          "ref": "b2eca05a-fe37-4f8e-9a7c-a35d643e45bc",
          "length": 253,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "d717b31f-6dab-45b9-88ca-1527608360b1"
        },
        "item": {
          "id": "4d1d986e-9b6f-47b3-9aff-1da48bdda973",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "aa220c2f-2c2f-4e9e-aa91-226582f0a423",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:104)"
            }
          }
        ]
      },
      {
        "id": "03fba921-b5fc-4f3e-9683-b0303885be9c",
        "cursor": {
          "ref": "af0ebd9b-82b0-4d1f-9df5-2e862485fac9",
          "length": 253,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "673bd27f-2dc8-4358-b155-ca90f64221b0"
        },
        "item": {
          "id": "03fba921-b5fc-4f3e-9683-b0303885be9c",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "4cf5cb4f-16ef-4e4e-83c3-d0aaae3f89d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "id": "dde2ec56-b082-431a-92a6-69f0355df8e0",
        "cursor": {
          "ref": "b0ef71c4-a01e-4045-9924-3ee0ad558693",
          "length": 253,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "d1a299bc-6ba6-4123-a40c-fa10d499edbc"
        },
        "item": {
          "id": "dde2ec56-b082-431a-92a6-69f0355df8e0",
          "name": "credentials_issue"
        },
        "response": {
          "id": "68c15d60-72f7-4129-bced-196597d9e4ca",
          "status": "Created",
          "code": 201,
          "responseTime": 83,
          "responseSize": 651
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3921131-0da7-4aba-8a70-59ac3110b377",
        "cursor": {
          "ref": "e2bea105-dfd5-4820-a119-437a3380128d",
          "length": 253,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "ac2f303c-0b47-4af8-94ea-651786c1fc05"
        },
        "item": {
          "id": "f3921131-0da7-4aba-8a70-59ac3110b377",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "0c5b3921-a80d-49be-af40-467ede6e06b3",
          "status": "Created",
          "code": 201,
          "responseTime": 82,
          "responseSize": 651
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c6509a1-a575-4827-9605-e16ca7e68d22",
        "cursor": {
          "ref": "d0a807d2-4c10-4fe0-ab64-2f62fea71c23",
          "length": 253,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "7e53b831-0e31-4119-9359-5759ea7ab859"
        },
        "item": {
          "id": "2c6509a1-a575-4827-9605-e16ca7e68d22",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "c8da3bcb-0842-4de0-8b5a-bb638c864d5a",
          "status": "Created",
          "code": 201,
          "responseTime": 80,
          "responseSize": 673
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "36617040-68e9-4f87-833a-69b347ba6456",
        "cursor": {
          "ref": "84ca0f6f-230c-4800-af73-18d36c56ba13",
          "length": 253,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "18b92062-3260-4dd4-a3a8-910d400b7463"
        },
        "item": {
          "id": "36617040-68e9-4f87-833a-69b347ba6456",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "b4cc0e5c-afd4-485d-97c9-019a2b8be44e",
          "status": "Created",
          "code": 201,
          "responseTime": 80,
          "responseSize": 641
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d611b1b-05dc-4693-8994-7493e2e2b8f2",
        "cursor": {
          "ref": "fca1dec1-6926-4d06-abbf-325975639ae1",
          "length": 253,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "df190364-e585-4e99-bd4d-aba458572dda"
        },
        "item": {
          "id": "2d611b1b-05dc-4693-8994-7493e2e2b8f2",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "00faf8c7-a833-45f9-988c-4c869b7080b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:110)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:110)"
            }
          }
        ]
      },
      {
        "id": "368c6e07-629e-4ffe-be89-8534fd03d547",
        "cursor": {
          "ref": "85a461f3-88db-4bb2-b1fd-a738689e8b69",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "0f33587d-8881-461c-81e7-3dbdc4cf0be8"
        },
        "item": {
          "id": "368c6e07-629e-4ffe-be89-8534fd03d547",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "788076cd-9984-486d-a995-d44fef777ce6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "368c6e07-629e-4ffe-be89-8534fd03d547",
        "cursor": {
          "ref": "85a461f3-88db-4bb2-b1fd-a738689e8b69",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "0f33587d-8881-461c-81e7-3dbdc4cf0be8"
        },
        "item": {
          "id": "368c6e07-629e-4ffe-be89-8534fd03d547",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "788076cd-9984-486d-a995-d44fef777ce6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "249285a2-7baf-4883-ae54-eb2ac6cc271d",
        "cursor": {
          "ref": "fd56c669-5bf0-4a8a-8486-7aa75ea66650",
          "length": 253,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "c4f6b3eb-964e-4058-8ed0-89579290b245"
        },
        "item": {
          "id": "249285a2-7baf-4883-ae54-eb2ac6cc271d",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "87bfaab7-ca93-4189-95f4-609d093bb267",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 307
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e15edd2b-3b5b-40e5-b361-01187fa500d7",
        "cursor": {
          "ref": "47408bee-b0f1-45ec-a473-fef319d4015b",
          "length": 253,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "13afae2b-5db0-413d-8fa6-eb1efe06e168"
        },
        "item": {
          "id": "e15edd2b-3b5b-40e5-b361-01187fa500d7",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "b61cf92e-02de-4c23-b685-97ea140142d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 306
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70ac775b-db12-492a-ae83-0d3d5b5d3011",
        "cursor": {
          "ref": "5c5394f2-709f-4a97-800e-7ff0dfc950ac",
          "length": 253,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "8550ac54-2c5d-497a-b6c8-05e17e0bf804"
        },
        "item": {
          "id": "70ac775b-db12-492a-ae83-0d3d5b5d3011",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "5396e173-950c-425f-876a-987236eeb06d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 308
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ae4a6f9-b030-4be6-b1c2-2ac6d5445150",
        "cursor": {
          "ref": "27a4f8dc-eef4-4db1-807a-d60941dfcf48",
          "length": 253,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "4beba672-2212-4e05-ad65-fe1cff489221"
        },
        "item": {
          "id": "9ae4a6f9-b030-4be6-b1c2-2ac6d5445150",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "f49b21ed-1fde-4930-adf2-571797e0d7a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7442e3db-1625-4b9d-b4a1-eb78d2d098ad",
        "cursor": {
          "ref": "064c52a2-c516-4e67-bce4-e06f44a12a5b",
          "length": 253,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "7d315e9a-2d9e-433a-81ec-4235f4fe9b85"
        },
        "item": {
          "id": "7442e3db-1625-4b9d-b4a1-eb78d2d098ad",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "a07f4762-7f6b-4b68-89e4-340ddb0a0fe5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 308
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fada18a-89e9-42e4-a0c6-508bc98100c5",
        "cursor": {
          "ref": "d60daf50-417f-4a0d-9438-cf5d522b4d7b",
          "length": 253,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "db1a1b77-fff8-4a2b-88f5-d0d8a0c6f3aa"
        },
        "item": {
          "id": "4fada18a-89e9-42e4-a0c6-508bc98100c5",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "cfa9f8d6-790c-4ba7-bc43-25b4b6eb34ce",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "e6537b85-c4c2-4364-a139-247cf6eb04e7",
        "cursor": {
          "ref": "6b90661b-bbc3-4478-b2aa-a79070713c23",
          "length": 253,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "038d4f2d-e624-4104-b885-2bc88cbaaf97"
        },
        "item": {
          "id": "e6537b85-c4c2-4364-a139-247cf6eb04e7",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "2bf81a95-1e53-4422-aa02-915a10dbf333",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d80e3936-74cd-4610-ad0c-6314e4cffcf3",
        "cursor": {
          "ref": "daafddb1-2755-45e9-aa74-0b8ecfa76b8d",
          "length": 253,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "dfe93355-34af-495e-99ee-486033864d01"
        },
        "item": {
          "id": "d80e3936-74cd-4610-ad0c-6314e4cffcf3",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "a764d5aa-0bc5-42cd-aa07-dd56d0d5740e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65aa11fc-eeab-4dcd-ae47-47e31defd14b",
        "cursor": {
          "ref": "0e67124b-7b3a-488c-91fd-18c88c79d7c2",
          "length": 253,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "e947ca48-06cd-4181-92d4-712adb2d5685"
        },
        "item": {
          "id": "65aa11fc-eeab-4dcd-ae47-47e31defd14b",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "aa4236f9-a0e1-454c-aec8-6516e9354b42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bcf9350-ef41-4ada-8ee3-be121a6bcf84",
        "cursor": {
          "ref": "16470411-3811-48c0-bd22-9aee95ae7794",
          "length": 253,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "964e3d98-b9a5-4d9e-8a3a-e46690a14647"
        },
        "item": {
          "id": "5bcf9350-ef41-4ada-8ee3-be121a6bcf84",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "ec654b81-4deb-41fb-87c8-945ff1c7104b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "774c6757-3cd5-428b-90f1-070290089fc6",
        "cursor": {
          "ref": "125075c8-a1b7-43ba-9a37-09b8e9ce141e",
          "length": 253,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "a30b4410-9b92-4efc-bf75-01a0a9fdd8f0"
        },
        "item": {
          "id": "774c6757-3cd5-428b-90f1-070290089fc6",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "651228a8-76fe-47a5-b328-5a59f10832b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecc141b7-871f-46f8-b0b1-e570e9f8d658",
        "cursor": {
          "ref": "10466e87-92ee-45a1-a01e-23dfc16c8de1",
          "length": 253,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "531a9c55-d8c1-4356-926b-ab3d374d68f4"
        },
        "item": {
          "id": "ecc141b7-871f-46f8-b0b1-e570e9f8d658",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "c54da963-4c27-4e6e-a42e-abf1d12ed6f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d74ce27-2b33-4c92-b82f-f10c387bf14d",
        "cursor": {
          "ref": "340fbcdd-7d96-4d8d-b331-11f28ad76332",
          "length": 253,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "f91f7883-4a06-4ea5-8e77-a3ef12c05aca"
        },
        "item": {
          "id": "2d74ce27-2b33-4c92-b82f-f10c387bf14d",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "e4fffc1e-4b2c-4bd1-a381-15e454678f6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "695f947a-08c9-4636-88d9-88c5d87c8c25",
        "cursor": {
          "ref": "b3c70d7f-f81c-4324-863d-e8f6a2bb5491",
          "length": 253,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "6d9ee0f7-e7a8-4085-9190-7782cf421a3d"
        },
        "item": {
          "id": "695f947a-08c9-4636-88d9-88c5d87c8c25",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "dc0ccfe2-90d3-4896-b286-f794d69562e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f44a46c1-a84f-449a-bb95-a03613b7361e",
        "cursor": {
          "ref": "4732483d-7878-4f20-b935-3574d2595cdd",
          "length": 253,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "2007894b-e8e5-4b7d-a122-b29f1a9e3a2b"
        },
        "item": {
          "id": "f44a46c1-a84f-449a-bb95-a03613b7361e",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "a0de50e0-ed23-490f-8fb0-893deb110b74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "649cdd61-5058-4894-ac7d-ecb18d6c8b8f",
        "cursor": {
          "ref": "53e25579-151e-4cb0-99b9-63c056b81f1f",
          "length": 253,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "510ae04c-2756-41b9-8412-848644a74e32"
        },
        "item": {
          "id": "649cdd61-5058-4894-ac7d-ecb18d6c8b8f",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "9ef93e0f-6c71-4607-aadc-644a1d2725fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c324a00-650d-40ed-bdc4-ec245599f45c",
        "cursor": {
          "ref": "5870c0e9-c4c0-44ca-8377-668bc1516507",
          "length": 253,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "a974e9ba-bf02-4798-b4d5-7851661f7b9c"
        },
        "item": {
          "id": "8c324a00-650d-40ed-bdc4-ec245599f45c",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "5295dcff-b6cb-412d-82ab-50cfd6578072",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78b01350-20e4-4984-a6dd-4d7ba4747b9c",
        "cursor": {
          "ref": "47eaeab3-b930-4c9d-9a4d-8f39264d4118",
          "length": 253,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "6e84c361-b20c-4345-a2f8-0df35c3e3c22"
        },
        "item": {
          "id": "78b01350-20e4-4984-a6dd-4d7ba4747b9c",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "65a3d7ff-478c-4491-8eeb-c773575a8331",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9294801b-0677-49f3-9e8e-d56789d1bc97",
        "cursor": {
          "ref": "24a4cf02-21c5-4b95-b9a3-43d785559fba",
          "length": 253,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "65f1e316-61ea-4960-b7a0-ac28d5604000"
        },
        "item": {
          "id": "9294801b-0677-49f3-9e8e-d56789d1bc97",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "9b2af16a-fc14-4e4c-8b22-dd27a984a21f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2df14e8e-7015-4b3a-9615-5e816465fb75",
        "cursor": {
          "ref": "5b8c64be-5a26-4b89-ba53-a4821fda54ba",
          "length": 253,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "d45c4b3e-ec43-4637-9615-9099231c9533"
        },
        "item": {
          "id": "2df14e8e-7015-4b3a-9615-5e816465fb75",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "a498a2c6-db8d-4101-9f41-2b13b772114c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8396ba47-30bc-42b6-9a4d-deda150cdc8c",
        "cursor": {
          "ref": "13a70aa4-2ca8-42a4-89b0-d5493c60aa8b",
          "length": 253,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "b749abed-49da-4316-b41c-4b912b2976fb"
        },
        "item": {
          "id": "8396ba47-30bc-42b6-9a4d-deda150cdc8c",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "953c8bde-ea4d-476e-99a7-48d2af3abe91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cba9bc12-0e5e-4591-9bdd-edc51bb771a5",
        "cursor": {
          "ref": "1e3a7509-41d9-4cac-9777-29b0ce4bd8fb",
          "length": 253,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "677e5205-a395-4641-af3b-03d4d8535127"
        },
        "item": {
          "id": "cba9bc12-0e5e-4591-9bdd-edc51bb771a5",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "27ce3b80-49d6-4109-8fc4-c863c141d0e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3179de37-5ab0-44b8-ab04-eee0a1e6aa28",
        "cursor": {
          "ref": "cedad935-70fb-46c6-88d5-59a1d04c3212",
          "length": 253,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "530ae16d-ae49-4671-9a3f-4e43259a25b2"
        },
        "item": {
          "id": "3179de37-5ab0-44b8-ab04-eee0a1e6aa28",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "3c0bb7e0-f1f6-4780-931d-07e5f4570827",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c11408e0-ee95-4432-87fd-1b9ead5557e5",
        "cursor": {
          "ref": "c20774b1-c72e-4893-b1c7-40667a92e35c",
          "length": 253,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "2eb8eab9-4392-454a-bcc0-500505bdc1f3"
        },
        "item": {
          "id": "c11408e0-ee95-4432-87fd-1b9ead5557e5",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "ab72abbb-9951-42be-87f6-884f04e3e122",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c09bf03c-5aa7-48b5-aa30-2c5d5d1f1112",
        "cursor": {
          "ref": "bdb3f895-5d30-481a-9d5b-c527cca7c22a",
          "length": 253,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "f5e12d1c-4277-4cc6-86b0-de821c53f526"
        },
        "item": {
          "id": "c09bf03c-5aa7-48b5-aa30-2c5d5d1f1112",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "859ec129-ba45-4631-a0e1-fa17ef80314f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7861bc47-b8bf-4734-8e9f-0ed6fb51baf9",
        "cursor": {
          "ref": "1cd58393-f5ca-41c1-9ca7-141e88d906eb",
          "length": 253,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "440fa206-4471-4c2d-bbf0-97e21abcc52d"
        },
        "item": {
          "id": "7861bc47-b8bf-4734-8e9f-0ed6fb51baf9",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "54bc19ad-9549-4504-be8d-0c9962968e8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2b1ba62-8771-4696-b377-e0b3172c9414",
        "cursor": {
          "ref": "79f4bea8-b830-4bf2-848d-3ac9073167cd",
          "length": 253,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "528494a3-6979-44de-98dd-f5da5e552b6b"
        },
        "item": {
          "id": "c2b1ba62-8771-4696-b377-e0b3172c9414",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "2dcfc368-bde7-41c0-a344-ca349b59ba3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ddef1d9-96b4-44e5-918e-c7d08a859157",
        "cursor": {
          "ref": "1654304d-f0f5-49b6-b375-a8c763b3cb51",
          "length": 253,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "a5d265e2-0332-4441-a3cb-87ce024ac3b2"
        },
        "item": {
          "id": "2ddef1d9-96b4-44e5-918e-c7d08a859157",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "1c352ffb-9e08-4083-899a-fa310a5a5996",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d224ab1-2af1-4b9e-b2e0-0658fb9d6c4b",
        "cursor": {
          "ref": "43b98bc9-325b-495c-b263-0f1315fc7077",
          "length": 253,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "84d48962-2127-44ca-98c4-4961e57fc8a7"
        },
        "item": {
          "id": "8d224ab1-2af1-4b9e-b2e0-0658fb9d6c4b",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "4f0ee27e-ef30-4835-9c38-eaf1f8f56dd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3d3307e-f108-439e-85dc-1980a34c472d",
        "cursor": {
          "ref": "6a6d86ae-432e-4975-8e2d-73f58078d43f",
          "length": 253,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "050e5041-73ed-4bff-9a83-077fb0adf86d"
        },
        "item": {
          "id": "d3d3307e-f108-439e-85dc-1980a34c472d",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "c307f84e-183b-465e-8b4d-d7618265bac9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af3a3093-98c4-4337-8755-b03519037ae5",
        "cursor": {
          "ref": "a9a525e2-feb5-4cde-a1f0-974a996b4e0e",
          "length": 253,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "af98c5d8-a6c0-451e-bc61-1f77ce30fdf6"
        },
        "item": {
          "id": "af3a3093-98c4-4337-8755-b03519037ae5",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "f97d82aa-9c68-4791-8f7d-408c7e9f3cb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d08871f4-cf79-41c4-b790-f0b185bf84e1",
        "cursor": {
          "ref": "f85e66df-c6f0-4880-8fd4-dd0ff4151b20",
          "length": 253,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "4c9b9222-9c6b-4a76-9e63-fbf9940a1051"
        },
        "item": {
          "id": "d08871f4-cf79-41c4-b790-f0b185bf84e1",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "ac6e938e-8ef9-41bf-a52d-59dd04c04303",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "d47a9608-2ca3-49fb-b272-eeb794301821",
        "cursor": {
          "ref": "22d33355-1c01-4d23-b1f3-ca3282d6e925",
          "length": 253,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "8c4276e3-8e9c-4861-bc0f-bf3a666df9ad"
        },
        "item": {
          "id": "d47a9608-2ca3-49fb-b272-eeb794301821",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "3cca2a11-f73e-4bac-843c-56e7521e52a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "8c14da10-c9e7-4ffe-982d-c61597d05795",
        "cursor": {
          "ref": "fb0848cd-9127-4977-9e04-33a11824733d",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "a217c0d2-3fcb-4305-8fed-7f2085931827"
        },
        "item": {
          "id": "8c14da10-c9e7-4ffe-982d-c61597d05795",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "4f40a4a0-840c-4b67-b477-171d2b78232f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c14da10-c9e7-4ffe-982d-c61597d05795",
        "cursor": {
          "ref": "fb0848cd-9127-4977-9e04-33a11824733d",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "a217c0d2-3fcb-4305-8fed-7f2085931827"
        },
        "item": {
          "id": "8c14da10-c9e7-4ffe-982d-c61597d05795",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "4f40a4a0-840c-4b67-b477-171d2b78232f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d3558fc-62a7-4172-a94d-6ea2a7608af1",
        "cursor": {
          "ref": "5d2296ed-aa62-410c-a569-ff35561f5afc",
          "length": 253,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "a11464b6-d802-474b-a711-563f76c33703"
        },
        "item": {
          "id": "8d3558fc-62a7-4172-a94d-6ea2a7608af1",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "5c741322-23b6-400c-a7c6-7f92d5c6bc13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94b9c24d-4ffd-4ad4-b347-524df73dc54e",
        "cursor": {
          "ref": "0f781849-d914-4c16-9207-87292c37b3e1",
          "length": 253,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "1277ca07-ae1c-4095-a18f-21a20b379368"
        },
        "item": {
          "id": "94b9c24d-4ffd-4ad4-b347-524df73dc54e",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "3f2fce0d-e963-40ec-aa87-b274aa81d524",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29a641c6-a4cd-4147-8a7e-c2c974b451c4",
        "cursor": {
          "ref": "fbf9beba-83c6-44ab-ad0f-3a79e34f04dc",
          "length": 253,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "793c96e3-8404-431e-bdb9-d6793cf421e3"
        },
        "item": {
          "id": "29a641c6-a4cd-4147-8a7e-c2c974b451c4",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "2e8c35f7-1e49-447b-9957-c91db8ef2e54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8c3a9bd-ca03-4823-896b-7f745d1a19c6",
        "cursor": {
          "ref": "0a043492-85c5-4d2e-ba0f-13ee2dfd9f15",
          "length": 253,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "1984c63d-63cc-42a4-a9de-1ab9812d8ea1"
        },
        "item": {
          "id": "f8c3a9bd-ca03-4823-896b-7f745d1a19c6",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "066adfb3-8d72-4372-a1c2-be14d783cd31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eef1ec29-3863-4e48-b26a-e8e02e279e0f",
        "cursor": {
          "ref": "9eeb939c-e6e6-47f6-922a-251cf00b1127",
          "length": 253,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "6b46dd34-6597-4ed0-99d1-fb46c480a519"
        },
        "item": {
          "id": "eef1ec29-3863-4e48-b26a-e8e02e279e0f",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "7bf7c598-cefc-47f4-b704-b4e6b360aa4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62d0d7b4-c782-4371-bee5-efde9615c63b",
        "cursor": {
          "ref": "5c2816d6-e837-4e8a-a0a3-4d865d926691",
          "length": 253,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "ddf4af9e-86c2-4b5d-87f6-9c863f693dff"
        },
        "item": {
          "id": "62d0d7b4-c782-4371-bee5-efde9615c63b",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "d0da9770-3407-4eae-aeb9-e29ce1537461",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30ee4f13-1917-4bfe-940f-3e3017ab3ed4",
        "cursor": {
          "ref": "35573f1e-d1b8-4ac4-a0dd-5b0437eebaf3",
          "length": 253,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "a8e96374-9089-41e3-8fa9-0bf763ab23ee"
        },
        "item": {
          "id": "30ee4f13-1917-4bfe-940f-3e3017ab3ed4",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "885e2d8d-dee8-47c9-88b3-416d74aab4fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2af10f0-bfd6-4d9a-9c78-9e6b31136678",
        "cursor": {
          "ref": "49b2cf46-7f47-4305-98ed-9192e189a06a",
          "length": 253,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "e48e6977-c2e5-4061-9417-77375048f18d"
        },
        "item": {
          "id": "b2af10f0-bfd6-4d9a-9c78-9e6b31136678",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "813ecec9-48f6-41c8-aa46-c83f84e407e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af734f61-7a24-4a6e-b0aa-25b26a1cfe7c",
        "cursor": {
          "ref": "a13308f9-d3f5-40b3-b314-37cb7eb29eec",
          "length": 253,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "0cf968a3-9a1d-4e96-9848-af82bdda7e15"
        },
        "item": {
          "id": "af734f61-7a24-4a6e-b0aa-25b26a1cfe7c",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "dbbfbd6e-ec00-4dd5-b47f-69af4ef51f51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e85a7e0-d728-4026-9c2f-04efd3b5059a",
        "cursor": {
          "ref": "2f8eb2bf-fad6-45f7-a19f-0f733be21eac",
          "length": 253,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "5673f838-b3e3-4802-bba1-08cd4679e964"
        },
        "item": {
          "id": "7e85a7e0-d728-4026-9c2f-04efd3b5059a",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "6bc13d67-6a12-40e0-a0ac-c47d73640035",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9d15b0c-78d1-4516-b6ec-39b4ffc3eadf",
        "cursor": {
          "ref": "b202ff4a-168d-41e0-9556-928caa2bd9e0",
          "length": 253,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "240c7978-60fa-4ec3-8663-9368da7c749a"
        },
        "item": {
          "id": "b9d15b0c-78d1-4516-b6ec-39b4ffc3eadf",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "e248a4f0-a876-4b88-8a00-58193c82fddb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "931f0480-d5c9-494e-bf89-edb0af6fd867",
        "cursor": {
          "ref": "ccaf2e11-fbf2-45b6-ba0a-a603ee7261f6",
          "length": 253,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "61b1f917-cc37-457d-b717-3b351f4ebb7d"
        },
        "item": {
          "id": "931f0480-d5c9-494e-bf89-edb0af6fd867",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "5399ccc6-575a-4d6e-bfe5-cea19965ce64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0473b0e0-9071-4e22-a013-28d97d7fe1b9",
        "cursor": {
          "ref": "0ef8f10f-fcda-4eff-97d6-a8facbf15e96",
          "length": 253,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "dc7bc907-2910-4959-adda-64f74e092d5b"
        },
        "item": {
          "id": "0473b0e0-9071-4e22-a013-28d97d7fe1b9",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "124444e1-923c-433e-a8ea-f1c85b156e28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08f9d509-872f-431b-a374-b6747d030797",
        "cursor": {
          "ref": "28cebc87-e6a5-479d-8804-84ec5600138c",
          "length": 253,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "5bfd50bc-7ec1-4793-994d-1790fc8df56e"
        },
        "item": {
          "id": "08f9d509-872f-431b-a374-b6747d030797",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "d26dc355-ad72-4d50-99ec-b059f957af65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d09bf28f-2271-435a-ad44-02b3559b31bd",
        "cursor": {
          "ref": "f1abe33d-8524-44ea-bb4c-0650bd80e162",
          "length": 253,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "e3475bab-9505-4685-8b74-d9fb8ec4c29e"
        },
        "item": {
          "id": "d09bf28f-2271-435a-ad44-02b3559b31bd",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "f44d0acd-296d-4631-81d0-9964248372df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "040570b9-65e5-4f3e-a287-36b927fe5258",
        "cursor": {
          "ref": "481bedb3-8ad3-4567-bdbd-1c3009946bec",
          "length": 253,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "8cf6f4a2-5d2b-4e7b-88ef-a6785a364176"
        },
        "item": {
          "id": "040570b9-65e5-4f3e-a287-36b927fe5258",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "37e6d50e-5327-456e-afba-8596e0648347",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a1eeb93-e623-4f76-9b79-ba20d6a5d259",
        "cursor": {
          "ref": "6471a196-d22f-45b0-9a5b-96fc489b870d",
          "length": 253,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "862bc01e-4f02-4c2b-830e-80e1d823fb44"
        },
        "item": {
          "id": "8a1eeb93-e623-4f76-9b79-ba20d6a5d259",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "ca187be5-3fad-44d9-a1df-57c877d19299",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b6a91f7-e912-45f5-82eb-1659c1ae00b2",
        "cursor": {
          "ref": "641ab96d-df90-4208-8905-e060dd57e25b",
          "length": 253,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "b2fb40de-7187-40d4-a838-73cbcdb50815"
        },
        "item": {
          "id": "9b6a91f7-e912-45f5-82eb-1659c1ae00b2",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "85d0558d-13aa-4e7e-a34f-c62dd4c85c98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fc5eab7-1d14-46c8-94fc-f03a3e5f4cc0",
        "cursor": {
          "ref": "6598f774-2897-4ee7-a5f3-87ab882f7649",
          "length": 253,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "cf8f0131-3dfc-4e19-ba10-64568a4d6fef"
        },
        "item": {
          "id": "5fc5eab7-1d14-46c8-94fc-f03a3e5f4cc0",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "7494dd19-b3eb-44cc-9ffd-0ce2c2d3a57b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e2e6900-1af0-4857-aacc-10c6299dc02d",
        "cursor": {
          "ref": "17c8a605-bc98-4aea-bb39-813d2356acd0",
          "length": 253,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "a2e8a50d-1260-49a9-b1a1-e10164e1d0b8"
        },
        "item": {
          "id": "0e2e6900-1af0-4857-aacc-10c6299dc02d",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "d0e8e1a3-2bec-4716-9664-09bacd35a838",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57483bd8-5e14-4618-8010-8a557231aeda",
        "cursor": {
          "ref": "f262fbb2-7f0f-4334-bea0-41a7b97a7e81",
          "length": 253,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "d4979faf-d6fe-491f-bfbb-1edaefbe5678"
        },
        "item": {
          "id": "57483bd8-5e14-4618-8010-8a557231aeda",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "334c943d-a45b-436f-964f-2ba13240b4b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ce9d202-64f4-4d84-a702-821091331d17",
        "cursor": {
          "ref": "c9797818-a663-4704-9459-80d1fe593aa6",
          "length": 253,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "ad267945-1b61-42ad-ae5a-18d8536323d4"
        },
        "item": {
          "id": "7ce9d202-64f4-4d84-a702-821091331d17",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "ec1d7887-5278-4cc1-b082-3cb5a0934dbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb036b81-ba49-46d6-bc58-ce6370ef6360",
        "cursor": {
          "ref": "8c15c861-4f61-4e10-835a-6cad6dc9730a",
          "length": 253,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "dd96f14e-eeb3-4676-ab90-bfb781452f96"
        },
        "item": {
          "id": "fb036b81-ba49-46d6-bc58-ce6370ef6360",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "eae38212-a7eb-4dd8-b5d3-6ce7d45c54a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae030934-3c85-4ae9-acb5-d727139186da",
        "cursor": {
          "ref": "4f208069-0920-4923-b921-a33836bc5c96",
          "length": 253,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "a9f4526f-1ffb-477d-81a0-dbafb06f96ae"
        },
        "item": {
          "id": "ae030934-3c85-4ae9-acb5-d727139186da",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "152296dc-11fc-413b-931e-e5622504d057",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c7c9ccd-0a0d-4cb8-a5f0-60e7f08f47e3",
        "cursor": {
          "ref": "d51eebb4-6752-4fb0-8499-2aeb5e4d2377",
          "length": 253,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "d8dce74c-a347-4524-9edc-8a13fba096f0"
        },
        "item": {
          "id": "6c7c9ccd-0a0d-4cb8-a5f0-60e7f08f47e3",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "6e09a1e6-3aed-4852-9732-5533df9a8e48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df45fbc6-bdb0-4213-9fb8-649d2fa3a884",
        "cursor": {
          "ref": "8ae9c1d5-931f-4e63-95ed-013da7a197da",
          "length": 253,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "82b2fe5b-7c2f-410b-8a5f-15d1f87fdf51"
        },
        "item": {
          "id": "df45fbc6-bdb0-4213-9fb8-649d2fa3a884",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "137be0fa-bdbd-44fc-a6e3-378e8045f53e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61780f48-7bba-4c06-99f4-2fcfbe0835e1",
        "cursor": {
          "ref": "7d4fdc25-d69e-4bb6-8917-94dc4f214a05",
          "length": 253,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "ae637c61-7e06-4481-80a6-4515b75cbf8b"
        },
        "item": {
          "id": "61780f48-7bba-4c06-99f4-2fcfbe0835e1",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "b4641db2-ed02-4585-b3ec-5ff0bf3a773a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7256ea25-d23a-4a07-b526-b13c756a3226",
        "cursor": {
          "ref": "dce0f770-9639-4333-b294-f3d2e4a5f17e",
          "length": 253,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "c815d087-534b-4c3e-a716-c3c528fc87c5"
        },
        "item": {
          "id": "7256ea25-d23a-4a07-b526-b13c756a3226",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "5637fac1-eff1-4823-b776-bcacac139afd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c1ea9cc-733e-472b-a236-13545cd3ec79",
        "cursor": {
          "ref": "c1dacfb9-8ada-4b49-baf4-722cad1eed49",
          "length": 253,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "66b5a3ef-4f38-437c-95c2-3138a83cfc00"
        },
        "item": {
          "id": "2c1ea9cc-733e-472b-a236-13545cd3ec79",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "2f02887b-4ff4-40ec-8787-3e2ce7755079",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f82f61cf-834e-4fcd-8af0-4fb46f7e4383",
        "cursor": {
          "ref": "ea6a464f-dfe0-4273-89ce-7006b4aeac06",
          "length": 253,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "02bd0e38-998a-4a92-8d27-aaf0148fc083"
        },
        "item": {
          "id": "f82f61cf-834e-4fcd-8af0-4fb46f7e4383",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "fc0b37b6-96bd-4f75-a503-b17442cf3b99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d53da15b-c5df-441a-ae58-894a1e605aac",
        "cursor": {
          "ref": "7c7d4388-e396-4476-97e3-ca2cf719ff4f",
          "length": 253,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "dea9bee5-7da9-461b-bb7c-4fe2e2d3f014"
        },
        "item": {
          "id": "d53da15b-c5df-441a-ae58-894a1e605aac",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "30b3c362-f057-48d3-86c5-d6e29873cd8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9e88758-b7a5-414e-b1f6-a380128fc8d6",
        "cursor": {
          "ref": "f5a4338e-9b81-4245-a4a1-e4b38f96a61c",
          "length": 253,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "33f669e8-2020-485b-bb48-989e63ac02e2"
        },
        "item": {
          "id": "b9e88758-b7a5-414e-b1f6-a380128fc8d6",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "962abd81-5581-404a-987e-ce1c199bbb8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47b444a3-004f-407d-a7f7-0de8a4049b8e",
        "cursor": {
          "ref": "5611d1c4-ec41-4ed2-9c3e-427f71b456a5",
          "length": 253,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "ddb0f1dd-ef2d-4ddf-aa40-f54a8a70d0dd"
        },
        "item": {
          "id": "47b444a3-004f-407d-a7f7-0de8a4049b8e",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "a7008bc8-39ee-4060-a34d-34fd75a4f76a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55ddea35-fb1b-4426-b073-73802752fabd",
        "cursor": {
          "ref": "d7b9b3a9-427d-4e91-b1a6-43dcaa4fc52b",
          "length": 253,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "aa1810f9-0537-4373-a1c8-124d70a9c1f3"
        },
        "item": {
          "id": "55ddea35-fb1b-4426-b073-73802752fabd",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "5e2284df-16ec-4416-afdb-a0ff53710310",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "972087f4-1ddc-41c4-87d1-8c1cbacdbd1e",
        "cursor": {
          "ref": "f0011408-f793-4f7a-bbf4-4b69c8de89a3",
          "length": 253,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "0b96133f-0858-40de-835a-5f7bf0c1efee"
        },
        "item": {
          "id": "972087f4-1ddc-41c4-87d1-8c1cbacdbd1e",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "af0b3872-2190-47a9-bd4f-49207eb61ad9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5023e0e8-37b7-477c-bbde-5bd3ceffa1c5",
        "cursor": {
          "ref": "3ddff4f3-4e91-4533-abb0-5262890bde86",
          "length": 253,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "68fc3e1d-89c0-41a3-9d32-dad70ec6233f"
        },
        "item": {
          "id": "5023e0e8-37b7-477c-bbde-5bd3ceffa1c5",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "1b98695d-9641-4b95-80ab-a09701dcc2e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67565674-d740-40e7-9394-d1bb9acbb1d7",
        "cursor": {
          "ref": "b105d778-0963-4cc1-af34-0a2fd581c632",
          "length": 253,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "e07c0e72-251a-40ad-be8e-1b6a589d0a3d"
        },
        "item": {
          "id": "67565674-d740-40e7-9394-d1bb9acbb1d7",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "b4227133-3736-4911-9b5a-7b89335db5f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a37ab554-a8bc-4c88-9c6f-3db502708de3",
        "cursor": {
          "ref": "224eb175-a092-4b8c-953a-4b55f7ae5334",
          "length": 253,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "2ee95907-2256-41f8-9288-ed37c2baa4a1"
        },
        "item": {
          "id": "a37ab554-a8bc-4c88-9c6f-3db502708de3",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "7a2f3868-b312-4bc3-a4fd-8fb47a036d38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83d5fbb5-df0e-4050-8a40-a53caccca1f7",
        "cursor": {
          "ref": "a37b4428-12ef-4ce1-8b0f-28e9ad511eb0",
          "length": 253,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "52fba406-4d2c-4859-a2d7-1a921f63895c"
        },
        "item": {
          "id": "83d5fbb5-df0e-4050-8a40-a53caccca1f7",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "1ef15bf4-3e2f-4a9e-89ea-f9d1919e20b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8979a4a7-109b-4199-b3b1-62762aca721b",
        "cursor": {
          "ref": "76c84896-d876-408e-92cf-6a2a47cd3192",
          "length": 253,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "a0f6f218-54eb-4e8d-adff-4b9b71b804da"
        },
        "item": {
          "id": "8979a4a7-109b-4199-b3b1-62762aca721b",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "5ae44ecb-83a0-4da2-9b72-beae35fa6812",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "253beced-7f4f-444e-8186-a6b9a9e32886",
        "cursor": {
          "ref": "58ea04a3-e78c-4f78-a35b-0d811aa94e1f",
          "length": 253,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "0e292d33-75c4-4473-bbc4-f659014fa938"
        },
        "item": {
          "id": "253beced-7f4f-444e-8186-a6b9a9e32886",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "da4f16a8-ee46-4222-b425-2f63a855ecf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a694d44c-7b1e-422b-93fc-263ce4295534",
        "cursor": {
          "ref": "5708df6b-cb1b-4b55-bd06-664cd03e7de7",
          "length": 253,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "00f67fa1-01e5-414f-9d44-1e2d5b357229"
        },
        "item": {
          "id": "a694d44c-7b1e-422b-93fc-263ce4295534",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "e986eb56-acf3-4982-90a7-d8fc300e64b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1eaffbfc-67ae-4f0c-9ad0-f13165f308ce",
        "cursor": {
          "ref": "f464457d-d375-4baa-8258-7f07e99f1e13",
          "length": 253,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "40f72aa9-99b4-4ec5-88e6-a1e8db99a2f2"
        },
        "item": {
          "id": "1eaffbfc-67ae-4f0c-9ad0-f13165f308ce",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "528cb2e4-70b7-4b6f-9029-79fea04b856f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b78cc42b-614c-4a47-af33-7c56707c2da9",
        "cursor": {
          "ref": "171ea896-ab31-4a1e-bcbf-c34bfcc253f6",
          "length": 253,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "24739a3a-8438-4b35-a5f2-d6dbc221b510"
        },
        "item": {
          "id": "b78cc42b-614c-4a47-af33-7c56707c2da9",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "97aacc9a-44af-4742-afa8-0caa934045d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81e45fc5-c4c7-42f4-818a-cb6edde434b6",
        "cursor": {
          "ref": "871eed3b-3c46-445b-b8a5-f9ea864c96e2",
          "length": 253,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "9a85492b-e94c-48d4-8d69-d5980f726945"
        },
        "item": {
          "id": "81e45fc5-c4c7-42f4-818a-cb6edde434b6",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "01526c44-e129-4e92-b2f9-a81c16188088",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f897b1ea-8e35-4813-bfe4-7c09824430af",
        "cursor": {
          "ref": "5e5a1986-f493-45d9-8333-cb49c961d596",
          "length": 253,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "94126be3-dfd8-415e-ac52-9e6cb3c4138c"
        },
        "item": {
          "id": "f897b1ea-8e35-4813-bfe4-7c09824430af",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "5963ff01-760e-4b3a-a090-d5b210eca081",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "516ea36b-7844-45ed-bfb0-85ab93643401",
        "cursor": {
          "ref": "5f4d0f29-b354-42e9-8aa5-1c9b47d53d78",
          "length": 253,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "f03c15d4-999d-4dce-ad14-c7654dbebb7e"
        },
        "item": {
          "id": "516ea36b-7844-45ed-bfb0-85ab93643401",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "13ca550c-1c4b-4863-99d5-60a0b8d69220",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16beff21-f9fb-4b13-876d-7f2a3c9532b9",
        "cursor": {
          "ref": "60902549-3f11-4abf-b840-ff28c2a351b3",
          "length": 253,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "fce635cd-d992-4890-b41a-12b5bda37b3e"
        },
        "item": {
          "id": "16beff21-f9fb-4b13-876d-7f2a3c9532b9",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "f31cdf40-c827-4d3b-8a31-8375e857e32a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f78ba11f-cf6f-4c4b-b637-ebad307eb1e2",
        "cursor": {
          "ref": "4848dce7-8cb4-4645-8202-c0530de0a4fe",
          "length": 253,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "30836e7c-0a94-47ee-bf79-6eb5da2de4dd"
        },
        "item": {
          "id": "f78ba11f-cf6f-4c4b-b637-ebad307eb1e2",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "36f049d6-d71b-4df2-9af5-2dedcd0b9dd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29e278bf-c3c1-42ef-86f7-de5b47f699ca",
        "cursor": {
          "ref": "5fa5a7ce-99c7-4ff9-a2a7-c93d54e54934",
          "length": 253,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "38065bf3-9009-4aaa-af94-264ea13a3631"
        },
        "item": {
          "id": "29e278bf-c3c1-42ef-86f7-de5b47f699ca",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "4a2340d7-266e-446f-ba7d-6a122a5f2ace",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9f630cd-8fc0-4160-a735-18953b7799a3",
        "cursor": {
          "ref": "9ba0ea0b-20aa-4f79-a081-b5cb3da012af",
          "length": 253,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "414aa439-e13b-4d61-a931-cac10fbf91ba"
        },
        "item": {
          "id": "b9f630cd-8fc0-4160-a735-18953b7799a3",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "866620a2-34ed-4321-9878-6480348a9eeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c74e5fec-eb84-4a54-a870-34ef7c03fe13",
        "cursor": {
          "ref": "4358f85f-9087-4d2f-8706-bfc4635a2af3",
          "length": 253,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "55c5c866-7e28-4266-9fbb-94235b441409"
        },
        "item": {
          "id": "c74e5fec-eb84-4a54-a870-34ef7c03fe13",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "cf502668-047b-4d48-a5c9-7e7e0d79a6fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "183985df-5248-4f72-8013-53bfb9316f6f",
        "cursor": {
          "ref": "be958131-0978-4a34-b0c2-e1194b637e3f",
          "length": 253,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "b04aaaa2-e215-4816-95cd-bbbfd650ca90"
        },
        "item": {
          "id": "183985df-5248-4f72-8013-53bfb9316f6f",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "f389e40e-992d-405f-87b6-4a1797ff732f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3db9f39-a29b-423c-9098-c3634671f59f",
        "cursor": {
          "ref": "52b4d30d-7834-4faa-95c5-9de622feeb45",
          "length": 253,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "e7ff9253-dc16-49ff-9154-ff1b12f9a751"
        },
        "item": {
          "id": "a3db9f39-a29b-423c-9098-c3634671f59f",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "6b0bd2a7-a33c-4d80-8aec-4af75da4fd0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6aa09aca-1ca8-48b6-82d9-2108db6c27f2",
        "cursor": {
          "ref": "6b65cde1-aee1-41b6-bd15-f200864190e7",
          "length": 253,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "fa21d822-5b96-4b9a-9484-a537e135f618"
        },
        "item": {
          "id": "6aa09aca-1ca8-48b6-82d9-2108db6c27f2",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "351e0b28-c5fe-4311-b5f8-a97664a9ad9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "536ce77f-7985-47bc-8834-72ad30d3bc13",
        "cursor": {
          "ref": "739d1905-3c80-4d33-a74f-6176b23bfc82",
          "length": 253,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "5595dad2-7009-42af-aea2-4722bf1c70fd"
        },
        "item": {
          "id": "536ce77f-7985-47bc-8834-72ad30d3bc13",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "f99b721d-81a0-4641-a1c9-74293965bbce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aba1d47b-29d5-486d-88e7-3d141f9b75b8",
        "cursor": {
          "ref": "21c0797c-4287-407f-951d-1084ddbc7915",
          "length": 253,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "cc1c297d-4150-4b67-b45e-8b0aebe6ecc8"
        },
        "item": {
          "id": "aba1d47b-29d5-486d-88e7-3d141f9b75b8",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "bea72ae6-bd46-4f90-839f-8678ccf4d861",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0923400-a56b-49a1-a8b6-5e0d85ebde97",
        "cursor": {
          "ref": "79124b03-df63-4837-a7c6-6fa665fcc0c6",
          "length": 253,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "13d1b830-f65f-4f44-ab13-b04f8d55bd7a"
        },
        "item": {
          "id": "d0923400-a56b-49a1-a8b6-5e0d85ebde97",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "51447df2-f98e-420c-8784-acc44a2a2c67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 218,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b184bf7-62b9-446c-989f-8cf5794ba6e4",
        "cursor": {
          "ref": "cdbbb025-0ab2-464e-8900-e7da0e500bea",
          "length": 253,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "e3dcbf07-c440-4c57-bdee-ad1f67605916"
        },
        "item": {
          "id": "2b184bf7-62b9-446c-989f-8cf5794ba6e4",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "d35308ae-6398-421c-aebf-89b31a92917e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "530a7f8a-3ef1-46c9-a1cc-0d720e3a01d1",
        "cursor": {
          "ref": "5f48b115-42cd-4733-81c4-093d013b1a01",
          "length": 253,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "f091f8d6-fe2d-4b8e-b375-611d201820be"
        },
        "item": {
          "id": "530a7f8a-3ef1-46c9-a1cc-0d720e3a01d1",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "584fdae7-398d-4c9c-93d5-a883803acaf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8341ce1b-0018-4b4f-ae8a-d8f6bfa31e45",
        "cursor": {
          "ref": "259cf65c-3a19-4f3f-92d4-b21134889753",
          "length": 253,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "5e4c981a-3278-4e70-a8b2-4076c3f90019"
        },
        "item": {
          "id": "8341ce1b-0018-4b4f-ae8a-d8f6bfa31e45",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "8072d02d-3356-4a2a-a2aa-345372115c0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a0bb3ba-0afa-45e3-b9b2-a6511188f401",
        "cursor": {
          "ref": "e0e735a7-fdd7-4ec9-a4fc-839db17604d2",
          "length": 253,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "de831707-f931-4c18-8a26-e3f7cd96a834"
        },
        "item": {
          "id": "8a0bb3ba-0afa-45e3-b9b2-a6511188f401",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "4041dd42-9560-436e-989d-76e30b50a157",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8aec2d64-ce39-4ae9-b2a1-743379e0dacc",
        "cursor": {
          "ref": "06347a89-e8b8-434a-967e-89e5c9bfe99b",
          "length": 253,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "83dd2609-95c7-4ff7-87ea-e99f8ad13d09"
        },
        "item": {
          "id": "8aec2d64-ce39-4ae9-b2a1-743379e0dacc",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "fdbfb38d-b2f5-4cdf-9a6b-ae401aa8768a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "908a623f-28e1-401f-ada3-59a8f9a26d4c",
        "cursor": {
          "ref": "2e9aa3a9-8414-4001-9ea3-4f6501588a0e",
          "length": 253,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "7dd138e8-b9d7-49e0-b9d2-674a815eaaa7"
        },
        "item": {
          "id": "908a623f-28e1-401f-ada3-59a8f9a26d4c",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "f28929dd-53f5-4650-b3a2-ff207e1e990a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1bb23db-4dbb-49d6-865d-7617eb802b9b",
        "cursor": {
          "ref": "618dc4a5-8dd1-45b1-8e9e-fa8c6541aa14",
          "length": 253,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "6ddbf6d5-3825-4f0b-b451-1b804115697d"
        },
        "item": {
          "id": "f1bb23db-4dbb-49d6-865d-7617eb802b9b",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "b2ca1668-e271-40d7-a8cc-3d1c36c4b5f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ffe4c16-3a1e-4cb8-8787-95f7921c428c",
        "cursor": {
          "ref": "ec88181c-67ce-4f60-bdf3-3b44e80da825",
          "length": 253,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "1c510ccd-e512-47fd-9148-7f454f3b31fd"
        },
        "item": {
          "id": "3ffe4c16-3a1e-4cb8-8787-95f7921c428c",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "de36606d-4cb3-4ceb-86bb-1cefc4183b5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e768e4b5-dc4d-4416-a132-1b7c4b7c4e24",
        "cursor": {
          "ref": "ea057b9b-7644-454c-84d9-56651a389a9c",
          "length": 253,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "49c0f37d-ed6e-4f2f-a073-2948859ab9cc"
        },
        "item": {
          "id": "e768e4b5-dc4d-4416-a132-1b7c4b7c4e24",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "ef49fc22-0658-4671-b4b0-4feae95dd54e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ef2bd1a-91ba-4c6e-afbc-8f2c11b09e78",
        "cursor": {
          "ref": "c206ec80-c832-47c3-9e4e-60d777eb3300",
          "length": 253,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "99f1eb0d-b9e7-4b90-8058-ecd5b2b49f17"
        },
        "item": {
          "id": "4ef2bd1a-91ba-4c6e-afbc-8f2c11b09e78",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "e65a47ac-2f0b-4cc0-bce0-abb76dee7cb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "984b04ea-7d76-4dae-95f8-49a8e3c712e4",
        "cursor": {
          "ref": "fd85da4b-264e-46f5-966c-1871ca2cf375",
          "length": 253,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "ba78a70d-6044-4c0c-964f-4f0eb2435108"
        },
        "item": {
          "id": "984b04ea-7d76-4dae-95f8-49a8e3c712e4",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "e5b02e4c-d313-42f0-a452-2aff9746b465",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1aea32eb-e123-44c8-bd05-76bc8531aacf",
        "cursor": {
          "ref": "ce04af6b-d44b-4b27-a75a-2fc5e70b4631",
          "length": 253,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "56e0c1e7-13cd-43bc-967f-efb90dc5f1ae"
        },
        "item": {
          "id": "1aea32eb-e123-44c8-bd05-76bc8531aacf",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "3f74b101-6451-4220-b512-590e66ba8f26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e49c8ae-bc88-408f-ae7c-b7609345459e",
        "cursor": {
          "ref": "0ce61efb-0e63-4287-963a-95368e67591e",
          "length": 253,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "f7246d89-3ea4-4df8-85e3-92efad77b21f"
        },
        "item": {
          "id": "6e49c8ae-bc88-408f-ae7c-b7609345459e",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "04adbf9a-baf7-45c6-845b-09ca1a3418cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "081f53b4-3cff-4c14-9a37-6884ebf576c6",
        "cursor": {
          "ref": "e285ac1a-5a77-4218-9347-e1321e2758a7",
          "length": 253,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "b824a2e7-7ef8-46d8-b06a-319f11540962"
        },
        "item": {
          "id": "081f53b4-3cff-4c14-9a37-6884ebf576c6",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "54095352-07a2-4519-9100-8659920d6bde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7517100f-018f-42bf-bebf-7b55d07556ca",
        "cursor": {
          "ref": "a3c84c11-4cb0-43ba-804a-bec7fd272179",
          "length": 253,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "8292606e-b703-4e21-856f-b8e3b574b132"
        },
        "item": {
          "id": "7517100f-018f-42bf-bebf-7b55d07556ca",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "f14a2561-d0d8-4a3f-b25d-bcd7789f9c9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51fd341e-34b5-42a5-afdc-20e2728e1c06",
        "cursor": {
          "ref": "c93bf986-268a-4779-b2ac-fe5f2cdbc485",
          "length": 253,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "d1ebb983-d772-4cce-a35b-1b960432cc53"
        },
        "item": {
          "id": "51fd341e-34b5-42a5-afdc-20e2728e1c06",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "a6647f05-c7ac-4951-8dc0-5e8b6e0bff5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3aaca8b0-d1c8-42d1-a10d-2b274ecff242",
        "cursor": {
          "ref": "6d0c1700-87e8-4a37-9901-0b7519827995",
          "length": 253,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "47492c0a-40bb-4810-b69d-e7e8e58345c0"
        },
        "item": {
          "id": "3aaca8b0-d1c8-42d1-a10d-2b274ecff242",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "ea42e987-0850-4771-8f9c-2ada17f8a828",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dd39a3f-4105-4f13-bafe-1a1d4d36660b",
        "cursor": {
          "ref": "a65d10f8-f6ed-45f2-a017-43d13469947b",
          "length": 253,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "e1dea46b-9c11-4d49-af72-248e546eeeb9"
        },
        "item": {
          "id": "3dd39a3f-4105-4f13-bafe-1a1d4d36660b",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "1ae1daec-9464-4061-ae3d-9eaf440b1125",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5cae9b7-46b9-4036-a113-3b344282d603",
        "cursor": {
          "ref": "7a9ed86f-9521-419b-9da5-1076592a7193",
          "length": 253,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "3690a258-7d0d-490e-8df3-45a682fb5104"
        },
        "item": {
          "id": "f5cae9b7-46b9-4036-a113-3b344282d603",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "6e275b35-d6b0-4f69-8af9-5f11edef695b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bde9d4f5-85fa-4516-98b7-0aa9191da2ef",
        "cursor": {
          "ref": "9c9229a6-20f2-4afb-ad2a-dfde449696bd",
          "length": 253,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "0f8e970a-c6f1-415c-9562-c9ebf15ec69c"
        },
        "item": {
          "id": "bde9d4f5-85fa-4516-98b7-0aa9191da2ef",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "7920a966-9041-4ca1-8a22-84845dec04d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1a18221-1c86-4314-a051-3652fb294b57",
        "cursor": {
          "ref": "350a64ba-f106-49fb-a566-b651c493bf0d",
          "length": 253,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "6ac7eb2d-0552-448f-a7dd-0f5c544319e1"
        },
        "item": {
          "id": "b1a18221-1c86-4314-a051-3652fb294b57",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "19ccc397-4da9-4e06-8d7a-39c777549853",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a57fe21-e554-4d8f-a197-1451a0aa0988",
        "cursor": {
          "ref": "bfcabeba-1f8b-432e-ac14-720e54726710",
          "length": 253,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "663c5891-4997-426c-9990-769bf8114bd0"
        },
        "item": {
          "id": "1a57fe21-e554-4d8f-a197-1451a0aa0988",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "9c7082b3-d375-4dd9-b26e-aa7d7e748f8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abcb6f49-cd5c-402c-8bb9-5b3851f0685f",
        "cursor": {
          "ref": "6bca5d27-80bd-4eaf-b9d0-ed6ae6e1ce21",
          "length": 253,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "94a90aba-5295-4544-9978-9b820cba5d16"
        },
        "item": {
          "id": "abcb6f49-cd5c-402c-8bb9-5b3851f0685f",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "3a2c663d-eb74-48d6-bf85-8d821797c851",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99c74ea0-4869-440e-ae31-2a08ca6f30a1",
        "cursor": {
          "ref": "9fa6dcb3-ee38-44e7-8ba1-1851d2f10fd3",
          "length": 253,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "98f88f7f-c5e4-4687-b5b1-2ded2bf1e07a"
        },
        "item": {
          "id": "99c74ea0-4869-440e-ae31-2a08ca6f30a1",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "74d72bf7-dbf2-4cf7-89f7-23c0427dc20b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "705e161b-807c-4eb3-b5b8-352559324f15",
        "cursor": {
          "ref": "e36fed4e-ec00-4201-9466-9fa37f21a5b0",
          "length": 253,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "1e912371-5fd5-4a60-b468-ec40eeda21ae"
        },
        "item": {
          "id": "705e161b-807c-4eb3-b5b8-352559324f15",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "2bbe9644-f089-4374-8a5e-b59733f14cc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bc0dfb2-ab6d-4c1d-af00-77454e550e5e",
        "cursor": {
          "ref": "0c14b2c5-e30a-442e-a951-0357a8dc0538",
          "length": 253,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "bb37015b-9686-4975-b210-1ac85df6699f"
        },
        "item": {
          "id": "8bc0dfb2-ab6d-4c1d-af00-77454e550e5e",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "84073731-5e54-4a60-a79a-82c14cb1c3c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "266bace4-a2b6-4218-9743-a65895480665",
        "cursor": {
          "ref": "a578a5a6-7175-4f9a-8d53-14c15c19bdf8",
          "length": 253,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "d146696a-30c2-45fb-9bf7-036c12a9610c"
        },
        "item": {
          "id": "266bace4-a2b6-4218-9743-a65895480665",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "dd634c5c-6f46-4870-a060-50e1cbae8663",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69ff519a-8e7f-4438-8f06-7942b95ac9a4",
        "cursor": {
          "ref": "cbaed2bf-2985-418d-9218-da302798089e",
          "length": 253,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "ed246211-693a-499b-a403-e8357bdbf66d"
        },
        "item": {
          "id": "69ff519a-8e7f-4438-8f06-7942b95ac9a4",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "7d4a3f35-8ffd-4297-9b7e-88bedf0c3ba4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a49f06e-a85c-42ab-8ba8-c98f7045f5ce",
        "cursor": {
          "ref": "c31ea77d-88b5-4deb-9495-bf6af46c879b",
          "length": 253,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "f1fd7a45-f47b-4db2-af02-459a8b664e1e"
        },
        "item": {
          "id": "6a49f06e-a85c-42ab-8ba8-c98f7045f5ce",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "996d116a-fc12-4746-948a-38e9a8514b63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a3429a7-f0fa-46d8-b385-5d417ecae1a2",
        "cursor": {
          "ref": "c9de853c-78a4-4192-8deb-9294d1340c9e",
          "length": 253,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "97d5d96c-ad21-409e-aec7-6f54fdedf2f2"
        },
        "item": {
          "id": "7a3429a7-f0fa-46d8-b385-5d417ecae1a2",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "0239441d-9fc1-424d-a397-0e1bc501d471",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8c4db82-3b23-4896-8b5e-528eb66ff7da",
        "cursor": {
          "ref": "e1deaa81-8236-438f-8f52-1b36864ed6ec",
          "length": 253,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "cdf99034-97ff-48c8-8cab-f8677fbc20b0"
        },
        "item": {
          "id": "d8c4db82-3b23-4896-8b5e-528eb66ff7da",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "6bce7b8d-07ce-46a3-a474-5fd378d214a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98685495-2284-43d5-b162-91141a1b16ac",
        "cursor": {
          "ref": "22b04889-f6bb-4fa2-bc6f-b51014e437ed",
          "length": 253,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "03613356-f68b-4f27-af06-094ab94bae31"
        },
        "item": {
          "id": "98685495-2284-43d5-b162-91141a1b16ac",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "d054c54c-6fb8-445d-8930-68d175f76138",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1008d021-cc7a-41d8-891c-9269eefac79c",
        "cursor": {
          "ref": "3f0a3c3c-6500-4f86-b1a2-d50076874a8c",
          "length": 253,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "0f3074b8-ef4b-4c59-8555-7f32474ecd79"
        },
        "item": {
          "id": "1008d021-cc7a-41d8-891c-9269eefac79c",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "c793c1d7-996a-4581-9464-6dc680a12d87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cca6a729-fed8-450f-bbe7-49595533aff0",
        "cursor": {
          "ref": "3175cb96-e3eb-4d32-88a1-8184b2be448d",
          "length": 253,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "06acf99e-2c4d-4467-8f99-e6aaf14baf55"
        },
        "item": {
          "id": "cca6a729-fed8-450f-bbe7-49595533aff0",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "29d2e609-eb24-44f6-888a-1e13282640cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c72e3df3-2cd8-4931-aadb-380dc684b22e",
        "cursor": {
          "ref": "9b3ea91a-9c88-433e-9c45-7af6afa37de4",
          "length": 253,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "b19c8dea-9a4e-49a3-bc5c-d363347562a2"
        },
        "item": {
          "id": "c72e3df3-2cd8-4931-aadb-380dc684b22e",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "b3b288ed-b528-4264-8925-4c6afdb8aca7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c146574-642b-418b-a8f6-48ac42295e3a",
        "cursor": {
          "ref": "9307ceb5-84c1-4c8c-8ee9-de8b94f7e407",
          "length": 253,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "422af24e-18f1-4e98-9f1d-6722fce3a52e"
        },
        "item": {
          "id": "8c146574-642b-418b-a8f6-48ac42295e3a",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "694fa2ea-1207-4b88-8817-d6eb55d726e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea5bc227-18ff-471e-aa4f-503c860d26c1",
        "cursor": {
          "ref": "f9ee7524-54fe-44e0-bdac-3659fb558cbd",
          "length": 253,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "6d606e95-eeaa-48f2-a1dd-446dd42cd15d"
        },
        "item": {
          "id": "ea5bc227-18ff-471e-aa4f-503c860d26c1",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "f9103914-c7f2-4b03-b55c-1a6fd9e989db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ea74bcb-d57b-44cb-bb9a-ff33a428065e",
        "cursor": {
          "ref": "ae1baf86-adf7-4714-b2f9-a99d9ce2e6f7",
          "length": 253,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "a6e7adac-423d-448b-ab52-14d66125ad45"
        },
        "item": {
          "id": "4ea74bcb-d57b-44cb-bb9a-ff33a428065e",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "9bae3297-e32d-493e-97b3-203e69011483",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30b652f1-b86e-4ee2-b9d5-ec2a2b4aae42",
        "cursor": {
          "ref": "3cf0935a-9806-49e5-bc0f-5a91c0826b8b",
          "length": 253,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "2988bade-4f41-460b-91f0-65a92bfa4172"
        },
        "item": {
          "id": "30b652f1-b86e-4ee2-b9d5-ec2a2b4aae42",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "bd325346-e167-49f6-8f2b-1a5c3d7469ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f988d861-cc92-42f9-888a-b111bba9b3e7",
        "cursor": {
          "ref": "b8a03db0-3b00-425e-942b-e6979cca2a9d",
          "length": 253,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "8dbec83e-23e6-455c-b9b0-5752ff06d72e"
        },
        "item": {
          "id": "f988d861-cc92-42f9-888a-b111bba9b3e7",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "2345bc7d-952f-4bec-8088-6fda1eba4312",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 67,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a947d22-45cc-4223-b356-8158c4ee9ad4",
        "cursor": {
          "ref": "1a9471a8-187a-45cd-b506-18d2f81821b0",
          "length": 253,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "dcf7875f-f622-41a1-952c-8d0bd418da19"
        },
        "item": {
          "id": "5a947d22-45cc-4223-b356-8158c4ee9ad4",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "c3fcd679-20ea-4195-8b76-599d3347e984",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a13b94a-ae0a-4028-b301-322600556e9f",
        "cursor": {
          "ref": "b2ead7e9-a675-45ee-ac8d-0083f41c5a55",
          "length": 253,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "b57da41b-8e8c-4f45-a517-5d485a8fb713"
        },
        "item": {
          "id": "8a13b94a-ae0a-4028-b301-322600556e9f",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "dc41d488-1d46-4d8f-8c16-ea09107df6d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "41ae68fd-5140-4ffb-aeeb-e035e466b39f",
        "cursor": {
          "ref": "be219983-9a6c-4166-ad7e-048d16dc7f35",
          "length": 253,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "8f060848-8fe8-43b6-9885-facd9c273956"
        },
        "item": {
          "id": "41ae68fd-5140-4ffb-aeeb-e035e466b39f",
          "name": "credentials_verify"
        },
        "response": {
          "id": "b6605231-4c0c-459f-b3c6-d09a077c5c33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:246)"
            }
          }
        ]
      },
      {
        "id": "06d51d37-5a4e-4bbc-ac8a-8e0aee8338ea",
        "cursor": {
          "ref": "283862b2-ad69-4a14-89d0-d0be86049379",
          "length": 253,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "ea2f7d92-8d59-42ae-bd8d-456a500f22e9"
        },
        "item": {
          "id": "06d51d37-5a4e-4bbc-ac8a-8e0aee8338ea",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "9cf1fe5d-7570-41f8-8d04-a570c5c349c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:247)"
            }
          }
        ]
      },
      {
        "id": "0f41ae9d-15a2-419d-be96-a916348244da",
        "cursor": {
          "ref": "c4f46bf8-ffaf-405d-b5a8-d8bd67efe12d",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "f62a4da0-9f96-4683-9509-31a3fb97ff95"
        },
        "item": {
          "id": "0f41ae9d-15a2-419d-be96-a916348244da",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "110dc954-72f6-4493-ba44-8157364d7e45",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 66,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f41ae9d-15a2-419d-be96-a916348244da",
        "cursor": {
          "ref": "c4f46bf8-ffaf-405d-b5a8-d8bd67efe12d",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "f62a4da0-9f96-4683-9509-31a3fb97ff95"
        },
        "item": {
          "id": "0f41ae9d-15a2-419d-be96-a916348244da",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "110dc954-72f6-4493-ba44-8157364d7e45",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 66,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f41ae9d-15a2-419d-be96-a916348244da",
        "cursor": {
          "ref": "c4f46bf8-ffaf-405d-b5a8-d8bd67efe12d",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "f62a4da0-9f96-4683-9509-31a3fb97ff95"
        },
        "item": {
          "id": "0f41ae9d-15a2-419d-be96-a916348244da",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "110dc954-72f6-4493-ba44-8157364d7e45",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 66,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be19b612-e737-4a02-b10f-98b8db3b1a5d",
        "cursor": {
          "ref": "47da4d32-ea54-4684-8b70-067ea3e65cf5",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "ded4f215-a0ca-4809-9338-1ce67e0f00dd"
        },
        "item": {
          "id": "be19b612-e737-4a02-b10f-98b8db3b1a5d",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "bcbf14ac-2789-45bb-87df-e081d6f636a6",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 67,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f752ea16-9aa9-4351-a45a-a2caca83ef26",
        "cursor": {
          "ref": "98731b93-0416-4b29-8a6b-b44a4b1550b1",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "36f5cd6c-ca9d-4174-831e-ae7052d75e19"
        },
        "item": {
          "id": "f752ea16-9aa9-4351-a45a-a2caca83ef26",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "e74c86ba-a57e-4834-9d63-7ab449f80467",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "f752ea16-9aa9-4351-a45a-a2caca83ef26",
        "cursor": {
          "ref": "98731b93-0416-4b29-8a6b-b44a4b1550b1",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "36f5cd6c-ca9d-4174-831e-ae7052d75e19"
        },
        "item": {
          "id": "f752ea16-9aa9-4351-a45a-a2caca83ef26",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "e74c86ba-a57e-4834-9d63-7ab449f80467",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "36e74b4b-6b44-4e9a-aefe-4f776b1c665f",
        "cursor": {
          "ref": "9620398a-3c25-4ab3-86e8-4b6aa42de693",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "40d9b71a-76b9-4ab8-a9db-554919674f3a"
        },
        "item": {
          "id": "36e74b4b-6b44-4e9a-aefe-4f776b1c665f",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "a3132bef-9b62-41df-be96-e1625f84f352",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "2a9f58a9-3972-4b03-90eb-dc9c8e6aacff",
        "cursor": {
          "ref": "76d8d402-4eb4-4b1c-a511-d2ec5fbf5241",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "6e96f251-2746-4e9f-8b3a-95d21c2b10e9"
        },
        "item": {
          "id": "2a9f58a9-3972-4b03-90eb-dc9c8e6aacff",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "8ffb69b1-39f6-4258-9300-9f9acc320d13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "2a9f58a9-3972-4b03-90eb-dc9c8e6aacff",
        "cursor": {
          "ref": "76d8d402-4eb4-4b1c-a511-d2ec5fbf5241",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "6e96f251-2746-4e9f-8b3a-95d21c2b10e9"
        },
        "item": {
          "id": "2a9f58a9-3972-4b03-90eb-dc9c8e6aacff",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "8ffb69b1-39f6-4258-9300-9f9acc320d13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "19755028-9272-44ed-a58a-7e27df0a9fa1",
        "cursor": {
          "ref": "df3bf838-1e31-4e6f-b7c1-8b5845a0ee2d",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "18022403-6cea-4254-96b2-29ba34748529"
        },
        "item": {
          "id": "19755028-9272-44ed-a58a-7e27df0a9fa1",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "989a9239-f27b-4d33-86e6-df6436dd4b9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      }
    ]
  }
}